
VRS_cv9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003440  08003440  00013440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800346c  0800346c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  0800346c  0800346c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800346c  0800346c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800346c  0800346c  0001346c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003470  08003470  00013470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08003474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          0000003c  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000044  20000044  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007429  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017c6  00000000  00000000  00027461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  00028c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000778  00000000  00000000  00029468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020c1  00000000  00000000  00029be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006cc0  00000000  00000000  0002bca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007971e  00000000  00000000  00032961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000ac07f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001fdc  00000000  00000000  000ac0d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003428 	.word	0x08003428

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08003428 	.word	0x08003428

080001c8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	619a      	str	r2, [r3, #24]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	683a      	ldr	r2, [r7, #0]
 80001f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <updateDisplay>:
#include "display.h"
uint8_t updateDigit = 1;
uint8_t displayTextPos = 0;
uint8_t direction = 0;

void updateDisplay(){
 8000200:	b5b0      	push	{r4, r5, r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
	char displayString[] = "MICHAL_MOLnAr_98352";
 8000206:	4b41      	ldr	r3, [pc, #260]	; (800030c <updateDisplay+0x10c>)
 8000208:	463c      	mov	r4, r7
 800020a:	461d      	mov	r5, r3
 800020c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800020e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000210:	682b      	ldr	r3, [r5, #0]
 8000212:	6023      	str	r3, [r4, #0]
	for(int i = 1; i<5; i++){
 8000214:	2301      	movs	r3, #1
 8000216:	617b      	str	r3, [r7, #20]
 8000218:	e06f      	b.n	80002fa <updateDisplay+0xfa>
		switch(updateDigit){
 800021a:	4b3d      	ldr	r3, [pc, #244]	; (8000310 <updateDisplay+0x110>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3b01      	subs	r3, #1
 8000220:	2b03      	cmp	r3, #3
 8000222:	d856      	bhi.n	80002d2 <updateDisplay+0xd2>
 8000224:	a201      	add	r2, pc, #4	; (adr r2, 800022c <updateDisplay+0x2c>)
 8000226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800022a:	bf00      	nop
 800022c:	0800023d 	.word	0x0800023d
 8000230:	0800025f 	.word	0x0800025f
 8000234:	08000285 	.word	0x08000285
 8000238:	080002ad 	.word	0x080002ad
				case 1:
					DIGIT_1_ON;
 800023c:	2101      	movs	r1, #1
 800023e:	4835      	ldr	r0, [pc, #212]	; (8000314 <updateDisplay+0x114>)
 8000240:	f7ff ffc2 	bl	80001c8 <LL_GPIO_SetOutputPin>
					resetAllSegments();
 8000244:	f000 fa06 	bl	8000654 <resetAllSegments>
					displayLetter(displayString[displayTextPos]);
 8000248:	4b33      	ldr	r3, [pc, #204]	; (8000318 <updateDisplay+0x118>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	f107 0218 	add.w	r2, r7, #24
 8000250:	4413      	add	r3, r2
 8000252:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000256:	4618      	mov	r0, r3
 8000258:	f000 f8ae 	bl	80003b8 <displayLetter>
					break;
 800025c:	e039      	b.n	80002d2 <updateDisplay+0xd2>
				case 2:
					DIGIT_2_ON;
 800025e:	2110      	movs	r1, #16
 8000260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000264:	f7ff ffb0 	bl	80001c8 <LL_GPIO_SetOutputPin>
					resetAllSegments();
 8000268:	f000 f9f4 	bl	8000654 <resetAllSegments>
					displayLetter(displayString[displayTextPos+1]);
 800026c:	4b2a      	ldr	r3, [pc, #168]	; (8000318 <updateDisplay+0x118>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	3301      	adds	r3, #1
 8000272:	f107 0218 	add.w	r2, r7, #24
 8000276:	4413      	add	r3, r2
 8000278:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f89b 	bl	80003b8 <displayLetter>
					break;
 8000282:	e026      	b.n	80002d2 <updateDisplay+0xd2>
				case 3:
					DIGIT_3_ON;
 8000284:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028c:	f7ff ff9c 	bl	80001c8 <LL_GPIO_SetOutputPin>
					resetAllSegments();
 8000290:	f000 f9e0 	bl	8000654 <resetAllSegments>
					displayLetter(displayString[displayTextPos+2]);
 8000294:	4b20      	ldr	r3, [pc, #128]	; (8000318 <updateDisplay+0x118>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	3302      	adds	r3, #2
 800029a:	f107 0218 	add.w	r2, r7, #24
 800029e:	4413      	add	r3, r2
 80002a0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f887 	bl	80003b8 <displayLetter>
					break;
 80002aa:	e012      	b.n	80002d2 <updateDisplay+0xd2>
				case 4:
					DIGIT_4_ON;
 80002ac:	2104      	movs	r1, #4
 80002ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b2:	f7ff ff89 	bl	80001c8 <LL_GPIO_SetOutputPin>
					resetAllSegments();
 80002b6:	f000 f9cd 	bl	8000654 <resetAllSegments>
					displayLetter(displayString[displayTextPos+3]);
 80002ba:	4b17      	ldr	r3, [pc, #92]	; (8000318 <updateDisplay+0x118>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	3303      	adds	r3, #3
 80002c0:	f107 0218 	add.w	r2, r7, #24
 80002c4:	4413      	add	r3, r2
 80002c6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f874 	bl	80003b8 <displayLetter>
					break;
 80002d0:	bf00      	nop
			}
			updateDigit = (updateDigit < 4) ? updateDigit+1 : 1;
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <updateDisplay+0x110>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b03      	cmp	r3, #3
 80002d8:	d804      	bhi.n	80002e4 <updateDisplay+0xe4>
 80002da:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <updateDisplay+0x110>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	3301      	adds	r3, #1
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	e000      	b.n	80002e6 <updateDisplay+0xe6>
 80002e4:	2301      	movs	r3, #1
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <updateDisplay+0x110>)
 80002e8:	7013      	strb	r3, [r2, #0]
			LL_mDelay(2);
 80002ea:	2002      	movs	r0, #2
 80002ec:	f003 f83a 	bl	8003364 <LL_mDelay>
			resetAllDigits();
 80002f0:	f000 f9de 	bl	80006b0 <resetAllDigits>
	for(int i = 1; i<5; i++){
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	3301      	adds	r3, #1
 80002f8:	617b      	str	r3, [r7, #20]
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	2b04      	cmp	r3, #4
 80002fe:	dd8c      	ble.n	800021a <updateDisplay+0x1a>
	}

}
 8000300:	bf00      	nop
 8000302:	bf00      	nop
 8000304:	3718      	adds	r7, #24
 8000306:	46bd      	mov	sp, r7
 8000308:	bdb0      	pop	{r4, r5, r7, pc}
 800030a:	bf00      	nop
 800030c:	08003440 	.word	0x08003440
 8000310:	20000000 	.word	0x20000000
 8000314:	48000400 	.word	0x48000400
 8000318:	20000024 	.word	0x20000024

0800031c <shiftDisplayText>:

void shiftDisplayText(){
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	if(displayTextPos < (20-4-1) && direction == 0){
 8000320:	4b23      	ldr	r3, [pc, #140]	; (80003b0 <shiftDisplayText+0x94>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b0e      	cmp	r3, #14
 8000326:	d80a      	bhi.n	800033e <shiftDisplayText+0x22>
 8000328:	4b22      	ldr	r3, [pc, #136]	; (80003b4 <shiftDisplayText+0x98>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d106      	bne.n	800033e <shiftDisplayText+0x22>
		displayTextPos = displayTextPos+1;
 8000330:	4b1f      	ldr	r3, [pc, #124]	; (80003b0 <shiftDisplayText+0x94>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	3301      	adds	r3, #1
 8000336:	b2da      	uxtb	r2, r3
 8000338:	4b1d      	ldr	r3, [pc, #116]	; (80003b0 <shiftDisplayText+0x94>)
 800033a:	701a      	strb	r2, [r3, #0]
 800033c:	e032      	b.n	80003a4 <shiftDisplayText+0x88>
	}
	else if(displayTextPos >= (20-4-1) && direction == 0){
 800033e:	4b1c      	ldr	r3, [pc, #112]	; (80003b0 <shiftDisplayText+0x94>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b0e      	cmp	r3, #14
 8000344:	d90d      	bls.n	8000362 <shiftDisplayText+0x46>
 8000346:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <shiftDisplayText+0x98>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d109      	bne.n	8000362 <shiftDisplayText+0x46>
		direction = 1;
 800034e:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <shiftDisplayText+0x98>)
 8000350:	2201      	movs	r2, #1
 8000352:	701a      	strb	r2, [r3, #0]
		displayTextPos = displayTextPos-1;
 8000354:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <shiftDisplayText+0x94>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	3b01      	subs	r3, #1
 800035a:	b2da      	uxtb	r2, r3
 800035c:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <shiftDisplayText+0x94>)
 800035e:	701a      	strb	r2, [r3, #0]
 8000360:	e020      	b.n	80003a4 <shiftDisplayText+0x88>
	}
	else if(displayTextPos <= 0 && direction == 1){
 8000362:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <shiftDisplayText+0x94>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d10d      	bne.n	8000386 <shiftDisplayText+0x6a>
 800036a:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <shiftDisplayText+0x98>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b01      	cmp	r3, #1
 8000370:	d109      	bne.n	8000386 <shiftDisplayText+0x6a>
		direction = 0;
 8000372:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <shiftDisplayText+0x98>)
 8000374:	2200      	movs	r2, #0
 8000376:	701a      	strb	r2, [r3, #0]
		displayTextPos = displayTextPos+1;
 8000378:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <shiftDisplayText+0x94>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	3301      	adds	r3, #1
 800037e:	b2da      	uxtb	r2, r3
 8000380:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <shiftDisplayText+0x94>)
 8000382:	701a      	strb	r2, [r3, #0]
 8000384:	e00e      	b.n	80003a4 <shiftDisplayText+0x88>
	}
	else if(displayTextPos > 0 && direction == 1){
 8000386:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <shiftDisplayText+0x94>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00a      	beq.n	80003a4 <shiftDisplayText+0x88>
 800038e:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <shiftDisplayText+0x98>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d106      	bne.n	80003a4 <shiftDisplayText+0x88>
		displayTextPos = displayTextPos-1;
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <shiftDisplayText+0x94>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	3b01      	subs	r3, #1
 800039c:	b2da      	uxtb	r2, r3
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <shiftDisplayText+0x94>)
 80003a0:	701a      	strb	r2, [r3, #0]
	}
}
 80003a2:	e7ff      	b.n	80003a4 <shiftDisplayText+0x88>
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	20000024 	.word	0x20000024
 80003b4:	20000025 	.word	0x20000025

080003b8 <displayLetter>:

void displayLetter(char letter){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]
	switch(letter){
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	3b20      	subs	r3, #32
 80003c6:	2b59      	cmp	r3, #89	; 0x59
 80003c8:	f200 813c 	bhi.w	8000644 <displayLetter+0x28c>
 80003cc:	a201      	add	r2, pc, #4	; (adr r2, 80003d4 <displayLetter+0x1c>)
 80003ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d2:	bf00      	nop
 80003d4:	080005f7 	.word	0x080005f7
 80003d8:	08000645 	.word	0x08000645
 80003dc:	08000645 	.word	0x08000645
 80003e0:	08000645 	.word	0x08000645
 80003e4:	08000645 	.word	0x08000645
 80003e8:	08000645 	.word	0x08000645
 80003ec:	08000645 	.word	0x08000645
 80003f0:	08000645 	.word	0x08000645
 80003f4:	08000645 	.word	0x08000645
 80003f8:	08000645 	.word	0x08000645
 80003fc:	08000645 	.word	0x08000645
 8000400:	08000645 	.word	0x08000645
 8000404:	08000645 	.word	0x08000645
 8000408:	08000603 	.word	0x08000603
 800040c:	08000645 	.word	0x08000645
 8000410:	08000645 	.word	0x08000645
 8000414:	0800063f 	.word	0x0800063f
 8000418:	08000609 	.word	0x08000609
 800041c:	0800060f 	.word	0x0800060f
 8000420:	08000615 	.word	0x08000615
 8000424:	0800061b 	.word	0x0800061b
 8000428:	08000621 	.word	0x08000621
 800042c:	08000627 	.word	0x08000627
 8000430:	0800062d 	.word	0x0800062d
 8000434:	08000633 	.word	0x08000633
 8000438:	08000639 	.word	0x08000639
 800043c:	08000645 	.word	0x08000645
 8000440:	08000645 	.word	0x08000645
 8000444:	08000645 	.word	0x08000645
 8000448:	08000645 	.word	0x08000645
 800044c:	08000645 	.word	0x08000645
 8000450:	08000645 	.word	0x08000645
 8000454:	08000645 	.word	0x08000645
 8000458:	0800053d 	.word	0x0800053d
 800045c:	08000645 	.word	0x08000645
 8000460:	0800054f 	.word	0x0800054f
 8000464:	08000645 	.word	0x08000645
 8000468:	08000561 	.word	0x08000561
 800046c:	08000567 	.word	0x08000567
 8000470:	0800056d 	.word	0x0800056d
 8000474:	08000573 	.word	0x08000573
 8000478:	0800057f 	.word	0x0800057f
 800047c:	08000585 	.word	0x08000585
 8000480:	0800058b 	.word	0x0800058b
 8000484:	08000591 	.word	0x08000591
 8000488:	08000597 	.word	0x08000597
 800048c:	08000645 	.word	0x08000645
 8000490:	080005a3 	.word	0x080005a3
 8000494:	080005af 	.word	0x080005af
 8000498:	08000645 	.word	0x08000645
 800049c:	08000645 	.word	0x08000645
 80004a0:	080005c1 	.word	0x080005c1
 80004a4:	08000645 	.word	0x08000645
 80004a8:	080005cd 	.word	0x080005cd
 80004ac:	080005d9 	.word	0x080005d9
 80004b0:	080005df 	.word	0x080005df
 80004b4:	080005e5 	.word	0x080005e5
 80004b8:	08000645 	.word	0x08000645
 80004bc:	080005f1 	.word	0x080005f1
 80004c0:	08000645 	.word	0x08000645
 80004c4:	08000645 	.word	0x08000645
 80004c8:	08000645 	.word	0x08000645
 80004cc:	08000645 	.word	0x08000645
 80004d0:	080005fd 	.word	0x080005fd
 80004d4:	08000645 	.word	0x08000645
 80004d8:	08000543 	.word	0x08000543
 80004dc:	08000549 	.word	0x08000549
 80004e0:	08000555 	.word	0x08000555
 80004e4:	0800055b 	.word	0x0800055b
 80004e8:	08000645 	.word	0x08000645
 80004ec:	08000645 	.word	0x08000645
 80004f0:	08000645 	.word	0x08000645
 80004f4:	08000579 	.word	0x08000579
 80004f8:	08000645 	.word	0x08000645
 80004fc:	08000645 	.word	0x08000645
 8000500:	08000645 	.word	0x08000645
 8000504:	08000645 	.word	0x08000645
 8000508:	08000645 	.word	0x08000645
 800050c:	0800059d 	.word	0x0800059d
 8000510:	080005a9 	.word	0x080005a9
 8000514:	08000645 	.word	0x08000645
 8000518:	080005b5 	.word	0x080005b5
 800051c:	080005bb 	.word	0x080005bb
 8000520:	08000645 	.word	0x08000645
 8000524:	080005c7 	.word	0x080005c7
 8000528:	080005d3 	.word	0x080005d3
 800052c:	08000645 	.word	0x08000645
 8000530:	08000645 	.word	0x08000645
 8000534:	08000645 	.word	0x08000645
 8000538:	080005eb 	.word	0x080005eb
		case 'A':
			setA();
 800053c:	f000 f8d6 	bl	80006ec <setA>
			break;
 8000540:	e083      	b.n	800064a <displayLetter+0x292>
		case 'a':
			seta();
 8000542:	f000 f8fd 	bl	8000740 <seta>
			break;
 8000546:	e080      	b.n	800064a <displayLetter+0x292>
		case 'b':
			setb();
 8000548:	f000 f924 	bl	8000794 <setb>
			break;
 800054c:	e07d      	b.n	800064a <displayLetter+0x292>
		case 'C':
			setC();
 800054e:	f000 f94b 	bl	80007e8 <setC>
			break;
 8000552:	e07a      	b.n	800064a <displayLetter+0x292>
		case 'c':
			setc();
 8000554:	f000 f972 	bl	800083c <setc>
			break;
 8000558:	e077      	b.n	800064a <displayLetter+0x292>
		case 'd':
			setd();
 800055a:	f000 f999 	bl	8000890 <setd>
			break;
 800055e:	e074      	b.n	800064a <displayLetter+0x292>
		case 'E':
			setE();
 8000560:	f000 f9c0 	bl	80008e4 <setE>
			break;
 8000564:	e071      	b.n	800064a <displayLetter+0x292>
		case 'F':
			setF();
 8000566:	f000 f9e7 	bl	8000938 <setF>
			break;
 800056a:	e06e      	b.n	800064a <displayLetter+0x292>
		case 'G':
			setG();
 800056c:	f000 fa0e 	bl	800098c <setG>
			break;
 8000570:	e06b      	b.n	800064a <displayLetter+0x292>
		case 'H':
			setH();
 8000572:	f000 fa35 	bl	80009e0 <setH>
			break;
 8000576:	e068      	b.n	800064a <displayLetter+0x292>
		case 'h':
			seth();
 8000578:	f000 fa5c 	bl	8000a34 <seth>
			break;
 800057c:	e065      	b.n	800064a <displayLetter+0x292>
		case 'I':
			setI();
 800057e:	f000 fa83 	bl	8000a88 <setI>
			break;
 8000582:	e062      	b.n	800064a <displayLetter+0x292>
		case 'J':
			setJ();
 8000584:	f000 faaa 	bl	8000adc <setJ>
			break;
 8000588:	e05f      	b.n	800064a <displayLetter+0x292>
		case 'K':
			setK();
 800058a:	f000 fcc9 	bl	8000f20 <setK>
			break;
 800058e:	e05c      	b.n	800064a <displayLetter+0x292>
		case 'L':
			setL();
 8000590:	f000 face 	bl	8000b30 <setL>
			break;
 8000594:	e059      	b.n	800064a <displayLetter+0x292>
		case 'M':
			setM();
 8000596:	f000 fced 	bl	8000f74 <setM>
			break;
 800059a:	e056      	b.n	800064a <displayLetter+0x292>
		case 'n':
			setn();
 800059c:	f000 faf2 	bl	8000b84 <setn>
			break;
 80005a0:	e053      	b.n	800064a <displayLetter+0x292>
		case 'O':
			setO();
 80005a2:	f000 fb19 	bl	8000bd8 <setO>
			break;
 80005a6:	e050      	b.n	800064a <displayLetter+0x292>
		case 'o':
			seto();
 80005a8:	f000 fb40 	bl	8000c2c <seto>
			break;
 80005ac:	e04d      	b.n	800064a <displayLetter+0x292>
		case 'P':
			setP();
 80005ae:	f000 fb67 	bl	8000c80 <setP>
			break;
 80005b2:	e04a      	b.n	800064a <displayLetter+0x292>
		case 'q':
			setq();
 80005b4:	f000 fb8e 	bl	8000cd4 <setq>
			break;
 80005b8:	e047      	b.n	800064a <displayLetter+0x292>
		case 'r':
			setr();
 80005ba:	f000 fbb5 	bl	8000d28 <setr>
			break;
 80005be:	e044      	b.n	800064a <displayLetter+0x292>
		case 'S':
			setS();
 80005c0:	f000 fbdc 	bl	8000d7c <setS>
			break;
 80005c4:	e041      	b.n	800064a <displayLetter+0x292>
		case 't':
			sett();
 80005c6:	f000 fc03 	bl	8000dd0 <sett>
			break;
 80005ca:	e03e      	b.n	800064a <displayLetter+0x292>
		case 'U':
			setU();
 80005cc:	f000 fc2a 	bl	8000e24 <setU>
			break;
 80005d0:	e03b      	b.n	800064a <displayLetter+0x292>
		case 'u':
			setu();
 80005d2:	f000 fc51 	bl	8000e78 <setu>
			break;
 80005d6:	e038      	b.n	800064a <displayLetter+0x292>
		case 'V':
			setV();
 80005d8:	f000 fcf2 	bl	8000fc0 <setV>
			break;
 80005dc:	e035      	b.n	800064a <displayLetter+0x292>
		case 'W':
			setW();
 80005de:	f000 fd19 	bl	8001014 <setW>
			break;
 80005e2:	e032      	b.n	800064a <displayLetter+0x292>
		case 'X':
			setX();
 80005e4:	f000 fd40 	bl	8001068 <setX>
			break;
 80005e8:	e02f      	b.n	800064a <displayLetter+0x292>
		case 'y':
			sety();
 80005ea:	f000 fc6f 	bl	8000ecc <sety>
			break;
 80005ee:	e02c      	b.n	800064a <displayLetter+0x292>
		case 'Z':
			setZ();
 80005f0:	f000 fd64 	bl	80010bc <setZ>
			break;
 80005f4:	e029      	b.n	800064a <displayLetter+0x292>
		case ' ':
			resetAllSegments();
 80005f6:	f000 f82d 	bl	8000654 <resetAllSegments>
			break;
 80005fa:	e026      	b.n	800064a <displayLetter+0x292>
		case '_':
			setLine();
 80005fc:	f000 ff2c 	bl	8001458 <setLine>
			break;
 8000600:	e023      	b.n	800064a <displayLetter+0x292>
		case '-':
			setDash();
 8000602:	f000 ff61 	bl	80014c8 <setDash>
			break;
 8000606:	e020      	b.n	800064a <displayLetter+0x292>


		case '1':
			setOne();
 8000608:	f000 fd82 	bl	8001110 <setOne>
			break;
 800060c:	e01d      	b.n	800064a <displayLetter+0x292>
		case '2':
			setTwo();
 800060e:	f000 fda9 	bl	8001164 <setTwo>
			break;
 8000612:	e01a      	b.n	800064a <displayLetter+0x292>
		case '3':
			setThree();
 8000614:	f000 fdd0 	bl	80011b8 <setThree>
			break;
 8000618:	e017      	b.n	800064a <displayLetter+0x292>
		case '4':
			setFour();
 800061a:	f000 fdf7 	bl	800120c <setFour>
			break;
 800061e:	e014      	b.n	800064a <displayLetter+0x292>
		case '5':
			setFive();
 8000620:	f000 fe1e 	bl	8001260 <setFive>
			break;
 8000624:	e011      	b.n	800064a <displayLetter+0x292>
		case '6':
			setSix();
 8000626:	f000 fe45 	bl	80012b4 <setSix>
			break;
 800062a:	e00e      	b.n	800064a <displayLetter+0x292>
		case '7':
			setSeven();
 800062c:	f000 fe6c 	bl	8001308 <setSeven>
			break;
 8000630:	e00b      	b.n	800064a <displayLetter+0x292>
		case '8':
			setEight();
 8000632:	f000 fe93 	bl	800135c <setEight>
			break;
 8000636:	e008      	b.n	800064a <displayLetter+0x292>
		case '9':
			setNine();
 8000638:	f000 feba 	bl	80013b0 <setNine>
			break;
 800063c:	e005      	b.n	800064a <displayLetter+0x292>
		case '0':
			setZero();
 800063e:	f000 fee1 	bl	8001404 <setZero>
			break;
 8000642:	e002      	b.n	800064a <displayLetter+0x292>
		default:
			setDot();
 8000644:	f000 ff36 	bl	80014b4 <setDot>
			break;
 8000648:	bf00      	nop
	}
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop

08000654 <resetAllSegments>:
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
}

void resetAllSegments(void){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000658:	2102      	movs	r1, #2
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f7ff fdb3 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000662:	2101      	movs	r1, #1
 8000664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000668:	f7ff fdae 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800066c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000674:	f7ff fda8 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000678:	2120      	movs	r1, #32
 800067a:	480c      	ldr	r0, [pc, #48]	; (80006ac <resetAllSegments+0x58>)
 800067c:	f7ff fda4 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000680:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000688:	f7ff fd9e 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 800068c:	2108      	movs	r1, #8
 800068e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000692:	f7ff fd99 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000696:	2110      	movs	r1, #16
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <resetAllSegments+0x58>)
 800069a:	f7ff fd95 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentDP_Pin);
 800069e:	2102      	movs	r1, #2
 80006a0:	4802      	ldr	r0, [pc, #8]	; (80006ac <resetAllSegments+0x58>)
 80006a2:	f7ff fd91 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	48000400 	.word	0x48000400

080006b0 <resetAllDigits>:

void resetAllDigits(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 80006b4:	2104      	movs	r1, #4
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ba:	f7ff fd93 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 80006be:	2120      	movs	r1, #32
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f7ff fd8e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80006c8:	2110      	movs	r1, #16
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ce:	f7ff fd89 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 80006d2:	2140      	movs	r1, #64	; 0x40
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d8:	f7ff fd84 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 80006dc:	2180      	movs	r1, #128	; 0x80
 80006de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e2:	f7ff fd7f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <setA>:

void setA(void){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80006f0:	2102      	movs	r1, #2
 80006f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f6:	f7ff fd75 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80006fa:	2101      	movs	r1, #1
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000700:	f7ff fd70 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070c:	f7ff fd6a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000710:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000718:	f7ff fd64 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800071c:	2108      	movs	r1, #8
 800071e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000722:	f7ff fd5f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000726:	2110      	movs	r1, #16
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <setA+0x50>)
 800072a:	f7ff fd5b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	// reset D
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800072e:	2120      	movs	r1, #32
 8000730:	4802      	ldr	r0, [pc, #8]	; (800073c <setA+0x50>)
 8000732:	f7ff fd49 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	48000400 	.word	0x48000400

08000740 <seta>:
void seta(void){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000744:	2102      	movs	r1, #2
 8000746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074a:	f7ff fd4b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800074e:	2101      	movs	r1, #1
 8000750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000754:	f7ff fd46 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000758:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000760:	f7ff fd40 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000764:	2120      	movs	r1, #32
 8000766:	480a      	ldr	r0, [pc, #40]	; (8000790 <seta+0x50>)
 8000768:	f7ff fd3c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800076c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000774:	f7ff fd36 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000778:	2110      	movs	r1, #16
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <seta+0x50>)
 800077c:	f7ff fd32 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	// reset f
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000780:	2108      	movs	r1, #8
 8000782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000786:	f7ff fd1f 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	48000400 	.word	0x48000400

08000794 <setb>:
void setb(void){
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a0:	f7ff fd20 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80007a4:	2120      	movs	r1, #32
 80007a6:	480f      	ldr	r0, [pc, #60]	; (80007e4 <setb+0x50>)
 80007a8:	f7ff fd1c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80007ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b4:	f7ff fd16 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80007b8:	2108      	movs	r1, #8
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007be:	f7ff fd11 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80007c2:	2110      	movs	r1, #16
 80007c4:	4807      	ldr	r0, [pc, #28]	; (80007e4 <setb+0x50>)
 80007c6:	f7ff fd0d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	// reset a,b
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80007ca:	2102      	movs	r1, #2
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d0:	f7ff fcfa 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80007d4:	2101      	movs	r1, #1
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007da:	f7ff fcf5 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	48000400 	.word	0x48000400

080007e8 <setC>:
void setC(void){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80007ec:	2102      	movs	r1, #2
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f2:	f7ff fcf7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80007f6:	2120      	movs	r1, #32
 80007f8:	480f      	ldr	r0, [pc, #60]	; (8000838 <setC+0x50>)
 80007fa:	f7ff fcf3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80007fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000806:	f7ff fced 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800080a:	2108      	movs	r1, #8
 800080c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000810:	f7ff fce8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	// reset B,C,G
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000814:	2101      	movs	r1, #1
 8000816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081a:	f7ff fcd5 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800081e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000826:	f7ff fccf 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800082a:	2110      	movs	r1, #16
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <setC+0x50>)
 800082e:	f7ff fccb 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	48000400 	.word	0x48000400

0800083c <setc>:
void setc(void){
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000840:	2120      	movs	r1, #32
 8000842:	4812      	ldr	r0, [pc, #72]	; (800088c <setc+0x50>)
 8000844:	f7ff fcce 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000848:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800084c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000850:	f7ff fcc8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000854:	2110      	movs	r1, #16
 8000856:	480d      	ldr	r0, [pc, #52]	; (800088c <setc+0x50>)
 8000858:	f7ff fcc4 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800085c:	2102      	movs	r1, #2
 800085e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000862:	f7ff fcb1 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000866:	2101      	movs	r1, #1
 8000868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086c:	f7ff fcac 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000870:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f7ff fca6 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 800087c:	2108      	movs	r1, #8
 800087e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000882:	f7ff fca1 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	48000400 	.word	0x48000400

08000890 <setd>:
void setd(void){
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000894:	2101      	movs	r1, #1
 8000896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089a:	f7ff fca3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800089e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a6:	f7ff fc9d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80008aa:	2120      	movs	r1, #32
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <setd+0x50>)
 80008ae:	f7ff fc99 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80008b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ba:	f7ff fc93 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80008be:	2110      	movs	r1, #16
 80008c0:	4807      	ldr	r0, [pc, #28]	; (80008e0 <setd+0x50>)
 80008c2:	f7ff fc8f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80008c6:	2102      	movs	r1, #2
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008cc:	f7ff fc7c 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80008d0:	2108      	movs	r1, #8
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d6:	f7ff fc77 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	48000400 	.word	0x48000400

080008e4 <setE>:
void setE(void){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80008e8:	2102      	movs	r1, #2
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f7ff fc79 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80008f2:	2120      	movs	r1, #32
 80008f4:	480f      	ldr	r0, [pc, #60]	; (8000934 <setE+0x50>)
 80008f6:	f7ff fc75 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80008fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000902:	f7ff fc6f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000906:	2108      	movs	r1, #8
 8000908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090c:	f7ff fc6a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000910:	2110      	movs	r1, #16
 8000912:	4808      	ldr	r0, [pc, #32]	; (8000934 <setE+0x50>)
 8000914:	f7ff fc66 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000918:	2101      	movs	r1, #1
 800091a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091e:	f7ff fc53 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000922:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092a:	f7ff fc4d 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	48000400 	.word	0x48000400

08000938 <setF>:
void setF(void){
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800093c:	2102      	movs	r1, #2
 800093e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000942:	f7ff fc4f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000946:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800094a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094e:	f7ff fc49 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000952:	2108      	movs	r1, #8
 8000954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000958:	f7ff fc44 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800095c:	2110      	movs	r1, #16
 800095e:	480a      	ldr	r0, [pc, #40]	; (8000988 <setF+0x50>)
 8000960:	f7ff fc40 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000964:	2101      	movs	r1, #1
 8000966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096a:	f7ff fc2d 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800096e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000976:	f7ff fc27 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800097a:	2120      	movs	r1, #32
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <setF+0x50>)
 800097e:	f7ff fc23 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	48000400 	.word	0x48000400

0800098c <setG>:
void setG(void){
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000990:	2102      	movs	r1, #2
 8000992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000996:	f7ff fc25 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800099a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a2:	f7ff fc1f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80009a6:	2120      	movs	r1, #32
 80009a8:	480c      	ldr	r0, [pc, #48]	; (80009dc <setG+0x50>)
 80009aa:	f7ff fc1b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80009ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b6:	f7ff fc15 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80009ba:	2108      	movs	r1, #8
 80009bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c0:	f7ff fc10 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80009c4:	2101      	movs	r1, #1
 80009c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ca:	f7ff fbfd 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 80009ce:	2110      	movs	r1, #16
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <setG+0x50>)
 80009d2:	f7ff fbf9 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	48000400 	.word	0x48000400

080009e0 <setH>:
void setH(void){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80009e4:	2101      	movs	r1, #1
 80009e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ea:	f7ff fbfb 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80009ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f6:	f7ff fbf5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80009fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a02:	f7ff fbef 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000a06:	2108      	movs	r1, #8
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0c:	f7ff fbea 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000a10:	2110      	movs	r1, #16
 8000a12:	4807      	ldr	r0, [pc, #28]	; (8000a30 <setH+0x50>)
 8000a14:	f7ff fbe6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000a18:	2102      	movs	r1, #2
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1e:	f7ff fbd3 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000a22:	2120      	movs	r1, #32
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <setH+0x50>)
 8000a26:	f7ff fbcf 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	48000400 	.word	0x48000400

08000a34 <seth>:
void seth(void){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000a38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a40:	f7ff fbd0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000a44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4c:	f7ff fbca 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000a50:	2108      	movs	r1, #8
 8000a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a56:	f7ff fbc5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	4809      	ldr	r0, [pc, #36]	; (8000a84 <seth+0x50>)
 8000a5e:	f7ff fbc1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000a62:	2102      	movs	r1, #2
 8000a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a68:	f7ff fbae 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a72:	f7ff fba9 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000a76:	2120      	movs	r1, #32
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <seth+0x50>)
 8000a7a:	f7ff fba5 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	48000400 	.word	0x48000400

08000a88 <setI>:
void setI(void){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000a8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f7ff fba6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000a98:	2108      	movs	r1, #8
 8000a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9e:	f7ff fba1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa8:	f7ff fb8e 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000aac:	2101      	movs	r1, #1
 8000aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab2:	f7ff fb89 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000ab6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abe:	f7ff fb83 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <setI+0x50>)
 8000ac6:	f7ff fb7f 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000aca:	2110      	movs	r1, #16
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <setI+0x50>)
 8000ace:	f7ff fb7b 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	48000400 	.word	0x48000400

08000adc <setJ>:
void setJ(void){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae6:	f7ff fb7d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000aea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af2:	f7ff fb77 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000af6:	2120      	movs	r1, #32
 8000af8:	480c      	ldr	r0, [pc, #48]	; (8000b2c <setJ+0x50>)
 8000afa:	f7ff fb73 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000afe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b06:	f7ff fb6d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f7ff fb5a 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000b14:	2108      	movs	r1, #8
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1a:	f7ff fb55 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000b1e:	2110      	movs	r1, #16
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <setJ+0x50>)
 8000b22:	f7ff fb51 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	48000400 	.word	0x48000400

08000b30 <setL>:
void setL(void){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000b34:	2120      	movs	r1, #32
 8000b36:	4812      	ldr	r0, [pc, #72]	; (8000b80 <setL+0x50>)
 8000b38:	f7ff fb54 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000b3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b44:	f7ff fb4e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000b48:	2108      	movs	r1, #8
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4e:	f7ff fb49 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000b52:	2102      	movs	r1, #2
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b58:	f7ff fb36 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f7ff fb31 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000b66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6e:	f7ff fb2b 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000b72:	2110      	movs	r1, #16
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <setL+0x50>)
 8000b76:	f7ff fb27 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	48000400 	.word	0x48000400

08000b84 <setn>:
void setn(void){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000b88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b90:	f7ff fb28 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000b94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9c:	f7ff fb22 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000ba0:	2110      	movs	r1, #16
 8000ba2:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <setn+0x50>)
 8000ba4:	f7ff fb1e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000ba8:	2102      	movs	r1, #2
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bae:	f7ff fb0b 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb8:	f7ff fb06 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000bbc:	2120      	movs	r1, #32
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <setn+0x50>)
 8000bc0:	f7ff fb02 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000bc4:	2108      	movs	r1, #8
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bca:	f7ff fafd 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	48000400 	.word	0x48000400

08000bd8 <setO>:
void setO(void){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000bdc:	2102      	movs	r1, #2
 8000bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be2:	f7ff faff 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000be6:	2101      	movs	r1, #1
 8000be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bec:	f7ff fafa 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000bf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf8:	f7ff faf4 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000bfc:	2120      	movs	r1, #32
 8000bfe:	480a      	ldr	r0, [pc, #40]	; (8000c28 <setO+0x50>)
 8000c00:	f7ff faf0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000c04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0c:	f7ff faea 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000c10:	2108      	movs	r1, #8
 8000c12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c16:	f7ff fae5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000c1a:	2110      	movs	r1, #16
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <setO+0x50>)
 8000c1e:	f7ff fad3 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	48000400 	.word	0x48000400

08000c2c <seto>:
void seto(void){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000c30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c38:	f7ff fad4 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000c3c:	2120      	movs	r1, #32
 8000c3e:	480f      	ldr	r0, [pc, #60]	; (8000c7c <seto+0x50>)
 8000c40:	f7ff fad0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000c44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4c:	f7ff faca 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000c50:	2110      	movs	r1, #16
 8000c52:	480a      	ldr	r0, [pc, #40]	; (8000c7c <seto+0x50>)
 8000c54:	f7ff fac6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000c58:	2102      	movs	r1, #2
 8000c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5e:	f7ff fab3 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000c62:	2101      	movs	r1, #1
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c68:	f7ff faae 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c72:	f7ff faa9 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	48000400 	.word	0x48000400

08000c80 <setP>:
void setP(void){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000c84:	2102      	movs	r1, #2
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f7ff faab 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000c8e:	2101      	movs	r1, #1
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c94:	f7ff faa6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000c98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca0:	f7ff faa0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000ca4:	2108      	movs	r1, #8
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000caa:	f7ff fa9b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000cae:	2110      	movs	r1, #16
 8000cb0:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <setP+0x50>)
 8000cb2:	f7ff fa97 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbe:	f7ff fa83 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000cc2:	2120      	movs	r1, #32
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <setP+0x50>)
 8000cc6:	f7ff fa7f 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	48000400 	.word	0x48000400

08000cd4 <setq>:
void setq(void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000cd8:	2102      	movs	r1, #2
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cde:	f7ff fa81 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f7ff fa7c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000cec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf4:	f7ff fa76 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000cf8:	2108      	movs	r1, #8
 8000cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfe:	f7ff fa71 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000d02:	2110      	movs	r1, #16
 8000d04:	4807      	ldr	r0, [pc, #28]	; (8000d24 <setq+0x50>)
 8000d06:	f7ff fa6d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000d0a:	2120      	movs	r1, #32
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <setq+0x50>)
 8000d0e:	f7ff fa5b 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000d12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1a:	f7ff fa55 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	48000400 	.word	0x48000400

08000d28 <setr>:
void setr(void){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000d2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d34:	f7ff fa56 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000d38:	2110      	movs	r1, #16
 8000d3a:	480f      	ldr	r0, [pc, #60]	; (8000d78 <setr+0x50>)
 8000d3c:	f7ff fa52 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000d40:	2102      	movs	r1, #2
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d46:	f7ff fa3f 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d50:	f7ff fa3a 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5c:	f7ff fa34 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000d60:	2120      	movs	r1, #32
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <setr+0x50>)
 8000d64:	f7ff fa30 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000d68:	2108      	movs	r1, #8
 8000d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6e:	f7ff fa2b 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	48000400 	.word	0x48000400

08000d7c <setS>:
void setS(void){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000d80:	2102      	movs	r1, #2
 8000d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d86:	f7ff fa2d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000d8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d92:	f7ff fa27 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000d96:	2120      	movs	r1, #32
 8000d98:	480c      	ldr	r0, [pc, #48]	; (8000dcc <setS+0x50>)
 8000d9a:	f7ff fa23 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000d9e:	2108      	movs	r1, #8
 8000da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da4:	f7ff fa1e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000da8:	2110      	movs	r1, #16
 8000daa:	4808      	ldr	r0, [pc, #32]	; (8000dcc <setS+0x50>)
 8000dac:	f7ff fa1a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000db0:	2101      	movs	r1, #1
 8000db2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db6:	f7ff fa07 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000dba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc2:	f7ff fa01 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	48000400 	.word	0x48000400

08000dd0 <sett>:
void sett(void){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000dd4:	2120      	movs	r1, #32
 8000dd6:	4812      	ldr	r0, [pc, #72]	; (8000e20 <sett+0x50>)
 8000dd8:	f7ff fa04 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000ddc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f7ff f9fe 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000de8:	2108      	movs	r1, #8
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f7ff f9f9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000df2:	2110      	movs	r1, #16
 8000df4:	480a      	ldr	r0, [pc, #40]	; (8000e20 <sett+0x50>)
 8000df6:	f7ff f9f5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000dfa:	2102      	movs	r1, #2
 8000dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e00:	f7ff f9e2 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000e04:	2101      	movs	r1, #1
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0a:	f7ff f9dd 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000e0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e16:	f7ff f9d7 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	48000400 	.word	0x48000400

08000e24 <setU>:
void setU(void){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000e28:	2101      	movs	r1, #1
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2e:	f7ff f9d9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3a:	f7ff f9d3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000e3e:	2120      	movs	r1, #32
 8000e40:	480c      	ldr	r0, [pc, #48]	; (8000e74 <setU+0x50>)
 8000e42:	f7ff f9cf 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000e46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4e:	f7ff f9c9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000e52:	2108      	movs	r1, #8
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e58:	f7ff f9c4 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e62:	f7ff f9b1 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000e66:	2110      	movs	r1, #16
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <setU+0x50>)
 8000e6a:	f7ff f9ad 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	48000400 	.word	0x48000400

08000e78 <setu>:
void setu(void){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000e7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e84:	f7ff f9ae 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000e88:	2120      	movs	r1, #32
 8000e8a:	480f      	ldr	r0, [pc, #60]	; (8000ec8 <setu+0x50>)
 8000e8c:	f7ff f9aa 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000e90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e98:	f7ff f9a4 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea2:	f7ff f991 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eac:	f7ff f98c 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000eb0:	2108      	movs	r1, #8
 8000eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb6:	f7ff f987 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000eba:	2110      	movs	r1, #16
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <setu+0x50>)
 8000ebe:	f7ff f983 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	48000400 	.word	0x48000400

08000ecc <sety>:
void sety(void){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed6:	f7ff f985 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000eda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee2:	f7ff f97f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	480c      	ldr	r0, [pc, #48]	; (8000f1c <sety+0x50>)
 8000eea:	f7ff f97b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000eee:	2108      	movs	r1, #8
 8000ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef4:	f7ff f976 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000ef8:	2110      	movs	r1, #16
 8000efa:	4808      	ldr	r0, [pc, #32]	; (8000f1c <sety+0x50>)
 8000efc:	f7ff f972 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000f00:	2102      	movs	r1, #2
 8000f02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f06:	f7ff f95f 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000f0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f12:	f7ff f959 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	48000400 	.word	0x48000400

08000f20 <setK>:


// Disgusting letters :D
void setK(void){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000f24:	2102      	movs	r1, #2
 8000f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2a:	f7ff f95b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f7ff f955 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000f3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f42:	f7ff f94f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000f46:	2108      	movs	r1, #8
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4c:	f7ff f94a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000f50:	2110      	movs	r1, #16
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <setK+0x50>)
 8000f54:	f7ff f946 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000f58:	2101      	movs	r1, #1
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5e:	f7ff f933 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000f62:	2120      	movs	r1, #32
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <setK+0x50>)
 8000f66:	f7ff f92f 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	48000400 	.word	0x48000400

08000f74 <setM>:
void setM(void){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000f78:	2102      	movs	r1, #2
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f7ff f931 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000f82:	2101      	movs	r1, #1
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f88:	f7ff f92c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	480b      	ldr	r0, [pc, #44]	; (8000fbc <setM+0x48>)
 8000f90:	f7ff f928 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000f94:	2108      	movs	r1, #8
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9a:	f7ff f923 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000f9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa6:	f7ff f90f 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000faa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb2:	f7ff f909 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	48000400 	.word	0x48000400

08000fc0 <setV>:
void setV(void){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fca:	f7ff f90b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000fce:	2120      	movs	r1, #32
 8000fd0:	480f      	ldr	r0, [pc, #60]	; (8001010 <setV+0x50>)
 8000fd2:	f7ff f907 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000fd6:	2108      	movs	r1, #8
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fdc:	f7ff f902 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe6:	f7ff f8ef 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000fea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff2:	f7ff f8e9 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000ff6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffe:	f7ff f8e3 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001002:	2110      	movs	r1, #16
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <setV+0x50>)
 8001006:	f7ff f8df 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	48000400 	.word	0x48000400

08001014 <setW>:
void setW(void){
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001018:	2101      	movs	r1, #1
 800101a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101e:	f7ff f8e1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001022:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102a:	f7ff f8db 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800102e:	2120      	movs	r1, #32
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <setW+0x50>)
 8001032:	f7ff f8d7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001036:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800103a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103e:	f7ff f8d1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001042:	2108      	movs	r1, #8
 8001044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001048:	f7ff f8cc 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800104c:	2110      	movs	r1, #16
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <setW+0x50>)
 8001050:	f7ff f8c8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001054:	2102      	movs	r1, #2
 8001056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105a:	f7ff f8b5 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	48000400 	.word	0x48000400

08001068 <setX>:
void setX(void){
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800106c:	2102      	movs	r1, #2
 800106e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001072:	f7ff f8b7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001076:	2120      	movs	r1, #32
 8001078:	480f      	ldr	r0, [pc, #60]	; (80010b8 <setX+0x50>)
 800107a:	f7ff f8b3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800107e:	2110      	movs	r1, #16
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <setX+0x50>)
 8001082:	f7ff f8af 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001086:	2101      	movs	r1, #1
 8001088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108c:	f7ff f89c 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001090:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001098:	f7ff f896 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800109c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a4:	f7ff f890 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80010a8:	2108      	movs	r1, #8
 80010aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ae:	f7ff f88b 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	48000400 	.word	0x48000400

080010bc <setZ>:
void setZ(void){
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80010c0:	2102      	movs	r1, #2
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c6:	f7ff f88d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80010ca:	2101      	movs	r1, #1
 80010cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d0:	f7ff f888 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80010d4:	2120      	movs	r1, #32
 80010d6:	480d      	ldr	r0, [pc, #52]	; (800110c <setZ+0x50>)
 80010d8:	f7ff f884 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80010dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f7ff f87e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80010e8:	2110      	movs	r1, #16
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <setZ+0x50>)
 80010ec:	f7ff f87a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80010f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f8:	f7ff f866 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80010fc:	2108      	movs	r1, #8
 80010fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001102:	f7ff f861 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	48000400 	.word	0x48000400

08001110 <setOne>:

// numbers
void setOne(void){
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001114:	2101      	movs	r1, #1
 8001116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111a:	f7ff f863 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800111e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001126:	f7ff f85d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800112a:	2102      	movs	r1, #2
 800112c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001130:	f7ff f84a 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001134:	2120      	movs	r1, #32
 8001136:	480a      	ldr	r0, [pc, #40]	; (8001160 <setOne+0x50>)
 8001138:	f7ff f846 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800113c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001144:	f7ff f840 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001148:	2108      	movs	r1, #8
 800114a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114e:	f7ff f83b 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001152:	2110      	movs	r1, #16
 8001154:	4802      	ldr	r0, [pc, #8]	; (8001160 <setOne+0x50>)
 8001156:	f7ff f837 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	48000400 	.word	0x48000400

08001164 <setTwo>:
void setTwo(void){
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001168:	2102      	movs	r1, #2
 800116a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116e:	f7ff f839 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001172:	2101      	movs	r1, #1
 8001174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001178:	f7ff f834 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800117c:	2120      	movs	r1, #32
 800117e:	480d      	ldr	r0, [pc, #52]	; (80011b4 <setTwo+0x50>)
 8001180:	f7ff f830 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118c:	f7ff f82a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001190:	2110      	movs	r1, #16
 8001192:	4808      	ldr	r0, [pc, #32]	; (80011b4 <setTwo+0x50>)
 8001194:	f7ff f826 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a0:	f7ff f812 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80011a4:	2108      	movs	r1, #8
 80011a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011aa:	f7ff f80d 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	48000400 	.word	0x48000400

080011b8 <setThree>:
void setThree(void){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80011bc:	2102      	movs	r1, #2
 80011be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c2:	f7ff f80f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80011c6:	2101      	movs	r1, #1
 80011c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011cc:	f7ff f80a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80011d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d8:	f7ff f804 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80011dc:	2120      	movs	r1, #32
 80011de:	480a      	ldr	r0, [pc, #40]	; (8001208 <setThree+0x50>)
 80011e0:	f7ff f800 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80011e4:	2110      	movs	r1, #16
 80011e6:	4808      	ldr	r0, [pc, #32]	; (8001208 <setThree+0x50>)
 80011e8:	f7fe fffc 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80011ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f4:	f7fe ffe8 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80011f8:	2108      	movs	r1, #8
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fe:	f7fe ffe3 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	48000400 	.word	0x48000400

0800120c <setFour>:
void setFour(void){
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001210:	2101      	movs	r1, #1
 8001212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001216:	f7fe ffe5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800121a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001222:	f7fe ffdf 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001226:	2108      	movs	r1, #8
 8001228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122c:	f7fe ffda 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001230:	2110      	movs	r1, #16
 8001232:	480a      	ldr	r0, [pc, #40]	; (800125c <setFour+0x50>)
 8001234:	f7fe ffd6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001238:	2102      	movs	r1, #2
 800123a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123e:	f7fe ffc3 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001242:	2120      	movs	r1, #32
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <setFour+0x50>)
 8001246:	f7fe ffbf 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800124a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800124e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001252:	f7fe ffb9 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	48000400 	.word	0x48000400

08001260 <setFive>:
void setFive(void){
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001264:	2102      	movs	r1, #2
 8001266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126a:	f7fe ffbb 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800126e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001276:	f7fe ffb5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800127a:	2120      	movs	r1, #32
 800127c:	480c      	ldr	r0, [pc, #48]	; (80012b0 <setFive+0x50>)
 800127e:	f7fe ffb1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001282:	2108      	movs	r1, #8
 8001284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001288:	f7fe ffac 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800128c:	2110      	movs	r1, #16
 800128e:	4808      	ldr	r0, [pc, #32]	; (80012b0 <setFive+0x50>)
 8001290:	f7fe ffa8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001294:	2101      	movs	r1, #1
 8001296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129a:	f7fe ff95 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800129e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a6:	f7fe ff8f 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	48000400 	.word	0x48000400

080012b4 <setSix>:
void setSix(void){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80012b8:	2102      	movs	r1, #2
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012be:	f7fe ff91 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80012c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ca:	f7fe ff8b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80012ce:	2120      	movs	r1, #32
 80012d0:	480c      	ldr	r0, [pc, #48]	; (8001304 <setSix+0x50>)
 80012d2:	f7fe ff87 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80012d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012de:	f7fe ff81 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80012e2:	2108      	movs	r1, #8
 80012e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e8:	f7fe ff7c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80012ec:	2110      	movs	r1, #16
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <setSix+0x50>)
 80012f0:	f7fe ff78 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80012f4:	2101      	movs	r1, #1
 80012f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fa:	f7fe ff65 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	48000400 	.word	0x48000400

08001308 <setSeven>:
void setSeven(void){
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800130c:	2102      	movs	r1, #2
 800130e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001312:	f7fe ff67 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001316:	2101      	movs	r1, #1
 8001318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131c:	f7fe ff62 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001328:	f7fe ff5c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800132c:	2120      	movs	r1, #32
 800132e:	480a      	ldr	r0, [pc, #40]	; (8001358 <setSeven+0x50>)
 8001330:	f7fe ff4a 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001334:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133c:	f7fe ff44 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001340:	2108      	movs	r1, #8
 8001342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001346:	f7fe ff3f 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800134a:	2110      	movs	r1, #16
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <setSeven+0x50>)
 800134e:	f7fe ff3b 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	48000400 	.word	0x48000400

0800135c <setEight>:
void setEight(void){
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001360:	2102      	movs	r1, #2
 8001362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001366:	f7fe ff3d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800136a:	2101      	movs	r1, #1
 800136c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001370:	f7fe ff38 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137c:	f7fe ff32 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001380:	2120      	movs	r1, #32
 8001382:	480a      	ldr	r0, [pc, #40]	; (80013ac <setEight+0x50>)
 8001384:	f7fe ff2e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800138c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001390:	f7fe ff28 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001394:	2108      	movs	r1, #8
 8001396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139a:	f7fe ff23 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800139e:	2110      	movs	r1, #16
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <setEight+0x50>)
 80013a2:	f7fe ff1f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	48000400 	.word	0x48000400

080013b0 <setNine>:
void setNine(void){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80013b4:	2102      	movs	r1, #2
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ba:	f7fe ff13 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80013be:	2101      	movs	r1, #1
 80013c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c4:	f7fe ff0e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80013c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d0:	f7fe ff08 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80013d4:	2120      	movs	r1, #32
 80013d6:	480a      	ldr	r0, [pc, #40]	; (8001400 <setNine+0x50>)
 80013d8:	f7fe ff04 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80013dc:	2108      	movs	r1, #8
 80013de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e2:	f7fe feff 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80013e6:	2110      	movs	r1, #16
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <setNine+0x50>)
 80013ea:	f7fe fefb 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80013ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f6:	f7fe fee7 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	48000400 	.word	0x48000400

08001404 <setZero>:
void setZero(void){
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001408:	2102      	movs	r1, #2
 800140a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140e:	f7fe fee9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001412:	2101      	movs	r1, #1
 8001414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001418:	f7fe fee4 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800141c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001424:	f7fe fede 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001428:	2120      	movs	r1, #32
 800142a:	480a      	ldr	r0, [pc, #40]	; (8001454 <setZero+0x50>)
 800142c:	f7fe feda 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001430:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001438:	f7fe fed4 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800143c:	2108      	movs	r1, #8
 800143e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001442:	f7fe fecf 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001446:	2110      	movs	r1, #16
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <setZero+0x50>)
 800144a:	f7fe febd 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	48000400 	.word	0x48000400

08001458 <setLine>:

void setLine(void){
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800145c:	2120      	movs	r1, #32
 800145e:	4814      	ldr	r0, [pc, #80]	; (80014b0 <setLine+0x58>)
 8001460:	f7fe fec0 	bl	80001e4 <LL_GPIO_ResetOutputPin>

	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001464:	2102      	movs	r1, #2
 8001466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146a:	f7fe fead 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800146e:	2101      	movs	r1, #1
 8001470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001474:	f7fe fea8 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800147c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001480:	f7fe fea2 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001484:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148c:	f7fe fe9c 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001490:	2108      	movs	r1, #8
 8001492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001496:	f7fe fe97 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800149a:	2110      	movs	r1, #16
 800149c:	4804      	ldr	r0, [pc, #16]	; (80014b0 <setLine+0x58>)
 800149e:	f7fe fe93 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentDP_Pin);
 80014a2:	2102      	movs	r1, #2
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <setLine+0x58>)
 80014a6:	f7fe fe8f 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	48000400 	.word	0x48000400

080014b4 <setDot>:
// and dot to end
void setDot(void){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
 80014b8:	2102      	movs	r1, #2
 80014ba:	4802      	ldr	r0, [pc, #8]	; (80014c4 <setDot+0x10>)
 80014bc:	f7fe fe92 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	48000400 	.word	0x48000400

080014c8 <setDash>:

void setDash(void){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80014cc:	2110      	movs	r1, #16
 80014ce:	4802      	ldr	r0, [pc, #8]	; (80014d8 <setDash+0x10>)
 80014d0:	f7fe fe88 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	48000400 	.word	0x48000400

080014dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014e6:	695a      	ldr	r2, [r3, #20]
 80014e8:	4907      	ldr	r1, [pc, #28]	; (8001508 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014f2:	695a      	ldr	r2, [r3, #20]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4013      	ands	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	40021000 	.word	0x40021000

0800150c <LL_GPIO_ResetOutputPin>:
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	463b      	mov	r3, r7
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
 800153c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800153e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001542:	f7ff ffcb 	bl	80014dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001546:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800154a:	f7ff ffc7 	bl	80014dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800154e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001552:	f7ff ffc3 	bl	80014dc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 8001556:	f641 119f 	movw	r1, #6559	; 0x199f
 800155a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155e:	f7ff ffd5 	bl	800150c <LL_GPIO_ResetOutputPin>
                          |digit2_Pin|digitTime_Pin|segmentC_Pin|segmentE_Pin
                          |digit3_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, digit1_Pin|segmentDP_Pin|segmentG_Pin|segmentD_Pin);
 8001562:	2133      	movs	r1, #51	; 0x33
 8001564:	4813      	ldr	r0, [pc, #76]	; (80015b4 <MX_GPIO_Init+0x8c>)
 8001566:	f7ff ffd1 	bl	800150c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 800156a:	f641 139f 	movw	r3, #6559	; 0x199f
 800156e:	603b      	str	r3, [r7, #0]
                          |digit2_Pin|digitTime_Pin|segmentC_Pin|segmentE_Pin
                          |digit3_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001570:	2301      	movs	r3, #1
 8001572:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	463b      	mov	r3, r7
 8001582:	4619      	mov	r1, r3
 8001584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001588:	f001 f97a 	bl	8002880 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = digit1_Pin|segmentDP_Pin|segmentG_Pin|segmentD_Pin;
 800158c:	2333      	movs	r3, #51	; 0x33
 800158e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001590:	2301      	movs	r3, #1
 8001592:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a0:	463b      	mov	r3, r7
 80015a2:	4619      	mov	r1, r3
 80015a4:	4803      	ldr	r0, [pc, #12]	; (80015b4 <MX_GPIO_Init+0x8c>)
 80015a6:	f001 f96b 	bl	8002880 <LL_GPIO_Init>

}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	48000400 	.word	0x48000400

080015b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <__NVIC_GetPriorityGrouping+0x18>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	f003 0307 	and.w	r3, r3, #7
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	db0b      	blt.n	80015fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	f003 021f 	and.w	r2, r3, #31
 80015ec:	4907      	ldr	r1, [pc, #28]	; (800160c <__NVIC_EnableIRQ+0x38>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	095b      	lsrs	r3, r3, #5
 80015f4:	2001      	movs	r0, #1
 80015f6:	fa00 f202 	lsl.w	r2, r0, r2
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000e100 	.word	0xe000e100

08001610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	db0a      	blt.n	800163a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	490c      	ldr	r1, [pc, #48]	; (800165c <__NVIC_SetPriority+0x4c>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	0112      	lsls	r2, r2, #4
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	440b      	add	r3, r1
 8001634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001638:	e00a      	b.n	8001650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4908      	ldr	r1, [pc, #32]	; (8001660 <__NVIC_SetPriority+0x50>)
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	3b04      	subs	r3, #4
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	440b      	add	r3, r1
 800164e:	761a      	strb	r2, [r3, #24]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000e100 	.word	0xe000e100
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f1c3 0307 	rsb	r3, r3, #7
 800167e:	2b04      	cmp	r3, #4
 8001680:	bf28      	it	cs
 8001682:	2304      	movcs	r3, #4
 8001684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3304      	adds	r3, #4
 800168a:	2b06      	cmp	r3, #6
 800168c:	d902      	bls.n	8001694 <NVIC_EncodePriority+0x30>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3b03      	subs	r3, #3
 8001692:	e000      	b.n	8001696 <NVIC_EncodePriority+0x32>
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	f04f 32ff 	mov.w	r2, #4294967295
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	401a      	ands	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	4313      	orrs	r3, r2
         );
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3724      	adds	r7, #36	; 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f043 0201 	orr.w	r2, r3, #1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	601a      	str	r2, [r3, #0]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	601a      	str	r2, [r3, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	601a      	str	r2, [r3, #0]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 800172a:	b480      	push	{r7}
 800172c:	b085      	sub	sp, #20
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800173e:	f023 0306 	bic.w	r3, r3, #6
 8001742:	68b9      	ldr	r1, [r7, #8]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	430a      	orrs	r2, r1
 8001748:	431a      	orrs	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	60da      	str	r2, [r3, #12]
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	60da      	str	r2, [r3, #12]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f043 0204 	orr.w	r2, r3, #4
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	601a      	str	r2, [r3, #0]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 0204 	bic.w	r2, r3, #4
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	601a      	str	r2, [r3, #0]
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d101      	bne.n	80017d2 <LL_I2C_IsActiveFlag_TXIS+0x18>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d101      	bne.n	80017f8 <LL_I2C_IsActiveFlag_RXNE+0x18>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <LL_I2C_IsActiveFlag_RXNE+0x1a>
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f003 0320 	and.w	r3, r3, #32
 8001816:	2b20      	cmp	r3, #32
 8001818:	d101      	bne.n	800181e <LL_I2C_IsActiveFlag_STOP+0x18>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <LL_I2C_IsActiveFlag_STOP+0x1a>
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	f043 0220 	orr.w	r2, r3, #32
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	61da      	str	r2, [r3, #28]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	605a      	str	r2, [r3, #4]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	0d5b      	lsrs	r3, r3, #21
 8001882:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <LL_I2C_HandleTransfer+0x48>)
 8001888:	430b      	orrs	r3, r1
 800188a:	43db      	mvns	r3, r3
 800188c:	401a      	ands	r2, r3
 800188e:	68b9      	ldr	r1, [r7, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4319      	orrs	r1, r3
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	041b      	lsls	r3, r3, #16
 8001898:	4319      	orrs	r1, r3
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	4319      	orrs	r1, r3
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	430b      	orrs	r3, r1
 80018a2:	431a      	orrs	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	03ff7bff 	.word	0x03ff7bff

080018b8 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	b2db      	uxtb	r3, r3
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80018de:	78fa      	ldrb	r2, [r7, #3]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <LL_AHB1_GRP1_EnableClock>:
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018fa:	695a      	ldr	r2, [r3, #20]
 80018fc:	4907      	ldr	r1, [pc, #28]	; (800191c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4313      	orrs	r3, r2
 8001902:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4013      	ands	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40021000 	.word	0x40021000

08001920 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <LL_APB1_GRP1_EnableClock+0x2c>)
 800192a:	69da      	ldr	r2, [r3, #28]
 800192c:	4907      	ldr	r1, [pc, #28]	; (800194c <LL_APB1_GRP1_EnableClock+0x2c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4313      	orrs	r3, r2
 8001932:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001936:	69da      	ldr	r2, [r3, #28]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4013      	ands	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40021000 	.word	0x40021000

08001950 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08e      	sub	sp, #56	; 0x38
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001956:	f107 031c 	add.w	r3, r7, #28
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
 8001964:	611a      	str	r2, [r3, #16]
 8001966:	615a      	str	r2, [r3, #20]
 8001968:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
 8001978:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800197a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800197e:	f7ff ffb7 	bl	80018f0 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001982:	23c0      	movs	r3, #192	; 0xc0
 8001984:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001986:	2302      	movs	r3, #2
 8001988:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800198a:	2303      	movs	r3, #3
 800198c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800198e:	2301      	movs	r3, #1
 8001990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001992:	2301      	movs	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001996:	2304      	movs	r3, #4
 8001998:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	4619      	mov	r1, r3
 800199e:	4821      	ldr	r0, [pc, #132]	; (8001a24 <MX_I2C1_Init+0xd4>)
 80019a0:	f000 ff6e 	bl	8002880 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80019a4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80019a8:	f7ff ffba 	bl	8001920 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80019ac:	f7ff fe04 	bl	80015b8 <__NVIC_GetPriorityGrouping>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2200      	movs	r2, #0
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fe54 	bl	8001664 <NVIC_EncodePriority>
 80019bc:	4603      	mov	r3, r0
 80019be:	4619      	mov	r1, r3
 80019c0:	201f      	movs	r0, #31
 80019c2:	f7ff fe25 	bl	8001610 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80019c6:	201f      	movs	r0, #31
 80019c8:	f7ff fe04 	bl	80015d4 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80019cc:	4816      	ldr	r0, [pc, #88]	; (8001a28 <MX_I2C1_Init+0xd8>)
 80019ce:	f7ff ff3d 	bl	800184c <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80019d2:	4815      	ldr	r0, [pc, #84]	; (8001a28 <MX_I2C1_Init+0xd8>)
 80019d4:	f7ff fec1 	bl	800175a <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80019d8:	4813      	ldr	r0, [pc, #76]	; (8001a28 <MX_I2C1_Init+0xd8>)
 80019da:	f7ff fe96 	bl	800170a <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80019de:	4812      	ldr	r0, [pc, #72]	; (8001a28 <MX_I2C1_Init+0xd8>)
 80019e0:	f7ff fe83 	bl	80016ea <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80019e8:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <MX_I2C1_Init+0xdc>)
 80019ea:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 80019f4:	2302      	movs	r3, #2
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80019fc:	2300      	movs	r3, #0
 80019fe:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4619      	mov	r1, r3
 8001a06:	4808      	ldr	r0, [pc, #32]	; (8001a28 <MX_I2C1_Init+0xd8>)
 8001a08:	f001 f84d 	bl	8002aa6 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4805      	ldr	r0, [pc, #20]	; (8001a28 <MX_I2C1_Init+0xd8>)
 8001a12:	f7ff fe8a 	bl	800172a <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8001a16:	4804      	ldr	r0, [pc, #16]	; (8001a28 <MX_I2C1_Init+0xd8>)
 8001a18:	f7ff fe57 	bl	80016ca <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	3738      	adds	r7, #56	; 0x38
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	48000400 	.word	0x48000400
 8001a28:	40005400 	.word	0x40005400
 8001a2c:	2000090e 	.word	0x2000090e

08001a30 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af02      	add	r7, sp, #8
 8001a36:	4604      	mov	r4, r0
 8001a38:	4608      	mov	r0, r1
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4623      	mov	r3, r4
 8001a40:	71fb      	strb	r3, [r7, #7]
 8001a42:	4603      	mov	r3, r0
 8001a44:	71bb      	strb	r3, [r7, #6]
 8001a46:	460b      	mov	r3, r1
 8001a48:	717b      	strb	r3, [r7, #5]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8001a4e:	793b      	ldrb	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8001a54:	79bb      	ldrb	r3, [r7, #6]
 8001a56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a5a:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001a5c:	7979      	ldrb	r1, [r7, #5]
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <i2c_master_write+0x80>)
 8001a60:	9301      	str	r3, [sp, #4]
 8001a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	2302      	movs	r3, #2
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	4811      	ldr	r0, [pc, #68]	; (8001ab4 <i2c_master_write+0x84>)
 8001a6e:	f7ff fefd 	bl	800186c <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8001a72:	79bb      	ldrb	r3, [r7, #6]
 8001a74:	4619      	mov	r1, r3
 8001a76:	480f      	ldr	r0, [pc, #60]	; (8001ab4 <i2c_master_write+0x84>)
 8001a78:	f7ff ff2b 	bl	80018d2 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001a7c:	e00a      	b.n	8001a94 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001a7e:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <i2c_master_write+0x84>)
 8001a80:	f7ff fe9b 	bl	80017ba <LL_I2C_IsActiveFlag_TXIS>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d004      	beq.n	8001a94 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4809      	ldr	r0, [pc, #36]	; (8001ab4 <i2c_master_write+0x84>)
 8001a90:	f7ff ff1f 	bl	80018d2 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001a94:	4807      	ldr	r0, [pc, #28]	; (8001ab4 <i2c_master_write+0x84>)
 8001a96:	f7ff feb6 	bl	8001806 <LL_I2C_IsActiveFlag_STOP>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0ee      	beq.n	8001a7e <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <i2c_master_write+0x84>)
 8001aa2:	f7ff fec3 	bl	800182c <LL_I2C_ClearFlag_STOP>
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd90      	pop	{r4, r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	80002000 	.word	0x80002000
 8001ab4:	40005400 	.word	0x40005400

08001ab8 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af02      	add	r7, sp, #8
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	4608      	mov	r0, r1
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	70fb      	strb	r3, [r7, #3]
 8001aca:	460b      	mov	r3, r1
 8001acc:	70bb      	strb	r3, [r7, #2]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8001ad2:	4a30      	ldr	r2, [pc, #192]	; (8001b94 <i2c_master_read+0xdc>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8001ad8:	7c3b      	ldrb	r3, [r7, #16]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8001ade:	78bb      	ldrb	r3, [r7, #2]
 8001ae0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ae4:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8001ae6:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <i2c_master_read+0xe0>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001aec:	482b      	ldr	r0, [pc, #172]	; (8001b9c <i2c_master_read+0xe4>)
 8001aee:	f7ff fe44 	bl	800177a <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001af2:	7879      	ldrb	r1, [r7, #1]
 8001af4:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <i2c_master_read+0xe8>)
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2301      	movs	r3, #1
 8001b00:	2200      	movs	r2, #0
 8001b02:	4826      	ldr	r0, [pc, #152]	; (8001b9c <i2c_master_read+0xe4>)
 8001b04:	f7ff feb2 	bl	800186c <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001b08:	e00a      	b.n	8001b20 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001b0a:	4824      	ldr	r0, [pc, #144]	; (8001b9c <i2c_master_read+0xe4>)
 8001b0c:	f7ff fe55 	bl	80017ba <LL_I2C_IsActiveFlag_TXIS>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d004      	beq.n	8001b20 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8001b16:	78bb      	ldrb	r3, [r7, #2]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4820      	ldr	r0, [pc, #128]	; (8001b9c <i2c_master_read+0xe4>)
 8001b1c:	f7ff fed9 	bl	80018d2 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001b20:	481e      	ldr	r0, [pc, #120]	; (8001b9c <i2c_master_read+0xe4>)
 8001b22:	f7ff fe70 	bl	8001806 <LL_I2C_IsActiveFlag_STOP>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0ee      	beq.n	8001b0a <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001b2c:	481b      	ldr	r0, [pc, #108]	; (8001b9c <i2c_master_read+0xe4>)
 8001b2e:	f7ff fe7d 	bl	800182c <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8001b32:	bf00      	nop
 8001b34:	4819      	ldr	r0, [pc, #100]	; (8001b9c <i2c_master_read+0xe4>)
 8001b36:	f7ff fe66 	bl	8001806 <LL_I2C_IsActiveFlag_STOP>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f9      	bne.n	8001b34 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001b40:	7879      	ldrb	r1, [r7, #1]
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <i2c_master_read+0xec>)
 8001b46:	9201      	str	r2, [sp, #4]
 8001b48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b4c:	9200      	str	r2, [sp, #0]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	4812      	ldr	r0, [pc, #72]	; (8001b9c <i2c_master_read+0xe4>)
 8001b52:	f7ff fe8b 	bl	800186c <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001b56:	bf00      	nop
 8001b58:	4810      	ldr	r0, [pc, #64]	; (8001b9c <i2c_master_read+0xe4>)
 8001b5a:	f7ff fe54 	bl	8001806 <LL_I2C_IsActiveFlag_STOP>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f9      	beq.n	8001b58 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8001b64:	480d      	ldr	r0, [pc, #52]	; (8001b9c <i2c_master_read+0xe4>)
 8001b66:	f7ff fe61 	bl	800182c <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8001b6a:	480c      	ldr	r0, [pc, #48]	; (8001b9c <i2c_master_read+0xe4>)
 8001b6c:	f7ff fe15 	bl	800179a <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <i2c_master_read+0xe4>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <i2c_master_read+0xe4>)
 8001b76:	f043 0310 	orr.w	r3, r3, #16
 8001b7a:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <i2c_master_read+0xf0>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <i2c_master_read+0xe0>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8001b88:	4b02      	ldr	r3, [pc, #8]	; (8001b94 <i2c_master_read+0xdc>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000028 	.word	0x20000028
 8001b98:	20000026 	.word	0x20000026
 8001b9c:	40005400 	.word	0x40005400
 8001ba0:	80002000 	.word	0x80002000
 8001ba4:	80002400 	.word	0x80002400
 8001ba8:	20000027 	.word	0x20000027

08001bac <I2C1_EV_IRQHandler>:
	(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
	end_of_read_flag = 0;
}

void I2C1_EV_IRQHandler(void)
{
 8001bac:	b598      	push	{r3, r4, r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
  /* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001bb0:	4812      	ldr	r0, [pc, #72]	; (8001bfc <I2C1_EV_IRQHandler+0x50>)
 8001bb2:	f7ff fe15 	bl	80017e0 <LL_I2C_IsActiveFlag_RXNE>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d01c      	beq.n	8001bf6 <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001bbc:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <I2C1_EV_IRQHandler+0x54>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <I2C1_EV_IRQHandler+0x58>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	1c59      	adds	r1, r3, #1
 8001bc8:	b2c8      	uxtb	r0, r1
 8001bca:	490e      	ldr	r1, [pc, #56]	; (8001c04 <I2C1_EV_IRQHandler+0x58>)
 8001bcc:	7008      	strb	r0, [r1, #0]
 8001bce:	18d4      	adds	r4, r2, r3
 8001bd0:	480a      	ldr	r0, [pc, #40]	; (8001bfc <I2C1_EV_IRQHandler+0x50>)
 8001bd2:	f7ff fe71 	bl	80018b8 <LL_I2C_ReceiveData8>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <I2C1_EV_IRQHandler+0x58>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b13      	cmp	r3, #19
 8001be2:	d903      	bls.n	8001bec <I2C1_EV_IRQHandler+0x40>
 8001be4:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <I2C1_EV_IRQHandler+0x58>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	e001      	b.n	8001bf0 <I2C1_EV_IRQHandler+0x44>
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <I2C1_EV_IRQHandler+0x58>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <I2C1_EV_IRQHandler+0x5c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd98      	pop	{r3, r4, r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40005400 	.word	0x40005400
 8001c00:	20000028 	.word	0x20000028
 8001c04:	20000027 	.word	0x20000027
 8001c08:	20000026 	.word	0x20000026

08001c0c <lsm6ds0_read_byte>:
#include "lps25hb.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af02      	add	r7, sp, #8
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <lsm6ds0_read_byte+0x30>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	79fa      	ldrb	r2, [r7, #7]
 8001c20:	f107 000f 	add.w	r0, r7, #15
 8001c24:	2100      	movs	r1, #0
 8001c26:	9100      	str	r1, [sp, #0]
 8001c28:	2101      	movs	r1, #1
 8001c2a:	f7ff ff45 	bl	8001ab8 <i2c_master_read>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	781b      	ldrb	r3, [r3, #0]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000001 	.word	0x20000001

08001c40 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	460a      	mov	r2, r1
 8001c4a:	71fb      	strb	r3, [r7, #7]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <lsm6ds0_write_byte+0x28>)
 8001c52:	781a      	ldrb	r2, [r3, #0]
 8001c54:	79f9      	ldrb	r1, [r7, #7]
 8001c56:	79b8      	ldrb	r0, [r7, #6]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f7ff fee9 	bl	8001a30 <i2c_master_write>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000001 	.word	0x20000001

08001c6c <lsm6ds0_readArray>:


void lsm6ds0_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres, 1);
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <lsm6ds0_readArray+0x2c>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	78fa      	ldrb	r2, [r7, #3]
 8001c82:	78b9      	ldrb	r1, [r7, #2]
 8001c84:	2001      	movs	r0, #1
 8001c86:	9000      	str	r0, [sp, #0]
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff15 	bl	8001ab8 <i2c_master_read>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000001 	.word	0x20000001

08001c9c <lsm6ds0_get_acc>:
	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
}


void lsm6ds0_get_acc(float* x, float* y, float* z)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
	int16_t xx, yy, zz;

	uint8_t temp;

	//get current scale and use it for final calculation
    temp = lsm6ds0_read_byte(LSM6DS0_ADDRESS_CTRL1);
 8001ca8:	2010      	movs	r0, #16
 8001caa:	f7ff ffaf 	bl	8001c0c <lsm6ds0_read_byte>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	77fb      	strb	r3, [r7, #31]

	temp = temp >> 2;
 8001cb2:	7ffb      	ldrb	r3, [r7, #31]
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	77fb      	strb	r3, [r7, #31]
    temp &= 0x03;			//full scale bits exctracted
 8001cb8:	7ffb      	ldrb	r3, [r7, #31]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	77fb      	strb	r3, [r7, #31]

	lsm6ds0_readArray(data, LSM6DS0_ADDRESS_ACCX, 6);
 8001cc0:	f107 0310 	add.w	r3, r7, #16
 8001cc4:	2206      	movs	r2, #6
 8001cc6:	2128      	movs	r1, #40	; 0x28
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ffcf 	bl	8001c6c <lsm6ds0_readArray>

	xx = ((uint16_t)data[1]) << 8 | data[0];
 8001cce:	7c7b      	ldrb	r3, [r7, #17]
 8001cd0:	021b      	lsls	r3, r3, #8
 8001cd2:	b21a      	sxth	r2, r3
 8001cd4:	7c3b      	ldrb	r3, [r7, #16]
 8001cd6:	b21b      	sxth	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	83bb      	strh	r3, [r7, #28]
	yy = ((uint16_t)data[3]) << 8 | data[2];
 8001cdc:	7cfb      	ldrb	r3, [r7, #19]
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	7cbb      	ldrb	r3, [r7, #18]
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	837b      	strh	r3, [r7, #26]
	zz = ((uint16_t)data[5]) << 8 | data[4];
 8001cea:	7d7b      	ldrb	r3, [r7, #21]
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	b21a      	sxth	r2, r3
 8001cf0:	7d3b      	ldrb	r3, [r7, #20]
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	833b      	strh	r3, [r7, #24]

	*x = (xx >> 4) / 1000.0f;
 8001cf8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cfc:	111b      	asrs	r3, r3, #4
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	ee07 3a90 	vmov	s15, r3
 8001d04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d08:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001d5c <lsm6ds0_get_acc+0xc0>
 8001d0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	edc3 7a00 	vstr	s15, [r3]
	*y = (yy >> 4) / 1000.0f;
 8001d16:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d1a:	111b      	asrs	r3, r3, #4
 8001d1c:	b21b      	sxth	r3, r3
 8001d1e:	ee07 3a90 	vmov	s15, r3
 8001d22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d26:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001d5c <lsm6ds0_get_acc+0xc0>
 8001d2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	edc3 7a00 	vstr	s15, [r3]
	*z = (zz >> 4) / 1000.0f;
 8001d34:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001d38:	111b      	asrs	r3, r3, #4
 8001d3a:	b21b      	sxth	r3, r3
 8001d3c:	ee07 3a90 	vmov	s15, r3
 8001d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d44:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001d5c <lsm6ds0_get_acc+0xc0>
 8001d48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	edc3 7a00 	vstr	s15, [r3]
}
 8001d52:	bf00      	nop
 8001d54:	3720      	adds	r7, #32
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	447a0000 	.word	0x447a0000

08001d60 <lsm6ds0_init>:


uint8_t lsm6ds0_init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8001d6a:	2064      	movs	r0, #100	; 0x64
 8001d6c:	f001 fafa 	bl	8003364 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8001d70:	200f      	movs	r0, #15
 8001d72:	f7ff ff4b 	bl	8001c0c <lsm6ds0_read_byte>
 8001d76:	4603      	mov	r3, r0
 8001d78:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 8001d7a:	79bb      	ldrb	r3, [r7, #6]
 8001d7c:	2b68      	cmp	r3, #104	; 0x68
 8001d7e:	d102      	bne.n	8001d86 <lsm6ds0_init+0x26>
	{
		status = 1;
 8001d80:	2301      	movs	r3, #1
 8001d82:	71fb      	strb	r3, [r7, #7]
 8001d84:	e00f      	b.n	8001da6 <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <lsm6ds0_init+0x60>)
 8001d88:	22d6      	movs	r2, #214	; 0xd6
 8001d8a:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8001d8c:	200f      	movs	r0, #15
 8001d8e:	f7ff ff3d 	bl	8001c0c <lsm6ds0_read_byte>
 8001d92:	4603      	mov	r3, r0
 8001d94:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 8001d96:	79bb      	ldrb	r3, [r7, #6]
 8001d98:	2b68      	cmp	r3, #104	; 0x68
 8001d9a:	d102      	bne.n	8001da2 <lsm6ds0_init+0x42>
		{
			status = 1;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	71fb      	strb	r3, [r7, #7]
 8001da0:	e001      	b.n	8001da6 <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8001daa:	797b      	ldrb	r3, [r7, #5]
 8001dac:	4619      	mov	r1, r3
 8001dae:	2010      	movs	r0, #16
 8001db0:	f7ff ff46 	bl	8001c40 <lsm6ds0_write_byte>

	return status;
 8001db4:	79fb      	ldrb	r3, [r7, #7]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000001 	.word	0x20000001

08001dc4 <__NVIC_SetPriorityGrouping>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de0:	4013      	ands	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df6:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	60d3      	str	r3, [r2, #12]
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <LL_RCC_HSI_Enable+0x1c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <LL_RCC_HSI_Enable+0x1c>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6013      	str	r3, [r2, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000

08001e2c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <LL_RCC_HSI_IsReady+0x20>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	bf0c      	ite	eq
 8001e3c:	2301      	moveq	r3, #1
 8001e3e:	2300      	movne	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	40021000 	.word	0x40021000

08001e50 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001e58:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4904      	ldr	r1, [pc, #16]	; (8001e78 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000

08001e7c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <LL_RCC_SetSysClkSource+0x24>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f023 0203 	bic.w	r2, r3, #3
 8001e8c:	4904      	ldr	r1, [pc, #16]	; (8001ea0 <LL_RCC_SetSysClkSource+0x24>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	604b      	str	r3, [r1, #4]
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ea8:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <LL_RCC_GetSysClkSource+0x18>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 030c 	and.w	r3, r3, #12
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000

08001ec0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <LL_RCC_SetAHBPrescaler+0x24>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed0:	4904      	ldr	r1, [pc, #16]	; (8001ee4 <LL_RCC_SetAHBPrescaler+0x24>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef8:	4904      	ldr	r1, [pc, #16]	; (8001f0c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	40021000 	.word	0x40021000

08001f10 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f20:	4904      	ldr	r1, [pc, #16]	; (8001f34 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40021000 	.word	0x40021000

08001f38 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <LL_RCC_SetI2CClockSource+0x2c>)
 8001f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	0e1b      	lsrs	r3, r3, #24
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001f52:	4904      	ldr	r1, [pc, #16]	; (8001f64 <LL_RCC_SetI2CClockSource+0x2c>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	40021000 	.word	0x40021000

08001f68 <LL_APB1_GRP1_EnableClock>:
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f72:	69da      	ldr	r2, [r3, #28]
 8001f74:	4907      	ldr	r1, [pc, #28]	; (8001f94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f7e:	69da      	ldr	r2, [r3, #28]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4013      	ands	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f86:	68fb      	ldr	r3, [r7, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	40021000 	.word	0x40021000

08001f98 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001fa2:	699a      	ldr	r2, [r3, #24]
 8001fa4:	4907      	ldr	r1, [pc, #28]	; (8001fc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001fae:	699a      	ldr	r2, [r3, #24]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40021000 	.word	0x40021000

08001fc8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <LL_FLASH_SetLatency+0x24>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f023 0207 	bic.w	r2, r3, #7
 8001fd8:	4904      	ldr	r1, [pc, #16]	; (8001fec <LL_FLASH_SetLatency+0x24>)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	40022000 	.word	0x40022000

08001ff0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001ff4:	4b04      	ldr	r3, [pc, #16]	; (8002008 <LL_FLASH_GetLatency+0x18>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40022000 	.word	0x40022000

0800200c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	601a      	str	r2, [r3, #0]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_TIM_EnableIT_CC2>:
  * @rmtoll DIER         CC2IE         LL_TIM_EnableIT_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2IE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f043 0204 	orr.w	r2, r3, #4
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	60da      	str	r2, [r3, #12]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002050:	2001      	movs	r0, #1
 8002052:	f7ff ffa1 	bl	8001f98 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002056:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800205a:	f7ff ff85 	bl	8001f68 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800205e:	2003      	movs	r0, #3
 8002060:	f7ff feb0 	bl	8001dc4 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002064:	f000 f82c 	bl	80020c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002068:	f7ff fa5e 	bl	8001528 <MX_GPIO_Init>
  MX_TIM2_Init();
 800206c:	f000 fa1c 	bl	80024a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002070:	f000 fa7c 	bl	800256c <MX_TIM3_Init>
  MX_I2C1_Init();
 8002074:	f7ff fc6c 	bl	8001950 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableIT_CC2(TIM2);
 8002078:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800207c:	f7ff ffd6 	bl	800202c <LL_TIM_EnableIT_CC2>
  LL_TIM_EnableCounter(TIM2);
 8002080:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002084:	f7ff ffc2 	bl	800200c <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_CC2(TIM3);
 8002088:	4809      	ldr	r0, [pc, #36]	; (80020b0 <main+0x64>)
 800208a:	f7ff ffcf 	bl	800202c <LL_TIM_EnableIT_CC2>
  LL_TIM_EnableCounter(TIM3);
 800208e:	4808      	ldr	r0, [pc, #32]	; (80020b0 <main+0x64>)
 8002090:	f7ff ffbc 	bl	800200c <LL_TIM_EnableCounter>

  resetAllDigits();
 8002094:	f7fe fb0c 	bl	80006b0 <resetAllDigits>

  lsm6ds0_init();
 8002098:	f7ff fe62 	bl	8001d60 <lsm6ds0_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //DIGIT_2_ON;
	  //setAllSegments();
	  lsm6ds0_get_acc(acc, (acc+1), (acc+2));
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <main+0x68>)
 800209e:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <main+0x6c>)
 80020a0:	4619      	mov	r1, r3
 80020a2:	4806      	ldr	r0, [pc, #24]	; (80020bc <main+0x70>)
 80020a4:	f7ff fdfa 	bl	8001c9c <lsm6ds0_get_acc>
	  LL_mDelay(50);
 80020a8:	2032      	movs	r0, #50	; 0x32
 80020aa:	f001 f95b 	bl	8003364 <LL_mDelay>
	  lsm6ds0_get_acc(acc, (acc+1), (acc+2));
 80020ae:	e7f5      	b.n	800209c <main+0x50>
 80020b0:	40000400 	.word	0x40000400
 80020b4:	20000030 	.word	0x20000030
 80020b8:	20000034 	.word	0x20000034
 80020bc:	2000002c 	.word	0x2000002c

080020c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7ff ff7f 	bl	8001fc8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80020ca:	bf00      	nop
 80020cc:	f7ff ff90 	bl	8001ff0 <LL_FLASH_GetLatency>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1fa      	bne.n	80020cc <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80020d6:	f7ff fe99 	bl	8001e0c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80020da:	bf00      	nop
 80020dc:	f7ff fea6 	bl	8001e2c <LL_RCC_HSI_IsReady>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d1fa      	bne.n	80020dc <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80020e6:	2010      	movs	r0, #16
 80020e8:	f7ff feb2 	bl	8001e50 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80020ec:	2000      	movs	r0, #0
 80020ee:	f7ff fee7 	bl	8001ec0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80020f2:	2000      	movs	r0, #0
 80020f4:	f7ff fef8 	bl	8001ee8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80020f8:	2000      	movs	r0, #0
 80020fa:	f7ff ff09 	bl	8001f10 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80020fe:	2000      	movs	r0, #0
 8002100:	f7ff febc 	bl	8001e7c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8002104:	bf00      	nop
 8002106:	f7ff fecd 	bl	8001ea4 <LL_RCC_GetSysClkSource>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1fa      	bne.n	8002106 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8002110:	4805      	ldr	r0, [pc, #20]	; (8002128 <SystemClock_Config+0x68>)
 8002112:	f001 f919 	bl	8003348 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8002116:	4804      	ldr	r0, [pc, #16]	; (8002128 <SystemClock_Config+0x68>)
 8002118:	f001 f94a 	bl	80033b0 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 800211c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002120:	f7ff ff0a 	bl	8001f38 <LL_RCC_SetI2CClockSource>
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	007a1200 	.word	0x007a1200

0800212c <LL_TIM_ClearFlag_UPDATE>:
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f06f 0201 	mvn.w	r2, #1
 800213a:	611a      	str	r2, [r3, #16]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <NMI_Handler+0x4>

08002174 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <HardFault_Handler+0x4>

0800217a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <MemManage_Handler+0x4>

08002180 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <BusFault_Handler+0x4>

08002186 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800218a:	e7fe      	b.n	800218a <UsageFault_Handler+0x4>

0800218c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 80021c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80021cc:	f7ff ffbc 	bl	8002148 <LL_TIM_IsActiveFlag_UPDATE>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <TIM2_IRQHandler+0x16>
		shiftDisplayText();
 80021d6:	f7fe f8a1 	bl	800031c <shiftDisplayText>
	}

	LL_TIM_ClearFlag_UPDATE(TIM2);
 80021da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80021de:	f7ff ffa5 	bl	800212c <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3)){
 80021ec:	4806      	ldr	r0, [pc, #24]	; (8002208 <TIM3_IRQHandler+0x20>)
 80021ee:	f7ff ffab 	bl	8002148 <LL_TIM_IsActiveFlag_UPDATE>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <TIM3_IRQHandler+0x14>
		updateDisplay();
 80021f8:	f7fe f802 	bl	8000200 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <TIM3_IRQHandler+0x20>)
 80021fe:	f7ff ff95 	bl	800212c <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40000400 	.word	0x40000400

0800220c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <SystemInit+0x20>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	4a05      	ldr	r2, [pc, #20]	; (800222c <SystemInit+0x20>)
 8002218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800221c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <__NVIC_GetPriorityGrouping>:
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <__NVIC_GetPriorityGrouping+0x18>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	f003 0307 	and.w	r3, r3, #7
}
 800223e:	4618      	mov	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <__NVIC_EnableIRQ>:
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	2b00      	cmp	r3, #0
 800225c:	db0b      	blt.n	8002276 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	f003 021f 	and.w	r2, r3, #31
 8002264:	4907      	ldr	r1, [pc, #28]	; (8002284 <__NVIC_EnableIRQ+0x38>)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	2001      	movs	r0, #1
 800226e:	fa00 f202 	lsl.w	r2, r0, r2
 8002272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000e100 	.word	0xe000e100

08002288 <__NVIC_SetPriority>:
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002298:	2b00      	cmp	r3, #0
 800229a:	db0a      	blt.n	80022b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	490c      	ldr	r1, [pc, #48]	; (80022d4 <__NVIC_SetPriority+0x4c>)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	0112      	lsls	r2, r2, #4
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	440b      	add	r3, r1
 80022ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022b0:	e00a      	b.n	80022c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4908      	ldr	r1, [pc, #32]	; (80022d8 <__NVIC_SetPriority+0x50>)
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	3b04      	subs	r3, #4
 80022c0:	0112      	lsls	r2, r2, #4
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	440b      	add	r3, r1
 80022c6:	761a      	strb	r2, [r3, #24]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000e100 	.word	0xe000e100
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <NVIC_EncodePriority>:
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	; 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f1c3 0307 	rsb	r3, r3, #7
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	bf28      	it	cs
 80022fa:	2304      	movcs	r3, #4
 80022fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3304      	adds	r3, #4
 8002302:	2b06      	cmp	r3, #6
 8002304:	d902      	bls.n	800230c <NVIC_EncodePriority+0x30>
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3b03      	subs	r3, #3
 800230a:	e000      	b.n	800230e <NVIC_EncodePriority+0x32>
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	f04f 32ff 	mov.w	r2, #4294967295
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43da      	mvns	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	401a      	ands	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002324:	f04f 31ff 	mov.w	r1, #4294967295
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	43d9      	mvns	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	4313      	orrs	r3, r2
}
 8002336:	4618      	mov	r0, r3
 8002338:	3724      	adds	r7, #36	; 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <LL_APB1_GRP1_EnableClock>:
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800234c:	4b08      	ldr	r3, [pc, #32]	; (8002370 <LL_APB1_GRP1_EnableClock+0x2c>)
 800234e:	69da      	ldr	r2, [r3, #28]
 8002350:	4907      	ldr	r1, [pc, #28]	; (8002370 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4313      	orrs	r3, r2
 8002356:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <LL_APB1_GRP1_EnableClock+0x2c>)
 800235a:	69da      	ldr	r2, [r3, #28]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4013      	ands	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002362:	68fb      	ldr	r3, [r7, #12]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	40021000 	.word	0x40021000

08002374 <LL_TIM_DisableARRPreload>:
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	601a      	str	r2, [r3, #0]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_TIM_OC_DisableFast>:
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d028      	beq.n	80023f6 <LL_TIM_OC_DisableFast+0x62>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d023      	beq.n	80023f2 <LL_TIM_OC_DisableFast+0x5e>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b10      	cmp	r3, #16
 80023ae:	d01e      	beq.n	80023ee <LL_TIM_OC_DisableFast+0x5a>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	2b40      	cmp	r3, #64	; 0x40
 80023b4:	d019      	beq.n	80023ea <LL_TIM_OC_DisableFast+0x56>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023bc:	d013      	beq.n	80023e6 <LL_TIM_OC_DisableFast+0x52>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c4:	d00d      	beq.n	80023e2 <LL_TIM_OC_DisableFast+0x4e>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023cc:	d007      	beq.n	80023de <LL_TIM_OC_DisableFast+0x4a>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d4:	d101      	bne.n	80023da <LL_TIM_OC_DisableFast+0x46>
 80023d6:	2307      	movs	r3, #7
 80023d8:	e00e      	b.n	80023f8 <LL_TIM_OC_DisableFast+0x64>
 80023da:	2308      	movs	r3, #8
 80023dc:	e00c      	b.n	80023f8 <LL_TIM_OC_DisableFast+0x64>
 80023de:	2306      	movs	r3, #6
 80023e0:	e00a      	b.n	80023f8 <LL_TIM_OC_DisableFast+0x64>
 80023e2:	2305      	movs	r3, #5
 80023e4:	e008      	b.n	80023f8 <LL_TIM_OC_DisableFast+0x64>
 80023e6:	2304      	movs	r3, #4
 80023e8:	e006      	b.n	80023f8 <LL_TIM_OC_DisableFast+0x64>
 80023ea:	2303      	movs	r3, #3
 80023ec:	e004      	b.n	80023f8 <LL_TIM_OC_DisableFast+0x64>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e002      	b.n	80023f8 <LL_TIM_OC_DisableFast+0x64>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <LL_TIM_OC_DisableFast+0x64>
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3318      	adds	r3, #24
 80023fe:	4619      	mov	r1, r3
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <LL_TIM_OC_DisableFast+0x9c>)
 8002404:	5cd3      	ldrb	r3, [r2, r3]
 8002406:	440b      	add	r3, r1
 8002408:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	4908      	ldr	r1, [pc, #32]	; (8002434 <LL_TIM_OC_DisableFast+0xa0>)
 8002412:	5ccb      	ldrb	r3, [r1, r3]
 8002414:	4619      	mov	r1, r3
 8002416:	2304      	movs	r3, #4
 8002418:	408b      	lsls	r3, r1
 800241a:	43db      	mvns	r3, r3
 800241c:	401a      	ands	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	601a      	str	r2, [r3, #0]
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	08003454 	.word	0x08003454
 8002434:	08003460 	.word	0x08003460

08002438 <LL_TIM_SetClockSource>:
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800244a:	f023 0307 	bic.w	r3, r3, #7
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	609a      	str	r2, [r3, #8]
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <LL_TIM_SetTriggerOutput>:
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	605a      	str	r2, [r3, #4]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_TIM_DisableMasterSlaveMode>:
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	609a      	str	r2, [r3, #8]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08e      	sub	sp, #56	; 0x38
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80024ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	60da      	str	r2, [r3, #12]
 80024bc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	2220      	movs	r2, #32
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 ffa7 	bl	8003418 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80024ca:	2001      	movs	r0, #1
 80024cc:	f7ff ff3a 	bl	8002344 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80024d0:	f7ff feae 	bl	8002230 <__NVIC_GetPriorityGrouping>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fefe 	bl	80022dc <NVIC_EncodePriority>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4619      	mov	r1, r3
 80024e4:	201c      	movs	r0, #28
 80024e6:	f7ff fecf 	bl	8002288 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80024ea:	201c      	movs	r0, #28
 80024ec:	f7ff feae 	bl	800224c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 80024f0:	f240 331f 	movw	r3, #799	; 0x31f
 80024f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80024f6:	2300      	movs	r3, #0
 80024f8:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 4999;
 80024fa:	f241 3387 	movw	r3, #4999	; 0x1387
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002500:	2300      	movs	r3, #0
 8002502:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002508:	4619      	mov	r1, r3
 800250a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800250e:	f000 fb97 	bl	8002c40 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002512:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002516:	f7ff ff2d 	bl	8002374 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800251a:	2100      	movs	r1, #0
 800251c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002520:	f7ff ff8a 	bl	8002438 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8002524:	2300      	movs	r3, #0
 8002526:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	461a      	mov	r2, r3
 800253c:	2101      	movs	r1, #1
 800253e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002542:	f000 fbef 	bl	8002d24 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8002546:	2101      	movs	r1, #1
 8002548:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800254c:	f7ff ff22 	bl	8002394 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002550:	2100      	movs	r1, #0
 8002552:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002556:	f7ff ff84 	bl	8002462 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800255a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800255e:	f7ff ff93 	bl	8002488 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002562:	bf00      	nop
 8002564:	3738      	adds	r7, #56	; 0x38
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08e      	sub	sp, #56	; 0x38
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	609a      	str	r2, [r3, #8]
 800257e:	60da      	str	r2, [r3, #12]
 8002580:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	2220      	movs	r2, #32
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f000 ff45 	bl	8003418 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800258e:	2002      	movs	r0, #2
 8002590:	f7ff fed8 	bl	8002344 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002594:	f7ff fe4c 	bl	8002230 <__NVIC_GetPriorityGrouping>
 8002598:	4603      	mov	r3, r0
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fe9c 	bl	80022dc <NVIC_EncodePriority>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4619      	mov	r1, r3
 80025a8:	201d      	movs	r0, #29
 80025aa:	f7ff fe6d 	bl	8002288 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80025ae:	201d      	movs	r0, #29
 80025b0:	f7ff fe4c 	bl	800224c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 80025b4:	f240 331f 	movw	r3, #799	; 0x31f
 80025b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80025ba:	2300      	movs	r3, #0
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 99;
 80025be:	2363      	movs	r3, #99	; 0x63
 80025c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80025c2:	2300      	movs	r3, #0
 80025c4:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80025c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ca:	4619      	mov	r1, r3
 80025cc:	4814      	ldr	r0, [pc, #80]	; (8002620 <MX_TIM3_Init+0xb4>)
 80025ce:	f000 fb37 	bl	8002c40 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80025d2:	4813      	ldr	r0, [pc, #76]	; (8002620 <MX_TIM3_Init+0xb4>)
 80025d4:	f7ff fece 	bl	8002374 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80025d8:	2100      	movs	r1, #0
 80025da:	4811      	ldr	r0, [pc, #68]	; (8002620 <MX_TIM3_Init+0xb4>)
 80025dc:	f7ff ff2c 	bl	8002438 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 80025e0:	2300      	movs	r3, #0
 80025e2:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	461a      	mov	r2, r3
 80025f8:	2101      	movs	r1, #1
 80025fa:	4809      	ldr	r0, [pc, #36]	; (8002620 <MX_TIM3_Init+0xb4>)
 80025fc:	f000 fb92 	bl	8002d24 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002600:	2101      	movs	r1, #1
 8002602:	4807      	ldr	r0, [pc, #28]	; (8002620 <MX_TIM3_Init+0xb4>)
 8002604:	f7ff fec6 	bl	8002394 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002608:	2100      	movs	r1, #0
 800260a:	4805      	ldr	r0, [pc, #20]	; (8002620 <MX_TIM3_Init+0xb4>)
 800260c:	f7ff ff29 	bl	8002462 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002610:	4803      	ldr	r0, [pc, #12]	; (8002620 <MX_TIM3_Init+0xb4>)
 8002612:	f7ff ff39 	bl	8002488 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002616:	bf00      	nop
 8002618:	3738      	adds	r7, #56	; 0x38
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40000400 	.word	0x40000400

08002624 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800265c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002628:	480d      	ldr	r0, [pc, #52]	; (8002660 <LoopForever+0x6>)
  ldr r1, =_edata
 800262a:	490e      	ldr	r1, [pc, #56]	; (8002664 <LoopForever+0xa>)
  ldr r2, =_sidata
 800262c:	4a0e      	ldr	r2, [pc, #56]	; (8002668 <LoopForever+0xe>)
  movs r3, #0
 800262e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002630:	e002      	b.n	8002638 <LoopCopyDataInit>

08002632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002636:	3304      	adds	r3, #4

08002638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800263a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800263c:	d3f9      	bcc.n	8002632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800263e:	4a0b      	ldr	r2, [pc, #44]	; (800266c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002640:	4c0b      	ldr	r4, [pc, #44]	; (8002670 <LoopForever+0x16>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002644:	e001      	b.n	800264a <LoopFillZerobss>

08002646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002648:	3204      	adds	r2, #4

0800264a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800264a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800264c:	d3fb      	bcc.n	8002646 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800264e:	f7ff fddd 	bl	800220c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002652:	f000 febd 	bl	80033d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002656:	f7ff fcf9 	bl	800204c <main>

0800265a <LoopForever>:

LoopForever:
    b LoopForever
 800265a:	e7fe      	b.n	800265a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800265c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002664:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8002668:	08003474 	.word	0x08003474
  ldr r2, =_sbss
 800266c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8002670:	20000044 	.word	0x20000044

08002674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002674:	e7fe      	b.n	8002674 <ADC1_2_IRQHandler>

08002676 <LL_GPIO_SetPinMode>:
{
 8002676:	b480      	push	{r7}
 8002678:	b089      	sub	sp, #36	; 0x24
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	2103      	movs	r1, #3
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	401a      	ands	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	61bb      	str	r3, [r7, #24]
  return result;
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	431a      	orrs	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	601a      	str	r2, [r3, #0]
}
 80026c8:	bf00      	nop
 80026ca:	3724      	adds	r7, #36	; 0x24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <LL_GPIO_SetPinOutputType>:
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	401a      	ands	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	431a      	orrs	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	605a      	str	r2, [r3, #4]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_GPIO_SetPinSpeed>:
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	; 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	613b      	str	r3, [r7, #16]
  return result;
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	2103      	movs	r1, #3
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	401a      	ands	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	61bb      	str	r3, [r7, #24]
  return result;
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
 8002750:	431a      	orrs	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	609a      	str	r2, [r3, #8]
}
 8002756:	bf00      	nop
 8002758:	3724      	adds	r7, #36	; 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <LL_GPIO_SetPinPull>:
{
 8002762:	b480      	push	{r7}
 8002764:	b089      	sub	sp, #36	; 0x24
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	613b      	str	r3, [r7, #16]
  return result;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	fab3 f383 	clz	r3, r3
 8002784:	b2db      	uxtb	r3, r3
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	2103      	movs	r1, #3
 800278a:	fa01 f303 	lsl.w	r3, r1, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	401a      	ands	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	61bb      	str	r3, [r7, #24]
  return result;
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	431a      	orrs	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	60da      	str	r2, [r3, #12]
}
 80027b4:	bf00      	nop
 80027b6:	3724      	adds	r7, #36	; 0x24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_GPIO_SetAFPin_0_7>:
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	; 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a1a      	ldr	r2, [r3, #32]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	613b      	str	r3, [r7, #16]
  return result;
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	210f      	movs	r1, #15
 80027e8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	401a      	ands	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	fa93 f3a3 	rbit	r3, r3
 80027fa:	61bb      	str	r3, [r7, #24]
  return result;
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	431a      	orrs	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	621a      	str	r2, [r3, #32]
}
 8002812:	bf00      	nop
 8002814:	3724      	adds	r7, #36	; 0x24
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <LL_GPIO_SetAFPin_8_15>:
{
 800281e:	b480      	push	{r7}
 8002820:	b089      	sub	sp, #36	; 0x24
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	0a1b      	lsrs	r3, r3, #8
 8002832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	613b      	str	r3, [r7, #16]
  return result;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	210f      	movs	r1, #15
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	401a      	ands	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	61bb      	str	r3, [r7, #24]
  return result;
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	fab3 f383 	clz	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	fa01 f303 	lsl.w	r3, r1, r3
 800286e:	431a      	orrs	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002874:	bf00      	nop
 8002876:	3724      	adds	r7, #36	; 0x24
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	613b      	str	r3, [r7, #16]
  return result;
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80028a2:	e051      	b.n	8002948 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2101      	movs	r1, #1
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa01 f303 	lsl.w	r3, r1, r3
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d043      	beq.n	8002942 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d003      	beq.n	80028ca <LL_GPIO_Init+0x4a>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d10e      	bne.n	80028e8 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	461a      	mov	r2, r3
 80028d0:	69b9      	ldr	r1, [r7, #24]
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ff16 	bl	8002704 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6819      	ldr	r1, [r3, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	461a      	mov	r2, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff fef6 	bl	80026d4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	461a      	mov	r2, r3
 80028ee:	69b9      	ldr	r1, [r7, #24]
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff ff36 	bl	8002762 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d11a      	bne.n	8002934 <LL_GPIO_Init+0xb4>
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	60bb      	str	r3, [r7, #8]
  return result;
 800290a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800290c:	fab3 f383 	clz	r3, r3
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b07      	cmp	r3, #7
 8002914:	d807      	bhi.n	8002926 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	461a      	mov	r2, r3
 800291c:	69b9      	ldr	r1, [r7, #24]
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff ff4e 	bl	80027c0 <LL_GPIO_SetAFPin_0_7>
 8002924:	e006      	b.n	8002934 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	461a      	mov	r2, r3
 800292c:	69b9      	ldr	r1, [r7, #24]
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff ff75 	bl	800281e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	461a      	mov	r2, r3
 800293a:	69b9      	ldr	r1, [r7, #24]
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff fe9a 	bl	8002676 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3301      	adds	r3, #1
 8002946:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	fa22 f303 	lsr.w	r3, r2, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1a6      	bne.n	80028a4 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3720      	adds	r7, #32
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <LL_I2C_Enable>:
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f043 0201 	orr.w	r2, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	601a      	str	r2, [r3, #0]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_I2C_Disable>:
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f023 0201 	bic.w	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	601a      	str	r2, [r3, #0]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_I2C_ConfigFilters>:
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	0219      	lsls	r1, r3, #8
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	430b      	orrs	r3, r1
 80029bc:	431a      	orrs	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	601a      	str	r2, [r3, #0]
}
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <LL_I2C_SetOwnAddress1>:
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80029e2:	f023 0307 	bic.w	r3, r3, #7
 80029e6:	68b9      	ldr	r1, [r7, #8]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	431a      	orrs	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	609a      	str	r2, [r3, #8]
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <LL_I2C_EnableOwnAddress1>:
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	609a      	str	r2, [r3, #8]
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <LL_I2C_DisableOwnAddress1>:
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	609a      	str	r2, [r3, #8]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <LL_I2C_SetTiming>:
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	611a      	str	r2, [r3, #16]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <LL_I2C_SetMode>:
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	601a      	str	r2, [r3, #0]
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_I2C_AcknowledgeNextData>:
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	605a      	str	r2, [r3, #4]
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff ff65 	bl	8002980 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	6899      	ldr	r1, [r3, #8]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff ff6d 	bl	80029a0 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4619      	mov	r1, r3
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff ffb6 	bl	8002a3e <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff ff44 	bl	8002960 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff ffa0 	bl	8002a1e <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	6919      	ldr	r1, [r3, #16]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff ff70 	bl	80029ce <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ff81 	bl	80029fe <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff ffa9 	bl	8002a5a <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff ffb6 	bl	8002a80 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <LL_TIM_SetPrescaler>:
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <LL_TIM_SetAutoReload>:
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <LL_TIM_SetRepetitionCounter>:
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <LL_TIM_OC_SetCompareCH1>:
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <LL_TIM_OC_SetCompareCH2>:
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <LL_TIM_OC_SetCompareCH3>:
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <LL_TIM_OC_SetCompareCH4>:
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <LL_TIM_OC_SetCompareCH5>:
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <LL_TIM_OC_SetCompareCH6>:
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f043 0201 	orr.w	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	615a      	str	r2, [r3, #20]
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a2f      	ldr	r2, [pc, #188]	; (8002d10 <LL_TIM_Init+0xd0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d007      	beq.n	8002c68 <LL_TIM_Init+0x28>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5e:	d003      	beq.n	8002c68 <LL_TIM_Init+0x28>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a2c      	ldr	r2, [pc, #176]	; (8002d14 <LL_TIM_Init+0xd4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d106      	bne.n	8002c76 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a25      	ldr	r2, [pc, #148]	; (8002d10 <LL_TIM_Init+0xd0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d013      	beq.n	8002ca6 <LL_TIM_Init+0x66>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c84:	d00f      	beq.n	8002ca6 <LL_TIM_Init+0x66>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <LL_TIM_Init+0xd4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00b      	beq.n	8002ca6 <LL_TIM_Init+0x66>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a21      	ldr	r2, [pc, #132]	; (8002d18 <LL_TIM_Init+0xd8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d007      	beq.n	8002ca6 <LL_TIM_Init+0x66>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a20      	ldr	r2, [pc, #128]	; (8002d1c <LL_TIM_Init+0xdc>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d003      	beq.n	8002ca6 <LL_TIM_Init+0x66>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a1f      	ldr	r2, [pc, #124]	; (8002d20 <LL_TIM_Init+0xe0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d106      	bne.n	8002cb4 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff ff3a 	bl	8002b3a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ff26 	bl	8002b1e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <LL_TIM_Init+0xd0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00b      	beq.n	8002cf2 <LL_TIM_Init+0xb2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <LL_TIM_Init+0xd8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d007      	beq.n	8002cf2 <LL_TIM_Init+0xb2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a0d      	ldr	r2, [pc, #52]	; (8002d1c <LL_TIM_Init+0xdc>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d003      	beq.n	8002cf2 <LL_TIM_Init+0xb2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a0c      	ldr	r2, [pc, #48]	; (8002d20 <LL_TIM_Init+0xe0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d105      	bne.n	8002cfe <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff ff2c 	bl	8002b56 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff ff8d 	bl	8002c1e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40012c00 	.word	0x40012c00
 8002d14:	40000400 	.word	0x40000400
 8002d18:	40014000 	.word	0x40014000
 8002d1c:	40014400 	.word	0x40014400
 8002d20:	40014800 	.word	0x40014800

08002d24 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d3a:	d045      	beq.n	8002dc8 <LL_TIM_OC_Init+0xa4>
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d42:	d848      	bhi.n	8002dd6 <LL_TIM_OC_Init+0xb2>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4a:	d036      	beq.n	8002dba <LL_TIM_OC_Init+0x96>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d52:	d840      	bhi.n	8002dd6 <LL_TIM_OC_Init+0xb2>
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5a:	d027      	beq.n	8002dac <LL_TIM_OC_Init+0x88>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d62:	d838      	bhi.n	8002dd6 <LL_TIM_OC_Init+0xb2>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d6a:	d018      	beq.n	8002d9e <LL_TIM_OC_Init+0x7a>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d72:	d830      	bhi.n	8002dd6 <LL_TIM_OC_Init+0xb2>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d003      	beq.n	8002d82 <LL_TIM_OC_Init+0x5e>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d007      	beq.n	8002d90 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8002d80:	e029      	b.n	8002dd6 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f82d 	bl	8002de4 <OC1Config>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d8e:	e023      	b.n	8002dd8 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f8a0 	bl	8002ed8 <OC2Config>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d9c:	e01c      	b.n	8002dd8 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f917 	bl	8002fd4 <OC3Config>
 8002da6:	4603      	mov	r3, r0
 8002da8:	75fb      	strb	r3, [r7, #23]
      break;
 8002daa:	e015      	b.n	8002dd8 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f98e 	bl	80030d0 <OC4Config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	75fb      	strb	r3, [r7, #23]
      break;
 8002db8:	e00e      	b.n	8002dd8 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f9ed 	bl	800319c <OC5Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8002dc6:	e007      	b.n	8002dd8 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 fa44 	bl	8003258 <OC6Config>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8002dd4:	e000      	b.n	8002dd8 <LL_TIM_OC_Init+0xb4>
      break;
 8002dd6:	bf00      	nop
  }

  return result;
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	f023 0201 	bic.w	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0303 	bic.w	r3, r3, #3
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f023 0202 	bic.w	r2, r3, #2
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f023 0201 	bic.w	r2, r3, #1
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a20      	ldr	r2, [pc, #128]	; (8002ec8 <OC1Config+0xe4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00b      	beq.n	8002e62 <OC1Config+0x7e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a1f      	ldr	r2, [pc, #124]	; (8002ecc <OC1Config+0xe8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d007      	beq.n	8002e62 <OC1Config+0x7e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a1e      	ldr	r2, [pc, #120]	; (8002ed0 <OC1Config+0xec>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d003      	beq.n	8002e62 <OC1Config+0x7e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <OC1Config+0xf0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d11e      	bne.n	8002ea0 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f023 0208 	bic.w	r2, r3, #8
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f023 0204 	bic.w	r2, r3, #4
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff fe5d 	bl	8002b72 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40012c00 	.word	0x40012c00
 8002ecc:	40014000 	.word	0x40014000
 8002ed0:	40014400 	.word	0x40014400
 8002ed4:	40014800 	.word	0x40014800

08002ed8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	f023 0210 	bic.w	r2, r3, #16
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	6812      	ldr	r2, [r2, #0]
 8002f16:	0212      	lsls	r2, r2, #8
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f023 0220 	bic.w	r2, r3, #32
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f023 0210 	bic.w	r2, r3, #16
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a21      	ldr	r2, [pc, #132]	; (8002fc4 <OC2Config+0xec>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00b      	beq.n	8002f5c <OC2Config+0x84>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a20      	ldr	r2, [pc, #128]	; (8002fc8 <OC2Config+0xf0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d007      	beq.n	8002f5c <OC2Config+0x84>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a1f      	ldr	r2, [pc, #124]	; (8002fcc <OC2Config+0xf4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d003      	beq.n	8002f5c <OC2Config+0x84>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a1e      	ldr	r2, [pc, #120]	; (8002fd0 <OC2Config+0xf8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d11f      	bne.n	8002f9c <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	019b      	lsls	r3, r3, #6
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	019b      	lsls	r3, r3, #6
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4619      	mov	r1, r3
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff fded 	bl	8002b8e <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40012c00 	.word	0x40012c00
 8002fc8:	40014000 	.word	0x40014000
 8002fcc:	40014400 	.word	0x40014400
 8002fd0:	40014800 	.word	0x40014800

08002fd4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800300a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	021b      	lsls	r3, r3, #8
 8003032:	4313      	orrs	r3, r2
 8003034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a21      	ldr	r2, [pc, #132]	; (80030c0 <OC3Config+0xec>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00b      	beq.n	8003056 <OC3Config+0x82>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a20      	ldr	r2, [pc, #128]	; (80030c4 <OC3Config+0xf0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d007      	beq.n	8003056 <OC3Config+0x82>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a1f      	ldr	r2, [pc, #124]	; (80030c8 <OC3Config+0xf4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d003      	beq.n	8003056 <OC3Config+0x82>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a1e      	ldr	r2, [pc, #120]	; (80030cc <OC3Config+0xf8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d11f      	bne.n	8003096 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	029b      	lsls	r3, r3, #10
 8003062:	4313      	orrs	r3, r2
 8003064:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	029b      	lsls	r3, r3, #10
 8003072:	4313      	orrs	r3, r2
 8003074:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	015b      	lsls	r3, r3, #5
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	4619      	mov	r1, r3
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff fd7e 	bl	8002baa <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40012c00 	.word	0x40012c00
 80030c4:	40014000 	.word	0x40014000
 80030c8:	40014400 	.word	0x40014400
 80030cc:	40014800 	.word	0x40014800

080030d0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	0212      	lsls	r2, r2, #8
 8003110:	4313      	orrs	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	031b      	lsls	r3, r3, #12
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	031b      	lsls	r3, r3, #12
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a15      	ldr	r2, [pc, #84]	; (800318c <OC4Config+0xbc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00b      	beq.n	8003154 <OC4Config+0x84>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a14      	ldr	r2, [pc, #80]	; (8003190 <OC4Config+0xc0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d007      	beq.n	8003154 <OC4Config+0x84>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a13      	ldr	r2, [pc, #76]	; (8003194 <OC4Config+0xc4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d003      	beq.n	8003154 <OC4Config+0x84>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a12      	ldr	r2, [pc, #72]	; (8003198 <OC4Config+0xc8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d107      	bne.n	8003164 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	019b      	lsls	r3, r3, #6
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4619      	mov	r1, r3
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff fd25 	bl	8002bc6 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40012c00 	.word	0x40012c00
 8003190:	40014000 	.word	0x40014000
 8003194:	40014400 	.word	0x40014400
 8003198:	40014800 	.word	0x40014800

0800319c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031bc:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	041b      	lsls	r3, r3, #16
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	041b      	lsls	r3, r3, #16
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a15      	ldr	r2, [pc, #84]	; (8003248 <OC5Config+0xac>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00b      	beq.n	8003210 <OC5Config+0x74>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a14      	ldr	r2, [pc, #80]	; (800324c <OC5Config+0xb0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d007      	beq.n	8003210 <OC5Config+0x74>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a13      	ldr	r2, [pc, #76]	; (8003250 <OC5Config+0xb4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <OC5Config+0x74>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a12      	ldr	r2, [pc, #72]	; (8003254 <OC5Config+0xb8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d109      	bne.n	8003224 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	021b      	lsls	r3, r3, #8
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	4619      	mov	r1, r3
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff fcd6 	bl	8002be2 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40012c00 	.word	0x40012c00
 800324c:	40014000 	.word	0x40014000
 8003250:	40014400 	.word	0x40014400
 8003254:	40014800 	.word	0x40014800

08003258 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003278:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	0212      	lsls	r2, r2, #8
 800328a:	4313      	orrs	r3, r2
 800328c:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	051b      	lsls	r3, r3, #20
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	051b      	lsls	r3, r3, #20
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a14      	ldr	r2, [pc, #80]	; (8003304 <OC6Config+0xac>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00b      	beq.n	80032ce <OC6Config+0x76>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a13      	ldr	r2, [pc, #76]	; (8003308 <OC6Config+0xb0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d007      	beq.n	80032ce <OC6Config+0x76>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a12      	ldr	r2, [pc, #72]	; (800330c <OC6Config+0xb4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d003      	beq.n	80032ce <OC6Config+0x76>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a11      	ldr	r2, [pc, #68]	; (8003310 <OC6Config+0xb8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d109      	bne.n	80032e2 <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	029b      	lsls	r3, r3, #10
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4619      	mov	r1, r3
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff fc87 	bl	8002c02 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40012c00 	.word	0x40012c00
 8003308:	40014000 	.word	0x40014000
 800330c:	40014400 	.word	0x40014400
 8003310:	40014800 	.word	0x40014800

08003314 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	fbb2 f3f3 	udiv	r3, r2, r3
 8003326:	4a07      	ldr	r2, [pc, #28]	; (8003344 <LL_InitTick+0x30>)
 8003328:	3b01      	subs	r3, #1
 800332a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800332c:	4b05      	ldr	r3, [pc, #20]	; (8003344 <LL_InitTick+0x30>)
 800332e:	2200      	movs	r2, #0
 8003330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003332:	4b04      	ldr	r3, [pc, #16]	; (8003344 <LL_InitTick+0x30>)
 8003334:	2205      	movs	r2, #5
 8003336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000e010 	.word	0xe000e010

08003348 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003350:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ffdd 	bl	8003314 <LL_InitTick>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800336c:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <LL_mDelay+0x48>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003372:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	d00c      	beq.n	8003396 <LL_mDelay+0x32>
  {
    Delay++;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3301      	adds	r3, #1
 8003380:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003382:	e008      	b.n	8003396 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003384:	4b09      	ldr	r3, [pc, #36]	; (80033ac <LL_mDelay+0x48>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <LL_mDelay+0x32>
    {
      Delay--;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3b01      	subs	r3, #1
 8003394:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1f3      	bne.n	8003384 <LL_mDelay+0x20>
    }
  }
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	e000e010 	.word	0xe000e010

080033b0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80033b8:	4a04      	ldr	r2, [pc, #16]	; (80033cc <LL_SetSystemCoreClock+0x1c>)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6013      	str	r3, [r2, #0]
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000004 	.word	0x20000004

080033d0 <__libc_init_array>:
 80033d0:	b570      	push	{r4, r5, r6, lr}
 80033d2:	4d0d      	ldr	r5, [pc, #52]	; (8003408 <__libc_init_array+0x38>)
 80033d4:	4c0d      	ldr	r4, [pc, #52]	; (800340c <__libc_init_array+0x3c>)
 80033d6:	1b64      	subs	r4, r4, r5
 80033d8:	10a4      	asrs	r4, r4, #2
 80033da:	2600      	movs	r6, #0
 80033dc:	42a6      	cmp	r6, r4
 80033de:	d109      	bne.n	80033f4 <__libc_init_array+0x24>
 80033e0:	4d0b      	ldr	r5, [pc, #44]	; (8003410 <__libc_init_array+0x40>)
 80033e2:	4c0c      	ldr	r4, [pc, #48]	; (8003414 <__libc_init_array+0x44>)
 80033e4:	f000 f820 	bl	8003428 <_init>
 80033e8:	1b64      	subs	r4, r4, r5
 80033ea:	10a4      	asrs	r4, r4, #2
 80033ec:	2600      	movs	r6, #0
 80033ee:	42a6      	cmp	r6, r4
 80033f0:	d105      	bne.n	80033fe <__libc_init_array+0x2e>
 80033f2:	bd70      	pop	{r4, r5, r6, pc}
 80033f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f8:	4798      	blx	r3
 80033fa:	3601      	adds	r6, #1
 80033fc:	e7ee      	b.n	80033dc <__libc_init_array+0xc>
 80033fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003402:	4798      	blx	r3
 8003404:	3601      	adds	r6, #1
 8003406:	e7f2      	b.n	80033ee <__libc_init_array+0x1e>
 8003408:	0800346c 	.word	0x0800346c
 800340c:	0800346c 	.word	0x0800346c
 8003410:	0800346c 	.word	0x0800346c
 8003414:	08003470 	.word	0x08003470

08003418 <memset>:
 8003418:	4402      	add	r2, r0
 800341a:	4603      	mov	r3, r0
 800341c:	4293      	cmp	r3, r2
 800341e:	d100      	bne.n	8003422 <memset+0xa>
 8003420:	4770      	bx	lr
 8003422:	f803 1b01 	strb.w	r1, [r3], #1
 8003426:	e7f9      	b.n	800341c <memset+0x4>

08003428 <_init>:
 8003428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342a:	bf00      	nop
 800342c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342e:	bc08      	pop	{r3}
 8003430:	469e      	mov	lr, r3
 8003432:	4770      	bx	lr

08003434 <_fini>:
 8003434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003436:	bf00      	nop
 8003438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343a:	bc08      	pop	{r3}
 800343c:	469e      	mov	lr, r3
 800343e:	4770      	bx	lr
