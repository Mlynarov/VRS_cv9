
VRS_cv9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080050a0  080050a0  000150a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005120  08005120  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005120  08005120  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005120  08005120  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005120  08005120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000007c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009f25  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020d5  00000000  00000000  00029fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e8  00000000  00000000  0002c0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008e0  00000000  00000000  0002ca88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017857  00000000  00000000  0002d368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000827c  00000000  00000000  00044bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007ae11  00000000  00000000  0004ce3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c7c4c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c10  00000000  00000000  000c7ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005088 	.word	0x08005088

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005088 	.word	0x08005088

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <altPress_read_byte>:
#include <math.h>

uint8_t LPS_addres = LPS_DEVICE_ADDRESS	;

uint8_t altPress_read_byte(uint8_t reg_addr)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af02      	add	r7, sp, #8
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, LPS_addres, 0));
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <altPress_read_byte+0x30>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	79fa      	ldrb	r2, [r7, #7]
 8000294:	f107 000f 	add.w	r0, r7, #15
 8000298:	2100      	movs	r1, #0
 800029a:	9100      	str	r1, [sp, #0]
 800029c:	2101      	movs	r1, #1
 800029e:	f001 ff67 	bl	8002170 <i2c_master_read>
 80002a2:	4603      	mov	r3, r0
 80002a4:	781b      	ldrb	r3, [r3, #0]
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3710      	adds	r7, #16
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000000 	.word	0x20000000

080002b4 <altPress_write_byte>:
{
	i2c_master_read(data, length, reg, LPS_addres, 1);
}

void altPress_write_byte(uint8_t reg_addr, uint8_t value)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	460a      	mov	r2, r1
 80002be:	71fb      	strb	r3, [r7, #7]
 80002c0:	4613      	mov	r3, r2
 80002c2:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, LPS_addres, 0);
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <altPress_write_byte+0x28>)
 80002c6:	781a      	ldrb	r2, [r3, #0]
 80002c8:	79f9      	ldrb	r1, [r7, #7]
 80002ca:	79b8      	ldrb	r0, [r7, #6]
 80002cc:	2300      	movs	r3, #0
 80002ce:	f001 ff0b 	bl	80020e8 <i2c_master_write>
}
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000000 	.word	0x20000000

080002e0 <pressure_init>:

uint8_t pressure_init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 80002e6:	2301      	movs	r3, #1
 80002e8:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 80002ea:	2064      	movs	r0, #100	; 0x64
 80002ec:	f003 fdcc 	bl	8003e88 <LL_mDelay>

	uint8_t val = altPress_read_byte(LPS_WHO_AM_I);
 80002f0:	200f      	movs	r0, #15
 80002f2:	f7ff ffc5 	bl	8000280 <altPress_read_byte>
 80002f6:	4603      	mov	r3, r0
 80002f8:	71bb      	strb	r3, [r7, #6]

	if(val == LPS_WHO_AM_I_DEFAULT)
 80002fa:	79bb      	ldrb	r3, [r7, #6]
 80002fc:	2bbd      	cmp	r3, #189	; 0xbd
 80002fe:	d102      	bne.n	8000306 <pressure_init+0x26>
	{
		status = 1;
 8000300:	2301      	movs	r3, #1
 8000302:	71fb      	strb	r3, [r7, #7]
 8000304:	e001      	b.n	800030a <pressure_init+0x2a>
	}
	else			//if the device is not found on one address, try another one
	{
			status = 0;
 8000306:	2300      	movs	r3, #0
 8000308:	71fb      	strb	r3, [r7, #7]
			//return status;
	}

	//acc device init

	altPress_write_byte(LPS_CTRL_REG1, LPS_CTRL_REG1_SETUP);
 800030a:	2190      	movs	r1, #144	; 0x90
 800030c:	2020      	movs	r0, #32
 800030e:	f7ff ffd1 	bl	80002b4 <altPress_write_byte>

	return status;
 8000312:	79fb      	ldrb	r3, [r7, #7]
}
 8000314:	4618      	mov	r0, r3
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <get_pressure>:

float get_pressure()
{
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 uint8_t pressure_low,pressure_mid,pressure_high;
 float pressure,tmp=0;
 8000322:	f04f 0300 	mov.w	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]

 pressure_low=LPS_PRESS_OUT_XL;
 8000328:	2328      	movs	r3, #40	; 0x28
 800032a:	72fb      	strb	r3, [r7, #11]
 pressure_mid= LPS_PRESS_OUT_L;
 800032c:	2329      	movs	r3, #41	; 0x29
 800032e:	72bb      	strb	r3, [r7, #10]
 pressure_high=LPS_PRESS_OUT_H;
 8000330:	232a      	movs	r3, #42	; 0x2a
 8000332:	727b      	strb	r3, [r7, #9]

 //vypocitanie tlaku strana 15 v datasheete uvedenom v altitudePressure.h
 tmp=pressure_high << 16|pressure_mid<<8|pressure_low;
 8000334:	7a7b      	ldrb	r3, [r7, #9]
 8000336:	041a      	lsls	r2, r3, #16
 8000338:	7abb      	ldrb	r3, [r7, #10]
 800033a:	021b      	lsls	r3, r3, #8
 800033c:	431a      	orrs	r2, r3
 800033e:	7afb      	ldrb	r3, [r7, #11]
 8000340:	4313      	orrs	r3, r2
 8000342:	ee07 3a90 	vmov	s15, r3
 8000346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800034a:	edc7 7a03 	vstr	s15, [r7, #12]
 pressure=tmp/4096;
 800034e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000352:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000374 <get_pressure+0x58>
 8000356:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800035a:	edc7 7a01 	vstr	s15, [r7, #4]

 return pressure;
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	ee07 3a90 	vmov	s15, r3
}
 8000364:	eeb0 0a67 	vmov.f32	s0, s15
 8000368:	3714      	adds	r7, #20
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	45800000 	.word	0x45800000

08000378 <get_altitude>:

int16_t get_altitude(){
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
	//H = altitude (m)
	//P = measured pressure (Pa) from the sensor
	//p0 = reference pressure at sea level (e.g. 1013.25hPa)
	//altitude = 44330 *(1 - (P/p0)^(1/5.255));

	float p0=1013.25;
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <get_altitude+0x5c>)
 8000380:	60fb      	str	r3, [r7, #12]
	float P=get_pressure();
 8000382:	f7ff ffcb 	bl	800031c <get_pressure>
 8000386:	ed87 0a02 	vstr	s0, [r7, #8]
	float altitude;
	float result;

	result=powf((P/p0),(1/5.255));// powf mocnitel floatu neviem ale ci nebude lepsie to prehodit na int a normalne to umocnit
 800038a:	ed97 7a02 	vldr	s14, [r7, #8]
 800038e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000392:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000396:	eddf 0a10 	vldr	s1, [pc, #64]	; 80003d8 <get_altitude+0x60>
 800039a:	eeb0 0a66 	vmov.f32	s0, s13
 800039e:	f004 fa2f 	bl	8004800 <powf>
 80003a2:	ed87 0a01 	vstr	s0, [r7, #4]


	altitude = 44330 *(1 - result);
 80003a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80003aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80003ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80003b2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80003dc <get_altitude+0x64>
 80003b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80003ba:	edc7 7a00 	vstr	s15, [r7]

	return altitude;
 80003be:	edd7 7a00 	vldr	s15, [r7]
 80003c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80003c6:	ee17 3a90 	vmov	r3, s15
 80003ca:	b21b      	sxth	r3, r3
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3710      	adds	r7, #16
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	447d5000 	.word	0x447d5000
 80003d8:	3e42dcae 	.word	0x3e42dcae
 80003dc:	472d2a00 	.word	0x472d2a00

080003e0 <temperature_read_byte>:
#include "hts.h"

uint8_t hts221_addres = HTS_ADDRESS;

uint8_t temperature_read_byte(uint8_t reg_addr)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af02      	add	r7, sp, #8
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, hts221_addres, 0));
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <temperature_read_byte+0x30>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	79fa      	ldrb	r2, [r7, #7]
 80003f4:	f107 000f 	add.w	r0, r7, #15
 80003f8:	2100      	movs	r1, #0
 80003fa:	9100      	str	r1, [sp, #0]
 80003fc:	2101      	movs	r1, #1
 80003fe:	f001 feb7 	bl	8002170 <i2c_master_read>
 8000402:	4603      	mov	r3, r0
 8000404:	781b      	ldrb	r3, [r3, #0]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3710      	adds	r7, #16
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000001 	.word	0x20000001

08000414 <temperature_readArray>:


void temperature_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af02      	add	r7, sp, #8
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	460b      	mov	r3, r1
 800041e:	70fb      	strb	r3, [r7, #3]
 8000420:	4613      	mov	r3, r2
 8000422:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, hts221_addres, 1);
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <temperature_readArray+0x2c>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	78fa      	ldrb	r2, [r7, #3]
 800042a:	78b9      	ldrb	r1, [r7, #2]
 800042c:	2001      	movs	r0, #1
 800042e:	9000      	str	r0, [sp, #0]
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f001 fe9d 	bl	8002170 <i2c_master_read>
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000001 	.word	0x20000001

08000444 <temperature_write_byte>:

void temperature_write_byte(uint8_t reg_addr, uint8_t value)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	460a      	mov	r2, r1
 800044e:	71fb      	strb	r3, [r7, #7]
 8000450:	4613      	mov	r3, r2
 8000452:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, hts221_addres, 0);
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <temperature_write_byte+0x28>)
 8000456:	781a      	ldrb	r2, [r3, #0]
 8000458:	79f9      	ldrb	r1, [r7, #7]
 800045a:	79b8      	ldrb	r0, [r7, #6]
 800045c:	2300      	movs	r3, #0
 800045e:	f001 fe43 	bl	80020e8 <i2c_master_write>
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000001 	.word	0x20000001

08000470 <temperature_init>:

uint8_t temperature_init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8000476:	2301      	movs	r3, #1
 8000478:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 800047a:	2064      	movs	r0, #100	; 0x64
 800047c:	f003 fd04 	bl	8003e88 <LL_mDelay>

	uint8_t val = temperature_read_byte(HTS_WHO_AM_I	);
 8000480:	200f      	movs	r0, #15
 8000482:	f7ff ffad 	bl	80003e0 <temperature_read_byte>
 8000486:	4603      	mov	r3, r0
 8000488:	71bb      	strb	r3, [r7, #6]

	if(val == HTS_WHO_AM_I_DEFAULT)
 800048a:	79bb      	ldrb	r3, [r7, #6]
 800048c:	2bbc      	cmp	r3, #188	; 0xbc
 800048e:	d102      	bne.n	8000496 <temperature_init+0x26>
	{
		status = 1;
 8000490:	2301      	movs	r3, #1
 8000492:	71fb      	strb	r3, [r7, #7]
 8000494:	e001      	b.n	800049a <temperature_init+0x2a>
	}
	else			//if the device is not found on one address, try another one
	{
			status = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	71fb      	strb	r3, [r7, #7]
			//return status;
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 800049a:	2380      	movs	r3, #128	; 0x80
 800049c:	717b      	strb	r3, [r7, #5]
	temperature_write_byte(HTS_CTRL_REG1, ctrl1);
 800049e:	797b      	ldrb	r3, [r7, #5]
 80004a0:	4619      	mov	r1, r3
 80004a2:	2020      	movs	r0, #32
 80004a4:	f7ff ffce 	bl	8000444 <temperature_write_byte>

	return status;
 80004a8:	79fb      	ldrb	r3, [r7, #7]
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <HTS221_Get_Temperature>:

int16_t HTS221_Get_Temperature()
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b088      	sub	sp, #32
 80004b6:	af00      	add	r7, sp, #0
 int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
 int16_t T0_degC, T1_degC, value;
 uint8_t buffer[4], tmp,sign;
 int32_t tmp32;

 sign=0b10000000;
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	777b      	strb	r3, [r7, #29]

/*1. Read from 0x32 & 0x33 registers the value of coefficients T0_degC_x8 and T1_degC_x8*/
 temperature_readArray(buffer,HTS_TO_DEGC_REG,2);
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	2202      	movs	r2, #2
 80004c0:	2132      	movs	r1, #50	; 0x32
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff ffa6 	bl	8000414 <temperature_readArray>

/*2. Read from 0x35 register the value of the MSB bits of T1_degC and T0_degC */
 tmp=temperature_read_byte(HTS_MSB_T1_T0);
 80004c8:	2035      	movs	r0, #53	; 0x35
 80004ca:	f7ff ff89 	bl	80003e0 <temperature_read_byte>
 80004ce:	4603      	mov	r3, r0
 80004d0:	773b      	strb	r3, [r7, #28]


/*Calculate the T0_degC and T1_degC values*/
 T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80004d2:	7f3b      	ldrb	r3, [r7, #28]
 80004d4:	021b      	lsls	r3, r3, #8
 80004d6:	b21b      	sxth	r3, r3
 80004d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80004dc:	b21a      	sxth	r2, r3
 80004de:	793b      	ldrb	r3, [r7, #4]
 80004e0:	b21b      	sxth	r3, r3
 80004e2:	4313      	orrs	r3, r2
 80004e4:	837b      	strh	r3, [r7, #26]
 T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80004e6:	7f3b      	ldrb	r3, [r7, #28]
 80004e8:	019b      	lsls	r3, r3, #6
 80004ea:	b21b      	sxth	r3, r3
 80004ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80004f0:	b21a      	sxth	r2, r3
 80004f2:	797b      	ldrb	r3, [r7, #5]
 80004f4:	b21b      	sxth	r3, r3
 80004f6:	4313      	orrs	r3, r2
 80004f8:	833b      	strh	r3, [r7, #24]
 T0_degC = T0_degC_x8_u16>>3;
 80004fa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80004fe:	10db      	asrs	r3, r3, #3
 8000500:	82fb      	strh	r3, [r7, #22]
 T1_degC = T1_degC_x8_u16>>3;
 8000502:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000506:	10db      	asrs	r3, r3, #3
 8000508:	82bb      	strh	r3, [r7, #20]

/*3. Read from 0x3C & 0x3D registers the value of T0_OUT*/
 temperature_readArray(buffer,HTS_T0_OUT,4 );
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2204      	movs	r2, #4
 800050e:	213c      	movs	r1, #60	; 0x3c
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff ff7f 	bl	8000414 <temperature_readArray>
 T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8000516:	797b      	ldrb	r3, [r7, #5]
 8000518:	021b      	lsls	r3, r3, #8
 800051a:	b21a      	sxth	r2, r3
 800051c:	793b      	ldrb	r3, [r7, #4]
 800051e:	b21b      	sxth	r3, r3
 8000520:	4313      	orrs	r3, r2
 8000522:	827b      	strh	r3, [r7, #18]

 /*4. Read from 0x3E & 0x3F registers the value of T1_OUT*/
 T1_out = (((uint16_t)buffer[3])<<8) | (uint16_t)buffer[2];
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	021b      	lsls	r3, r3, #8
 8000528:	b21a      	sxth	r2, r3
 800052a:	79bb      	ldrb	r3, [r7, #6]
 800052c:	b21b      	sxth	r3, r3
 800052e:	4313      	orrs	r3, r2
 8000530:	823b      	strh	r3, [r7, #16]

/* 5.Read from 0x2A & 0x2B registers the value T_OUT (ADC_OUT).*/
 temperature_readArray(buffer,HTS_T_OUT_Low,2 );
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2202      	movs	r2, #2
 8000536:	212a      	movs	r1, #42	; 0x2a
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ff6b 	bl	8000414 <temperature_readArray>
 T_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 800053e:	797b      	ldrb	r3, [r7, #5]
 8000540:	021b      	lsls	r3, r3, #8
 8000542:	b21a      	sxth	r2, r3
 8000544:	793b      	ldrb	r3, [r7, #4]
 8000546:	b21b      	sxth	r3, r3
 8000548:	4313      	orrs	r3, r2
 800054a:	81fb      	strh	r3, [r7, #14]


/* 6. Compute the Temperature value by linear interpolation*/
 tmp32 = ((int32_t)(T_out - T0_out)) * ((int32_t)(T1_degC - T0_degC)*10);
 800054c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000550:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000554:	1ad3      	subs	r3, r2, r3
 8000556:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800055a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800055e:	1a8a      	subs	r2, r1, r2
 8000560:	fb02 f203 	mul.w	r2, r2, r3
 8000564:	4613      	mov	r3, r2
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	4413      	add	r3, r2
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	60bb      	str	r3, [r7, #8]
 value = tmp32 /(T1_out - T0_out) + T0_degC*10;
 800056e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000572:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000576:	1ad3      	subs	r3, r2, r3
 8000578:	68ba      	ldr	r2, [r7, #8]
 800057a:	fb92 f3f3 	sdiv	r3, r2, r3
 800057e:	b29a      	uxth	r2, r3
 8000580:	8afb      	ldrh	r3, [r7, #22]
 8000582:	4619      	mov	r1, r3
 8000584:	0089      	lsls	r1, r1, #2
 8000586:	440b      	add	r3, r1
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	b29b      	uxth	r3, r3
 800058c:	4413      	add	r3, r2
 800058e:	b29b      	uxth	r3, r3
 8000590:	83fb      	strh	r3, [r7, #30]

// temperature_write_byte(HTS221_CTRL_REG1,value);//neni som si isty reg_addresou

 //podmienka pre zistenie ci je teplota kladna alebo zaporna
 if(HTS_T_OUT_High==sign){
 8000592:	7f7b      	ldrb	r3, [r7, #29]
 8000594:	2b2b      	cmp	r3, #43	; 0x2b
 8000596:	d103      	bne.n	80005a0 <HTS221_Get_Temperature+0xee>
	 value = value*(-1);
 8000598:	8bfb      	ldrh	r3, [r7, #30]
 800059a:	425b      	negs	r3, r3
 800059c:	b29b      	uxth	r3, r3
 800059e:	83fb      	strh	r3, [r7, #30]
 }


 return value;
 80005a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3720      	adds	r7, #32
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	683a      	ldr	r2, [r7, #0]
 80005ba:	619a      	str	r2, [r3, #24]
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <setDisplayText>:
uint8_t direction = 0;
uint16_t counter = 0;
uint8_t shorter = 0;
char displayString[15];

void setDisplayText(char text[15]){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	strncpy(displayString, &text[0],15);
 80005ec:	220f      	movs	r2, #15
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <setDisplayText+0x20>)
 80005f2:	f003 fce4 	bl	8003fbe <strncpy>
	shorter = 0;
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <setDisplayText+0x24>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200000a0 	.word	0x200000a0
 8000608:	20000090 	.word	0x20000090

0800060c <updateDisplay>:

void updateDisplay(){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
	uint8_t shift = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	71fb      	strb	r3, [r7, #7]
	for(int i = 1; i<5; i++){
 8000616:	2301      	movs	r3, #1
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	e062      	b.n	80006e2 <updateDisplay+0xd6>
		switch(updateDigit){
 800061c:	4b3c      	ldr	r3, [pc, #240]	; (8000710 <updateDisplay+0x104>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	3b01      	subs	r3, #1
 8000622:	2b03      	cmp	r3, #3
 8000624:	d82a      	bhi.n	800067c <updateDisplay+0x70>
 8000626:	a201      	add	r2, pc, #4	; (adr r2, 800062c <updateDisplay+0x20>)
 8000628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062c:	0800063d 	.word	0x0800063d
 8000630:	0800064b 	.word	0x0800064b
 8000634:	0800065b 	.word	0x0800065b
 8000638:	0800066d 	.word	0x0800066d
			case 1:
				DIGIT_1_ON;
 800063c:	2101      	movs	r1, #1
 800063e:	4835      	ldr	r0, [pc, #212]	; (8000714 <updateDisplay+0x108>)
 8000640:	f7ff ffb4 	bl	80005ac <LL_GPIO_SetOutputPin>
				resetAllSegments();
 8000644:	f000 fa14 	bl	8000a70 <resetAllSegments>

				break;
 8000648:	e018      	b.n	800067c <updateDisplay+0x70>
			case 2:
				DIGIT_2_ON;
 800064a:	2110      	movs	r1, #16
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f7ff ffac 	bl	80005ac <LL_GPIO_SetOutputPin>
				resetAllSegments();
 8000654:	f000 fa0c 	bl	8000a70 <resetAllSegments>
				break;
 8000658:	e010      	b.n	800067c <updateDisplay+0x70>
			case 3:
				DIGIT_3_ON;
 800065a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000662:	f7ff ffa3 	bl	80005ac <LL_GPIO_SetOutputPin>
				resetAllSegments();
 8000666:	f000 fa03 	bl	8000a70 <resetAllSegments>
				break;
 800066a:	e007      	b.n	800067c <updateDisplay+0x70>
			case 4:
				DIGIT_4_ON;
 800066c:	2104      	movs	r1, #4
 800066e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000672:	f7ff ff9b 	bl	80005ac <LL_GPIO_SetOutputPin>
				resetAllSegments();
 8000676:	f000 f9fb 	bl	8000a70 <resetAllSegments>
				break;
 800067a:	bf00      	nop
		}
		displayLetter(displayString[displayTextPos+updateDigit-1+shift]);
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <updateDisplay+0x10c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4b23      	ldr	r3, [pc, #140]	; (8000710 <updateDisplay+0x104>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	4413      	add	r3, r2
 8000688:	1e5a      	subs	r2, r3, #1
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	4413      	add	r3, r2
 800068e:	4a23      	ldr	r2, [pc, #140]	; (800071c <updateDisplay+0x110>)
 8000690:	5cd3      	ldrb	r3, [r2, r3]
 8000692:	4618      	mov	r0, r3
 8000694:	f000 f89e 	bl	80007d4 <displayLetter>
		if(displayString[displayTextPos+updateDigit] == '.'){
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <updateDisplay+0x10c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <updateDisplay+0x104>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	4a1d      	ldr	r2, [pc, #116]	; (800071c <updateDisplay+0x110>)
 80006a6:	5cd3      	ldrb	r3, [r2, r3]
 80006a8:	2b2e      	cmp	r3, #46	; 0x2e
 80006aa:	d106      	bne.n	80006ba <updateDisplay+0xae>
			shift = 1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	71fb      	strb	r3, [r7, #7]
			shorter = 1;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <updateDisplay+0x114>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
			setDot();
 80006b6:	f001 f90d 	bl	80018d4 <setDot>
		}
		updateDigit = (updateDigit < 4) ? updateDigit+1 : 1;
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <updateDisplay+0x104>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b03      	cmp	r3, #3
 80006c0:	d804      	bhi.n	80006cc <updateDisplay+0xc0>
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <updateDisplay+0x104>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	3301      	adds	r3, #1
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	e000      	b.n	80006ce <updateDisplay+0xc2>
 80006cc:	2301      	movs	r3, #1
 80006ce:	4a10      	ldr	r2, [pc, #64]	; (8000710 <updateDisplay+0x104>)
 80006d0:	7013      	strb	r3, [r2, #0]
		LL_mDelay(2);
 80006d2:	2002      	movs	r0, #2
 80006d4:	f003 fbd8 	bl	8003e88 <LL_mDelay>
		resetAllDigits();
 80006d8:	f000 f9f8 	bl	8000acc <resetAllDigits>
	for(int i = 1; i<5; i++){
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	2b04      	cmp	r3, #4
 80006e6:	dd99      	ble.n	800061c <updateDisplay+0x10>
	}
	counter +=1;
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <updateDisplay+0x118>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <updateDisplay+0x118>)
 80006f2:	801a      	strh	r2, [r3, #0]
	if(counter >= 50){
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <updateDisplay+0x118>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	2b31      	cmp	r3, #49	; 0x31
 80006fa:	d904      	bls.n	8000706 <updateDisplay+0xfa>
		shiftDisplayText();
 80006fc:	f000 f814 	bl	8000728 <shiftDisplayText>
		counter = 0;
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <updateDisplay+0x118>)
 8000702:	2200      	movs	r2, #0
 8000704:	801a      	strh	r2, [r3, #0]
	}

}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000002 	.word	0x20000002
 8000714:	48000400 	.word	0x48000400
 8000718:	2000008c 	.word	0x2000008c
 800071c:	200000a0 	.word	0x200000a0
 8000720:	20000090 	.word	0x20000090
 8000724:	2000008e 	.word	0x2000008e

08000728 <shiftDisplayText>:

void shiftDisplayText(){
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
	if(displayString[0] != '\0'){
 800072c:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <shiftDisplayText+0x9c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d041      	beq.n	80007b8 <shiftDisplayText+0x90>
		if(direction == 0 && displayString[displayTextPos+4+shorter] != '\0'){
 8000734:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <shiftDisplayText+0xa0>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d110      	bne.n	800075e <shiftDisplayText+0x36>
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <shiftDisplayText+0xa4>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	3304      	adds	r3, #4
 8000742:	4a23      	ldr	r2, [pc, #140]	; (80007d0 <shiftDisplayText+0xa8>)
 8000744:	7812      	ldrb	r2, [r2, #0]
 8000746:	4413      	add	r3, r2
 8000748:	4a1e      	ldr	r2, [pc, #120]	; (80007c4 <shiftDisplayText+0x9c>)
 800074a:	5cd3      	ldrb	r3, [r2, r3]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d006      	beq.n	800075e <shiftDisplayText+0x36>
			displayTextPos = displayTextPos+1;
 8000750:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <shiftDisplayText+0xa4>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <shiftDisplayText+0xa4>)
 800075a:	701a      	strb	r2, [r3, #0]
 800075c:	e02c      	b.n	80007b8 <shiftDisplayText+0x90>
		}
		else if(direction == 0 && displayString[displayTextPos+4+shorter] == '\0'){
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <shiftDisplayText+0xa0>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d10d      	bne.n	8000782 <shiftDisplayText+0x5a>
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <shiftDisplayText+0xa4>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	3304      	adds	r3, #4
 800076c:	4a18      	ldr	r2, [pc, #96]	; (80007d0 <shiftDisplayText+0xa8>)
 800076e:	7812      	ldrb	r2, [r2, #0]
 8000770:	4413      	add	r3, r2
 8000772:	4a14      	ldr	r2, [pc, #80]	; (80007c4 <shiftDisplayText+0x9c>)
 8000774:	5cd3      	ldrb	r3, [r2, r3]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d103      	bne.n	8000782 <shiftDisplayText+0x5a>
			direction = 1;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <shiftDisplayText+0xa0>)
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
 8000780:	e01a      	b.n	80007b8 <shiftDisplayText+0x90>
		}
		else if(displayTextPos <= 0 && direction == 1){
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <shiftDisplayText+0xa4>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d107      	bne.n	800079a <shiftDisplayText+0x72>
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <shiftDisplayText+0xa0>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d103      	bne.n	800079a <shiftDisplayText+0x72>
			direction = 0;
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <shiftDisplayText+0xa0>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
 8000798:	e00e      	b.n	80007b8 <shiftDisplayText+0x90>
		}
		else if(displayTextPos > 0 && direction == 1){
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <shiftDisplayText+0xa4>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d00a      	beq.n	80007b8 <shiftDisplayText+0x90>
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <shiftDisplayText+0xa0>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d106      	bne.n	80007b8 <shiftDisplayText+0x90>
			displayTextPos = displayTextPos-1;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <shiftDisplayText+0xa4>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <shiftDisplayText+0xa4>)
 80007b4:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80007b6:	e7ff      	b.n	80007b8 <shiftDisplayText+0x90>
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	200000a0 	.word	0x200000a0
 80007c8:	2000008d 	.word	0x2000008d
 80007cc:	2000008c 	.word	0x2000008c
 80007d0:	20000090 	.word	0x20000090

080007d4 <displayLetter>:

void displayLetter(char letter){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	switch(letter){
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	3b20      	subs	r3, #32
 80007e2:	2b59      	cmp	r3, #89	; 0x59
 80007e4:	f200 813c 	bhi.w	8000a60 <displayLetter+0x28c>
 80007e8:	a201      	add	r2, pc, #4	; (adr r2, 80007f0 <displayLetter+0x1c>)
 80007ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ee:	bf00      	nop
 80007f0:	08000a13 	.word	0x08000a13
 80007f4:	08000a61 	.word	0x08000a61
 80007f8:	08000a61 	.word	0x08000a61
 80007fc:	08000a61 	.word	0x08000a61
 8000800:	08000a61 	.word	0x08000a61
 8000804:	08000a61 	.word	0x08000a61
 8000808:	08000a61 	.word	0x08000a61
 800080c:	08000a61 	.word	0x08000a61
 8000810:	08000a61 	.word	0x08000a61
 8000814:	08000a61 	.word	0x08000a61
 8000818:	08000a61 	.word	0x08000a61
 800081c:	08000a61 	.word	0x08000a61
 8000820:	08000a61 	.word	0x08000a61
 8000824:	08000a1f 	.word	0x08000a1f
 8000828:	08000a61 	.word	0x08000a61
 800082c:	08000a61 	.word	0x08000a61
 8000830:	08000a5b 	.word	0x08000a5b
 8000834:	08000a25 	.word	0x08000a25
 8000838:	08000a2b 	.word	0x08000a2b
 800083c:	08000a31 	.word	0x08000a31
 8000840:	08000a37 	.word	0x08000a37
 8000844:	08000a3d 	.word	0x08000a3d
 8000848:	08000a43 	.word	0x08000a43
 800084c:	08000a49 	.word	0x08000a49
 8000850:	08000a4f 	.word	0x08000a4f
 8000854:	08000a55 	.word	0x08000a55
 8000858:	08000a61 	.word	0x08000a61
 800085c:	08000a61 	.word	0x08000a61
 8000860:	08000a61 	.word	0x08000a61
 8000864:	08000a61 	.word	0x08000a61
 8000868:	08000a61 	.word	0x08000a61
 800086c:	08000a61 	.word	0x08000a61
 8000870:	08000a61 	.word	0x08000a61
 8000874:	08000959 	.word	0x08000959
 8000878:	08000a61 	.word	0x08000a61
 800087c:	0800096b 	.word	0x0800096b
 8000880:	08000a61 	.word	0x08000a61
 8000884:	0800097d 	.word	0x0800097d
 8000888:	08000983 	.word	0x08000983
 800088c:	08000989 	.word	0x08000989
 8000890:	0800098f 	.word	0x0800098f
 8000894:	0800099b 	.word	0x0800099b
 8000898:	080009a1 	.word	0x080009a1
 800089c:	080009a7 	.word	0x080009a7
 80008a0:	080009ad 	.word	0x080009ad
 80008a4:	080009b3 	.word	0x080009b3
 80008a8:	08000a61 	.word	0x08000a61
 80008ac:	080009bf 	.word	0x080009bf
 80008b0:	080009cb 	.word	0x080009cb
 80008b4:	08000a61 	.word	0x08000a61
 80008b8:	08000a61 	.word	0x08000a61
 80008bc:	080009dd 	.word	0x080009dd
 80008c0:	08000a61 	.word	0x08000a61
 80008c4:	080009e9 	.word	0x080009e9
 80008c8:	080009f5 	.word	0x080009f5
 80008cc:	080009fb 	.word	0x080009fb
 80008d0:	08000a01 	.word	0x08000a01
 80008d4:	08000a61 	.word	0x08000a61
 80008d8:	08000a0d 	.word	0x08000a0d
 80008dc:	08000a61 	.word	0x08000a61
 80008e0:	08000a61 	.word	0x08000a61
 80008e4:	08000a61 	.word	0x08000a61
 80008e8:	08000a61 	.word	0x08000a61
 80008ec:	08000a19 	.word	0x08000a19
 80008f0:	08000a61 	.word	0x08000a61
 80008f4:	0800095f 	.word	0x0800095f
 80008f8:	08000965 	.word	0x08000965
 80008fc:	08000971 	.word	0x08000971
 8000900:	08000977 	.word	0x08000977
 8000904:	08000a61 	.word	0x08000a61
 8000908:	08000a61 	.word	0x08000a61
 800090c:	08000a61 	.word	0x08000a61
 8000910:	08000995 	.word	0x08000995
 8000914:	08000a61 	.word	0x08000a61
 8000918:	08000a61 	.word	0x08000a61
 800091c:	08000a61 	.word	0x08000a61
 8000920:	08000a61 	.word	0x08000a61
 8000924:	08000a61 	.word	0x08000a61
 8000928:	080009b9 	.word	0x080009b9
 800092c:	080009c5 	.word	0x080009c5
 8000930:	08000a61 	.word	0x08000a61
 8000934:	080009d1 	.word	0x080009d1
 8000938:	080009d7 	.word	0x080009d7
 800093c:	08000a61 	.word	0x08000a61
 8000940:	080009e3 	.word	0x080009e3
 8000944:	080009ef 	.word	0x080009ef
 8000948:	08000a61 	.word	0x08000a61
 800094c:	08000a61 	.word	0x08000a61
 8000950:	08000a61 	.word	0x08000a61
 8000954:	08000a07 	.word	0x08000a07
		case 'A':
			setA();
 8000958:	f000 f8d8 	bl	8000b0c <setA>
			break;
 800095c:	e083      	b.n	8000a66 <displayLetter+0x292>
		case 'a':
			seta();
 800095e:	f000 f8ff 	bl	8000b60 <seta>
			break;
 8000962:	e080      	b.n	8000a66 <displayLetter+0x292>
		case 'b':
			setb();
 8000964:	f000 f926 	bl	8000bb4 <setb>
			break;
 8000968:	e07d      	b.n	8000a66 <displayLetter+0x292>
		case 'C':
			setC();
 800096a:	f000 f94d 	bl	8000c08 <setC>
			break;
 800096e:	e07a      	b.n	8000a66 <displayLetter+0x292>
		case 'c':
			setc();
 8000970:	f000 f974 	bl	8000c5c <setc>
			break;
 8000974:	e077      	b.n	8000a66 <displayLetter+0x292>
		case 'd':
			setd();
 8000976:	f000 f99b 	bl	8000cb0 <setd>
			break;
 800097a:	e074      	b.n	8000a66 <displayLetter+0x292>
		case 'E':
			setE();
 800097c:	f000 f9c2 	bl	8000d04 <setE>
			break;
 8000980:	e071      	b.n	8000a66 <displayLetter+0x292>
		case 'F':
			setF();
 8000982:	f000 f9e9 	bl	8000d58 <setF>
			break;
 8000986:	e06e      	b.n	8000a66 <displayLetter+0x292>
		case 'G':
			setG();
 8000988:	f000 fa10 	bl	8000dac <setG>
			break;
 800098c:	e06b      	b.n	8000a66 <displayLetter+0x292>
		case 'H':
			setH();
 800098e:	f000 fa37 	bl	8000e00 <setH>
			break;
 8000992:	e068      	b.n	8000a66 <displayLetter+0x292>
		case 'h':
			seth();
 8000994:	f000 fa5e 	bl	8000e54 <seth>
			break;
 8000998:	e065      	b.n	8000a66 <displayLetter+0x292>
		case 'I':
			setI();
 800099a:	f000 fa85 	bl	8000ea8 <setI>
			break;
 800099e:	e062      	b.n	8000a66 <displayLetter+0x292>
		case 'J':
			setJ();
 80009a0:	f000 faac 	bl	8000efc <setJ>
			break;
 80009a4:	e05f      	b.n	8000a66 <displayLetter+0x292>
		case 'K':
			setK();
 80009a6:	f000 fccb 	bl	8001340 <setK>
			break;
 80009aa:	e05c      	b.n	8000a66 <displayLetter+0x292>
		case 'L':
			setL();
 80009ac:	f000 fad0 	bl	8000f50 <setL>
			break;
 80009b0:	e059      	b.n	8000a66 <displayLetter+0x292>
		case 'M':
			setM();
 80009b2:	f000 fcef 	bl	8001394 <setM>
			break;
 80009b6:	e056      	b.n	8000a66 <displayLetter+0x292>
		case 'n':
			setn();
 80009b8:	f000 faf4 	bl	8000fa4 <setn>
			break;
 80009bc:	e053      	b.n	8000a66 <displayLetter+0x292>
		case 'O':
			setO();
 80009be:	f000 fb1b 	bl	8000ff8 <setO>
			break;
 80009c2:	e050      	b.n	8000a66 <displayLetter+0x292>
		case 'o':
			seto();
 80009c4:	f000 fb42 	bl	800104c <seto>
			break;
 80009c8:	e04d      	b.n	8000a66 <displayLetter+0x292>
		case 'P':
			setP();
 80009ca:	f000 fb69 	bl	80010a0 <setP>
			break;
 80009ce:	e04a      	b.n	8000a66 <displayLetter+0x292>
		case 'q':
			setq();
 80009d0:	f000 fb90 	bl	80010f4 <setq>
			break;
 80009d4:	e047      	b.n	8000a66 <displayLetter+0x292>
		case 'r':
			setr();
 80009d6:	f000 fbb7 	bl	8001148 <setr>
			break;
 80009da:	e044      	b.n	8000a66 <displayLetter+0x292>
		case 'S':
			setS();
 80009dc:	f000 fbde 	bl	800119c <setS>
			break;
 80009e0:	e041      	b.n	8000a66 <displayLetter+0x292>
		case 't':
			sett();
 80009e2:	f000 fc05 	bl	80011f0 <sett>
			break;
 80009e6:	e03e      	b.n	8000a66 <displayLetter+0x292>
		case 'U':
			setU();
 80009e8:	f000 fc2c 	bl	8001244 <setU>
			break;
 80009ec:	e03b      	b.n	8000a66 <displayLetter+0x292>
		case 'u':
			setu();
 80009ee:	f000 fc53 	bl	8001298 <setu>
			break;
 80009f2:	e038      	b.n	8000a66 <displayLetter+0x292>
		case 'V':
			setV();
 80009f4:	f000 fcf4 	bl	80013e0 <setV>
			break;
 80009f8:	e035      	b.n	8000a66 <displayLetter+0x292>
		case 'W':
			setW();
 80009fa:	f000 fd1b 	bl	8001434 <setW>
			break;
 80009fe:	e032      	b.n	8000a66 <displayLetter+0x292>
		case 'X':
			setX();
 8000a00:	f000 fd42 	bl	8001488 <setX>
			break;
 8000a04:	e02f      	b.n	8000a66 <displayLetter+0x292>
		case 'y':
			sety();
 8000a06:	f000 fc71 	bl	80012ec <sety>
			break;
 8000a0a:	e02c      	b.n	8000a66 <displayLetter+0x292>
		case 'Z':
			setZ();
 8000a0c:	f000 fd66 	bl	80014dc <setZ>
			break;
 8000a10:	e029      	b.n	8000a66 <displayLetter+0x292>
		case ' ':
			resetAllSegments();
 8000a12:	f000 f82d 	bl	8000a70 <resetAllSegments>
			break;
 8000a16:	e026      	b.n	8000a66 <displayLetter+0x292>
		case '_':
			setLine();
 8000a18:	f000 ff2e 	bl	8001878 <setLine>
			break;
 8000a1c:	e023      	b.n	8000a66 <displayLetter+0x292>
		case '-':
			setDash();
 8000a1e:	f000 ff63 	bl	80018e8 <setDash>
			break;
 8000a22:	e020      	b.n	8000a66 <displayLetter+0x292>


		case '1':
			setOne();
 8000a24:	f000 fd84 	bl	8001530 <setOne>
			break;
 8000a28:	e01d      	b.n	8000a66 <displayLetter+0x292>
		case '2':
			setTwo();
 8000a2a:	f000 fdab 	bl	8001584 <setTwo>
			break;
 8000a2e:	e01a      	b.n	8000a66 <displayLetter+0x292>
		case '3':
			setThree();
 8000a30:	f000 fdd2 	bl	80015d8 <setThree>
			break;
 8000a34:	e017      	b.n	8000a66 <displayLetter+0x292>
		case '4':
			setFour();
 8000a36:	f000 fdf9 	bl	800162c <setFour>
			break;
 8000a3a:	e014      	b.n	8000a66 <displayLetter+0x292>
		case '5':
			setFive();
 8000a3c:	f000 fe20 	bl	8001680 <setFive>
			break;
 8000a40:	e011      	b.n	8000a66 <displayLetter+0x292>
		case '6':
			setSix();
 8000a42:	f000 fe47 	bl	80016d4 <setSix>
			break;
 8000a46:	e00e      	b.n	8000a66 <displayLetter+0x292>
		case '7':
			setSeven();
 8000a48:	f000 fe6e 	bl	8001728 <setSeven>
			break;
 8000a4c:	e00b      	b.n	8000a66 <displayLetter+0x292>
		case '8':
			setEight();
 8000a4e:	f000 fe95 	bl	800177c <setEight>
			break;
 8000a52:	e008      	b.n	8000a66 <displayLetter+0x292>
		case '9':
			setNine();
 8000a54:	f000 febc 	bl	80017d0 <setNine>
			break;
 8000a58:	e005      	b.n	8000a66 <displayLetter+0x292>
		case '0':
			setZero();
 8000a5a:	f000 fee3 	bl	8001824 <setZero>
			break;
 8000a5e:	e002      	b.n	8000a66 <displayLetter+0x292>
		default:
			setDot();
 8000a60:	f000 ff38 	bl	80018d4 <setDot>
			break;
 8000a64:	bf00      	nop
	}
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop

08000a70 <resetAllSegments>:
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
}

void resetAllSegments(void){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000a74:	2102      	movs	r1, #2
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f7ff fd97 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000a7e:	2101      	movs	r1, #1
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a84:	f7ff fd92 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a90:	f7ff fd8c 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000a94:	2120      	movs	r1, #32
 8000a96:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <resetAllSegments+0x58>)
 8000a98:	f7ff fd88 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000a9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa4:	f7ff fd82 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000aa8:	2108      	movs	r1, #8
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aae:	f7ff fd7d 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <resetAllSegments+0x58>)
 8000ab6:	f7ff fd79 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentDP_Pin);
 8000aba:	2102      	movs	r1, #2
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <resetAllSegments+0x58>)
 8000abe:	f7ff fd75 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	48000400 	.word	0x48000400

08000acc <resetAllDigits>:

void resetAllDigits(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, digit1_Pin);
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	480d      	ldr	r0, [pc, #52]	; (8000b08 <resetAllDigits+0x3c>)
 8000ad4:	f7ff fd78 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, digit2_Pin);
 8000ad8:	2110      	movs	r1, #16
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ade:	f7ff fd73 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, digit3_Pin);
 8000ae2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aea:	f7ff fd6d 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, digit4_Pin);
 8000aee:	2104      	movs	r1, #4
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af4:	f7ff fd68 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, digitTime_Pin);
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afe:	f7ff fd63 	bl	80005c8 <LL_GPIO_ResetOutputPin>
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	48000400 	.word	0x48000400

08000b0c <setA>:

void setA(void){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000b10:	2102      	movs	r1, #2
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b16:	f7ff fd57 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f7ff fd52 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000b24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2c:	f7ff fd4c 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000b30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b38:	f7ff fd46 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000b3c:	2108      	movs	r1, #8
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b42:	f7ff fd41 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000b46:	2110      	movs	r1, #16
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <setA+0x50>)
 8000b4a:	f7ff fd3d 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	// reset D
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000b4e:	2120      	movs	r1, #32
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <setA+0x50>)
 8000b52:	f7ff fd2b 	bl	80005ac <LL_GPIO_SetOutputPin>

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	48000400 	.word	0x48000400

08000b60 <seta>:
void seta(void){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000b64:	2102      	movs	r1, #2
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f7ff fd2d 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000b6e:	2101      	movs	r1, #1
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b74:	f7ff fd28 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b80:	f7ff fd22 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000b84:	2120      	movs	r1, #32
 8000b86:	480a      	ldr	r0, [pc, #40]	; (8000bb0 <seta+0x50>)
 8000b88:	f7ff fd1e 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000b8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b94:	f7ff fd18 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000b98:	2110      	movs	r1, #16
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <seta+0x50>)
 8000b9c:	f7ff fd14 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	// reset f
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba6:	f7ff fd01 	bl	80005ac <LL_GPIO_SetOutputPin>

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	48000400 	.word	0x48000400

08000bb4 <setb>:
void setb(void){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000bb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc0:	f7ff fd02 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	480f      	ldr	r0, [pc, #60]	; (8000c04 <setb+0x50>)
 8000bc8:	f7ff fcfe 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000bcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd4:	f7ff fcf8 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000bd8:	2108      	movs	r1, #8
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bde:	f7ff fcf3 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000be2:	2110      	movs	r1, #16
 8000be4:	4807      	ldr	r0, [pc, #28]	; (8000c04 <setb+0x50>)
 8000be6:	f7ff fcef 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	// reset a,b
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000bea:	2102      	movs	r1, #2
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f7ff fcdc 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfa:	f7ff fcd7 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	48000400 	.word	0x48000400

08000c08 <setC>:
void setC(void){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000c0c:	2102      	movs	r1, #2
 8000c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c12:	f7ff fcd9 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000c16:	2120      	movs	r1, #32
 8000c18:	480f      	ldr	r0, [pc, #60]	; (8000c58 <setC+0x50>)
 8000c1a:	f7ff fcd5 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000c1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c26:	f7ff fccf 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000c2a:	2108      	movs	r1, #8
 8000c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c30:	f7ff fcca 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	// reset B,C,G
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000c34:	2101      	movs	r1, #1
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3a:	f7ff fcb7 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c46:	f7ff fcb1 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000c4a:	2110      	movs	r1, #16
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <setC+0x50>)
 8000c4e:	f7ff fcad 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	48000400 	.word	0x48000400

08000c5c <setc>:
void setc(void){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000c60:	2120      	movs	r1, #32
 8000c62:	4812      	ldr	r0, [pc, #72]	; (8000cac <setc+0x50>)
 8000c64:	f7ff fcb0 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000c68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c70:	f7ff fcaa 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000c74:	2110      	movs	r1, #16
 8000c76:	480d      	ldr	r0, [pc, #52]	; (8000cac <setc+0x50>)
 8000c78:	f7ff fca6 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c82:	f7ff fc93 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000c86:	2101      	movs	r1, #1
 8000c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8c:	f7ff fc8e 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000c90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c98:	f7ff fc88 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000c9c:	2108      	movs	r1, #8
 8000c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca2:	f7ff fc83 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	48000400 	.word	0x48000400

08000cb0 <setd>:
void setd(void){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f7ff fc85 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f7ff fc7f 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000cca:	2120      	movs	r1, #32
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <setd+0x50>)
 8000cce:	f7ff fc7b 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000cd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cda:	f7ff fc75 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000cde:	2110      	movs	r1, #16
 8000ce0:	4807      	ldr	r0, [pc, #28]	; (8000d00 <setd+0x50>)
 8000ce2:	f7ff fc71 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cec:	f7ff fc5e 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf6:	f7ff fc59 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	48000400 	.word	0x48000400

08000d04 <setE>:
void setE(void){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000d08:	2102      	movs	r1, #2
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0e:	f7ff fc5b 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000d12:	2120      	movs	r1, #32
 8000d14:	480f      	ldr	r0, [pc, #60]	; (8000d54 <setE+0x50>)
 8000d16:	f7ff fc57 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000d1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d22:	f7ff fc51 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000d26:	2108      	movs	r1, #8
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2c:	f7ff fc4c 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000d30:	2110      	movs	r1, #16
 8000d32:	4808      	ldr	r0, [pc, #32]	; (8000d54 <setE+0x50>)
 8000d34:	f7ff fc48 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000d38:	2101      	movs	r1, #1
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3e:	f7ff fc35 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000d42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4a:	f7ff fc2f 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	48000400 	.word	0x48000400

08000d58 <setF>:
void setF(void){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d62:	f7ff fc31 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000d66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6e:	f7ff fc2b 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000d72:	2108      	movs	r1, #8
 8000d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d78:	f7ff fc26 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000d7c:	2110      	movs	r1, #16
 8000d7e:	480a      	ldr	r0, [pc, #40]	; (8000da8 <setF+0x50>)
 8000d80:	f7ff fc22 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000d84:	2101      	movs	r1, #1
 8000d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8a:	f7ff fc0f 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000d8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d96:	f7ff fc09 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000d9a:	2120      	movs	r1, #32
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <setF+0x50>)
 8000d9e:	f7ff fc05 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	48000400 	.word	0x48000400

08000dac <setG>:
void setG(void){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000db0:	2102      	movs	r1, #2
 8000db2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db6:	f7ff fc07 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000dba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc2:	f7ff fc01 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000dc6:	2120      	movs	r1, #32
 8000dc8:	480c      	ldr	r0, [pc, #48]	; (8000dfc <setG+0x50>)
 8000dca:	f7ff fbfd 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000dce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd6:	f7ff fbf7 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000dda:	2108      	movs	r1, #8
 8000ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de0:	f7ff fbf2 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000de4:	2101      	movs	r1, #1
 8000de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dea:	f7ff fbdf 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000dee:	2110      	movs	r1, #16
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <setG+0x50>)
 8000df2:	f7ff fbdb 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	48000400 	.word	0x48000400

08000e00 <setH>:
void setH(void){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000e04:	2101      	movs	r1, #1
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0a:	f7ff fbdd 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000e0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e16:	f7ff fbd7 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000e1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e22:	f7ff fbd1 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000e26:	2108      	movs	r1, #8
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2c:	f7ff fbcc 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000e30:	2110      	movs	r1, #16
 8000e32:	4807      	ldr	r0, [pc, #28]	; (8000e50 <setH+0x50>)
 8000e34:	f7ff fbc8 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000e38:	2102      	movs	r1, #2
 8000e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3e:	f7ff fbb5 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000e42:	2120      	movs	r1, #32
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <setH+0x50>)
 8000e46:	f7ff fbb1 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	48000400 	.word	0x48000400

08000e54 <seth>:
void seth(void){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000e58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e60:	f7ff fbb2 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000e64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6c:	f7ff fbac 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000e70:	2108      	movs	r1, #8
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e76:	f7ff fba7 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	4809      	ldr	r0, [pc, #36]	; (8000ea4 <seth+0x50>)
 8000e7e:	f7ff fba3 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000e82:	2102      	movs	r1, #2
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e88:	f7ff fb90 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e92:	f7ff fb8b 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000e96:	2120      	movs	r1, #32
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <seth+0x50>)
 8000e9a:	f7ff fb87 	bl	80005ac <LL_GPIO_SetOutputPin>

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	48000400 	.word	0x48000400

08000ea8 <setI>:
void setI(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000eac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb4:	f7ff fb88 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000eb8:	2108      	movs	r1, #8
 8000eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebe:	f7ff fb83 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000ec2:	2102      	movs	r1, #2
 8000ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec8:	f7ff fb70 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000ecc:	2101      	movs	r1, #1
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed2:	f7ff fb6b 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000ed6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ede:	f7ff fb65 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000ee2:	2120      	movs	r1, #32
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <setI+0x50>)
 8000ee6:	f7ff fb61 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000eea:	2110      	movs	r1, #16
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <setI+0x50>)
 8000eee:	f7ff fb5d 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	48000400 	.word	0x48000400

08000efc <setJ>:
void setJ(void){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000f00:	2101      	movs	r1, #1
 8000f02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f06:	f7ff fb5f 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000f0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f12:	f7ff fb59 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000f16:	2120      	movs	r1, #32
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <setJ+0x50>)
 8000f1a:	f7ff fb55 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000f1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f26:	f7ff fb4f 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f30:	f7ff fb3c 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000f34:	2108      	movs	r1, #8
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3a:	f7ff fb37 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000f3e:	2110      	movs	r1, #16
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <setJ+0x50>)
 8000f42:	f7ff fb33 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	48000400 	.word	0x48000400

08000f50 <setL>:
void setL(void){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000f54:	2120      	movs	r1, #32
 8000f56:	4812      	ldr	r0, [pc, #72]	; (8000fa0 <setL+0x50>)
 8000f58:	f7ff fb36 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000f5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f64:	f7ff fb30 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000f68:	2108      	movs	r1, #8
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6e:	f7ff fb2b 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000f72:	2102      	movs	r1, #2
 8000f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f78:	f7ff fb18 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f82:	f7ff fb13 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000f86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8e:	f7ff fb0d 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000f92:	2110      	movs	r1, #16
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <setL+0x50>)
 8000f96:	f7ff fb09 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	48000400 	.word	0x48000400

08000fa4 <setn>:
void setn(void){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb0:	f7ff fb0a 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000fb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbc:	f7ff fb04 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000fc0:	2110      	movs	r1, #16
 8000fc2:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <setn+0x50>)
 8000fc4:	f7ff fb00 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000fc8:	2102      	movs	r1, #2
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fce:	f7ff faed 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd8:	f7ff fae8 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000fdc:	2120      	movs	r1, #32
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <setn+0x50>)
 8000fe0:	f7ff fae4 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000fe4:	2108      	movs	r1, #8
 8000fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fea:	f7ff fadf 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	48000400 	.word	0x48000400

08000ff8 <setO>:
void setO(void){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001002:	f7ff fae1 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001006:	2101      	movs	r1, #1
 8001008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100c:	f7ff fadc 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001010:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001014:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001018:	f7ff fad6 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800101c:	2120      	movs	r1, #32
 800101e:	480a      	ldr	r0, [pc, #40]	; (8001048 <setO+0x50>)
 8001020:	f7ff fad2 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102c:	f7ff facc 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001030:	2108      	movs	r1, #8
 8001032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001036:	f7ff fac7 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800103a:	2110      	movs	r1, #16
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <setO+0x50>)
 800103e:	f7ff fab5 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	48000400 	.word	0x48000400

0800104c <seto>:
void seto(void){
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001050:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001058:	f7ff fab6 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800105c:	2120      	movs	r1, #32
 800105e:	480f      	ldr	r0, [pc, #60]	; (800109c <seto+0x50>)
 8001060:	f7ff fab2 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001064:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106c:	f7ff faac 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001070:	2110      	movs	r1, #16
 8001072:	480a      	ldr	r0, [pc, #40]	; (800109c <seto+0x50>)
 8001074:	f7ff faa8 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001078:	2102      	movs	r1, #2
 800107a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107e:	f7ff fa95 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001082:	2101      	movs	r1, #1
 8001084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001088:	f7ff fa90 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 800108c:	2108      	movs	r1, #8
 800108e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001092:	f7ff fa8b 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	48000400 	.word	0x48000400

080010a0 <setP>:
void setP(void){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80010a4:	2102      	movs	r1, #2
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010aa:	f7ff fa8d 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80010ae:	2101      	movs	r1, #1
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f7ff fa88 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80010b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c0:	f7ff fa82 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80010c4:	2108      	movs	r1, #8
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ca:	f7ff fa7d 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80010ce:	2110      	movs	r1, #16
 80010d0:	4807      	ldr	r0, [pc, #28]	; (80010f0 <setP+0x50>)
 80010d2:	f7ff fa79 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80010d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010de:	f7ff fa65 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 80010e2:	2120      	movs	r1, #32
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <setP+0x50>)
 80010e6:	f7ff fa61 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	48000400 	.word	0x48000400

080010f4 <setq>:
void setq(void){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80010f8:	2102      	movs	r1, #2
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fe:	f7ff fa63 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001102:	2101      	movs	r1, #1
 8001104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001108:	f7ff fa5e 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800110c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001114:	f7ff fa58 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001118:	2108      	movs	r1, #8
 800111a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111e:	f7ff fa53 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001122:	2110      	movs	r1, #16
 8001124:	4807      	ldr	r0, [pc, #28]	; (8001144 <setq+0x50>)
 8001126:	f7ff fa4f 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800112a:	2120      	movs	r1, #32
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <setq+0x50>)
 800112e:	f7ff fa3d 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001132:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113a:	f7ff fa37 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	48000400 	.word	0x48000400

08001148 <setr>:
void setr(void){
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800114c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001154:	f7ff fa38 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001158:	2110      	movs	r1, #16
 800115a:	480f      	ldr	r0, [pc, #60]	; (8001198 <setr+0x50>)
 800115c:	f7ff fa34 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001160:	2102      	movs	r1, #2
 8001162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001166:	f7ff fa21 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800116a:	2101      	movs	r1, #1
 800116c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001170:	f7ff fa1c 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001174:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117c:	f7ff fa16 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001180:	2120      	movs	r1, #32
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <setr+0x50>)
 8001184:	f7ff fa12 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001188:	2108      	movs	r1, #8
 800118a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118e:	f7ff fa0d 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	48000400 	.word	0x48000400

0800119c <setS>:
void setS(void){
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80011a0:	2102      	movs	r1, #2
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a6:	f7ff fa0f 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80011aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b2:	f7ff fa09 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80011b6:	2120      	movs	r1, #32
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <setS+0x50>)
 80011ba:	f7ff fa05 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80011be:	2108      	movs	r1, #8
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c4:	f7ff fa00 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80011c8:	2110      	movs	r1, #16
 80011ca:	4808      	ldr	r0, [pc, #32]	; (80011ec <setS+0x50>)
 80011cc:	f7ff f9fc 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80011d0:	2101      	movs	r1, #1
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d6:	f7ff f9e9 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80011da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e2:	f7ff f9e3 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	48000400 	.word	0x48000400

080011f0 <sett>:
void sett(void){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80011f4:	2120      	movs	r1, #32
 80011f6:	4812      	ldr	r0, [pc, #72]	; (8001240 <sett+0x50>)
 80011f8:	f7ff f9e6 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80011fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001204:	f7ff f9e0 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001208:	2108      	movs	r1, #8
 800120a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120e:	f7ff f9db 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001212:	2110      	movs	r1, #16
 8001214:	480a      	ldr	r0, [pc, #40]	; (8001240 <sett+0x50>)
 8001216:	f7ff f9d7 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800121a:	2102      	movs	r1, #2
 800121c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001220:	f7ff f9c4 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001224:	2101      	movs	r1, #1
 8001226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122a:	f7ff f9bf 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800122e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001236:	f7ff f9b9 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	48000400 	.word	0x48000400

08001244 <setU>:
void setU(void){
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001248:	2101      	movs	r1, #1
 800124a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124e:	f7ff f9bb 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f7ff f9b5 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800125e:	2120      	movs	r1, #32
 8001260:	480c      	ldr	r0, [pc, #48]	; (8001294 <setU+0x50>)
 8001262:	f7ff f9b1 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001266:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800126a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126e:	f7ff f9ab 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001272:	2108      	movs	r1, #8
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001278:	f7ff f9a6 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800127c:	2102      	movs	r1, #2
 800127e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001282:	f7ff f993 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001286:	2110      	movs	r1, #16
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <setU+0x50>)
 800128a:	f7ff f98f 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	48000400 	.word	0x48000400

08001298 <setu>:
void setu(void){
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800129c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a4:	f7ff f990 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80012a8:	2120      	movs	r1, #32
 80012aa:	480f      	ldr	r0, [pc, #60]	; (80012e8 <setu+0x50>)
 80012ac:	f7ff f98c 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80012b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b8:	f7ff f986 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80012bc:	2102      	movs	r1, #2
 80012be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c2:	f7ff f973 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80012c6:	2101      	movs	r1, #1
 80012c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012cc:	f7ff f96e 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80012d0:	2108      	movs	r1, #8
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d6:	f7ff f969 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 80012da:	2110      	movs	r1, #16
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <setu+0x50>)
 80012de:	f7ff f965 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	48000400 	.word	0x48000400

080012ec <sety>:
void sety(void){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80012f0:	2101      	movs	r1, #1
 80012f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f6:	f7ff f967 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80012fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001302:	f7ff f961 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001306:	2120      	movs	r1, #32
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <sety+0x50>)
 800130a:	f7ff f95d 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800130e:	2108      	movs	r1, #8
 8001310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001314:	f7ff f958 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001318:	2110      	movs	r1, #16
 800131a:	4808      	ldr	r0, [pc, #32]	; (800133c <sety+0x50>)
 800131c:	f7ff f954 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001320:	2102      	movs	r1, #2
 8001322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001326:	f7ff f941 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800132a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800132e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001332:	f7ff f93b 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	48000400 	.word	0x48000400

08001340 <setK>:


// Disgusting letters :D
void setK(void){
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001344:	2102      	movs	r1, #2
 8001346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134a:	f7ff f93d 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800134e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001356:	f7ff f937 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800135a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800135e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001362:	f7ff f931 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001366:	2108      	movs	r1, #8
 8001368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136c:	f7ff f92c 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001370:	2110      	movs	r1, #16
 8001372:	4807      	ldr	r0, [pc, #28]	; (8001390 <setK+0x50>)
 8001374:	f7ff f928 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001378:	2101      	movs	r1, #1
 800137a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137e:	f7ff f915 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001382:	2120      	movs	r1, #32
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <setK+0x50>)
 8001386:	f7ff f911 	bl	80005ac <LL_GPIO_SetOutputPin>

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	48000400 	.word	0x48000400

08001394 <setM>:
void setM(void){
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001398:	2102      	movs	r1, #2
 800139a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139e:	f7ff f913 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80013a2:	2101      	movs	r1, #1
 80013a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a8:	f7ff f90e 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80013ac:	2120      	movs	r1, #32
 80013ae:	480b      	ldr	r0, [pc, #44]	; (80013dc <setM+0x48>)
 80013b0:	f7ff f90a 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80013b4:	2108      	movs	r1, #8
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ba:	f7ff f905 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80013be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c6:	f7ff f8f1 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80013ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d2:	f7ff f8eb 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	48000400 	.word	0x48000400

080013e0 <setV>:
void setV(void){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80013e4:	2101      	movs	r1, #1
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ea:	f7ff f8ed 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80013ee:	2120      	movs	r1, #32
 80013f0:	480f      	ldr	r0, [pc, #60]	; (8001430 <setV+0x50>)
 80013f2:	f7ff f8e9 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80013f6:	2108      	movs	r1, #8
 80013f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fc:	f7ff f8e4 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001400:	2102      	movs	r1, #2
 8001402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001406:	f7ff f8d1 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800140a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800140e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001412:	f7ff f8cb 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001416:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800141a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141e:	f7ff f8c5 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001422:	2110      	movs	r1, #16
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <setV+0x50>)
 8001426:	f7ff f8c1 	bl	80005ac <LL_GPIO_SetOutputPin>

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	48000400 	.word	0x48000400

08001434 <setW>:
void setW(void){
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001438:	2101      	movs	r1, #1
 800143a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143e:	f7ff f8c3 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001442:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144a:	f7ff f8bd 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800144e:	2120      	movs	r1, #32
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <setW+0x50>)
 8001452:	f7ff f8b9 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001456:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800145a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145e:	f7ff f8b3 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001462:	2108      	movs	r1, #8
 8001464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001468:	f7ff f8ae 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800146c:	2110      	movs	r1, #16
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <setW+0x50>)
 8001470:	f7ff f8aa 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001474:	2102      	movs	r1, #2
 8001476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147a:	f7ff f897 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	48000400 	.word	0x48000400

08001488 <setX>:
void setX(void){
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800148c:	2102      	movs	r1, #2
 800148e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001492:	f7ff f899 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001496:	2120      	movs	r1, #32
 8001498:	480f      	ldr	r0, [pc, #60]	; (80014d8 <setX+0x50>)
 800149a:	f7ff f895 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800149e:	2110      	movs	r1, #16
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <setX+0x50>)
 80014a2:	f7ff f891 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80014a6:	2101      	movs	r1, #1
 80014a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ac:	f7ff f87e 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80014b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b8:	f7ff f878 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80014bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c4:	f7ff f872 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80014c8:	2108      	movs	r1, #8
 80014ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ce:	f7ff f86d 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	48000400 	.word	0x48000400

080014dc <setZ>:
void setZ(void){
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80014e0:	2102      	movs	r1, #2
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f7ff f86f 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80014ea:	2101      	movs	r1, #1
 80014ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f0:	f7ff f86a 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80014f4:	2120      	movs	r1, #32
 80014f6:	480d      	ldr	r0, [pc, #52]	; (800152c <setZ+0x50>)
 80014f8:	f7ff f866 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80014fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001504:	f7ff f860 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001508:	2110      	movs	r1, #16
 800150a:	4808      	ldr	r0, [pc, #32]	; (800152c <setZ+0x50>)
 800150c:	f7ff f85c 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001518:	f7ff f848 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 800151c:	2108      	movs	r1, #8
 800151e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001522:	f7ff f843 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	48000400 	.word	0x48000400

08001530 <setOne>:

// numbers
void setOne(void){
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001534:	2101      	movs	r1, #1
 8001536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153a:	f7ff f845 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800153e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001546:	f7ff f83f 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800154a:	2102      	movs	r1, #2
 800154c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001550:	f7ff f82c 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001554:	2120      	movs	r1, #32
 8001556:	480a      	ldr	r0, [pc, #40]	; (8001580 <setOne+0x50>)
 8001558:	f7ff f828 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800155c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001564:	f7ff f822 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001568:	2108      	movs	r1, #8
 800156a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156e:	f7ff f81d 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001572:	2110      	movs	r1, #16
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <setOne+0x50>)
 8001576:	f7ff f819 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	48000400 	.word	0x48000400

08001584 <setTwo>:
void setTwo(void){
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001588:	2102      	movs	r1, #2
 800158a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158e:	f7ff f81b 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001592:	2101      	movs	r1, #1
 8001594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001598:	f7ff f816 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800159c:	2120      	movs	r1, #32
 800159e:	480d      	ldr	r0, [pc, #52]	; (80015d4 <setTwo+0x50>)
 80015a0:	f7ff f812 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80015a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ac:	f7ff f80c 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80015b0:	2110      	movs	r1, #16
 80015b2:	4808      	ldr	r0, [pc, #32]	; (80015d4 <setTwo+0x50>)
 80015b4:	f7ff f808 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80015b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c0:	f7fe fff4 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80015c4:	2108      	movs	r1, #8
 80015c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ca:	f7fe ffef 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	48000400 	.word	0x48000400

080015d8 <setThree>:
void setThree(void){
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80015dc:	2102      	movs	r1, #2
 80015de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e2:	f7fe fff1 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80015e6:	2101      	movs	r1, #1
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ec:	f7fe ffec 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80015f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f8:	f7fe ffe6 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80015fc:	2120      	movs	r1, #32
 80015fe:	480a      	ldr	r0, [pc, #40]	; (8001628 <setThree+0x50>)
 8001600:	f7fe ffe2 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001604:	2110      	movs	r1, #16
 8001606:	4808      	ldr	r0, [pc, #32]	; (8001628 <setThree+0x50>)
 8001608:	f7fe ffde 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800160c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001614:	f7fe ffca 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001618:	2108      	movs	r1, #8
 800161a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161e:	f7fe ffc5 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	48000400 	.word	0x48000400

0800162c <setFour>:
void setFour(void){
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001630:	2101      	movs	r1, #1
 8001632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001636:	f7fe ffc7 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800163a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800163e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001642:	f7fe ffc1 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001646:	2108      	movs	r1, #8
 8001648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164c:	f7fe ffbc 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001650:	2110      	movs	r1, #16
 8001652:	480a      	ldr	r0, [pc, #40]	; (800167c <setFour+0x50>)
 8001654:	f7fe ffb8 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001658:	2102      	movs	r1, #2
 800165a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165e:	f7fe ffa5 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001662:	2120      	movs	r1, #32
 8001664:	4805      	ldr	r0, [pc, #20]	; (800167c <setFour+0x50>)
 8001666:	f7fe ffa1 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800166a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800166e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001672:	f7fe ff9b 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	48000400 	.word	0x48000400

08001680 <setFive>:
void setFive(void){
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001684:	2102      	movs	r1, #2
 8001686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168a:	f7fe ff9d 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800168e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001696:	f7fe ff97 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800169a:	2120      	movs	r1, #32
 800169c:	480c      	ldr	r0, [pc, #48]	; (80016d0 <setFive+0x50>)
 800169e:	f7fe ff93 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80016a2:	2108      	movs	r1, #8
 80016a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a8:	f7fe ff8e 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80016ac:	2110      	movs	r1, #16
 80016ae:	4808      	ldr	r0, [pc, #32]	; (80016d0 <setFive+0x50>)
 80016b0:	f7fe ff8a 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80016b4:	2101      	movs	r1, #1
 80016b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ba:	f7fe ff77 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80016be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c6:	f7fe ff71 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	48000400 	.word	0x48000400

080016d4 <setSix>:
void setSix(void){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80016d8:	2102      	movs	r1, #2
 80016da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016de:	f7fe ff73 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80016e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ea:	f7fe ff6d 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80016ee:	2120      	movs	r1, #32
 80016f0:	480c      	ldr	r0, [pc, #48]	; (8001724 <setSix+0x50>)
 80016f2:	f7fe ff69 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80016f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fe:	f7fe ff63 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001702:	2108      	movs	r1, #8
 8001704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001708:	f7fe ff5e 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800170c:	2110      	movs	r1, #16
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <setSix+0x50>)
 8001710:	f7fe ff5a 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001714:	2101      	movs	r1, #1
 8001716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171a:	f7fe ff47 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	48000400 	.word	0x48000400

08001728 <setSeven>:
void setSeven(void){
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800172c:	2102      	movs	r1, #2
 800172e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001732:	f7fe ff49 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001736:	2101      	movs	r1, #1
 8001738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173c:	f7fe ff44 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001748:	f7fe ff3e 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800174c:	2120      	movs	r1, #32
 800174e:	480a      	ldr	r0, [pc, #40]	; (8001778 <setSeven+0x50>)
 8001750:	f7fe ff2c 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001754:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175c:	f7fe ff26 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001760:	2108      	movs	r1, #8
 8001762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001766:	f7fe ff21 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800176a:	2110      	movs	r1, #16
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <setSeven+0x50>)
 800176e:	f7fe ff1d 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	48000400 	.word	0x48000400

0800177c <setEight>:
void setEight(void){
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001780:	2102      	movs	r1, #2
 8001782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001786:	f7fe ff1f 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800178a:	2101      	movs	r1, #1
 800178c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001790:	f7fe ff1a 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179c:	f7fe ff14 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80017a0:	2120      	movs	r1, #32
 80017a2:	480a      	ldr	r0, [pc, #40]	; (80017cc <setEight+0x50>)
 80017a4:	f7fe ff10 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80017a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b0:	f7fe ff0a 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80017b4:	2108      	movs	r1, #8
 80017b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ba:	f7fe ff05 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80017be:	2110      	movs	r1, #16
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <setEight+0x50>)
 80017c2:	f7fe ff01 	bl	80005c8 <LL_GPIO_ResetOutputPin>
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	48000400 	.word	0x48000400

080017d0 <setNine>:
void setNine(void){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80017d4:	2102      	movs	r1, #2
 80017d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017da:	f7fe fef5 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80017de:	2101      	movs	r1, #1
 80017e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e4:	f7fe fef0 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80017e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f0:	f7fe feea 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80017f4:	2120      	movs	r1, #32
 80017f6:	480a      	ldr	r0, [pc, #40]	; (8001820 <setNine+0x50>)
 80017f8:	f7fe fee6 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80017fc:	2108      	movs	r1, #8
 80017fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001802:	f7fe fee1 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001806:	2110      	movs	r1, #16
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <setNine+0x50>)
 800180a:	f7fe fedd 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800180e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001816:	f7fe fec9 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	48000400 	.word	0x48000400

08001824 <setZero>:
void setZero(void){
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001828:	2102      	movs	r1, #2
 800182a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182e:	f7fe fecb 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001832:	2101      	movs	r1, #1
 8001834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001838:	f7fe fec6 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800183c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001844:	f7fe fec0 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001848:	2120      	movs	r1, #32
 800184a:	480a      	ldr	r0, [pc, #40]	; (8001874 <setZero+0x50>)
 800184c:	f7fe febc 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001850:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001858:	f7fe feb6 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800185c:	2108      	movs	r1, #8
 800185e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001862:	f7fe feb1 	bl	80005c8 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001866:	2110      	movs	r1, #16
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <setZero+0x50>)
 800186a:	f7fe fe9f 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	48000400 	.word	0x48000400

08001878 <setLine>:

void setLine(void){
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800187c:	2120      	movs	r1, #32
 800187e:	4814      	ldr	r0, [pc, #80]	; (80018d0 <setLine+0x58>)
 8001880:	f7fe fea2 	bl	80005c8 <LL_GPIO_ResetOutputPin>

	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001884:	2102      	movs	r1, #2
 8001886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188a:	f7fe fe8f 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800188e:	2101      	movs	r1, #1
 8001890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001894:	f7fe fe8a 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001898:	f44f 7180 	mov.w	r1, #256	; 0x100
 800189c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a0:	f7fe fe84 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80018a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ac:	f7fe fe7e 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80018b0:	2108      	movs	r1, #8
 80018b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b6:	f7fe fe79 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 80018ba:	2110      	movs	r1, #16
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <setLine+0x58>)
 80018be:	f7fe fe75 	bl	80005ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentDP_Pin);
 80018c2:	2102      	movs	r1, #2
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <setLine+0x58>)
 80018c6:	f7fe fe71 	bl	80005ac <LL_GPIO_SetOutputPin>
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	48000400 	.word	0x48000400

080018d4 <setDot>:
// and dot to end
void setDot(void){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
 80018d8:	2102      	movs	r1, #2
 80018da:	4802      	ldr	r0, [pc, #8]	; (80018e4 <setDot+0x10>)
 80018dc:	f7fe fe74 	bl	80005c8 <LL_GPIO_ResetOutputPin>
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	48000400 	.word	0x48000400

080018e8 <setDash>:

void setDash(void){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80018ec:	2110      	movs	r1, #16
 80018ee:	4802      	ldr	r0, [pc, #8]	; (80018f8 <setDash+0x10>)
 80018f0:	f7fe fe6a 	bl	80005c8 <LL_GPIO_ResetOutputPin>
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	48000400 	.word	0x48000400

080018fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <__NVIC_GetPriorityGrouping+0x18>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	f003 0307 	and.w	r3, r3, #7
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	2b00      	cmp	r3, #0
 8001928:	db0b      	blt.n	8001942 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	f003 021f 	and.w	r2, r3, #31
 8001930:	4907      	ldr	r1, [pc, #28]	; (8001950 <__NVIC_EnableIRQ+0x38>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	2001      	movs	r0, #1
 800193a:	fa00 f202 	lsl.w	r2, r0, r2
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000e100 	.word	0xe000e100

08001954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	6039      	str	r1, [r7, #0]
 800195e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	2b00      	cmp	r3, #0
 8001966:	db0a      	blt.n	800197e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	490c      	ldr	r1, [pc, #48]	; (80019a0 <__NVIC_SetPriority+0x4c>)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	0112      	lsls	r2, r2, #4
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	440b      	add	r3, r1
 8001978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800197c:	e00a      	b.n	8001994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4908      	ldr	r1, [pc, #32]	; (80019a4 <__NVIC_SetPriority+0x50>)
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	3b04      	subs	r3, #4
 800198c:	0112      	lsls	r2, r2, #4
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	440b      	add	r3, r1
 8001992:	761a      	strb	r2, [r3, #24]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000e100 	.word	0xe000e100
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	; 0x24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f1c3 0307 	rsb	r3, r3, #7
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	bf28      	it	cs
 80019c6:	2304      	movcs	r3, #4
 80019c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3304      	adds	r3, #4
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d902      	bls.n	80019d8 <NVIC_EncodePriority+0x30>
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3b03      	subs	r3, #3
 80019d6:	e000      	b.n	80019da <NVIC_EncodePriority+0x32>
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	f04f 32ff 	mov.w	r2, #4294967295
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43da      	mvns	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	401a      	ands	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f0:	f04f 31ff 	mov.w	r1, #4294967295
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	43d9      	mvns	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	4313      	orrs	r3, r2
         );
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3724      	adds	r7, #36	; 0x24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a1a:	695a      	ldr	r2, [r3, #20]
 8001a1c:	4907      	ldr	r1, [pc, #28]	; (8001a3c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a26:	695a      	ldr	r2, [r3, #20]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	40021000 	.word	0x40021000

08001a40 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8001a4a:	4a13      	ldr	r2, [pc, #76]	; (8001a98 <LL_SYSCFG_SetEXTISource+0x58>)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	3302      	adds	r3, #2
 8001a52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	0c1b      	lsrs	r3, r3, #16
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	ea02 0103 	and.w	r1, r2, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	0c1b      	lsrs	r3, r3, #16
 8001a64:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	fa93 f3a3 	rbit	r3, r3
 8001a6c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	fab3 f383 	clz	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	fa03 f202 	lsl.w	r2, r3, r2
 8001a7e:	4806      	ldr	r0, [pc, #24]	; (8001a98 <LL_SYSCFG_SetEXTISource+0x58>)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	430a      	orrs	r2, r1
 8001a86:	3302      	adds	r3, #2
 8001a88:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	40010000 	.word	0x40010000

08001a9c <LL_GPIO_SetPinMode>:
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	; 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	613b      	str	r3, [r7, #16]
  return result;
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	fab3 f383 	clz	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2103      	movs	r1, #3
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	401a      	ands	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	61bb      	str	r3, [r7, #24]
  return result;
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	601a      	str	r2, [r3, #0]
}
 8001aee:	bf00      	nop
 8001af0:	3724      	adds	r7, #36	; 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_GPIO_SetPinPull>:
{
 8001afa:	b480      	push	{r7}
 8001afc:	b089      	sub	sp, #36	; 0x24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	fa93 f3a3 	rbit	r3, r3
 8001b14:	613b      	str	r3, [r7, #16]
  return result;
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	fab3 f383 	clz	r3, r3
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	2103      	movs	r1, #3
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	401a      	ands	r2, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	61bb      	str	r3, [r7, #24]
  return result;
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	431a      	orrs	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	60da      	str	r2, [r3, #12]
}
 8001b4c:	bf00      	nop
 8001b4e:	3724      	adds	r7, #36	; 0x24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_GPIO_ResetOutputPin>:
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	; 0x28
 8001b78:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001b7a:	f107 031c 	add.w	r3, r7, #28
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
 8001b94:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8001b96:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001b9a:	f7ff ff39 	bl	8001a10 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001b9e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001ba2:	f7ff ff35 	bl	8001a10 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001ba6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001baa:	f7ff ff31 	bl	8001a10 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 8001bae:	f641 119f 	movw	r1, #6559	; 0x199f
 8001bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb6:	f7ff ffcf 	bl	8001b58 <LL_GPIO_ResetOutputPin>
                          |digit2_Pin|digitTime_Pin|segmentC_Pin|segmentE_Pin
                          |digit3_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, digit1_Pin|segmentDP_Pin|segmentG_Pin|segmentD_Pin);
 8001bba:	2133      	movs	r1, #51	; 0x33
 8001bbc:	482b      	ldr	r0, [pc, #172]	; (8001c6c <MX_GPIO_Init+0xf8>)
 8001bbe:	f7ff ffcb 	bl	8001b58 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 8001bc2:	f641 139f 	movw	r3, #6559	; 0x199f
 8001bc6:	607b      	str	r3, [r7, #4]
                          |digit2_Pin|digitTime_Pin|segmentC_Pin|segmentE_Pin
                          |digit3_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be0:	f001 fbe0 	bl	80033a4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = digit1_Pin|segmentDP_Pin|segmentG_Pin|segmentD_Pin;
 8001be4:	2333      	movs	r3, #51	; 0x33
 8001be6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001be8:	2301      	movs	r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	481b      	ldr	r0, [pc, #108]	; (8001c6c <MX_GPIO_Init+0xf8>)
 8001bfe:	f001 fbd1 	bl	80033a4 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 8001c02:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8001c06:	2001      	movs	r0, #1
 8001c08:	f7ff ff1a 	bl	8001a40 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(button_GPIO_Port, button_Pin, LL_GPIO_PULL_NO);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2108      	movs	r1, #8
 8001c10:	4816      	ldr	r0, [pc, #88]	; (8001c6c <MX_GPIO_Init+0xf8>)
 8001c12:	f7ff ff72 	bl	8001afa <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(button_GPIO_Port, button_Pin, LL_GPIO_MODE_INPUT);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2108      	movs	r1, #8
 8001c1a:	4814      	ldr	r0, [pc, #80]	; (8001c6c <MX_GPIO_Init+0xf8>)
 8001c1c:	f7ff ff3e 	bl	8001a9c <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8001c20:	2308      	movs	r3, #8
 8001c22:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001c34:	2301      	movs	r3, #1
 8001c36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f001 f9b8 	bl	8002fb4 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c44:	f7ff fe5a 	bl	80018fc <__NVIC_GetPriorityGrouping>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff feaa 	bl	80019a8 <NVIC_EncodePriority>
 8001c54:	4603      	mov	r3, r0
 8001c56:	4619      	mov	r1, r3
 8001c58:	2009      	movs	r0, #9
 8001c5a:	f7ff fe7b 	bl	8001954 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8001c5e:	2009      	movs	r0, #9
 8001c60:	f7ff fe5a 	bl	8001918 <__NVIC_EnableIRQ>

}
 8001c64:	bf00      	nop
 8001c66:	3728      	adds	r7, #40	; 0x28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	48000400 	.word	0x48000400

08001c70 <__NVIC_GetPriorityGrouping>:
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <__NVIC_GetPriorityGrouping+0x18>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	f003 0307 	and.w	r3, r3, #7
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_EnableIRQ>:
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	db0b      	blt.n	8001cb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	f003 021f 	and.w	r2, r3, #31
 8001ca4:	4907      	ldr	r1, [pc, #28]	; (8001cc4 <__NVIC_EnableIRQ+0x38>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	2001      	movs	r0, #1
 8001cae:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000e100 	.word	0xe000e100

08001cc8 <__NVIC_SetPriority>:
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	6039      	str	r1, [r7, #0]
 8001cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	db0a      	blt.n	8001cf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	490c      	ldr	r1, [pc, #48]	; (8001d14 <__NVIC_SetPriority+0x4c>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	0112      	lsls	r2, r2, #4
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	440b      	add	r3, r1
 8001cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001cf0:	e00a      	b.n	8001d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4908      	ldr	r1, [pc, #32]	; (8001d18 <__NVIC_SetPriority+0x50>)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	3b04      	subs	r3, #4
 8001d00:	0112      	lsls	r2, r2, #4
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	440b      	add	r3, r1
 8001d06:	761a      	strb	r2, [r3, #24]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000e100 	.word	0xe000e100
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <NVIC_EncodePriority>:
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f1c3 0307 	rsb	r3, r3, #7
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	bf28      	it	cs
 8001d3a:	2304      	movcs	r3, #4
 8001d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3304      	adds	r3, #4
 8001d42:	2b06      	cmp	r3, #6
 8001d44:	d902      	bls.n	8001d4c <NVIC_EncodePriority+0x30>
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3b03      	subs	r3, #3
 8001d4a:	e000      	b.n	8001d4e <NVIC_EncodePriority+0x32>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	401a      	ands	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d64:	f04f 31ff 	mov.w	r1, #4294967295
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	43d9      	mvns	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	4313      	orrs	r3, r2
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3724      	adds	r7, #36	; 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f043 0201 	orr.w	r2, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	601a      	str	r2, [r3, #0]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	601a      	str	r2, [r3, #0]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	601a      	str	r2, [r3, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b085      	sub	sp, #20
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001df6:	f023 0306 	bic.w	r3, r3, #6
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	431a      	orrs	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	60da      	str	r2, [r3, #12]
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	60da      	str	r2, [r3, #12]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f043 0204 	orr.w	r2, r3, #4
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	601a      	str	r2, [r3, #0]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 0204 	bic.w	r2, r3, #4
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	601a      	str	r2, [r3, #0]
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d101      	bne.n	8001e8a <LL_I2C_IsActiveFlag_TXIS+0x18>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d101      	bne.n	8001eb0 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f003 0320 	and.w	r3, r3, #32
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	d101      	bne.n	8001ed6 <LL_I2C_IsActiveFlag_STOP+0x18>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	f043 0220 	orr.w	r2, r3, #32
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	61da      	str	r2, [r3, #28]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	605a      	str	r2, [r3, #4]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	0d5b      	lsrs	r3, r3, #21
 8001f3a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <LL_I2C_HandleTransfer+0x48>)
 8001f40:	430b      	orrs	r3, r1
 8001f42:	43db      	mvns	r3, r3
 8001f44:	401a      	ands	r2, r3
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4319      	orrs	r1, r3
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	041b      	lsls	r3, r3, #16
 8001f50:	4319      	orrs	r1, r3
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	4319      	orrs	r1, r3
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	03ff7bff 	.word	0x03ff7bff

08001f70 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	b2db      	uxtb	r3, r3
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001f96:	78fa      	ldrb	r2, [r7, #3]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_AHB1_GRP1_EnableClock>:
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	4907      	ldr	r1, [pc, #28]	; (8001fd4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	40021000 	.word	0x40021000

08001fd8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fe2:	69da      	ldr	r2, [r3, #28]
 8001fe4:	4907      	ldr	r1, [pc, #28]	; (8002004 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fee:	69da      	ldr	r2, [r3, #28]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	40021000 	.word	0x40021000

08002008 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08e      	sub	sp, #56	; 0x38
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800200e:	f107 031c 	add.w	r3, r7, #28
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	60da      	str	r2, [r3, #12]
 800201c:	611a      	str	r2, [r3, #16]
 800201e:	615a      	str	r2, [r3, #20]
 8002020:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
 8002030:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002032:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002036:	f7ff ffb7 	bl	8001fa8 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800203a:	23c0      	movs	r3, #192	; 0xc0
 800203c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800203e:	2302      	movs	r3, #2
 8002040:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002042:	2303      	movs	r3, #3
 8002044:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002046:	2301      	movs	r3, #1
 8002048:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800204a:	2301      	movs	r3, #1
 800204c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800204e:	2304      	movs	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	4619      	mov	r1, r3
 8002056:	4821      	ldr	r0, [pc, #132]	; (80020dc <MX_I2C1_Init+0xd4>)
 8002058:	f001 f9a4 	bl	80033a4 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800205c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002060:	f7ff ffba 	bl	8001fd8 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8002064:	f7ff fe04 	bl	8001c70 <__NVIC_GetPriorityGrouping>
 8002068:	4603      	mov	r3, r0
 800206a:	2200      	movs	r2, #0
 800206c:	2102      	movs	r1, #2
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fe54 	bl	8001d1c <NVIC_EncodePriority>
 8002074:	4603      	mov	r3, r0
 8002076:	4619      	mov	r1, r3
 8002078:	201f      	movs	r0, #31
 800207a:	f7ff fe25 	bl	8001cc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800207e:	201f      	movs	r0, #31
 8002080:	f7ff fe04 	bl	8001c8c <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8002084:	4816      	ldr	r0, [pc, #88]	; (80020e0 <MX_I2C1_Init+0xd8>)
 8002086:	f7ff ff3d 	bl	8001f04 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800208a:	4815      	ldr	r0, [pc, #84]	; (80020e0 <MX_I2C1_Init+0xd8>)
 800208c:	f7ff fec1 	bl	8001e12 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002090:	4813      	ldr	r0, [pc, #76]	; (80020e0 <MX_I2C1_Init+0xd8>)
 8002092:	f7ff fe96 	bl	8001dc2 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8002096:	4812      	ldr	r0, [pc, #72]	; (80020e0 <MX_I2C1_Init+0xd8>)
 8002098:	f7ff fe83 	bl	8001da2 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800209c:	2300      	movs	r3, #0
 800209e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <MX_I2C1_Init+0xdc>)
 80020a2:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 80020ac:	2302      	movs	r3, #2
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80020b4:	2300      	movs	r3, #0
 80020b6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	4619      	mov	r1, r3
 80020be:	4808      	ldr	r0, [pc, #32]	; (80020e0 <MX_I2C1_Init+0xd8>)
 80020c0:	f001 fa83 	bl	80035ca <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2100      	movs	r1, #0
 80020c8:	4805      	ldr	r0, [pc, #20]	; (80020e0 <MX_I2C1_Init+0xd8>)
 80020ca:	f7ff fe8a 	bl	8001de2 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 80020ce:	4804      	ldr	r0, [pc, #16]	; (80020e0 <MX_I2C1_Init+0xd8>)
 80020d0:	f7ff fe57 	bl	8001d82 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 80020d4:	bf00      	nop
 80020d6:	3738      	adds	r7, #56	; 0x38
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	48000400 	.word	0x48000400
 80020e0:	40005400 	.word	0x40005400
 80020e4:	2000090e 	.word	0x2000090e

080020e8 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	4604      	mov	r4, r0
 80020f0:	4608      	mov	r0, r1
 80020f2:	4611      	mov	r1, r2
 80020f4:	461a      	mov	r2, r3
 80020f6:	4623      	mov	r3, r4
 80020f8:	71fb      	strb	r3, [r7, #7]
 80020fa:	4603      	mov	r3, r0
 80020fc:	71bb      	strb	r3, [r7, #6]
 80020fe:	460b      	mov	r3, r1
 8002100:	717b      	strb	r3, [r7, #5]
 8002102:	4613      	mov	r3, r2
 8002104:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8002106:	793b      	ldrb	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 800210c:	79bb      	ldrb	r3, [r7, #6]
 800210e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002112:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002114:	7979      	ldrb	r1, [r7, #5]
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <i2c_master_write+0x80>)
 8002118:	9301      	str	r3, [sp, #4]
 800211a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	2302      	movs	r3, #2
 8002122:	2200      	movs	r2, #0
 8002124:	4811      	ldr	r0, [pc, #68]	; (800216c <i2c_master_write+0x84>)
 8002126:	f7ff fefd 	bl	8001f24 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 800212a:	79bb      	ldrb	r3, [r7, #6]
 800212c:	4619      	mov	r1, r3
 800212e:	480f      	ldr	r0, [pc, #60]	; (800216c <i2c_master_write+0x84>)
 8002130:	f7ff ff2b 	bl	8001f8a <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002134:	e00a      	b.n	800214c <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8002136:	480d      	ldr	r0, [pc, #52]	; (800216c <i2c_master_write+0x84>)
 8002138:	f7ff fe9b 	bl	8001e72 <LL_I2C_IsActiveFlag_TXIS>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d004      	beq.n	800214c <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	4619      	mov	r1, r3
 8002146:	4809      	ldr	r0, [pc, #36]	; (800216c <i2c_master_write+0x84>)
 8002148:	f7ff ff1f 	bl	8001f8a <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800214c:	4807      	ldr	r0, [pc, #28]	; (800216c <i2c_master_write+0x84>)
 800214e:	f7ff feb6 	bl	8001ebe <LL_I2C_IsActiveFlag_STOP>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0ee      	beq.n	8002136 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8002158:	4804      	ldr	r0, [pc, #16]	; (800216c <i2c_master_write+0x84>)
 800215a:	f7ff fec3 	bl	8001ee4 <LL_I2C_ClearFlag_STOP>
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	bd90      	pop	{r4, r7, pc}
 8002166:	bf00      	nop
 8002168:	80002000 	.word	0x80002000
 800216c:	40005400 	.word	0x40005400

08002170 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af02      	add	r7, sp, #8
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	4608      	mov	r0, r1
 800217a:	4611      	mov	r1, r2
 800217c:	461a      	mov	r2, r3
 800217e:	4603      	mov	r3, r0
 8002180:	70fb      	strb	r3, [r7, #3]
 8002182:	460b      	mov	r3, r1
 8002184:	70bb      	strb	r3, [r7, #2]
 8002186:	4613      	mov	r3, r2
 8002188:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 800218a:	4a30      	ldr	r2, [pc, #192]	; (800224c <i2c_master_read+0xdc>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8002190:	7c3b      	ldrb	r3, [r7, #16]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8002196:	78bb      	ldrb	r3, [r7, #2]
 8002198:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800219c:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 800219e:	4b2c      	ldr	r3, [pc, #176]	; (8002250 <i2c_master_read+0xe0>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 80021a4:	482b      	ldr	r0, [pc, #172]	; (8002254 <i2c_master_read+0xe4>)
 80021a6:	f7ff fe44 	bl	8001e32 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80021aa:	7879      	ldrb	r1, [r7, #1]
 80021ac:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <i2c_master_read+0xe8>)
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	2301      	movs	r3, #1
 80021b8:	2200      	movs	r2, #0
 80021ba:	4826      	ldr	r0, [pc, #152]	; (8002254 <i2c_master_read+0xe4>)
 80021bc:	f7ff feb2 	bl	8001f24 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80021c0:	e00a      	b.n	80021d8 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80021c2:	4824      	ldr	r0, [pc, #144]	; (8002254 <i2c_master_read+0xe4>)
 80021c4:	f7ff fe55 	bl	8001e72 <LL_I2C_IsActiveFlag_TXIS>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d004      	beq.n	80021d8 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 80021ce:	78bb      	ldrb	r3, [r7, #2]
 80021d0:	4619      	mov	r1, r3
 80021d2:	4820      	ldr	r0, [pc, #128]	; (8002254 <i2c_master_read+0xe4>)
 80021d4:	f7ff fed9 	bl	8001f8a <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80021d8:	481e      	ldr	r0, [pc, #120]	; (8002254 <i2c_master_read+0xe4>)
 80021da:	f7ff fe70 	bl	8001ebe <LL_I2C_IsActiveFlag_STOP>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0ee      	beq.n	80021c2 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80021e4:	481b      	ldr	r0, [pc, #108]	; (8002254 <i2c_master_read+0xe4>)
 80021e6:	f7ff fe7d 	bl	8001ee4 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 80021ea:	bf00      	nop
 80021ec:	4819      	ldr	r0, [pc, #100]	; (8002254 <i2c_master_read+0xe4>)
 80021ee:	f7ff fe66 	bl	8001ebe <LL_I2C_IsActiveFlag_STOP>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f9      	bne.n	80021ec <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80021f8:	7879      	ldrb	r1, [r7, #1]
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	4a17      	ldr	r2, [pc, #92]	; (800225c <i2c_master_read+0xec>)
 80021fe:	9201      	str	r2, [sp, #4]
 8002200:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002204:	9200      	str	r2, [sp, #0]
 8002206:	2200      	movs	r2, #0
 8002208:	4812      	ldr	r0, [pc, #72]	; (8002254 <i2c_master_read+0xe4>)
 800220a:	f7ff fe8b 	bl	8001f24 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800220e:	bf00      	nop
 8002210:	4810      	ldr	r0, [pc, #64]	; (8002254 <i2c_master_read+0xe4>)
 8002212:	f7ff fe54 	bl	8001ebe <LL_I2C_IsActiveFlag_STOP>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f9      	beq.n	8002210 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 800221c:	480d      	ldr	r0, [pc, #52]	; (8002254 <i2c_master_read+0xe4>)
 800221e:	f7ff fe61 	bl	8001ee4 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8002222:	480c      	ldr	r0, [pc, #48]	; (8002254 <i2c_master_read+0xe4>)
 8002224:	f7ff fe15 	bl	8001e52 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8002228:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <i2c_master_read+0xe4>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	4a09      	ldr	r2, [pc, #36]	; (8002254 <i2c_master_read+0xe4>)
 800222e:	f043 0310 	orr.w	r3, r3, #16
 8002232:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <i2c_master_read+0xf0>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <i2c_master_read+0xe0>)
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8002240:	4b02      	ldr	r3, [pc, #8]	; (800224c <i2c_master_read+0xdc>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200000b0 	.word	0x200000b0
 8002250:	20000091 	.word	0x20000091
 8002254:	40005400 	.word	0x40005400
 8002258:	80002000 	.word	0x80002000
 800225c:	80002400 	.word	0x80002400
 8002260:	20000092 	.word	0x20000092

08002264 <I2C1_EV_IRQHandler>:
	(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
	end_of_read_flag = 0;
}

void I2C1_EV_IRQHandler(void)
{
 8002264:	b598      	push	{r3, r4, r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
  /* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8002268:	4812      	ldr	r0, [pc, #72]	; (80022b4 <I2C1_EV_IRQHandler+0x50>)
 800226a:	f7ff fe15 	bl	8001e98 <LL_I2C_IsActiveFlag_RXNE>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d01c      	beq.n	80022ae <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8002274:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <I2C1_EV_IRQHandler+0x54>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b10      	ldr	r3, [pc, #64]	; (80022bc <I2C1_EV_IRQHandler+0x58>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	1c59      	adds	r1, r3, #1
 8002280:	b2c8      	uxtb	r0, r1
 8002282:	490e      	ldr	r1, [pc, #56]	; (80022bc <I2C1_EV_IRQHandler+0x58>)
 8002284:	7008      	strb	r0, [r1, #0]
 8002286:	18d4      	adds	r4, r2, r3
 8002288:	480a      	ldr	r0, [pc, #40]	; (80022b4 <I2C1_EV_IRQHandler+0x50>)
 800228a:	f7ff fe71 	bl	8001f70 <LL_I2C_ReceiveData8>
 800228e:	4603      	mov	r3, r0
 8002290:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <I2C1_EV_IRQHandler+0x58>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b13      	cmp	r3, #19
 800229a:	d903      	bls.n	80022a4 <I2C1_EV_IRQHandler+0x40>
 800229c:	4b07      	ldr	r3, [pc, #28]	; (80022bc <I2C1_EV_IRQHandler+0x58>)
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
 80022a2:	e001      	b.n	80022a8 <I2C1_EV_IRQHandler+0x44>
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <I2C1_EV_IRQHandler+0x58>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <I2C1_EV_IRQHandler+0x5c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd98      	pop	{r3, r4, r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40005400 	.word	0x40005400
 80022b8:	200000b0 	.word	0x200000b0
 80022bc:	20000092 	.word	0x20000092
 80022c0:	20000091 	.word	0x20000091

080022c4 <lsm6ds0_read_byte>:
#include "lps25hb.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <lsm6ds0_read_byte+0x30>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	79fa      	ldrb	r2, [r7, #7]
 80022d8:	f107 000f 	add.w	r0, r7, #15
 80022dc:	2100      	movs	r1, #0
 80022de:	9100      	str	r1, [sp, #0]
 80022e0:	2101      	movs	r1, #1
 80022e2:	f7ff ff45 	bl	8002170 <i2c_master_read>
 80022e6:	4603      	mov	r3, r0
 80022e8:	781b      	ldrb	r3, [r3, #0]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000003 	.word	0x20000003

080022f8 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	460a      	mov	r2, r1
 8002302:	71fb      	strb	r3, [r7, #7]
 8002304:	4613      	mov	r3, r2
 8002306:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <lsm6ds0_write_byte+0x28>)
 800230a:	781a      	ldrb	r2, [r3, #0]
 800230c:	79f9      	ldrb	r1, [r7, #7]
 800230e:	79b8      	ldrb	r0, [r7, #6]
 8002310:	2300      	movs	r3, #0
 8002312:	f7ff fee9 	bl	80020e8 <i2c_master_write>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000003 	.word	0x20000003

08002324 <lsm6ds0_init>:
	*z = (zz >> 4) / 1000.0f;
}


uint8_t lsm6ds0_init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 800232a:	2301      	movs	r3, #1
 800232c:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 800232e:	2064      	movs	r0, #100	; 0x64
 8002330:	f001 fdaa 	bl	8003e88 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8002334:	200f      	movs	r0, #15
 8002336:	f7ff ffc5 	bl	80022c4 <lsm6ds0_read_byte>
 800233a:	4603      	mov	r3, r0
 800233c:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 800233e:	79bb      	ldrb	r3, [r7, #6]
 8002340:	2b68      	cmp	r3, #104	; 0x68
 8002342:	d102      	bne.n	800234a <lsm6ds0_init+0x26>
	{
		status = 1;
 8002344:	2301      	movs	r3, #1
 8002346:	71fb      	strb	r3, [r7, #7]
 8002348:	e00f      	b.n	800236a <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <lsm6ds0_init+0x60>)
 800234c:	22d6      	movs	r2, #214	; 0xd6
 800234e:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8002350:	200f      	movs	r0, #15
 8002352:	f7ff ffb7 	bl	80022c4 <lsm6ds0_read_byte>
 8002356:	4603      	mov	r3, r0
 8002358:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 800235a:	79bb      	ldrb	r3, [r7, #6]
 800235c:	2b68      	cmp	r3, #104	; 0x68
 800235e:	d102      	bne.n	8002366 <lsm6ds0_init+0x42>
		{
			status = 1;
 8002360:	2301      	movs	r3, #1
 8002362:	71fb      	strb	r3, [r7, #7]
 8002364:	e001      	b.n	800236a <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 800236e:	797b      	ldrb	r3, [r7, #5]
 8002370:	4619      	mov	r1, r3
 8002372:	2010      	movs	r0, #16
 8002374:	f7ff ffc0 	bl	80022f8 <lsm6ds0_write_byte>

	return status;
 8002378:	79fb      	ldrb	r3, [r7, #7]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000003 	.word	0x20000003

08002388 <__NVIC_SetPriorityGrouping>:
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ba:	4a04      	ldr	r2, [pc, #16]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	60d3      	str	r3, [r2, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <LL_RCC_HSI_Enable+0x1c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a04      	ldr	r2, [pc, #16]	; (80023ec <LL_RCC_HSI_Enable+0x1c>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6013      	str	r3, [r2, #0]
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000

080023f0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <LL_RCC_HSI_IsReady+0x20>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	bf0c      	ite	eq
 8002400:	2301      	moveq	r3, #1
 8002402:	2300      	movne	r3, #0
 8002404:	b2db      	uxtb	r3, r3
}
 8002406:	4618      	mov	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	40021000 	.word	0x40021000

08002414 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800241c:	4b07      	ldr	r3, [pc, #28]	; (800243c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4904      	ldr	r1, [pc, #16]	; (800243c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800242a:	4313      	orrs	r3, r2
 800242c:	600b      	str	r3, [r1, #0]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000

08002440 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <LL_RCC_SetSysClkSource+0x24>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f023 0203 	bic.w	r2, r3, #3
 8002450:	4904      	ldr	r1, [pc, #16]	; (8002464 <LL_RCC_SetSysClkSource+0x24>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	40021000 	.word	0x40021000

08002468 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <LL_RCC_GetSysClkSource+0x18>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 030c 	and.w	r3, r3, #12
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000

08002484 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <LL_RCC_SetAHBPrescaler+0x24>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002494:	4904      	ldr	r1, [pc, #16]	; (80024a8 <LL_RCC_SetAHBPrescaler+0x24>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4313      	orrs	r3, r2
 800249a:	604b      	str	r3, [r1, #4]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	40021000 	.word	0x40021000

080024ac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024bc:	4904      	ldr	r1, [pc, #16]	; (80024d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40021000 	.word	0x40021000

080024d4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024e4:	4904      	ldr	r1, [pc, #16]	; (80024f8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	40021000 	.word	0x40021000

080024fc <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <LL_RCC_SetI2CClockSource+0x2c>)
 8002506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	0e1b      	lsrs	r3, r3, #24
 800250c:	43db      	mvns	r3, r3
 800250e:	401a      	ands	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002516:	4904      	ldr	r1, [pc, #16]	; (8002528 <LL_RCC_SetI2CClockSource+0x2c>)
 8002518:	4313      	orrs	r3, r2
 800251a:	630b      	str	r3, [r1, #48]	; 0x30
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	40021000 	.word	0x40021000

0800252c <LL_APB1_GRP1_EnableClock>:
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002536:	69da      	ldr	r2, [r3, #28]
 8002538:	4907      	ldr	r1, [pc, #28]	; (8002558 <LL_APB1_GRP1_EnableClock+0x2c>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4313      	orrs	r3, r2
 800253e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002542:	69da      	ldr	r2, [r3, #28]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4013      	ands	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800254a:	68fb      	ldr	r3, [r7, #12]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	40021000 	.word	0x40021000

0800255c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002566:	699a      	ldr	r2, [r3, #24]
 8002568:	4907      	ldr	r1, [pc, #28]	; (8002588 <LL_APB2_GRP1_EnableClock+0x2c>)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4313      	orrs	r3, r2
 800256e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002572:	699a      	ldr	r2, [r3, #24]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4013      	ands	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800257a:	68fb      	ldr	r3, [r7, #12]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	40021000 	.word	0x40021000

0800258c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <LL_FLASH_SetLatency+0x24>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 0207 	bic.w	r2, r3, #7
 800259c:	4904      	ldr	r1, [pc, #16]	; (80025b0 <LL_FLASH_SetLatency+0x24>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	600b      	str	r3, [r1, #0]
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	40022000 	.word	0x40022000

080025b4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <LL_FLASH_GetLatency+0x18>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0307 	and.w	r3, r3, #7
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40022000 	.word	0x40022000

080025d0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f043 0201 	orr.w	r2, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	601a      	str	r2, [r3, #0]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f043 0201 	orr.w	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	60da      	str	r2, [r3, #12]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002616:	2001      	movs	r0, #1
 8002618:	f7ff ffa0 	bl	800255c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800261c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002620:	f7ff ff84 	bl	800252c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002624:	2003      	movs	r0, #3
 8002626:	f7ff feaf 	bl	8002388 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800262a:	f000 f82d 	bl	8002688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800262e:	f7ff faa1 	bl	8001b74 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002632:	f000 fb05 	bl	8002c40 <MX_TIM2_Init>
  MX_I2C1_Init();
 8002636:	f7ff fce7 	bl	8002008 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //LL_TIM_EnableIT_CC2(TIM2);
  LL_TIM_EnableIT_UPDATE(TIM2);
 800263a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800263e:	f7ff ffd7 	bl	80025f0 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 8002642:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002646:	f7ff ffc3 	bl	80025d0 <LL_TIM_EnableCounter>

  lsm6ds0_init();
 800264a:	f7ff fe6b 	bl	8002324 <lsm6ds0_init>
  temperature_init();
 800264e:	f7fd ff0f 	bl	8000470 <temperature_init>
  pressure_init();
 8002652:	f7fd fe45 	bl	80002e0 <pressure_init>

  resetAllDigits();
 8002656:	f7fe fa39 	bl	8000acc <resetAllDigits>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //lsm6ds0_get_acc(acc, (acc+1), (acc+2));
	  if(mode == 0){
 800265a:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <main+0x74>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d102      	bne.n	8002668 <main+0x58>
		  printTemperature();
 8002662:	f000 f847 	bl	80026f4 <printTemperature>
 8002666:	e7f8      	b.n	800265a <main+0x4a>
	  }
	  else if(mode == 1){
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <main+0x74>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d1f4      	bne.n	800265a <main+0x4a>
		  float altitude = get_altitude();
 8002670:	f7fd fe82 	bl	8000378 <get_altitude>
 8002674:	ee07 0a90 	vmov	s15, r0
 8002678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800267c:	edc7 7a01 	vstr	s15, [r7, #4]
	  if(mode == 0){
 8002680:	e7eb      	b.n	800265a <main+0x4a>
 8002682:	bf00      	nop
 8002684:	200000cf 	.word	0x200000cf

08002688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800268c:	2000      	movs	r0, #0
 800268e:	f7ff ff7d 	bl	800258c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8002692:	bf00      	nop
 8002694:	f7ff ff8e 	bl	80025b4 <LL_FLASH_GetLatency>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1fa      	bne.n	8002694 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800269e:	f7ff fe97 	bl	80023d0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80026a2:	bf00      	nop
 80026a4:	f7ff fea4 	bl	80023f0 <LL_RCC_HSI_IsReady>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d1fa      	bne.n	80026a4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80026ae:	2010      	movs	r0, #16
 80026b0:	f7ff feb0 	bl	8002414 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7ff fee5 	bl	8002484 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80026ba:	2000      	movs	r0, #0
 80026bc:	f7ff fef6 	bl	80024ac <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7ff ff07 	bl	80024d4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80026c6:	2000      	movs	r0, #0
 80026c8:	f7ff feba 	bl	8002440 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80026cc:	bf00      	nop
 80026ce:	f7ff fecb 	bl	8002468 <LL_RCC_GetSysClkSource>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1fa      	bne.n	80026ce <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80026d8:	4805      	ldr	r0, [pc, #20]	; (80026f0 <SystemClock_Config+0x68>)
 80026da:	f001 fbc7 	bl	8003e6c <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80026de:	4804      	ldr	r0, [pc, #16]	; (80026f0 <SystemClock_Config+0x68>)
 80026e0:	f001 fbf8 	bl	8003ed4 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80026e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80026e8:	f7ff ff08 	bl	80024fc <LL_RCC_SetI2CClockSource>
}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	007a1200 	.word	0x007a1200

080026f4 <printTemperature>:

/* USER CODE BEGIN 4 */
void printTemperature(){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
	char valueString[15];
	int16_t temperature = HTS221_Get_Temperature();
 80026fa:	f7fd feda 	bl	80004b2 <HTS221_Get_Temperature>
 80026fe:	4603      	mov	r3, r0
 8002700:	82fb      	strh	r3, [r7, #22]
	sprintf(valueString, "%d", temperature);
 8002702:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002706:	1d3b      	adds	r3, r7, #4
 8002708:	4934      	ldr	r1, [pc, #208]	; (80027dc <printTemperature+0xe8>)
 800270a:	4618      	mov	r0, r3
 800270c:	f001 fc24 	bl	8003f58 <siprintf>
	memset(displayText, '\0', 15);
 8002710:	220f      	movs	r2, #15
 8002712:	2100      	movs	r1, #0
 8002714:	4832      	ldr	r0, [pc, #200]	; (80027e0 <printTemperature+0xec>)
 8002716:	f001 fc17 	bl	8003f48 <memset>
	//strcat(displayText, "tEMP_");
	if(valueString[0]=='-'){
 800271a:	793b      	ldrb	r3, [r7, #4]
 800271c:	2b2d      	cmp	r3, #45	; 0x2d
 800271e:	d119      	bne.n	8002754 <printTemperature+0x60>
		strncat(displayText, valueString, 3);
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	2203      	movs	r2, #3
 8002724:	4619      	mov	r1, r3
 8002726:	482e      	ldr	r0, [pc, #184]	; (80027e0 <printTemperature+0xec>)
 8002728:	f001 fc36 	bl	8003f98 <strncat>
		strcat(displayText, ".");
 800272c:	482c      	ldr	r0, [pc, #176]	; (80027e0 <printTemperature+0xec>)
 800272e:	f7fd fd4f 	bl	80001d0 <strlen>
 8002732:	4603      	mov	r3, r0
 8002734:	461a      	mov	r2, r3
 8002736:	4b2a      	ldr	r3, [pc, #168]	; (80027e0 <printTemperature+0xec>)
 8002738:	4413      	add	r3, r2
 800273a:	492a      	ldr	r1, [pc, #168]	; (80027e4 <printTemperature+0xf0>)
 800273c:	461a      	mov	r2, r3
 800273e:	460b      	mov	r3, r1
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	8013      	strh	r3, [r2, #0]
		strncat(displayText, &valueString[3],1);
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	3303      	adds	r3, #3
 8002748:	2201      	movs	r2, #1
 800274a:	4619      	mov	r1, r3
 800274c:	4824      	ldr	r0, [pc, #144]	; (80027e0 <printTemperature+0xec>)
 800274e:	f001 fc23 	bl	8003f98 <strncat>
 8002752:	e03c      	b.n	80027ce <printTemperature+0xda>
	}
	else if(temperature > 999){
 8002754:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800275c:	db0c      	blt.n	8002778 <printTemperature+0x84>
		strcat(displayText, "99.9");
 800275e:	4820      	ldr	r0, [pc, #128]	; (80027e0 <printTemperature+0xec>)
 8002760:	f7fd fd36 	bl	80001d0 <strlen>
 8002764:	4603      	mov	r3, r0
 8002766:	461a      	mov	r2, r3
 8002768:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <printTemperature+0xec>)
 800276a:	4413      	add	r3, r2
 800276c:	4a1e      	ldr	r2, [pc, #120]	; (80027e8 <printTemperature+0xf4>)
 800276e:	6810      	ldr	r0, [r2, #0]
 8002770:	6018      	str	r0, [r3, #0]
 8002772:	7912      	ldrb	r2, [r2, #4]
 8002774:	711a      	strb	r2, [r3, #4]
 8002776:	e02a      	b.n	80027ce <printTemperature+0xda>
	}
	else if(temperature < (-999)){
 8002778:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800277c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8002780:	dc0c      	bgt.n	800279c <printTemperature+0xa8>
		strcat(displayText, "-99.9");
 8002782:	4817      	ldr	r0, [pc, #92]	; (80027e0 <printTemperature+0xec>)
 8002784:	f7fd fd24 	bl	80001d0 <strlen>
 8002788:	4603      	mov	r3, r0
 800278a:	461a      	mov	r2, r3
 800278c:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <printTemperature+0xec>)
 800278e:	4413      	add	r3, r2
 8002790:	4a16      	ldr	r2, [pc, #88]	; (80027ec <printTemperature+0xf8>)
 8002792:	6810      	ldr	r0, [r2, #0]
 8002794:	6018      	str	r0, [r3, #0]
 8002796:	8892      	ldrh	r2, [r2, #4]
 8002798:	809a      	strh	r2, [r3, #4]
 800279a:	e018      	b.n	80027ce <printTemperature+0xda>
	}
	else{
		strncat(displayText, valueString, 2);
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	2202      	movs	r2, #2
 80027a0:	4619      	mov	r1, r3
 80027a2:	480f      	ldr	r0, [pc, #60]	; (80027e0 <printTemperature+0xec>)
 80027a4:	f001 fbf8 	bl	8003f98 <strncat>
		strcat(displayText, ".");
 80027a8:	480d      	ldr	r0, [pc, #52]	; (80027e0 <printTemperature+0xec>)
 80027aa:	f7fd fd11 	bl	80001d0 <strlen>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <printTemperature+0xec>)
 80027b4:	4413      	add	r3, r2
 80027b6:	490b      	ldr	r1, [pc, #44]	; (80027e4 <printTemperature+0xf0>)
 80027b8:	461a      	mov	r2, r3
 80027ba:	460b      	mov	r3, r1
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	8013      	strh	r3, [r2, #0]
		strncat(displayText, &valueString[2],1);
 80027c0:	1d3b      	adds	r3, r7, #4
 80027c2:	3302      	adds	r3, #2
 80027c4:	2201      	movs	r2, #1
 80027c6:	4619      	mov	r1, r3
 80027c8:	4805      	ldr	r0, [pc, #20]	; (80027e0 <printTemperature+0xec>)
 80027ca:	f001 fbe5 	bl	8003f98 <strncat>
	}
	setDisplayText(displayText);
 80027ce:	4804      	ldr	r0, [pc, #16]	; (80027e0 <printTemperature+0xec>)
 80027d0:	f7fd ff08 	bl	80005e4 <setDisplayText>
}
 80027d4:	bf00      	nop
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	080050a0 	.word	0x080050a0
 80027e0:	200000c0 	.word	0x200000c0
 80027e4:	080050a4 	.word	0x080050a4
 80027e8:	080050a8 	.word	0x080050a8
 80027ec:	080050b0 	.word	0x080050b0

080027f0 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80027fa:	695a      	ldr	r2, [r3, #20]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4013      	ands	r3, r2
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	429a      	cmp	r2, r3
 8002804:	bf0c      	ite	eq
 8002806:	2301      	moveq	r3, #1
 8002808:	2300      	movne	r3, #0
 800280a:	b2db      	uxtb	r3, r3
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	40010400 	.word	0x40010400

0800281c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002824:	4a04      	ldr	r2, [pc, #16]	; (8002838 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6153      	str	r3, [r2, #20]
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40010400 	.word	0x40010400

0800283c <LL_TIM_ClearFlag_UPDATE>:
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f06f 0201 	mvn.w	r2, #1
 800284a:	611a      	str	r2, [r3, #16]
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800287e:	b480      	push	{r7}
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002882:	e7fe      	b.n	8002882 <NMI_Handler+0x4>

08002884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002888:	e7fe      	b.n	8002888 <HardFault_Handler+0x4>

0800288a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800288e:	e7fe      	b.n	800288e <MemManage_Handler+0x4>

08002890 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002894:	e7fe      	b.n	8002894 <BusFault_Handler+0x4>

08002896 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002896:	b480      	push	{r7}
 8002898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800289a:	e7fe      	b.n	800289a <UsageFault_Handler+0x4>

0800289c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 80028d8:	2008      	movs	r0, #8
 80028da:	f7ff ff89 	bl	80027f0 <LL_EXTI_IsActiveFlag_0_31>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <EXTI3_IRQHandler+0x38>
  {
    /* USER CODE BEGIN LL_EXTI_LINE_3 */
    if(mode == 3){
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <EXTI3_IRQHandler+0x3c>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d103      	bne.n	80028f4 <EXTI3_IRQHandler+0x20>
		mode = 0;
 80028ec:	4b08      	ldr	r3, [pc, #32]	; (8002910 <EXTI3_IRQHandler+0x3c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	e005      	b.n	8002900 <EXTI3_IRQHandler+0x2c>
	}
    else{
		mode++;
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <EXTI3_IRQHandler+0x3c>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	3301      	adds	r3, #1
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <EXTI3_IRQHandler+0x3c>)
 80028fe:	701a      	strb	r2, [r3, #0]
	}
	LL_mDelay(100);
 8002900:	2064      	movs	r0, #100	; 0x64
 8002902:	f001 fac1 	bl	8003e88 <LL_mDelay>
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8002906:	2008      	movs	r0, #8
 8002908:	f7ff ff88 	bl	800281c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}
 8002910:	200000cf 	.word	0x200000cf

08002914 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 8002918:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800291c:	f7ff ff9c 	bl	8002858 <LL_TIM_IsActiveFlag_UPDATE>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <TIM2_IRQHandler+0x16>
		updateDisplay();
 8002926:	f7fd fe71 	bl	800060c <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM2);
 800292a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800292e:	f7ff ff85 	bl	800283c <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002940:	4a14      	ldr	r2, [pc, #80]	; (8002994 <_sbrk+0x5c>)
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <_sbrk+0x60>)
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800294c:	4b13      	ldr	r3, [pc, #76]	; (800299c <_sbrk+0x64>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d102      	bne.n	800295a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <_sbrk+0x64>)
 8002956:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <_sbrk+0x68>)
 8002958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <_sbrk+0x64>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	429a      	cmp	r2, r3
 8002966:	d207      	bcs.n	8002978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002968:	f001 fac4 	bl	8003ef4 <__errno>
 800296c:	4603      	mov	r3, r0
 800296e:	220c      	movs	r2, #12
 8002970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002972:	f04f 33ff 	mov.w	r3, #4294967295
 8002976:	e009      	b.n	800298c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002978:	4b08      	ldr	r3, [pc, #32]	; (800299c <_sbrk+0x64>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800297e:	4b07      	ldr	r3, [pc, #28]	; (800299c <_sbrk+0x64>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4413      	add	r3, r2
 8002986:	4a05      	ldr	r2, [pc, #20]	; (800299c <_sbrk+0x64>)
 8002988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800298a:	68fb      	ldr	r3, [r7, #12]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20003000 	.word	0x20003000
 8002998:	00000400 	.word	0x00000400
 800299c:	20000094 	.word	0x20000094
 80029a0:	200000f0 	.word	0x200000f0

080029a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <SystemInit+0x20>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ae:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <SystemInit+0x20>)
 80029b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <__NVIC_GetPriorityGrouping>:
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	0a1b      	lsrs	r3, r3, #8
 80029d2:	f003 0307 	and.w	r3, r3, #7
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_EnableIRQ>:
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	db0b      	blt.n	8002a0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4907      	ldr	r1, [pc, #28]	; (8002a1c <__NVIC_EnableIRQ+0x38>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2001      	movs	r0, #1
 8002a06:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000e100 	.word	0xe000e100

08002a20 <__NVIC_SetPriority>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	db0a      	blt.n	8002a4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	490c      	ldr	r1, [pc, #48]	; (8002a6c <__NVIC_SetPriority+0x4c>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	440b      	add	r3, r1
 8002a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a48:	e00a      	b.n	8002a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4908      	ldr	r1, [pc, #32]	; (8002a70 <__NVIC_SetPriority+0x50>)
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	3b04      	subs	r3, #4
 8002a58:	0112      	lsls	r2, r2, #4
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	761a      	strb	r2, [r3, #24]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000e100 	.word	0xe000e100
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <NVIC_EncodePriority>:
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f1c3 0307 	rsb	r3, r3, #7
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	bf28      	it	cs
 8002a92:	2304      	movcs	r3, #4
 8002a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d902      	bls.n	8002aa4 <NVIC_EncodePriority+0x30>
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3b03      	subs	r3, #3
 8002aa2:	e000      	b.n	8002aa6 <NVIC_EncodePriority+0x32>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002abc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43d9      	mvns	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	4313      	orrs	r3, r2
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3724      	adds	r7, #36	; 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <LL_APB1_GRP1_EnableClock>:
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002ae4:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ae6:	69da      	ldr	r2, [r3, #28]
 8002ae8:	4907      	ldr	r1, [pc, #28]	; (8002b08 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002af2:	69da      	ldr	r2, [r3, #28]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4013      	ands	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002afa:	68fb      	ldr	r3, [r7, #12]
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	40021000 	.word	0x40021000

08002b0c <LL_TIM_DisableARRPreload>:
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	601a      	str	r2, [r3, #0]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <LL_TIM_OC_DisableFast>:
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d028      	beq.n	8002b8e <LL_TIM_OC_DisableFast+0x62>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d023      	beq.n	8002b8a <LL_TIM_OC_DisableFast+0x5e>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b10      	cmp	r3, #16
 8002b46:	d01e      	beq.n	8002b86 <LL_TIM_OC_DisableFast+0x5a>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	2b40      	cmp	r3, #64	; 0x40
 8002b4c:	d019      	beq.n	8002b82 <LL_TIM_OC_DisableFast+0x56>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b54:	d013      	beq.n	8002b7e <LL_TIM_OC_DisableFast+0x52>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b5c:	d00d      	beq.n	8002b7a <LL_TIM_OC_DisableFast+0x4e>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b64:	d007      	beq.n	8002b76 <LL_TIM_OC_DisableFast+0x4a>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b6c:	d101      	bne.n	8002b72 <LL_TIM_OC_DisableFast+0x46>
 8002b6e:	2307      	movs	r3, #7
 8002b70:	e00e      	b.n	8002b90 <LL_TIM_OC_DisableFast+0x64>
 8002b72:	2308      	movs	r3, #8
 8002b74:	e00c      	b.n	8002b90 <LL_TIM_OC_DisableFast+0x64>
 8002b76:	2306      	movs	r3, #6
 8002b78:	e00a      	b.n	8002b90 <LL_TIM_OC_DisableFast+0x64>
 8002b7a:	2305      	movs	r3, #5
 8002b7c:	e008      	b.n	8002b90 <LL_TIM_OC_DisableFast+0x64>
 8002b7e:	2304      	movs	r3, #4
 8002b80:	e006      	b.n	8002b90 <LL_TIM_OC_DisableFast+0x64>
 8002b82:	2303      	movs	r3, #3
 8002b84:	e004      	b.n	8002b90 <LL_TIM_OC_DisableFast+0x64>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e002      	b.n	8002b90 <LL_TIM_OC_DisableFast+0x64>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <LL_TIM_OC_DisableFast+0x64>
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3318      	adds	r3, #24
 8002b96:	4619      	mov	r1, r3
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <LL_TIM_OC_DisableFast+0x9c>)
 8002b9c:	5cd3      	ldrb	r3, [r2, r3]
 8002b9e:	440b      	add	r3, r1
 8002ba0:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	4908      	ldr	r1, [pc, #32]	; (8002bcc <LL_TIM_OC_DisableFast+0xa0>)
 8002baa:	5ccb      	ldrb	r3, [r1, r3]
 8002bac:	4619      	mov	r1, r3
 8002bae:	2304      	movs	r3, #4
 8002bb0:	408b      	lsls	r3, r1
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	401a      	ands	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	601a      	str	r2, [r3, #0]
}
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	080050b8 	.word	0x080050b8
 8002bcc:	080050c4 	.word	0x080050c4

08002bd0 <LL_TIM_SetClockSource>:
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002be2:	f023 0307 	bic.w	r3, r3, #7
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	609a      	str	r2, [r3, #8]
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <LL_TIM_SetTriggerOutput>:
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	605a      	str	r2, [r3, #4]
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <LL_TIM_DisableMasterSlaveMode>:
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	609a      	str	r2, [r3, #8]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08e      	sub	sp, #56	; 0x38
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	609a      	str	r2, [r3, #8]
 8002c52:	60da      	str	r2, [r3, #12]
 8002c54:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	2220      	movs	r2, #32
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f001 f973 	bl	8003f48 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002c62:	2001      	movs	r0, #1
 8002c64:	f7ff ff3a 	bl	8002adc <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002c68:	f7ff feae 	bl	80029c8 <__NVIC_GetPriorityGrouping>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2100      	movs	r1, #0
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fefe 	bl	8002a74 <NVIC_EncodePriority>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	201c      	movs	r0, #28
 8002c7e:	f7ff fecf 	bl	8002a20 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002c82:	201c      	movs	r0, #28
 8002c84:	f7ff feae 	bl	80029e4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8002c88:	f240 331f 	movw	r3, #799	; 0x31f
 8002c8c:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 49;
 8002c92:	2331      	movs	r3, #49	; 0x31
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002c96:	2300      	movs	r3, #0
 8002c98:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ca4:	f000 fd5e 	bl	8003764 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002ca8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cac:	f7ff ff2e 	bl	8002b0c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cb6:	f7ff ff8b 	bl	8002bd0 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cd8:	f000 fdb6 	bl	8003848 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8002cdc:	2101      	movs	r1, #1
 8002cde:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ce2:	f7ff ff23 	bl	8002b2c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cec:	f7ff ff85 	bl	8002bfa <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002cf0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cf4:	f7ff ff94 	bl	8002c20 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002cf8:	bf00      	nop
 8002cfa:	3738      	adds	r7, #56	; 0x38
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d04:	480d      	ldr	r0, [pc, #52]	; (8002d3c <LoopForever+0x6>)
  ldr r1, =_edata
 8002d06:	490e      	ldr	r1, [pc, #56]	; (8002d40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d08:	4a0e      	ldr	r2, [pc, #56]	; (8002d44 <LoopForever+0xe>)
  movs r3, #0
 8002d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d0c:	e002      	b.n	8002d14 <LoopCopyDataInit>

08002d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d12:	3304      	adds	r3, #4

08002d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d18:	d3f9      	bcc.n	8002d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d1a:	4a0b      	ldr	r2, [pc, #44]	; (8002d48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d1c:	4c0b      	ldr	r4, [pc, #44]	; (8002d4c <LoopForever+0x16>)
  movs r3, #0
 8002d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d20:	e001      	b.n	8002d26 <LoopFillZerobss>

08002d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d24:	3204      	adds	r2, #4

08002d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d28:	d3fb      	bcc.n	8002d22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d2a:	f7ff fe3b 	bl	80029a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d2e:	f001 f8e7 	bl	8003f00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d32:	f7ff fc6d 	bl	8002610 <main>

08002d36 <LoopForever>:

LoopForever:
    b LoopForever
 8002d36:	e7fe      	b.n	8002d36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d38:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002d44:	08005128 	.word	0x08005128
  ldr r2, =_sbss
 8002d48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002d4c:	200000ec 	.word	0x200000ec

08002d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d50:	e7fe      	b.n	8002d50 <ADC1_2_IRQHandler>
	...

08002d54 <LL_EXTI_EnableIT_0_31>:
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <LL_EXTI_EnableIT_0_31+0x20>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4904      	ldr	r1, [pc, #16]	; (8002d74 <LL_EXTI_EnableIT_0_31+0x20>)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40010400 	.word	0x40010400

08002d78 <LL_EXTI_EnableIT_32_63>:
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <LL_EXTI_EnableIT_32_63+0x20>)
 8002d82:	6a1a      	ldr	r2, [r3, #32]
 8002d84:	4904      	ldr	r1, [pc, #16]	; (8002d98 <LL_EXTI_EnableIT_32_63+0x20>)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	620b      	str	r3, [r1, #32]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	40010400 	.word	0x40010400

08002d9c <LL_EXTI_DisableIT_0_31>:
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <LL_EXTI_DisableIT_0_31+0x24>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	4904      	ldr	r1, [pc, #16]	; (8002dc0 <LL_EXTI_DisableIT_0_31+0x24>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40010400 	.word	0x40010400

08002dc4 <LL_EXTI_DisableIT_32_63>:
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <LL_EXTI_DisableIT_32_63+0x24>)
 8002dce:	6a1a      	ldr	r2, [r3, #32]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	4904      	ldr	r1, [pc, #16]	; (8002de8 <LL_EXTI_DisableIT_32_63+0x24>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	620b      	str	r3, [r1, #32]
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40010400 	.word	0x40010400

08002dec <LL_EXTI_EnableEvent_0_31>:
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <LL_EXTI_EnableEvent_0_31+0x20>)
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	4904      	ldr	r1, [pc, #16]	; (8002e0c <LL_EXTI_EnableEvent_0_31+0x20>)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	604b      	str	r3, [r1, #4]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	40010400 	.word	0x40010400

08002e10 <LL_EXTI_EnableEvent_32_63>:
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e1c:	4904      	ldr	r1, [pc, #16]	; (8002e30 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	40010400 	.word	0x40010400

08002e34 <LL_EXTI_DisableEvent_0_31>:
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	4904      	ldr	r1, [pc, #16]	; (8002e58 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	604b      	str	r3, [r1, #4]
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40010400 	.word	0x40010400

08002e5c <LL_EXTI_DisableEvent_32_63>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	4904      	ldr	r1, [pc, #16]	; (8002e80 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40010400 	.word	0x40010400

08002e84 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	4904      	ldr	r1, [pc, #16]	; (8002ea4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	40010400 	.word	0x40010400

08002ea8 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002eb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eb4:	4904      	ldr	r1, [pc, #16]	; (8002ec8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	40010400 	.word	0x40010400

08002ecc <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	43db      	mvns	r3, r3
 8002edc:	4904      	ldr	r1, [pc, #16]	; (8002ef0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	608b      	str	r3, [r1, #8]
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40010400 	.word	0x40010400

08002ef4 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002efe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	43db      	mvns	r3, r3
 8002f04:	4904      	ldr	r1, [pc, #16]	; (8002f18 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40010400 	.word	0x40010400

08002f1c <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002f24:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	4904      	ldr	r1, [pc, #16]	; (8002f3c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60cb      	str	r3, [r1, #12]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	40010400 	.word	0x40010400

08002f40 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4c:	4904      	ldr	r1, [pc, #16]	; (8002f60 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	40010400 	.word	0x40010400

08002f64 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	4904      	ldr	r1, [pc, #16]	; (8002f88 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	60cb      	str	r3, [r1, #12]
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40010400 	.word	0x40010400

08002f8c <LL_EXTI_DisableFallingTrig_32_63>:
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	4904      	ldr	r1, [pc, #16]	; (8002fb0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40010400 	.word	0x40010400

08002fb4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	7a1b      	ldrb	r3, [r3, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80cd 	beq.w	8003164 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d061      	beq.n	8003096 <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	7a5b      	ldrb	r3, [r3, #9]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d01c      	beq.n	8003014 <LL_EXTI_Init+0x60>
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	dc25      	bgt.n	800302a <LL_EXTI_Init+0x76>
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <LL_EXTI_Init+0x34>
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d00b      	beq.n	8002ffe <LL_EXTI_Init+0x4a>
 8002fe6:	e020      	b.n	800302a <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff ff21 	bl	8002e34 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff feac 	bl	8002d54 <LL_EXTI_EnableIT_0_31>
          break;
 8002ffc:	e018      	b.n	8003030 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff feca 	bl	8002d9c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff feed 	bl	8002dec <LL_EXTI_EnableEvent_0_31>
          break;
 8003012:	e00d      	b.n	8003030 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fe9b 	bl	8002d54 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fee2 	bl	8002dec <LL_EXTI_EnableEvent_0_31>
          break;
 8003028:	e002      	b.n	8003030 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	73fb      	strb	r3, [r7, #15]
          break;
 800302e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	7a9b      	ldrb	r3, [r3, #10]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d02e      	beq.n	8003096 <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7a9b      	ldrb	r3, [r3, #10]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d01c      	beq.n	800307a <LL_EXTI_Init+0xc6>
 8003040:	2b03      	cmp	r3, #3
 8003042:	dc25      	bgt.n	8003090 <LL_EXTI_Init+0xdc>
 8003044:	2b01      	cmp	r3, #1
 8003046:	d002      	beq.n	800304e <LL_EXTI_Init+0x9a>
 8003048:	2b02      	cmp	r3, #2
 800304a:	d00b      	beq.n	8003064 <LL_EXTI_Init+0xb0>
 800304c:	e020      	b.n	8003090 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff ff86 	bl	8002f64 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff ff11 	bl	8002e84 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003062:	e019      	b.n	8003098 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff ff2f 	bl	8002ecc <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff ff52 	bl	8002f1c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003078:	e00e      	b.n	8003098 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff ff00 	bl	8002e84 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff47 	bl	8002f1c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800308e:	e003      	b.n	8003098 <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
            break;
 8003094:	e000      	b.n	8003098 <LL_EXTI_Init+0xe4>
        }
      }
 8003096:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d076      	beq.n	800318e <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	7a5b      	ldrb	r3, [r3, #9]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d01c      	beq.n	80030e2 <LL_EXTI_Init+0x12e>
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	dc25      	bgt.n	80030f8 <LL_EXTI_Init+0x144>
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <LL_EXTI_Init+0x102>
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d00b      	beq.n	80030cc <LL_EXTI_Init+0x118>
 80030b4:	e020      	b.n	80030f8 <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fece 	bl	8002e5c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fe57 	bl	8002d78 <LL_EXTI_EnableIT_32_63>
          break;
 80030ca:	e018      	b.n	80030fe <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fe77 	bl	8002dc4 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fe98 	bl	8002e10 <LL_EXTI_EnableEvent_32_63>
          break;
 80030e0:	e00d      	b.n	80030fe <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff fe46 	bl	8002d78 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fe8d 	bl	8002e10 <LL_EXTI_EnableEvent_32_63>
          break;
 80030f6:	e002      	b.n	80030fe <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
          break;
 80030fc:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	7a9b      	ldrb	r3, [r3, #10]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d043      	beq.n	800318e <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	7a9b      	ldrb	r3, [r3, #10]
 800310a:	2b03      	cmp	r3, #3
 800310c:	d01c      	beq.n	8003148 <LL_EXTI_Init+0x194>
 800310e:	2b03      	cmp	r3, #3
 8003110:	dc25      	bgt.n	800315e <LL_EXTI_Init+0x1aa>
 8003112:	2b01      	cmp	r3, #1
 8003114:	d002      	beq.n	800311c <LL_EXTI_Init+0x168>
 8003116:	2b02      	cmp	r3, #2
 8003118:	d00b      	beq.n	8003132 <LL_EXTI_Init+0x17e>
 800311a:	e020      	b.n	800315e <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff ff33 	bl	8002f8c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff febc 	bl	8002ea8 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8003130:	e02e      	b.n	8003190 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fedc 	bl	8002ef4 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fefd 	bl	8002f40 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8003146:	e023      	b.n	8003190 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff feab 	bl	8002ea8 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff fef2 	bl	8002f40 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800315c:	e018      	b.n	8003190 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	73fb      	strb	r3, [r7, #15]
            break;
 8003162:	e015      	b.n	8003190 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fe17 	bl	8002d9c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fe5e 	bl	8002e34 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fe21 	bl	8002dc4 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fe68 	bl	8002e5c <LL_EXTI_DisableEvent_32_63>
 800318c:	e000      	b.n	8003190 <LL_EXTI_Init+0x1dc>
      }
 800318e:	bf00      	nop
#endif
  }
  return status;
 8003190:	7bfb      	ldrb	r3, [r7, #15]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <LL_GPIO_SetPinMode>:
{
 800319a:	b480      	push	{r7}
 800319c:	b089      	sub	sp, #36	; 0x24
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	fa93 f3a3 	rbit	r3, r3
 80031b4:	613b      	str	r3, [r7, #16]
  return result;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	fab3 f383 	clz	r3, r3
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	2103      	movs	r1, #3
 80031c2:	fa01 f303 	lsl.w	r3, r1, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	401a      	ands	r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	fa93 f3a3 	rbit	r3, r3
 80031d4:	61bb      	str	r3, [r7, #24]
  return result;
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	fab3 f383 	clz	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	431a      	orrs	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	601a      	str	r2, [r3, #0]
}
 80031ec:	bf00      	nop
 80031ee:	3724      	adds	r7, #36	; 0x24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <LL_GPIO_SetPinOutputType>:
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	43db      	mvns	r3, r3
 800320c:	401a      	ands	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	431a      	orrs	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	605a      	str	r2, [r3, #4]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <LL_GPIO_SetPinSpeed>:
{
 8003228:	b480      	push	{r7}
 800322a:	b089      	sub	sp, #36	; 0x24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	613b      	str	r3, [r7, #16]
  return result;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	fab3 f383 	clz	r3, r3
 800324a:	b2db      	uxtb	r3, r3
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	2103      	movs	r1, #3
 8003250:	fa01 f303 	lsl.w	r3, r1, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	401a      	ands	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	fa93 f3a3 	rbit	r3, r3
 8003262:	61bb      	str	r3, [r7, #24]
  return result;
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	fab3 f383 	clz	r3, r3
 800326a:	b2db      	uxtb	r3, r3
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	fa01 f303 	lsl.w	r3, r1, r3
 8003274:	431a      	orrs	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	609a      	str	r2, [r3, #8]
}
 800327a:	bf00      	nop
 800327c:	3724      	adds	r7, #36	; 0x24
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <LL_GPIO_SetPinPull>:
{
 8003286:	b480      	push	{r7}
 8003288:	b089      	sub	sp, #36	; 0x24
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	fa93 f3a3 	rbit	r3, r3
 80032a0:	613b      	str	r3, [r7, #16]
  return result;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	fab3 f383 	clz	r3, r3
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	2103      	movs	r1, #3
 80032ae:	fa01 f303 	lsl.w	r3, r1, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	401a      	ands	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	fa93 f3a3 	rbit	r3, r3
 80032c0:	61bb      	str	r3, [r7, #24]
  return result;
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	fab3 f383 	clz	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	fa01 f303 	lsl.w	r3, r1, r3
 80032d2:	431a      	orrs	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	60da      	str	r2, [r3, #12]
}
 80032d8:	bf00      	nop
 80032da:	3724      	adds	r7, #36	; 0x24
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <LL_GPIO_SetAFPin_0_7>:
{
 80032e4:	b480      	push	{r7}
 80032e6:	b089      	sub	sp, #36	; 0x24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a1a      	ldr	r2, [r3, #32]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	613b      	str	r3, [r7, #16]
  return result;
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	fab3 f383 	clz	r3, r3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	210f      	movs	r1, #15
 800330c:	fa01 f303 	lsl.w	r3, r1, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	401a      	ands	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	61bb      	str	r3, [r7, #24]
  return result;
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	fa01 f303 	lsl.w	r3, r1, r3
 8003330:	431a      	orrs	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	621a      	str	r2, [r3, #32]
}
 8003336:	bf00      	nop
 8003338:	3724      	adds	r7, #36	; 0x24
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <LL_GPIO_SetAFPin_8_15>:
{
 8003342:	b480      	push	{r7}
 8003344:	b089      	sub	sp, #36	; 0x24
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	0a1b      	lsrs	r3, r3, #8
 8003356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	fa93 f3a3 	rbit	r3, r3
 800335e:	613b      	str	r3, [r7, #16]
  return result;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	210f      	movs	r1, #15
 800336c:	fa01 f303 	lsl.w	r3, r1, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	401a      	ands	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	0a1b      	lsrs	r3, r3, #8
 8003378:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	fa93 f3a3 	rbit	r3, r3
 8003380:	61bb      	str	r3, [r7, #24]
  return result;
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	431a      	orrs	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003398:	bf00      	nop
 800339a:	3724      	adds	r7, #36	; 0x24
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	613b      	str	r3, [r7, #16]
  return result;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	fab3 f383 	clz	r3, r3
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80033c6:	e051      	b.n	800346c <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	2101      	movs	r1, #1
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	fa01 f303 	lsl.w	r3, r1, r3
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d043      	beq.n	8003466 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d003      	beq.n	80033ee <LL_GPIO_Init+0x4a>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d10e      	bne.n	800340c <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	461a      	mov	r2, r3
 80033f4:	69b9      	ldr	r1, [r7, #24]
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff ff16 	bl	8003228 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	6819      	ldr	r1, [r3, #0]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	461a      	mov	r2, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff fef6 	bl	80031f8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	461a      	mov	r2, r3
 8003412:	69b9      	ldr	r1, [r7, #24]
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff ff36 	bl	8003286 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d11a      	bne.n	8003458 <LL_GPIO_Init+0xb4>
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	fa93 f3a3 	rbit	r3, r3
 800342c:	60bb      	str	r3, [r7, #8]
  return result;
 800342e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003430:	fab3 f383 	clz	r3, r3
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b07      	cmp	r3, #7
 8003438:	d807      	bhi.n	800344a <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	461a      	mov	r2, r3
 8003440:	69b9      	ldr	r1, [r7, #24]
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ff4e 	bl	80032e4 <LL_GPIO_SetAFPin_0_7>
 8003448:	e006      	b.n	8003458 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	461a      	mov	r2, r3
 8003450:	69b9      	ldr	r1, [r7, #24]
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff ff75 	bl	8003342 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	461a      	mov	r2, r3
 800345e:	69b9      	ldr	r1, [r7, #24]
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff fe9a 	bl	800319a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3301      	adds	r3, #1
 800346a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	fa22 f303 	lsr.w	r3, r2, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1a6      	bne.n	80033c8 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3720      	adds	r7, #32
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <LL_I2C_Enable>:
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f043 0201 	orr.w	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	601a      	str	r2, [r3, #0]
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <LL_I2C_Disable>:
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f023 0201 	bic.w	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	601a      	str	r2, [r3, #0]
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <LL_I2C_ConfigFilters>:
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	0219      	lsls	r1, r3, #8
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	430b      	orrs	r3, r1
 80034e0:	431a      	orrs	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	601a      	str	r2, [r3, #0]
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <LL_I2C_SetOwnAddress1>:
{
 80034f2:	b480      	push	{r7}
 80034f4:	b085      	sub	sp, #20
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003506:	f023 0307 	bic.w	r3, r3, #7
 800350a:	68b9      	ldr	r1, [r7, #8]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	430a      	orrs	r2, r1
 8003510:	431a      	orrs	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	609a      	str	r2, [r3, #8]
}
 8003516:	bf00      	nop
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <LL_I2C_EnableOwnAddress1>:
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	609a      	str	r2, [r3, #8]
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <LL_I2C_DisableOwnAddress1>:
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	609a      	str	r2, [r3, #8]
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <LL_I2C_SetTiming>:
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	611a      	str	r2, [r3, #16]
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <LL_I2C_SetMode>:
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	601a      	str	r2, [r3, #0]
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <LL_I2C_AcknowledgeNextData>:
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	605a      	str	r2, [r3, #4]
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff ff65 	bl	80034a4 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6899      	ldr	r1, [r3, #8]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	461a      	mov	r2, r3
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff ff6d 	bl	80034c4 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	4619      	mov	r1, r3
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff ffb6 	bl	8003562 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff ff44 	bl	8003484 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff ffa0 	bl	8003542 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	6919      	ldr	r1, [r3, #16]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	461a      	mov	r2, r3
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ff70 	bl	80034f2 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff ff81 	bl	8003522 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4619      	mov	r1, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ffa9 	bl	800357e <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	4619      	mov	r1, r3
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff ffb6 	bl	80035a4 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <LL_TIM_SetPrescaler>:
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <LL_TIM_SetAutoReload>:
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <LL_TIM_SetRepetitionCounter>:
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	631a      	str	r2, [r3, #48]	; 0x30
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <LL_TIM_OC_SetCompareCH1>:
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <LL_TIM_OC_SetCompareCH2>:
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <LL_TIM_OC_SetCompareCH3>:
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <LL_TIM_OC_SetCompareCH4>:
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <LL_TIM_OC_SetCompareCH5>:
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	659a      	str	r2, [r3, #88]	; 0x58
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <LL_TIM_OC_SetCompareCH6>:
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f043 0201 	orr.w	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	615a      	str	r2, [r3, #20]
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a2f      	ldr	r2, [pc, #188]	; (8003834 <LL_TIM_Init+0xd0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d007      	beq.n	800378c <LL_TIM_Init+0x28>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003782:	d003      	beq.n	800378c <LL_TIM_Init+0x28>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a2c      	ldr	r2, [pc, #176]	; (8003838 <LL_TIM_Init+0xd4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d106      	bne.n	800379a <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a25      	ldr	r2, [pc, #148]	; (8003834 <LL_TIM_Init+0xd0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d013      	beq.n	80037ca <LL_TIM_Init+0x66>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a8:	d00f      	beq.n	80037ca <LL_TIM_Init+0x66>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a22      	ldr	r2, [pc, #136]	; (8003838 <LL_TIM_Init+0xd4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00b      	beq.n	80037ca <LL_TIM_Init+0x66>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a21      	ldr	r2, [pc, #132]	; (800383c <LL_TIM_Init+0xd8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d007      	beq.n	80037ca <LL_TIM_Init+0x66>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a20      	ldr	r2, [pc, #128]	; (8003840 <LL_TIM_Init+0xdc>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d003      	beq.n	80037ca <LL_TIM_Init+0x66>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a1f      	ldr	r2, [pc, #124]	; (8003844 <LL_TIM_Init+0xe0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d106      	bne.n	80037d8 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	4619      	mov	r1, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff ff3a 	bl	800365e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	4619      	mov	r1, r3
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff ff26 	bl	8003642 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a0e      	ldr	r2, [pc, #56]	; (8003834 <LL_TIM_Init+0xd0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00b      	beq.n	8003816 <LL_TIM_Init+0xb2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a0e      	ldr	r2, [pc, #56]	; (800383c <LL_TIM_Init+0xd8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d007      	beq.n	8003816 <LL_TIM_Init+0xb2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a0d      	ldr	r2, [pc, #52]	; (8003840 <LL_TIM_Init+0xdc>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d003      	beq.n	8003816 <LL_TIM_Init+0xb2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a0c      	ldr	r2, [pc, #48]	; (8003844 <LL_TIM_Init+0xe0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d105      	bne.n	8003822 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	4619      	mov	r1, r3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff ff2c 	bl	800367a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff ff8d 	bl	8003742 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40012c00 	.word	0x40012c00
 8003838:	40000400 	.word	0x40000400
 800383c:	40014000 	.word	0x40014000
 8003840:	40014400 	.word	0x40014400
 8003844:	40014800 	.word	0x40014800

08003848 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800385e:	d045      	beq.n	80038ec <LL_TIM_OC_Init+0xa4>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003866:	d848      	bhi.n	80038fa <LL_TIM_OC_Init+0xb2>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386e:	d036      	beq.n	80038de <LL_TIM_OC_Init+0x96>
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003876:	d840      	bhi.n	80038fa <LL_TIM_OC_Init+0xb2>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387e:	d027      	beq.n	80038d0 <LL_TIM_OC_Init+0x88>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003886:	d838      	bhi.n	80038fa <LL_TIM_OC_Init+0xb2>
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800388e:	d018      	beq.n	80038c2 <LL_TIM_OC_Init+0x7a>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003896:	d830      	bhi.n	80038fa <LL_TIM_OC_Init+0xb2>
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d003      	beq.n	80038a6 <LL_TIM_OC_Init+0x5e>
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d007      	beq.n	80038b4 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80038a4:	e029      	b.n	80038fa <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f82d 	bl	8003908 <OC1Config>
 80038ae:	4603      	mov	r3, r0
 80038b0:	75fb      	strb	r3, [r7, #23]
      break;
 80038b2:	e023      	b.n	80038fc <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f8a0 	bl	80039fc <OC2Config>
 80038bc:	4603      	mov	r3, r0
 80038be:	75fb      	strb	r3, [r7, #23]
      break;
 80038c0:	e01c      	b.n	80038fc <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 f917 	bl	8003af8 <OC3Config>
 80038ca:	4603      	mov	r3, r0
 80038cc:	75fb      	strb	r3, [r7, #23]
      break;
 80038ce:	e015      	b.n	80038fc <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f98e 	bl	8003bf4 <OC4Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	75fb      	strb	r3, [r7, #23]
      break;
 80038dc:	e00e      	b.n	80038fc <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 f9ed 	bl	8003cc0 <OC5Config>
 80038e6:	4603      	mov	r3, r0
 80038e8:	75fb      	strb	r3, [r7, #23]
      break;
 80038ea:	e007      	b.n	80038fc <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 fa44 	bl	8003d7c <OC6Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	75fb      	strb	r3, [r7, #23]
      break;
 80038f8:	e000      	b.n	80038fc <LL_TIM_OC_Init+0xb4>
      break;
 80038fa:	bf00      	nop
  }

  return result;
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	f023 0201 	bic.w	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0303 	bic.w	r3, r3, #3
 8003936:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800393e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f023 0202 	bic.w	r2, r3, #2
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f023 0201 	bic.w	r2, r3, #1
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4313      	orrs	r3, r2
 8003964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a20      	ldr	r2, [pc, #128]	; (80039ec <OC1Config+0xe4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00b      	beq.n	8003986 <OC1Config+0x7e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1f      	ldr	r2, [pc, #124]	; (80039f0 <OC1Config+0xe8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d007      	beq.n	8003986 <OC1Config+0x7e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a1e      	ldr	r2, [pc, #120]	; (80039f4 <OC1Config+0xec>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d003      	beq.n	8003986 <OC1Config+0x7e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <OC1Config+0xf0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d11e      	bne.n	80039c4 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f023 0208 	bic.w	r2, r3, #8
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4313      	orrs	r3, r2
 8003994:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f023 0204 	bic.w	r2, r3, #4
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4619      	mov	r1, r3
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff fe5d 	bl	8003696 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40012c00 	.word	0x40012c00
 80039f0:	40014000 	.word	0x40014000
 80039f4:	40014400 	.word	0x40014400
 80039f8:	40014800 	.word	0x40014800

080039fc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	f023 0210 	bic.w	r2, r3, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	0212      	lsls	r2, r2, #8
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f023 0220 	bic.w	r2, r3, #32
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f023 0210 	bic.w	r2, r3, #16
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a21      	ldr	r2, [pc, #132]	; (8003ae8 <OC2Config+0xec>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00b      	beq.n	8003a80 <OC2Config+0x84>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a20      	ldr	r2, [pc, #128]	; (8003aec <OC2Config+0xf0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d007      	beq.n	8003a80 <OC2Config+0x84>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a1f      	ldr	r2, [pc, #124]	; (8003af0 <OC2Config+0xf4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d003      	beq.n	8003a80 <OC2Config+0x84>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a1e      	ldr	r2, [pc, #120]	; (8003af4 <OC2Config+0xf8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d11f      	bne.n	8003ac0 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	019b      	lsls	r3, r3, #6
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	019b      	lsls	r3, r3, #6
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4313      	orrs	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff fded 	bl	80036b2 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40012c00 	.word	0x40012c00
 8003aec:	40014000 	.word	0x40014000
 8003af0:	40014400 	.word	0x40014400
 8003af4:	40014800 	.word	0x40014800

08003af8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0303 	bic.w	r3, r3, #3
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	6812      	ldr	r2, [r2, #0]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a21      	ldr	r2, [pc, #132]	; (8003be4 <OC3Config+0xec>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00b      	beq.n	8003b7a <OC3Config+0x82>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a20      	ldr	r2, [pc, #128]	; (8003be8 <OC3Config+0xf0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d007      	beq.n	8003b7a <OC3Config+0x82>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a1f      	ldr	r2, [pc, #124]	; (8003bec <OC3Config+0xf4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d003      	beq.n	8003b7a <OC3Config+0x82>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a1e      	ldr	r2, [pc, #120]	; (8003bf0 <OC3Config+0xf8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d11f      	bne.n	8003bba <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	029b      	lsls	r3, r3, #10
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	029b      	lsls	r3, r3, #10
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	015b      	lsls	r3, r3, #5
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff fd7e 	bl	80036ce <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40012c00 	.word	0x40012c00
 8003be8:	40014000 	.word	0x40014000
 8003bec:	40014400 	.word	0x40014400
 8003bf0:	40014800 	.word	0x40014800

08003bf4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	0212      	lsls	r2, r2, #8
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	031b      	lsls	r3, r3, #12
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	031b      	lsls	r3, r3, #12
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a15      	ldr	r2, [pc, #84]	; (8003cb0 <OC4Config+0xbc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d00b      	beq.n	8003c78 <OC4Config+0x84>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a14      	ldr	r2, [pc, #80]	; (8003cb4 <OC4Config+0xc0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d007      	beq.n	8003c78 <OC4Config+0x84>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a13      	ldr	r2, [pc, #76]	; (8003cb8 <OC4Config+0xc4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d003      	beq.n	8003c78 <OC4Config+0x84>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a12      	ldr	r2, [pc, #72]	; (8003cbc <OC4Config+0xc8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d107      	bne.n	8003c88 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	019b      	lsls	r3, r3, #6
 8003c84:	4313      	orrs	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff fd25 	bl	80036ea <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40012c00 	.word	0x40012c00
 8003cb4:	40014000 	.word	0x40014000
 8003cb8:	40014400 	.word	0x40014400
 8003cbc:	40014800 	.word	0x40014800

08003cc0 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	041b      	lsls	r3, r3, #16
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	041b      	lsls	r3, r3, #16
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <OC5Config+0xac>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00b      	beq.n	8003d34 <OC5Config+0x74>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a14      	ldr	r2, [pc, #80]	; (8003d70 <OC5Config+0xb0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d007      	beq.n	8003d34 <OC5Config+0x74>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <OC5Config+0xb4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d003      	beq.n	8003d34 <OC5Config+0x74>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a12      	ldr	r2, [pc, #72]	; (8003d78 <OC5Config+0xb8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d109      	bne.n	8003d48 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	4619      	mov	r1, r3
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff fcd6 	bl	8003706 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40012c00 	.word	0x40012c00
 8003d70:	40014000 	.word	0x40014000
 8003d74:	40014400 	.word	0x40014400
 8003d78:	40014800 	.word	0x40014800

08003d7c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	0212      	lsls	r2, r2, #8
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	051b      	lsls	r3, r3, #20
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	051b      	lsls	r3, r3, #20
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a14      	ldr	r2, [pc, #80]	; (8003e28 <OC6Config+0xac>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00b      	beq.n	8003df2 <OC6Config+0x76>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a13      	ldr	r2, [pc, #76]	; (8003e2c <OC6Config+0xb0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d007      	beq.n	8003df2 <OC6Config+0x76>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a12      	ldr	r2, [pc, #72]	; (8003e30 <OC6Config+0xb4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d003      	beq.n	8003df2 <OC6Config+0x76>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a11      	ldr	r2, [pc, #68]	; (8003e34 <OC6Config+0xb8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d109      	bne.n	8003e06 <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	029b      	lsls	r3, r3, #10
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4619      	mov	r1, r3
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff fc87 	bl	8003726 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40012c00 	.word	0x40012c00
 8003e2c:	40014000 	.word	0x40014000
 8003e30:	40014400 	.word	0x40014400
 8003e34:	40014800 	.word	0x40014800

08003e38 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4a:	4a07      	ldr	r2, [pc, #28]	; (8003e68 <LL_InitTick+0x30>)
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <LL_InitTick+0x30>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e56:	4b04      	ldr	r3, [pc, #16]	; (8003e68 <LL_InitTick+0x30>)
 8003e58:	2205      	movs	r2, #5
 8003e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	e000e010 	.word	0xe000e010

08003e6c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003e74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff ffdd 	bl	8003e38 <LL_InitTick>
}
 8003e7e:	bf00      	nop
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003e90:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <LL_mDelay+0x48>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003e96:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9e:	d00c      	beq.n	8003eba <LL_mDelay+0x32>
  {
    Delay++;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003ea6:	e008      	b.n	8003eba <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003ea8:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <LL_mDelay+0x48>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <LL_mDelay+0x32>
    {
      Delay--;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f3      	bne.n	8003ea8 <LL_mDelay+0x20>
    }
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	bf00      	nop
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	e000e010 	.word	0xe000e010

08003ed4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003edc:	4a04      	ldr	r2, [pc, #16]	; (8003ef0 <LL_SetSystemCoreClock+0x1c>)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6013      	str	r3, [r2, #0]
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	20000004 	.word	0x20000004

08003ef4 <__errno>:
 8003ef4:	4b01      	ldr	r3, [pc, #4]	; (8003efc <__errno+0x8>)
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	20000008 	.word	0x20000008

08003f00 <__libc_init_array>:
 8003f00:	b570      	push	{r4, r5, r6, lr}
 8003f02:	4d0d      	ldr	r5, [pc, #52]	; (8003f38 <__libc_init_array+0x38>)
 8003f04:	4c0d      	ldr	r4, [pc, #52]	; (8003f3c <__libc_init_array+0x3c>)
 8003f06:	1b64      	subs	r4, r4, r5
 8003f08:	10a4      	asrs	r4, r4, #2
 8003f0a:	2600      	movs	r6, #0
 8003f0c:	42a6      	cmp	r6, r4
 8003f0e:	d109      	bne.n	8003f24 <__libc_init_array+0x24>
 8003f10:	4d0b      	ldr	r5, [pc, #44]	; (8003f40 <__libc_init_array+0x40>)
 8003f12:	4c0c      	ldr	r4, [pc, #48]	; (8003f44 <__libc_init_array+0x44>)
 8003f14:	f001 f8b8 	bl	8005088 <_init>
 8003f18:	1b64      	subs	r4, r4, r5
 8003f1a:	10a4      	asrs	r4, r4, #2
 8003f1c:	2600      	movs	r6, #0
 8003f1e:	42a6      	cmp	r6, r4
 8003f20:	d105      	bne.n	8003f2e <__libc_init_array+0x2e>
 8003f22:	bd70      	pop	{r4, r5, r6, pc}
 8003f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f28:	4798      	blx	r3
 8003f2a:	3601      	adds	r6, #1
 8003f2c:	e7ee      	b.n	8003f0c <__libc_init_array+0xc>
 8003f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f32:	4798      	blx	r3
 8003f34:	3601      	adds	r6, #1
 8003f36:	e7f2      	b.n	8003f1e <__libc_init_array+0x1e>
 8003f38:	08005120 	.word	0x08005120
 8003f3c:	08005120 	.word	0x08005120
 8003f40:	08005120 	.word	0x08005120
 8003f44:	08005124 	.word	0x08005124

08003f48 <memset>:
 8003f48:	4402      	add	r2, r0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d100      	bne.n	8003f52 <memset+0xa>
 8003f50:	4770      	bx	lr
 8003f52:	f803 1b01 	strb.w	r1, [r3], #1
 8003f56:	e7f9      	b.n	8003f4c <memset+0x4>

08003f58 <siprintf>:
 8003f58:	b40e      	push	{r1, r2, r3}
 8003f5a:	b500      	push	{lr}
 8003f5c:	b09c      	sub	sp, #112	; 0x70
 8003f5e:	ab1d      	add	r3, sp, #116	; 0x74
 8003f60:	9002      	str	r0, [sp, #8]
 8003f62:	9006      	str	r0, [sp, #24]
 8003f64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f68:	4809      	ldr	r0, [pc, #36]	; (8003f90 <siprintf+0x38>)
 8003f6a:	9107      	str	r1, [sp, #28]
 8003f6c:	9104      	str	r1, [sp, #16]
 8003f6e:	4909      	ldr	r1, [pc, #36]	; (8003f94 <siprintf+0x3c>)
 8003f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f74:	9105      	str	r1, [sp, #20]
 8003f76:	6800      	ldr	r0, [r0, #0]
 8003f78:	9301      	str	r3, [sp, #4]
 8003f7a:	a902      	add	r1, sp, #8
 8003f7c:	f000 f88e 	bl	800409c <_svfiprintf_r>
 8003f80:	9b02      	ldr	r3, [sp, #8]
 8003f82:	2200      	movs	r2, #0
 8003f84:	701a      	strb	r2, [r3, #0]
 8003f86:	b01c      	add	sp, #112	; 0x70
 8003f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f8c:	b003      	add	sp, #12
 8003f8e:	4770      	bx	lr
 8003f90:	20000008 	.word	0x20000008
 8003f94:	ffff0208 	.word	0xffff0208

08003f98 <strncat>:
 8003f98:	b530      	push	{r4, r5, lr}
 8003f9a:	4604      	mov	r4, r0
 8003f9c:	7825      	ldrb	r5, [r4, #0]
 8003f9e:	4623      	mov	r3, r4
 8003fa0:	3401      	adds	r4, #1
 8003fa2:	2d00      	cmp	r5, #0
 8003fa4:	d1fa      	bne.n	8003f9c <strncat+0x4>
 8003fa6:	3a01      	subs	r2, #1
 8003fa8:	d304      	bcc.n	8003fb4 <strncat+0x1c>
 8003faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fae:	f803 4b01 	strb.w	r4, [r3], #1
 8003fb2:	b904      	cbnz	r4, 8003fb6 <strncat+0x1e>
 8003fb4:	bd30      	pop	{r4, r5, pc}
 8003fb6:	2a00      	cmp	r2, #0
 8003fb8:	d1f5      	bne.n	8003fa6 <strncat+0xe>
 8003fba:	701a      	strb	r2, [r3, #0]
 8003fbc:	e7f3      	b.n	8003fa6 <strncat+0xe>

08003fbe <strncpy>:
 8003fbe:	b510      	push	{r4, lr}
 8003fc0:	3901      	subs	r1, #1
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	b132      	cbz	r2, 8003fd4 <strncpy+0x16>
 8003fc6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003fca:	f803 4b01 	strb.w	r4, [r3], #1
 8003fce:	3a01      	subs	r2, #1
 8003fd0:	2c00      	cmp	r4, #0
 8003fd2:	d1f7      	bne.n	8003fc4 <strncpy+0x6>
 8003fd4:	441a      	add	r2, r3
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d100      	bne.n	8003fde <strncpy+0x20>
 8003fdc:	bd10      	pop	{r4, pc}
 8003fde:	f803 1b01 	strb.w	r1, [r3], #1
 8003fe2:	e7f9      	b.n	8003fd8 <strncpy+0x1a>

08003fe4 <__ssputs_r>:
 8003fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe8:	688e      	ldr	r6, [r1, #8]
 8003fea:	429e      	cmp	r6, r3
 8003fec:	4682      	mov	sl, r0
 8003fee:	460c      	mov	r4, r1
 8003ff0:	4690      	mov	r8, r2
 8003ff2:	461f      	mov	r7, r3
 8003ff4:	d838      	bhi.n	8004068 <__ssputs_r+0x84>
 8003ff6:	898a      	ldrh	r2, [r1, #12]
 8003ff8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ffc:	d032      	beq.n	8004064 <__ssputs_r+0x80>
 8003ffe:	6825      	ldr	r5, [r4, #0]
 8004000:	6909      	ldr	r1, [r1, #16]
 8004002:	eba5 0901 	sub.w	r9, r5, r1
 8004006:	6965      	ldr	r5, [r4, #20]
 8004008:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800400c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004010:	3301      	adds	r3, #1
 8004012:	444b      	add	r3, r9
 8004014:	106d      	asrs	r5, r5, #1
 8004016:	429d      	cmp	r5, r3
 8004018:	bf38      	it	cc
 800401a:	461d      	movcc	r5, r3
 800401c:	0553      	lsls	r3, r2, #21
 800401e:	d531      	bpl.n	8004084 <__ssputs_r+0xa0>
 8004020:	4629      	mov	r1, r5
 8004022:	f000 fb47 	bl	80046b4 <_malloc_r>
 8004026:	4606      	mov	r6, r0
 8004028:	b950      	cbnz	r0, 8004040 <__ssputs_r+0x5c>
 800402a:	230c      	movs	r3, #12
 800402c:	f8ca 3000 	str.w	r3, [sl]
 8004030:	89a3      	ldrh	r3, [r4, #12]
 8004032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004036:	81a3      	strh	r3, [r4, #12]
 8004038:	f04f 30ff 	mov.w	r0, #4294967295
 800403c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004040:	6921      	ldr	r1, [r4, #16]
 8004042:	464a      	mov	r2, r9
 8004044:	f000 fabe 	bl	80045c4 <memcpy>
 8004048:	89a3      	ldrh	r3, [r4, #12]
 800404a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800404e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004052:	81a3      	strh	r3, [r4, #12]
 8004054:	6126      	str	r6, [r4, #16]
 8004056:	6165      	str	r5, [r4, #20]
 8004058:	444e      	add	r6, r9
 800405a:	eba5 0509 	sub.w	r5, r5, r9
 800405e:	6026      	str	r6, [r4, #0]
 8004060:	60a5      	str	r5, [r4, #8]
 8004062:	463e      	mov	r6, r7
 8004064:	42be      	cmp	r6, r7
 8004066:	d900      	bls.n	800406a <__ssputs_r+0x86>
 8004068:	463e      	mov	r6, r7
 800406a:	4632      	mov	r2, r6
 800406c:	6820      	ldr	r0, [r4, #0]
 800406e:	4641      	mov	r1, r8
 8004070:	f000 fab6 	bl	80045e0 <memmove>
 8004074:	68a3      	ldr	r3, [r4, #8]
 8004076:	6822      	ldr	r2, [r4, #0]
 8004078:	1b9b      	subs	r3, r3, r6
 800407a:	4432      	add	r2, r6
 800407c:	60a3      	str	r3, [r4, #8]
 800407e:	6022      	str	r2, [r4, #0]
 8004080:	2000      	movs	r0, #0
 8004082:	e7db      	b.n	800403c <__ssputs_r+0x58>
 8004084:	462a      	mov	r2, r5
 8004086:	f000 fb6f 	bl	8004768 <_realloc_r>
 800408a:	4606      	mov	r6, r0
 800408c:	2800      	cmp	r0, #0
 800408e:	d1e1      	bne.n	8004054 <__ssputs_r+0x70>
 8004090:	6921      	ldr	r1, [r4, #16]
 8004092:	4650      	mov	r0, sl
 8004094:	f000 fabe 	bl	8004614 <_free_r>
 8004098:	e7c7      	b.n	800402a <__ssputs_r+0x46>
	...

0800409c <_svfiprintf_r>:
 800409c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040a0:	4698      	mov	r8, r3
 80040a2:	898b      	ldrh	r3, [r1, #12]
 80040a4:	061b      	lsls	r3, r3, #24
 80040a6:	b09d      	sub	sp, #116	; 0x74
 80040a8:	4607      	mov	r7, r0
 80040aa:	460d      	mov	r5, r1
 80040ac:	4614      	mov	r4, r2
 80040ae:	d50e      	bpl.n	80040ce <_svfiprintf_r+0x32>
 80040b0:	690b      	ldr	r3, [r1, #16]
 80040b2:	b963      	cbnz	r3, 80040ce <_svfiprintf_r+0x32>
 80040b4:	2140      	movs	r1, #64	; 0x40
 80040b6:	f000 fafd 	bl	80046b4 <_malloc_r>
 80040ba:	6028      	str	r0, [r5, #0]
 80040bc:	6128      	str	r0, [r5, #16]
 80040be:	b920      	cbnz	r0, 80040ca <_svfiprintf_r+0x2e>
 80040c0:	230c      	movs	r3, #12
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295
 80040c8:	e0d1      	b.n	800426e <_svfiprintf_r+0x1d2>
 80040ca:	2340      	movs	r3, #64	; 0x40
 80040cc:	616b      	str	r3, [r5, #20]
 80040ce:	2300      	movs	r3, #0
 80040d0:	9309      	str	r3, [sp, #36]	; 0x24
 80040d2:	2320      	movs	r3, #32
 80040d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80040dc:	2330      	movs	r3, #48	; 0x30
 80040de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004288 <_svfiprintf_r+0x1ec>
 80040e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040e6:	f04f 0901 	mov.w	r9, #1
 80040ea:	4623      	mov	r3, r4
 80040ec:	469a      	mov	sl, r3
 80040ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040f2:	b10a      	cbz	r2, 80040f8 <_svfiprintf_r+0x5c>
 80040f4:	2a25      	cmp	r2, #37	; 0x25
 80040f6:	d1f9      	bne.n	80040ec <_svfiprintf_r+0x50>
 80040f8:	ebba 0b04 	subs.w	fp, sl, r4
 80040fc:	d00b      	beq.n	8004116 <_svfiprintf_r+0x7a>
 80040fe:	465b      	mov	r3, fp
 8004100:	4622      	mov	r2, r4
 8004102:	4629      	mov	r1, r5
 8004104:	4638      	mov	r0, r7
 8004106:	f7ff ff6d 	bl	8003fe4 <__ssputs_r>
 800410a:	3001      	adds	r0, #1
 800410c:	f000 80aa 	beq.w	8004264 <_svfiprintf_r+0x1c8>
 8004110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004112:	445a      	add	r2, fp
 8004114:	9209      	str	r2, [sp, #36]	; 0x24
 8004116:	f89a 3000 	ldrb.w	r3, [sl]
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 80a2 	beq.w	8004264 <_svfiprintf_r+0x1c8>
 8004120:	2300      	movs	r3, #0
 8004122:	f04f 32ff 	mov.w	r2, #4294967295
 8004126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800412a:	f10a 0a01 	add.w	sl, sl, #1
 800412e:	9304      	str	r3, [sp, #16]
 8004130:	9307      	str	r3, [sp, #28]
 8004132:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004136:	931a      	str	r3, [sp, #104]	; 0x68
 8004138:	4654      	mov	r4, sl
 800413a:	2205      	movs	r2, #5
 800413c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004140:	4851      	ldr	r0, [pc, #324]	; (8004288 <_svfiprintf_r+0x1ec>)
 8004142:	f7fc f84d 	bl	80001e0 <memchr>
 8004146:	9a04      	ldr	r2, [sp, #16]
 8004148:	b9d8      	cbnz	r0, 8004182 <_svfiprintf_r+0xe6>
 800414a:	06d0      	lsls	r0, r2, #27
 800414c:	bf44      	itt	mi
 800414e:	2320      	movmi	r3, #32
 8004150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004154:	0711      	lsls	r1, r2, #28
 8004156:	bf44      	itt	mi
 8004158:	232b      	movmi	r3, #43	; 0x2b
 800415a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800415e:	f89a 3000 	ldrb.w	r3, [sl]
 8004162:	2b2a      	cmp	r3, #42	; 0x2a
 8004164:	d015      	beq.n	8004192 <_svfiprintf_r+0xf6>
 8004166:	9a07      	ldr	r2, [sp, #28]
 8004168:	4654      	mov	r4, sl
 800416a:	2000      	movs	r0, #0
 800416c:	f04f 0c0a 	mov.w	ip, #10
 8004170:	4621      	mov	r1, r4
 8004172:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004176:	3b30      	subs	r3, #48	; 0x30
 8004178:	2b09      	cmp	r3, #9
 800417a:	d94e      	bls.n	800421a <_svfiprintf_r+0x17e>
 800417c:	b1b0      	cbz	r0, 80041ac <_svfiprintf_r+0x110>
 800417e:	9207      	str	r2, [sp, #28]
 8004180:	e014      	b.n	80041ac <_svfiprintf_r+0x110>
 8004182:	eba0 0308 	sub.w	r3, r0, r8
 8004186:	fa09 f303 	lsl.w	r3, r9, r3
 800418a:	4313      	orrs	r3, r2
 800418c:	9304      	str	r3, [sp, #16]
 800418e:	46a2      	mov	sl, r4
 8004190:	e7d2      	b.n	8004138 <_svfiprintf_r+0x9c>
 8004192:	9b03      	ldr	r3, [sp, #12]
 8004194:	1d19      	adds	r1, r3, #4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	9103      	str	r1, [sp, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	bfbb      	ittet	lt
 800419e:	425b      	neglt	r3, r3
 80041a0:	f042 0202 	orrlt.w	r2, r2, #2
 80041a4:	9307      	strge	r3, [sp, #28]
 80041a6:	9307      	strlt	r3, [sp, #28]
 80041a8:	bfb8      	it	lt
 80041aa:	9204      	strlt	r2, [sp, #16]
 80041ac:	7823      	ldrb	r3, [r4, #0]
 80041ae:	2b2e      	cmp	r3, #46	; 0x2e
 80041b0:	d10c      	bne.n	80041cc <_svfiprintf_r+0x130>
 80041b2:	7863      	ldrb	r3, [r4, #1]
 80041b4:	2b2a      	cmp	r3, #42	; 0x2a
 80041b6:	d135      	bne.n	8004224 <_svfiprintf_r+0x188>
 80041b8:	9b03      	ldr	r3, [sp, #12]
 80041ba:	1d1a      	adds	r2, r3, #4
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	9203      	str	r2, [sp, #12]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bfb8      	it	lt
 80041c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80041c8:	3402      	adds	r4, #2
 80041ca:	9305      	str	r3, [sp, #20]
 80041cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004298 <_svfiprintf_r+0x1fc>
 80041d0:	7821      	ldrb	r1, [r4, #0]
 80041d2:	2203      	movs	r2, #3
 80041d4:	4650      	mov	r0, sl
 80041d6:	f7fc f803 	bl	80001e0 <memchr>
 80041da:	b140      	cbz	r0, 80041ee <_svfiprintf_r+0x152>
 80041dc:	2340      	movs	r3, #64	; 0x40
 80041de:	eba0 000a 	sub.w	r0, r0, sl
 80041e2:	fa03 f000 	lsl.w	r0, r3, r0
 80041e6:	9b04      	ldr	r3, [sp, #16]
 80041e8:	4303      	orrs	r3, r0
 80041ea:	3401      	adds	r4, #1
 80041ec:	9304      	str	r3, [sp, #16]
 80041ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041f2:	4826      	ldr	r0, [pc, #152]	; (800428c <_svfiprintf_r+0x1f0>)
 80041f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041f8:	2206      	movs	r2, #6
 80041fa:	f7fb fff1 	bl	80001e0 <memchr>
 80041fe:	2800      	cmp	r0, #0
 8004200:	d038      	beq.n	8004274 <_svfiprintf_r+0x1d8>
 8004202:	4b23      	ldr	r3, [pc, #140]	; (8004290 <_svfiprintf_r+0x1f4>)
 8004204:	bb1b      	cbnz	r3, 800424e <_svfiprintf_r+0x1b2>
 8004206:	9b03      	ldr	r3, [sp, #12]
 8004208:	3307      	adds	r3, #7
 800420a:	f023 0307 	bic.w	r3, r3, #7
 800420e:	3308      	adds	r3, #8
 8004210:	9303      	str	r3, [sp, #12]
 8004212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004214:	4433      	add	r3, r6
 8004216:	9309      	str	r3, [sp, #36]	; 0x24
 8004218:	e767      	b.n	80040ea <_svfiprintf_r+0x4e>
 800421a:	fb0c 3202 	mla	r2, ip, r2, r3
 800421e:	460c      	mov	r4, r1
 8004220:	2001      	movs	r0, #1
 8004222:	e7a5      	b.n	8004170 <_svfiprintf_r+0xd4>
 8004224:	2300      	movs	r3, #0
 8004226:	3401      	adds	r4, #1
 8004228:	9305      	str	r3, [sp, #20]
 800422a:	4619      	mov	r1, r3
 800422c:	f04f 0c0a 	mov.w	ip, #10
 8004230:	4620      	mov	r0, r4
 8004232:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004236:	3a30      	subs	r2, #48	; 0x30
 8004238:	2a09      	cmp	r2, #9
 800423a:	d903      	bls.n	8004244 <_svfiprintf_r+0x1a8>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0c5      	beq.n	80041cc <_svfiprintf_r+0x130>
 8004240:	9105      	str	r1, [sp, #20]
 8004242:	e7c3      	b.n	80041cc <_svfiprintf_r+0x130>
 8004244:	fb0c 2101 	mla	r1, ip, r1, r2
 8004248:	4604      	mov	r4, r0
 800424a:	2301      	movs	r3, #1
 800424c:	e7f0      	b.n	8004230 <_svfiprintf_r+0x194>
 800424e:	ab03      	add	r3, sp, #12
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	462a      	mov	r2, r5
 8004254:	4b0f      	ldr	r3, [pc, #60]	; (8004294 <_svfiprintf_r+0x1f8>)
 8004256:	a904      	add	r1, sp, #16
 8004258:	4638      	mov	r0, r7
 800425a:	f3af 8000 	nop.w
 800425e:	1c42      	adds	r2, r0, #1
 8004260:	4606      	mov	r6, r0
 8004262:	d1d6      	bne.n	8004212 <_svfiprintf_r+0x176>
 8004264:	89ab      	ldrh	r3, [r5, #12]
 8004266:	065b      	lsls	r3, r3, #25
 8004268:	f53f af2c 	bmi.w	80040c4 <_svfiprintf_r+0x28>
 800426c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800426e:	b01d      	add	sp, #116	; 0x74
 8004270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004274:	ab03      	add	r3, sp, #12
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	462a      	mov	r2, r5
 800427a:	4b06      	ldr	r3, [pc, #24]	; (8004294 <_svfiprintf_r+0x1f8>)
 800427c:	a904      	add	r1, sp, #16
 800427e:	4638      	mov	r0, r7
 8004280:	f000 f87a 	bl	8004378 <_printf_i>
 8004284:	e7eb      	b.n	800425e <_svfiprintf_r+0x1c2>
 8004286:	bf00      	nop
 8004288:	080050cd 	.word	0x080050cd
 800428c:	080050d7 	.word	0x080050d7
 8004290:	00000000 	.word	0x00000000
 8004294:	08003fe5 	.word	0x08003fe5
 8004298:	080050d3 	.word	0x080050d3

0800429c <_printf_common>:
 800429c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a0:	4616      	mov	r6, r2
 80042a2:	4699      	mov	r9, r3
 80042a4:	688a      	ldr	r2, [r1, #8]
 80042a6:	690b      	ldr	r3, [r1, #16]
 80042a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042ac:	4293      	cmp	r3, r2
 80042ae:	bfb8      	it	lt
 80042b0:	4613      	movlt	r3, r2
 80042b2:	6033      	str	r3, [r6, #0]
 80042b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042b8:	4607      	mov	r7, r0
 80042ba:	460c      	mov	r4, r1
 80042bc:	b10a      	cbz	r2, 80042c2 <_printf_common+0x26>
 80042be:	3301      	adds	r3, #1
 80042c0:	6033      	str	r3, [r6, #0]
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	0699      	lsls	r1, r3, #26
 80042c6:	bf42      	ittt	mi
 80042c8:	6833      	ldrmi	r3, [r6, #0]
 80042ca:	3302      	addmi	r3, #2
 80042cc:	6033      	strmi	r3, [r6, #0]
 80042ce:	6825      	ldr	r5, [r4, #0]
 80042d0:	f015 0506 	ands.w	r5, r5, #6
 80042d4:	d106      	bne.n	80042e4 <_printf_common+0x48>
 80042d6:	f104 0a19 	add.w	sl, r4, #25
 80042da:	68e3      	ldr	r3, [r4, #12]
 80042dc:	6832      	ldr	r2, [r6, #0]
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	42ab      	cmp	r3, r5
 80042e2:	dc26      	bgt.n	8004332 <_printf_common+0x96>
 80042e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042e8:	1e13      	subs	r3, r2, #0
 80042ea:	6822      	ldr	r2, [r4, #0]
 80042ec:	bf18      	it	ne
 80042ee:	2301      	movne	r3, #1
 80042f0:	0692      	lsls	r2, r2, #26
 80042f2:	d42b      	bmi.n	800434c <_printf_common+0xb0>
 80042f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042f8:	4649      	mov	r1, r9
 80042fa:	4638      	mov	r0, r7
 80042fc:	47c0      	blx	r8
 80042fe:	3001      	adds	r0, #1
 8004300:	d01e      	beq.n	8004340 <_printf_common+0xa4>
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	68e5      	ldr	r5, [r4, #12]
 8004306:	6832      	ldr	r2, [r6, #0]
 8004308:	f003 0306 	and.w	r3, r3, #6
 800430c:	2b04      	cmp	r3, #4
 800430e:	bf08      	it	eq
 8004310:	1aad      	subeq	r5, r5, r2
 8004312:	68a3      	ldr	r3, [r4, #8]
 8004314:	6922      	ldr	r2, [r4, #16]
 8004316:	bf0c      	ite	eq
 8004318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800431c:	2500      	movne	r5, #0
 800431e:	4293      	cmp	r3, r2
 8004320:	bfc4      	itt	gt
 8004322:	1a9b      	subgt	r3, r3, r2
 8004324:	18ed      	addgt	r5, r5, r3
 8004326:	2600      	movs	r6, #0
 8004328:	341a      	adds	r4, #26
 800432a:	42b5      	cmp	r5, r6
 800432c:	d11a      	bne.n	8004364 <_printf_common+0xc8>
 800432e:	2000      	movs	r0, #0
 8004330:	e008      	b.n	8004344 <_printf_common+0xa8>
 8004332:	2301      	movs	r3, #1
 8004334:	4652      	mov	r2, sl
 8004336:	4649      	mov	r1, r9
 8004338:	4638      	mov	r0, r7
 800433a:	47c0      	blx	r8
 800433c:	3001      	adds	r0, #1
 800433e:	d103      	bne.n	8004348 <_printf_common+0xac>
 8004340:	f04f 30ff 	mov.w	r0, #4294967295
 8004344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004348:	3501      	adds	r5, #1
 800434a:	e7c6      	b.n	80042da <_printf_common+0x3e>
 800434c:	18e1      	adds	r1, r4, r3
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	2030      	movs	r0, #48	; 0x30
 8004352:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004356:	4422      	add	r2, r4
 8004358:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800435c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004360:	3302      	adds	r3, #2
 8004362:	e7c7      	b.n	80042f4 <_printf_common+0x58>
 8004364:	2301      	movs	r3, #1
 8004366:	4622      	mov	r2, r4
 8004368:	4649      	mov	r1, r9
 800436a:	4638      	mov	r0, r7
 800436c:	47c0      	blx	r8
 800436e:	3001      	adds	r0, #1
 8004370:	d0e6      	beq.n	8004340 <_printf_common+0xa4>
 8004372:	3601      	adds	r6, #1
 8004374:	e7d9      	b.n	800432a <_printf_common+0x8e>
	...

08004378 <_printf_i>:
 8004378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800437c:	460c      	mov	r4, r1
 800437e:	4691      	mov	r9, r2
 8004380:	7e27      	ldrb	r7, [r4, #24]
 8004382:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004384:	2f78      	cmp	r7, #120	; 0x78
 8004386:	4680      	mov	r8, r0
 8004388:	469a      	mov	sl, r3
 800438a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800438e:	d807      	bhi.n	80043a0 <_printf_i+0x28>
 8004390:	2f62      	cmp	r7, #98	; 0x62
 8004392:	d80a      	bhi.n	80043aa <_printf_i+0x32>
 8004394:	2f00      	cmp	r7, #0
 8004396:	f000 80d8 	beq.w	800454a <_printf_i+0x1d2>
 800439a:	2f58      	cmp	r7, #88	; 0x58
 800439c:	f000 80a3 	beq.w	80044e6 <_printf_i+0x16e>
 80043a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043a8:	e03a      	b.n	8004420 <_printf_i+0xa8>
 80043aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043ae:	2b15      	cmp	r3, #21
 80043b0:	d8f6      	bhi.n	80043a0 <_printf_i+0x28>
 80043b2:	a001      	add	r0, pc, #4	; (adr r0, 80043b8 <_printf_i+0x40>)
 80043b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80043b8:	08004411 	.word	0x08004411
 80043bc:	08004425 	.word	0x08004425
 80043c0:	080043a1 	.word	0x080043a1
 80043c4:	080043a1 	.word	0x080043a1
 80043c8:	080043a1 	.word	0x080043a1
 80043cc:	080043a1 	.word	0x080043a1
 80043d0:	08004425 	.word	0x08004425
 80043d4:	080043a1 	.word	0x080043a1
 80043d8:	080043a1 	.word	0x080043a1
 80043dc:	080043a1 	.word	0x080043a1
 80043e0:	080043a1 	.word	0x080043a1
 80043e4:	08004531 	.word	0x08004531
 80043e8:	08004455 	.word	0x08004455
 80043ec:	08004513 	.word	0x08004513
 80043f0:	080043a1 	.word	0x080043a1
 80043f4:	080043a1 	.word	0x080043a1
 80043f8:	08004553 	.word	0x08004553
 80043fc:	080043a1 	.word	0x080043a1
 8004400:	08004455 	.word	0x08004455
 8004404:	080043a1 	.word	0x080043a1
 8004408:	080043a1 	.word	0x080043a1
 800440c:	0800451b 	.word	0x0800451b
 8004410:	680b      	ldr	r3, [r1, #0]
 8004412:	1d1a      	adds	r2, r3, #4
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	600a      	str	r2, [r1, #0]
 8004418:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800441c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004420:	2301      	movs	r3, #1
 8004422:	e0a3      	b.n	800456c <_printf_i+0x1f4>
 8004424:	6825      	ldr	r5, [r4, #0]
 8004426:	6808      	ldr	r0, [r1, #0]
 8004428:	062e      	lsls	r6, r5, #24
 800442a:	f100 0304 	add.w	r3, r0, #4
 800442e:	d50a      	bpl.n	8004446 <_printf_i+0xce>
 8004430:	6805      	ldr	r5, [r0, #0]
 8004432:	600b      	str	r3, [r1, #0]
 8004434:	2d00      	cmp	r5, #0
 8004436:	da03      	bge.n	8004440 <_printf_i+0xc8>
 8004438:	232d      	movs	r3, #45	; 0x2d
 800443a:	426d      	negs	r5, r5
 800443c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004440:	485e      	ldr	r0, [pc, #376]	; (80045bc <_printf_i+0x244>)
 8004442:	230a      	movs	r3, #10
 8004444:	e019      	b.n	800447a <_printf_i+0x102>
 8004446:	f015 0f40 	tst.w	r5, #64	; 0x40
 800444a:	6805      	ldr	r5, [r0, #0]
 800444c:	600b      	str	r3, [r1, #0]
 800444e:	bf18      	it	ne
 8004450:	b22d      	sxthne	r5, r5
 8004452:	e7ef      	b.n	8004434 <_printf_i+0xbc>
 8004454:	680b      	ldr	r3, [r1, #0]
 8004456:	6825      	ldr	r5, [r4, #0]
 8004458:	1d18      	adds	r0, r3, #4
 800445a:	6008      	str	r0, [r1, #0]
 800445c:	0628      	lsls	r0, r5, #24
 800445e:	d501      	bpl.n	8004464 <_printf_i+0xec>
 8004460:	681d      	ldr	r5, [r3, #0]
 8004462:	e002      	b.n	800446a <_printf_i+0xf2>
 8004464:	0669      	lsls	r1, r5, #25
 8004466:	d5fb      	bpl.n	8004460 <_printf_i+0xe8>
 8004468:	881d      	ldrh	r5, [r3, #0]
 800446a:	4854      	ldr	r0, [pc, #336]	; (80045bc <_printf_i+0x244>)
 800446c:	2f6f      	cmp	r7, #111	; 0x6f
 800446e:	bf0c      	ite	eq
 8004470:	2308      	moveq	r3, #8
 8004472:	230a      	movne	r3, #10
 8004474:	2100      	movs	r1, #0
 8004476:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800447a:	6866      	ldr	r6, [r4, #4]
 800447c:	60a6      	str	r6, [r4, #8]
 800447e:	2e00      	cmp	r6, #0
 8004480:	bfa2      	ittt	ge
 8004482:	6821      	ldrge	r1, [r4, #0]
 8004484:	f021 0104 	bicge.w	r1, r1, #4
 8004488:	6021      	strge	r1, [r4, #0]
 800448a:	b90d      	cbnz	r5, 8004490 <_printf_i+0x118>
 800448c:	2e00      	cmp	r6, #0
 800448e:	d04d      	beq.n	800452c <_printf_i+0x1b4>
 8004490:	4616      	mov	r6, r2
 8004492:	fbb5 f1f3 	udiv	r1, r5, r3
 8004496:	fb03 5711 	mls	r7, r3, r1, r5
 800449a:	5dc7      	ldrb	r7, [r0, r7]
 800449c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044a0:	462f      	mov	r7, r5
 80044a2:	42bb      	cmp	r3, r7
 80044a4:	460d      	mov	r5, r1
 80044a6:	d9f4      	bls.n	8004492 <_printf_i+0x11a>
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d10b      	bne.n	80044c4 <_printf_i+0x14c>
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	07df      	lsls	r7, r3, #31
 80044b0:	d508      	bpl.n	80044c4 <_printf_i+0x14c>
 80044b2:	6923      	ldr	r3, [r4, #16]
 80044b4:	6861      	ldr	r1, [r4, #4]
 80044b6:	4299      	cmp	r1, r3
 80044b8:	bfde      	ittt	le
 80044ba:	2330      	movle	r3, #48	; 0x30
 80044bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044c4:	1b92      	subs	r2, r2, r6
 80044c6:	6122      	str	r2, [r4, #16]
 80044c8:	f8cd a000 	str.w	sl, [sp]
 80044cc:	464b      	mov	r3, r9
 80044ce:	aa03      	add	r2, sp, #12
 80044d0:	4621      	mov	r1, r4
 80044d2:	4640      	mov	r0, r8
 80044d4:	f7ff fee2 	bl	800429c <_printf_common>
 80044d8:	3001      	adds	r0, #1
 80044da:	d14c      	bne.n	8004576 <_printf_i+0x1fe>
 80044dc:	f04f 30ff 	mov.w	r0, #4294967295
 80044e0:	b004      	add	sp, #16
 80044e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e6:	4835      	ldr	r0, [pc, #212]	; (80045bc <_printf_i+0x244>)
 80044e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	680e      	ldr	r6, [r1, #0]
 80044f0:	061f      	lsls	r7, r3, #24
 80044f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80044f6:	600e      	str	r6, [r1, #0]
 80044f8:	d514      	bpl.n	8004524 <_printf_i+0x1ac>
 80044fa:	07d9      	lsls	r1, r3, #31
 80044fc:	bf44      	itt	mi
 80044fe:	f043 0320 	orrmi.w	r3, r3, #32
 8004502:	6023      	strmi	r3, [r4, #0]
 8004504:	b91d      	cbnz	r5, 800450e <_printf_i+0x196>
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	f023 0320 	bic.w	r3, r3, #32
 800450c:	6023      	str	r3, [r4, #0]
 800450e:	2310      	movs	r3, #16
 8004510:	e7b0      	b.n	8004474 <_printf_i+0xfc>
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	f043 0320 	orr.w	r3, r3, #32
 8004518:	6023      	str	r3, [r4, #0]
 800451a:	2378      	movs	r3, #120	; 0x78
 800451c:	4828      	ldr	r0, [pc, #160]	; (80045c0 <_printf_i+0x248>)
 800451e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004522:	e7e3      	b.n	80044ec <_printf_i+0x174>
 8004524:	065e      	lsls	r6, r3, #25
 8004526:	bf48      	it	mi
 8004528:	b2ad      	uxthmi	r5, r5
 800452a:	e7e6      	b.n	80044fa <_printf_i+0x182>
 800452c:	4616      	mov	r6, r2
 800452e:	e7bb      	b.n	80044a8 <_printf_i+0x130>
 8004530:	680b      	ldr	r3, [r1, #0]
 8004532:	6826      	ldr	r6, [r4, #0]
 8004534:	6960      	ldr	r0, [r4, #20]
 8004536:	1d1d      	adds	r5, r3, #4
 8004538:	600d      	str	r5, [r1, #0]
 800453a:	0635      	lsls	r5, r6, #24
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	d501      	bpl.n	8004544 <_printf_i+0x1cc>
 8004540:	6018      	str	r0, [r3, #0]
 8004542:	e002      	b.n	800454a <_printf_i+0x1d2>
 8004544:	0671      	lsls	r1, r6, #25
 8004546:	d5fb      	bpl.n	8004540 <_printf_i+0x1c8>
 8004548:	8018      	strh	r0, [r3, #0]
 800454a:	2300      	movs	r3, #0
 800454c:	6123      	str	r3, [r4, #16]
 800454e:	4616      	mov	r6, r2
 8004550:	e7ba      	b.n	80044c8 <_printf_i+0x150>
 8004552:	680b      	ldr	r3, [r1, #0]
 8004554:	1d1a      	adds	r2, r3, #4
 8004556:	600a      	str	r2, [r1, #0]
 8004558:	681e      	ldr	r6, [r3, #0]
 800455a:	6862      	ldr	r2, [r4, #4]
 800455c:	2100      	movs	r1, #0
 800455e:	4630      	mov	r0, r6
 8004560:	f7fb fe3e 	bl	80001e0 <memchr>
 8004564:	b108      	cbz	r0, 800456a <_printf_i+0x1f2>
 8004566:	1b80      	subs	r0, r0, r6
 8004568:	6060      	str	r0, [r4, #4]
 800456a:	6863      	ldr	r3, [r4, #4]
 800456c:	6123      	str	r3, [r4, #16]
 800456e:	2300      	movs	r3, #0
 8004570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004574:	e7a8      	b.n	80044c8 <_printf_i+0x150>
 8004576:	6923      	ldr	r3, [r4, #16]
 8004578:	4632      	mov	r2, r6
 800457a:	4649      	mov	r1, r9
 800457c:	4640      	mov	r0, r8
 800457e:	47d0      	blx	sl
 8004580:	3001      	adds	r0, #1
 8004582:	d0ab      	beq.n	80044dc <_printf_i+0x164>
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	079b      	lsls	r3, r3, #30
 8004588:	d413      	bmi.n	80045b2 <_printf_i+0x23a>
 800458a:	68e0      	ldr	r0, [r4, #12]
 800458c:	9b03      	ldr	r3, [sp, #12]
 800458e:	4298      	cmp	r0, r3
 8004590:	bfb8      	it	lt
 8004592:	4618      	movlt	r0, r3
 8004594:	e7a4      	b.n	80044e0 <_printf_i+0x168>
 8004596:	2301      	movs	r3, #1
 8004598:	4632      	mov	r2, r6
 800459a:	4649      	mov	r1, r9
 800459c:	4640      	mov	r0, r8
 800459e:	47d0      	blx	sl
 80045a0:	3001      	adds	r0, #1
 80045a2:	d09b      	beq.n	80044dc <_printf_i+0x164>
 80045a4:	3501      	adds	r5, #1
 80045a6:	68e3      	ldr	r3, [r4, #12]
 80045a8:	9903      	ldr	r1, [sp, #12]
 80045aa:	1a5b      	subs	r3, r3, r1
 80045ac:	42ab      	cmp	r3, r5
 80045ae:	dcf2      	bgt.n	8004596 <_printf_i+0x21e>
 80045b0:	e7eb      	b.n	800458a <_printf_i+0x212>
 80045b2:	2500      	movs	r5, #0
 80045b4:	f104 0619 	add.w	r6, r4, #25
 80045b8:	e7f5      	b.n	80045a6 <_printf_i+0x22e>
 80045ba:	bf00      	nop
 80045bc:	080050de 	.word	0x080050de
 80045c0:	080050ef 	.word	0x080050ef

080045c4 <memcpy>:
 80045c4:	440a      	add	r2, r1
 80045c6:	4291      	cmp	r1, r2
 80045c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80045cc:	d100      	bne.n	80045d0 <memcpy+0xc>
 80045ce:	4770      	bx	lr
 80045d0:	b510      	push	{r4, lr}
 80045d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045da:	4291      	cmp	r1, r2
 80045dc:	d1f9      	bne.n	80045d2 <memcpy+0xe>
 80045de:	bd10      	pop	{r4, pc}

080045e0 <memmove>:
 80045e0:	4288      	cmp	r0, r1
 80045e2:	b510      	push	{r4, lr}
 80045e4:	eb01 0402 	add.w	r4, r1, r2
 80045e8:	d902      	bls.n	80045f0 <memmove+0x10>
 80045ea:	4284      	cmp	r4, r0
 80045ec:	4623      	mov	r3, r4
 80045ee:	d807      	bhi.n	8004600 <memmove+0x20>
 80045f0:	1e43      	subs	r3, r0, #1
 80045f2:	42a1      	cmp	r1, r4
 80045f4:	d008      	beq.n	8004608 <memmove+0x28>
 80045f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045fe:	e7f8      	b.n	80045f2 <memmove+0x12>
 8004600:	4402      	add	r2, r0
 8004602:	4601      	mov	r1, r0
 8004604:	428a      	cmp	r2, r1
 8004606:	d100      	bne.n	800460a <memmove+0x2a>
 8004608:	bd10      	pop	{r4, pc}
 800460a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800460e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004612:	e7f7      	b.n	8004604 <memmove+0x24>

08004614 <_free_r>:
 8004614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004616:	2900      	cmp	r1, #0
 8004618:	d048      	beq.n	80046ac <_free_r+0x98>
 800461a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800461e:	9001      	str	r0, [sp, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	f1a1 0404 	sub.w	r4, r1, #4
 8004626:	bfb8      	it	lt
 8004628:	18e4      	addlt	r4, r4, r3
 800462a:	f000 f8d3 	bl	80047d4 <__malloc_lock>
 800462e:	4a20      	ldr	r2, [pc, #128]	; (80046b0 <_free_r+0x9c>)
 8004630:	9801      	ldr	r0, [sp, #4]
 8004632:	6813      	ldr	r3, [r2, #0]
 8004634:	4615      	mov	r5, r2
 8004636:	b933      	cbnz	r3, 8004646 <_free_r+0x32>
 8004638:	6063      	str	r3, [r4, #4]
 800463a:	6014      	str	r4, [r2, #0]
 800463c:	b003      	add	sp, #12
 800463e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004642:	f000 b8cd 	b.w	80047e0 <__malloc_unlock>
 8004646:	42a3      	cmp	r3, r4
 8004648:	d90b      	bls.n	8004662 <_free_r+0x4e>
 800464a:	6821      	ldr	r1, [r4, #0]
 800464c:	1862      	adds	r2, r4, r1
 800464e:	4293      	cmp	r3, r2
 8004650:	bf04      	itt	eq
 8004652:	681a      	ldreq	r2, [r3, #0]
 8004654:	685b      	ldreq	r3, [r3, #4]
 8004656:	6063      	str	r3, [r4, #4]
 8004658:	bf04      	itt	eq
 800465a:	1852      	addeq	r2, r2, r1
 800465c:	6022      	streq	r2, [r4, #0]
 800465e:	602c      	str	r4, [r5, #0]
 8004660:	e7ec      	b.n	800463c <_free_r+0x28>
 8004662:	461a      	mov	r2, r3
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	b10b      	cbz	r3, 800466c <_free_r+0x58>
 8004668:	42a3      	cmp	r3, r4
 800466a:	d9fa      	bls.n	8004662 <_free_r+0x4e>
 800466c:	6811      	ldr	r1, [r2, #0]
 800466e:	1855      	adds	r5, r2, r1
 8004670:	42a5      	cmp	r5, r4
 8004672:	d10b      	bne.n	800468c <_free_r+0x78>
 8004674:	6824      	ldr	r4, [r4, #0]
 8004676:	4421      	add	r1, r4
 8004678:	1854      	adds	r4, r2, r1
 800467a:	42a3      	cmp	r3, r4
 800467c:	6011      	str	r1, [r2, #0]
 800467e:	d1dd      	bne.n	800463c <_free_r+0x28>
 8004680:	681c      	ldr	r4, [r3, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	6053      	str	r3, [r2, #4]
 8004686:	4421      	add	r1, r4
 8004688:	6011      	str	r1, [r2, #0]
 800468a:	e7d7      	b.n	800463c <_free_r+0x28>
 800468c:	d902      	bls.n	8004694 <_free_r+0x80>
 800468e:	230c      	movs	r3, #12
 8004690:	6003      	str	r3, [r0, #0]
 8004692:	e7d3      	b.n	800463c <_free_r+0x28>
 8004694:	6825      	ldr	r5, [r4, #0]
 8004696:	1961      	adds	r1, r4, r5
 8004698:	428b      	cmp	r3, r1
 800469a:	bf04      	itt	eq
 800469c:	6819      	ldreq	r1, [r3, #0]
 800469e:	685b      	ldreq	r3, [r3, #4]
 80046a0:	6063      	str	r3, [r4, #4]
 80046a2:	bf04      	itt	eq
 80046a4:	1949      	addeq	r1, r1, r5
 80046a6:	6021      	streq	r1, [r4, #0]
 80046a8:	6054      	str	r4, [r2, #4]
 80046aa:	e7c7      	b.n	800463c <_free_r+0x28>
 80046ac:	b003      	add	sp, #12
 80046ae:	bd30      	pop	{r4, r5, pc}
 80046b0:	20000098 	.word	0x20000098

080046b4 <_malloc_r>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	1ccd      	adds	r5, r1, #3
 80046b8:	f025 0503 	bic.w	r5, r5, #3
 80046bc:	3508      	adds	r5, #8
 80046be:	2d0c      	cmp	r5, #12
 80046c0:	bf38      	it	cc
 80046c2:	250c      	movcc	r5, #12
 80046c4:	2d00      	cmp	r5, #0
 80046c6:	4606      	mov	r6, r0
 80046c8:	db01      	blt.n	80046ce <_malloc_r+0x1a>
 80046ca:	42a9      	cmp	r1, r5
 80046cc:	d903      	bls.n	80046d6 <_malloc_r+0x22>
 80046ce:	230c      	movs	r3, #12
 80046d0:	6033      	str	r3, [r6, #0]
 80046d2:	2000      	movs	r0, #0
 80046d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046d6:	f000 f87d 	bl	80047d4 <__malloc_lock>
 80046da:	4921      	ldr	r1, [pc, #132]	; (8004760 <_malloc_r+0xac>)
 80046dc:	680a      	ldr	r2, [r1, #0]
 80046de:	4614      	mov	r4, r2
 80046e0:	b99c      	cbnz	r4, 800470a <_malloc_r+0x56>
 80046e2:	4f20      	ldr	r7, [pc, #128]	; (8004764 <_malloc_r+0xb0>)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	b923      	cbnz	r3, 80046f2 <_malloc_r+0x3e>
 80046e8:	4621      	mov	r1, r4
 80046ea:	4630      	mov	r0, r6
 80046ec:	f000 f862 	bl	80047b4 <_sbrk_r>
 80046f0:	6038      	str	r0, [r7, #0]
 80046f2:	4629      	mov	r1, r5
 80046f4:	4630      	mov	r0, r6
 80046f6:	f000 f85d 	bl	80047b4 <_sbrk_r>
 80046fa:	1c43      	adds	r3, r0, #1
 80046fc:	d123      	bne.n	8004746 <_malloc_r+0x92>
 80046fe:	230c      	movs	r3, #12
 8004700:	6033      	str	r3, [r6, #0]
 8004702:	4630      	mov	r0, r6
 8004704:	f000 f86c 	bl	80047e0 <__malloc_unlock>
 8004708:	e7e3      	b.n	80046d2 <_malloc_r+0x1e>
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	1b5b      	subs	r3, r3, r5
 800470e:	d417      	bmi.n	8004740 <_malloc_r+0x8c>
 8004710:	2b0b      	cmp	r3, #11
 8004712:	d903      	bls.n	800471c <_malloc_r+0x68>
 8004714:	6023      	str	r3, [r4, #0]
 8004716:	441c      	add	r4, r3
 8004718:	6025      	str	r5, [r4, #0]
 800471a:	e004      	b.n	8004726 <_malloc_r+0x72>
 800471c:	6863      	ldr	r3, [r4, #4]
 800471e:	42a2      	cmp	r2, r4
 8004720:	bf0c      	ite	eq
 8004722:	600b      	streq	r3, [r1, #0]
 8004724:	6053      	strne	r3, [r2, #4]
 8004726:	4630      	mov	r0, r6
 8004728:	f000 f85a 	bl	80047e0 <__malloc_unlock>
 800472c:	f104 000b 	add.w	r0, r4, #11
 8004730:	1d23      	adds	r3, r4, #4
 8004732:	f020 0007 	bic.w	r0, r0, #7
 8004736:	1ac2      	subs	r2, r0, r3
 8004738:	d0cc      	beq.n	80046d4 <_malloc_r+0x20>
 800473a:	1a1b      	subs	r3, r3, r0
 800473c:	50a3      	str	r3, [r4, r2]
 800473e:	e7c9      	b.n	80046d4 <_malloc_r+0x20>
 8004740:	4622      	mov	r2, r4
 8004742:	6864      	ldr	r4, [r4, #4]
 8004744:	e7cc      	b.n	80046e0 <_malloc_r+0x2c>
 8004746:	1cc4      	adds	r4, r0, #3
 8004748:	f024 0403 	bic.w	r4, r4, #3
 800474c:	42a0      	cmp	r0, r4
 800474e:	d0e3      	beq.n	8004718 <_malloc_r+0x64>
 8004750:	1a21      	subs	r1, r4, r0
 8004752:	4630      	mov	r0, r6
 8004754:	f000 f82e 	bl	80047b4 <_sbrk_r>
 8004758:	3001      	adds	r0, #1
 800475a:	d1dd      	bne.n	8004718 <_malloc_r+0x64>
 800475c:	e7cf      	b.n	80046fe <_malloc_r+0x4a>
 800475e:	bf00      	nop
 8004760:	20000098 	.word	0x20000098
 8004764:	2000009c 	.word	0x2000009c

08004768 <_realloc_r>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	4607      	mov	r7, r0
 800476c:	4614      	mov	r4, r2
 800476e:	460e      	mov	r6, r1
 8004770:	b921      	cbnz	r1, 800477c <_realloc_r+0x14>
 8004772:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004776:	4611      	mov	r1, r2
 8004778:	f7ff bf9c 	b.w	80046b4 <_malloc_r>
 800477c:	b922      	cbnz	r2, 8004788 <_realloc_r+0x20>
 800477e:	f7ff ff49 	bl	8004614 <_free_r>
 8004782:	4625      	mov	r5, r4
 8004784:	4628      	mov	r0, r5
 8004786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004788:	f000 f830 	bl	80047ec <_malloc_usable_size_r>
 800478c:	42a0      	cmp	r0, r4
 800478e:	d20f      	bcs.n	80047b0 <_realloc_r+0x48>
 8004790:	4621      	mov	r1, r4
 8004792:	4638      	mov	r0, r7
 8004794:	f7ff ff8e 	bl	80046b4 <_malloc_r>
 8004798:	4605      	mov	r5, r0
 800479a:	2800      	cmp	r0, #0
 800479c:	d0f2      	beq.n	8004784 <_realloc_r+0x1c>
 800479e:	4631      	mov	r1, r6
 80047a0:	4622      	mov	r2, r4
 80047a2:	f7ff ff0f 	bl	80045c4 <memcpy>
 80047a6:	4631      	mov	r1, r6
 80047a8:	4638      	mov	r0, r7
 80047aa:	f7ff ff33 	bl	8004614 <_free_r>
 80047ae:	e7e9      	b.n	8004784 <_realloc_r+0x1c>
 80047b0:	4635      	mov	r5, r6
 80047b2:	e7e7      	b.n	8004784 <_realloc_r+0x1c>

080047b4 <_sbrk_r>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	4d06      	ldr	r5, [pc, #24]	; (80047d0 <_sbrk_r+0x1c>)
 80047b8:	2300      	movs	r3, #0
 80047ba:	4604      	mov	r4, r0
 80047bc:	4608      	mov	r0, r1
 80047be:	602b      	str	r3, [r5, #0]
 80047c0:	f7fe f8ba 	bl	8002938 <_sbrk>
 80047c4:	1c43      	adds	r3, r0, #1
 80047c6:	d102      	bne.n	80047ce <_sbrk_r+0x1a>
 80047c8:	682b      	ldr	r3, [r5, #0]
 80047ca:	b103      	cbz	r3, 80047ce <_sbrk_r+0x1a>
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	bd38      	pop	{r3, r4, r5, pc}
 80047d0:	200000dc 	.word	0x200000dc

080047d4 <__malloc_lock>:
 80047d4:	4801      	ldr	r0, [pc, #4]	; (80047dc <__malloc_lock+0x8>)
 80047d6:	f000 b811 	b.w	80047fc <__retarget_lock_acquire_recursive>
 80047da:	bf00      	nop
 80047dc:	200000e4 	.word	0x200000e4

080047e0 <__malloc_unlock>:
 80047e0:	4801      	ldr	r0, [pc, #4]	; (80047e8 <__malloc_unlock+0x8>)
 80047e2:	f000 b80c 	b.w	80047fe <__retarget_lock_release_recursive>
 80047e6:	bf00      	nop
 80047e8:	200000e4 	.word	0x200000e4

080047ec <_malloc_usable_size_r>:
 80047ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047f0:	1f18      	subs	r0, r3, #4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	bfbc      	itt	lt
 80047f6:	580b      	ldrlt	r3, [r1, r0]
 80047f8:	18c0      	addlt	r0, r0, r3
 80047fa:	4770      	bx	lr

080047fc <__retarget_lock_acquire_recursive>:
 80047fc:	4770      	bx	lr

080047fe <__retarget_lock_release_recursive>:
 80047fe:	4770      	bx	lr

08004800 <powf>:
 8004800:	b508      	push	{r3, lr}
 8004802:	ed2d 8b04 	vpush	{d8-d9}
 8004806:	eeb0 9a40 	vmov.f32	s18, s0
 800480a:	eef0 8a60 	vmov.f32	s17, s1
 800480e:	f000 f88f 	bl	8004930 <__ieee754_powf>
 8004812:	4b43      	ldr	r3, [pc, #268]	; (8004920 <powf+0x120>)
 8004814:	f993 3000 	ldrsb.w	r3, [r3]
 8004818:	3301      	adds	r3, #1
 800481a:	eeb0 8a40 	vmov.f32	s16, s0
 800481e:	d012      	beq.n	8004846 <powf+0x46>
 8004820:	eef4 8a68 	vcmp.f32	s17, s17
 8004824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004828:	d60d      	bvs.n	8004846 <powf+0x46>
 800482a:	eeb4 9a49 	vcmp.f32	s18, s18
 800482e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004832:	d70d      	bvc.n	8004850 <powf+0x50>
 8004834:	eef5 8a40 	vcmp.f32	s17, #0.0
 8004838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004840:	bf08      	it	eq
 8004842:	eeb0 8a67 	vmoveq.f32	s16, s15
 8004846:	eeb0 0a48 	vmov.f32	s0, s16
 800484a:	ecbd 8b04 	vpop	{d8-d9}
 800484e:	bd08      	pop	{r3, pc}
 8004850:	eddf 9a34 	vldr	s19, [pc, #208]	; 8004924 <powf+0x124>
 8004854:	eeb4 9a69 	vcmp.f32	s18, s19
 8004858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800485c:	d116      	bne.n	800488c <powf+0x8c>
 800485e:	eef4 8a69 	vcmp.f32	s17, s19
 8004862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004866:	d057      	beq.n	8004918 <powf+0x118>
 8004868:	eeb0 0a68 	vmov.f32	s0, s17
 800486c:	f000 fb2a 	bl	8004ec4 <finitef>
 8004870:	2800      	cmp	r0, #0
 8004872:	d0e8      	beq.n	8004846 <powf+0x46>
 8004874:	eef4 8ae9 	vcmpe.f32	s17, s19
 8004878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487c:	d5e3      	bpl.n	8004846 <powf+0x46>
 800487e:	f7ff fb39 	bl	8003ef4 <__errno>
 8004882:	2321      	movs	r3, #33	; 0x21
 8004884:	6003      	str	r3, [r0, #0]
 8004886:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8004928 <powf+0x128>
 800488a:	e7dc      	b.n	8004846 <powf+0x46>
 800488c:	f000 fb1a 	bl	8004ec4 <finitef>
 8004890:	bb50      	cbnz	r0, 80048e8 <powf+0xe8>
 8004892:	eeb0 0a49 	vmov.f32	s0, s18
 8004896:	f000 fb15 	bl	8004ec4 <finitef>
 800489a:	b328      	cbz	r0, 80048e8 <powf+0xe8>
 800489c:	eeb0 0a68 	vmov.f32	s0, s17
 80048a0:	f000 fb10 	bl	8004ec4 <finitef>
 80048a4:	b300      	cbz	r0, 80048e8 <powf+0xe8>
 80048a6:	eeb4 8a48 	vcmp.f32	s16, s16
 80048aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ae:	d706      	bvc.n	80048be <powf+0xbe>
 80048b0:	f7ff fb20 	bl	8003ef4 <__errno>
 80048b4:	2321      	movs	r3, #33	; 0x21
 80048b6:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 80048ba:	6003      	str	r3, [r0, #0]
 80048bc:	e7c3      	b.n	8004846 <powf+0x46>
 80048be:	f7ff fb19 	bl	8003ef4 <__errno>
 80048c2:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80048c6:	2322      	movs	r3, #34	; 0x22
 80048c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048cc:	6003      	str	r3, [r0, #0]
 80048ce:	d508      	bpl.n	80048e2 <powf+0xe2>
 80048d0:	eeb0 0a68 	vmov.f32	s0, s17
 80048d4:	f000 fb0a 	bl	8004eec <rintf>
 80048d8:	eeb4 0a68 	vcmp.f32	s0, s17
 80048dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e0:	d1d1      	bne.n	8004886 <powf+0x86>
 80048e2:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800492c <powf+0x12c>
 80048e6:	e7ae      	b.n	8004846 <powf+0x46>
 80048e8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80048ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f0:	d1a9      	bne.n	8004846 <powf+0x46>
 80048f2:	eeb0 0a49 	vmov.f32	s0, s18
 80048f6:	f000 fae5 	bl	8004ec4 <finitef>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	d0a3      	beq.n	8004846 <powf+0x46>
 80048fe:	eeb0 0a68 	vmov.f32	s0, s17
 8004902:	f000 fadf 	bl	8004ec4 <finitef>
 8004906:	2800      	cmp	r0, #0
 8004908:	d09d      	beq.n	8004846 <powf+0x46>
 800490a:	f7ff faf3 	bl	8003ef4 <__errno>
 800490e:	2322      	movs	r3, #34	; 0x22
 8004910:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8004924 <powf+0x124>
 8004914:	6003      	str	r3, [r0, #0]
 8004916:	e796      	b.n	8004846 <powf+0x46>
 8004918:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800491c:	e793      	b.n	8004846 <powf+0x46>
 800491e:	bf00      	nop
 8004920:	2000006c 	.word	0x2000006c
 8004924:	00000000 	.word	0x00000000
 8004928:	ff800000 	.word	0xff800000
 800492c:	7f800000 	.word	0x7f800000

08004930 <__ieee754_powf>:
 8004930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004934:	ee10 5a90 	vmov	r5, s1
 8004938:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800493c:	ed2d 8b02 	vpush	{d8}
 8004940:	eeb0 8a40 	vmov.f32	s16, s0
 8004944:	eef0 8a60 	vmov.f32	s17, s1
 8004948:	f000 8291 	beq.w	8004e6e <__ieee754_powf+0x53e>
 800494c:	ee10 8a10 	vmov	r8, s0
 8004950:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8004954:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8004958:	dc06      	bgt.n	8004968 <__ieee754_powf+0x38>
 800495a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800495e:	dd0a      	ble.n	8004976 <__ieee754_powf+0x46>
 8004960:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8004964:	f000 8283 	beq.w	8004e6e <__ieee754_powf+0x53e>
 8004968:	ecbd 8b02 	vpop	{d8}
 800496c:	48d8      	ldr	r0, [pc, #864]	; (8004cd0 <__ieee754_powf+0x3a0>)
 800496e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004972:	f000 bab5 	b.w	8004ee0 <nanf>
 8004976:	f1b8 0f00 	cmp.w	r8, #0
 800497a:	da1f      	bge.n	80049bc <__ieee754_powf+0x8c>
 800497c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8004980:	da2e      	bge.n	80049e0 <__ieee754_powf+0xb0>
 8004982:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8004986:	f2c0 827b 	blt.w	8004e80 <__ieee754_powf+0x550>
 800498a:	15fb      	asrs	r3, r7, #23
 800498c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8004990:	fa47 f603 	asr.w	r6, r7, r3
 8004994:	fa06 f303 	lsl.w	r3, r6, r3
 8004998:	42bb      	cmp	r3, r7
 800499a:	f040 8271 	bne.w	8004e80 <__ieee754_powf+0x550>
 800499e:	f006 0601 	and.w	r6, r6, #1
 80049a2:	f1c6 0602 	rsb	r6, r6, #2
 80049a6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80049aa:	d120      	bne.n	80049ee <__ieee754_powf+0xbe>
 80049ac:	2d00      	cmp	r5, #0
 80049ae:	f280 8264 	bge.w	8004e7a <__ieee754_powf+0x54a>
 80049b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80049b6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80049ba:	e00d      	b.n	80049d8 <__ieee754_powf+0xa8>
 80049bc:	2600      	movs	r6, #0
 80049be:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80049c2:	d1f0      	bne.n	80049a6 <__ieee754_powf+0x76>
 80049c4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80049c8:	f000 8251 	beq.w	8004e6e <__ieee754_powf+0x53e>
 80049cc:	dd0a      	ble.n	80049e4 <__ieee754_powf+0xb4>
 80049ce:	2d00      	cmp	r5, #0
 80049d0:	f280 8250 	bge.w	8004e74 <__ieee754_powf+0x544>
 80049d4:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8004cd4 <__ieee754_powf+0x3a4>
 80049d8:	ecbd 8b02 	vpop	{d8}
 80049dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049e0:	2602      	movs	r6, #2
 80049e2:	e7ec      	b.n	80049be <__ieee754_powf+0x8e>
 80049e4:	2d00      	cmp	r5, #0
 80049e6:	daf5      	bge.n	80049d4 <__ieee754_powf+0xa4>
 80049e8:	eeb1 0a68 	vneg.f32	s0, s17
 80049ec:	e7f4      	b.n	80049d8 <__ieee754_powf+0xa8>
 80049ee:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80049f2:	d102      	bne.n	80049fa <__ieee754_powf+0xca>
 80049f4:	ee28 0a08 	vmul.f32	s0, s16, s16
 80049f8:	e7ee      	b.n	80049d8 <__ieee754_powf+0xa8>
 80049fa:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80049fe:	eeb0 0a48 	vmov.f32	s0, s16
 8004a02:	d108      	bne.n	8004a16 <__ieee754_powf+0xe6>
 8004a04:	f1b8 0f00 	cmp.w	r8, #0
 8004a08:	db05      	blt.n	8004a16 <__ieee754_powf+0xe6>
 8004a0a:	ecbd 8b02 	vpop	{d8}
 8004a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a12:	f000 ba4d 	b.w	8004eb0 <__ieee754_sqrtf>
 8004a16:	f000 fa4e 	bl	8004eb6 <fabsf>
 8004a1a:	b124      	cbz	r4, 8004a26 <__ieee754_powf+0xf6>
 8004a1c:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8004a20:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8004a24:	d117      	bne.n	8004a56 <__ieee754_powf+0x126>
 8004a26:	2d00      	cmp	r5, #0
 8004a28:	bfbc      	itt	lt
 8004a2a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8004a2e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8004a32:	f1b8 0f00 	cmp.w	r8, #0
 8004a36:	dacf      	bge.n	80049d8 <__ieee754_powf+0xa8>
 8004a38:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8004a3c:	ea54 0306 	orrs.w	r3, r4, r6
 8004a40:	d104      	bne.n	8004a4c <__ieee754_powf+0x11c>
 8004a42:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004a46:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8004a4a:	e7c5      	b.n	80049d8 <__ieee754_powf+0xa8>
 8004a4c:	2e01      	cmp	r6, #1
 8004a4e:	d1c3      	bne.n	80049d8 <__ieee754_powf+0xa8>
 8004a50:	eeb1 0a40 	vneg.f32	s0, s0
 8004a54:	e7c0      	b.n	80049d8 <__ieee754_powf+0xa8>
 8004a56:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8004a5a:	3801      	subs	r0, #1
 8004a5c:	ea56 0300 	orrs.w	r3, r6, r0
 8004a60:	d104      	bne.n	8004a6c <__ieee754_powf+0x13c>
 8004a62:	ee38 8a48 	vsub.f32	s16, s16, s16
 8004a66:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8004a6a:	e7b5      	b.n	80049d8 <__ieee754_powf+0xa8>
 8004a6c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8004a70:	dd6b      	ble.n	8004b4a <__ieee754_powf+0x21a>
 8004a72:	4b99      	ldr	r3, [pc, #612]	; (8004cd8 <__ieee754_powf+0x3a8>)
 8004a74:	429c      	cmp	r4, r3
 8004a76:	dc06      	bgt.n	8004a86 <__ieee754_powf+0x156>
 8004a78:	2d00      	cmp	r5, #0
 8004a7a:	daab      	bge.n	80049d4 <__ieee754_powf+0xa4>
 8004a7c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8004cdc <__ieee754_powf+0x3ac>
 8004a80:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004a84:	e7a8      	b.n	80049d8 <__ieee754_powf+0xa8>
 8004a86:	4b96      	ldr	r3, [pc, #600]	; (8004ce0 <__ieee754_powf+0x3b0>)
 8004a88:	429c      	cmp	r4, r3
 8004a8a:	dd02      	ble.n	8004a92 <__ieee754_powf+0x162>
 8004a8c:	2d00      	cmp	r5, #0
 8004a8e:	dcf5      	bgt.n	8004a7c <__ieee754_powf+0x14c>
 8004a90:	e7a0      	b.n	80049d4 <__ieee754_powf+0xa4>
 8004a92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004a96:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004a9a:	eddf 6a92 	vldr	s13, [pc, #584]	; 8004ce4 <__ieee754_powf+0x3b4>
 8004a9e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8004aa2:	eee0 6a67 	vfms.f32	s13, s0, s15
 8004aa6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004aaa:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8004aae:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab6:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8004ce8 <__ieee754_powf+0x3b8>
 8004aba:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8004abe:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8004cec <__ieee754_powf+0x3bc>
 8004ac2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004ac6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8004cf0 <__ieee754_powf+0x3c0>
 8004aca:	eef0 6a67 	vmov.f32	s13, s15
 8004ace:	eee0 6a07 	vfma.f32	s13, s0, s14
 8004ad2:	ee16 3a90 	vmov	r3, s13
 8004ad6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004ada:	f023 030f 	bic.w	r3, r3, #15
 8004ade:	ee00 3a90 	vmov	s1, r3
 8004ae2:	eee0 0a47 	vfms.f32	s1, s0, s14
 8004ae6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004aea:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8004aee:	f025 050f 	bic.w	r5, r5, #15
 8004af2:	ee07 5a10 	vmov	s14, r5
 8004af6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8004afa:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eee7 0a27 	vfma.f32	s1, s14, s15
 8004b06:	3e01      	subs	r6, #1
 8004b08:	ea56 0200 	orrs.w	r2, r6, r0
 8004b0c:	ee07 5a10 	vmov	s14, r5
 8004b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b14:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8004b18:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8004b1c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8004b20:	ee17 4a10 	vmov	r4, s14
 8004b24:	bf08      	it	eq
 8004b26:	eeb0 8a40 	vmoveq.f32	s16, s0
 8004b2a:	2c00      	cmp	r4, #0
 8004b2c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004b30:	f340 8184 	ble.w	8004e3c <__ieee754_powf+0x50c>
 8004b34:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8004b38:	f340 80fc 	ble.w	8004d34 <__ieee754_powf+0x404>
 8004b3c:	eddf 7a67 	vldr	s15, [pc, #412]	; 8004cdc <__ieee754_powf+0x3ac>
 8004b40:	ee28 0a27 	vmul.f32	s0, s16, s15
 8004b44:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004b48:	e746      	b.n	80049d8 <__ieee754_powf+0xa8>
 8004b4a:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8004b4e:	bf01      	itttt	eq
 8004b50:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8004cf4 <__ieee754_powf+0x3c4>
 8004b54:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8004b58:	f06f 0217 	mvneq.w	r2, #23
 8004b5c:	ee17 4a90 	vmoveq	r4, s15
 8004b60:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8004b64:	bf18      	it	ne
 8004b66:	2200      	movne	r2, #0
 8004b68:	3b7f      	subs	r3, #127	; 0x7f
 8004b6a:	4413      	add	r3, r2
 8004b6c:	4a62      	ldr	r2, [pc, #392]	; (8004cf8 <__ieee754_powf+0x3c8>)
 8004b6e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8004b72:	4294      	cmp	r4, r2
 8004b74:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8004b78:	dd06      	ble.n	8004b88 <__ieee754_powf+0x258>
 8004b7a:	4a60      	ldr	r2, [pc, #384]	; (8004cfc <__ieee754_powf+0x3cc>)
 8004b7c:	4294      	cmp	r4, r2
 8004b7e:	f340 80a4 	ble.w	8004cca <__ieee754_powf+0x39a>
 8004b82:	3301      	adds	r3, #1
 8004b84:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8004b88:	2400      	movs	r4, #0
 8004b8a:	4a5d      	ldr	r2, [pc, #372]	; (8004d00 <__ieee754_powf+0x3d0>)
 8004b8c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8004b90:	ee07 1a90 	vmov	s15, r1
 8004b94:	ed92 7a00 	vldr	s14, [r2]
 8004b98:	4a5a      	ldr	r2, [pc, #360]	; (8004d04 <__ieee754_powf+0x3d4>)
 8004b9a:	ee37 6a27 	vadd.f32	s12, s14, s15
 8004b9e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004ba2:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8004ba6:	1049      	asrs	r1, r1, #1
 8004ba8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8004bac:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8004bb0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8004bb4:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8004bb8:	ee06 1a10 	vmov	s12, r1
 8004bbc:	ee65 4a26 	vmul.f32	s9, s10, s13
 8004bc0:	ee36 7a47 	vsub.f32	s14, s12, s14
 8004bc4:	ee14 7a90 	vmov	r7, s9
 8004bc8:	4017      	ands	r7, r2
 8004bca:	ee05 7a90 	vmov	s11, r7
 8004bce:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8004bd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004bd6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8004d08 <__ieee754_powf+0x3d8>
 8004bda:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8004bde:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8004be2:	ee25 6a26 	vmul.f32	s12, s10, s13
 8004be6:	eddf 6a49 	vldr	s13, [pc, #292]	; 8004d0c <__ieee754_powf+0x3dc>
 8004bea:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8004bee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004d10 <__ieee754_powf+0x3e0>
 8004bf2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004bf6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004ce4 <__ieee754_powf+0x3b4>
 8004bfa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004bfe:	eddf 6a45 	vldr	s13, [pc, #276]	; 8004d14 <__ieee754_powf+0x3e4>
 8004c02:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004c06:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8004d18 <__ieee754_powf+0x3e8>
 8004c0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004c0e:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8004c12:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8004c16:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004c1a:	eee5 6a07 	vfma.f32	s13, s10, s14
 8004c1e:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8004c22:	eef0 7a45 	vmov.f32	s15, s10
 8004c26:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8004c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2e:	ee17 1a90 	vmov	r1, s15
 8004c32:	4011      	ands	r1, r2
 8004c34:	ee07 1a90 	vmov	s15, r1
 8004c38:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8004c3c:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8004c40:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004c44:	ee27 7a24 	vmul.f32	s14, s14, s9
 8004c48:	eea6 7a27 	vfma.f32	s14, s12, s15
 8004c4c:	eeb0 6a47 	vmov.f32	s12, s14
 8004c50:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8004c54:	ee16 1a10 	vmov	r1, s12
 8004c58:	4011      	ands	r1, r2
 8004c5a:	ee06 1a90 	vmov	s13, r1
 8004c5e:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8004c62:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8004d1c <__ieee754_powf+0x3ec>
 8004c66:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004d20 <__ieee754_powf+0x3f0>
 8004c6a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8004c6e:	ee06 1a10 	vmov	s12, r1
 8004c72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c76:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8004d24 <__ieee754_powf+0x3f4>
 8004c7a:	492b      	ldr	r1, [pc, #172]	; (8004d28 <__ieee754_powf+0x3f8>)
 8004c7c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8004c80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004c84:	edd1 7a00 	vldr	s15, [r1]
 8004c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c8c:	ee07 3a90 	vmov	s15, r3
 8004c90:	4b26      	ldr	r3, [pc, #152]	; (8004d2c <__ieee754_powf+0x3fc>)
 8004c92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004c96:	eef0 7a47 	vmov.f32	s15, s14
 8004c9a:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004c9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004ca2:	edd4 0a00 	vldr	s1, [r4]
 8004ca6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8004caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cae:	ee17 3a90 	vmov	r3, s15
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	ee07 3a90 	vmov	s15, r3
 8004cb8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8004cbc:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8004cc0:	eee6 6a65 	vfms.f32	s13, s12, s11
 8004cc4:	ee77 7a66 	vsub.f32	s15, s14, s13
 8004cc8:	e70f      	b.n	8004aea <__ieee754_powf+0x1ba>
 8004cca:	2401      	movs	r4, #1
 8004ccc:	e75d      	b.n	8004b8a <__ieee754_powf+0x25a>
 8004cce:	bf00      	nop
 8004cd0:	080050d2 	.word	0x080050d2
 8004cd4:	00000000 	.word	0x00000000
 8004cd8:	3f7ffff7 	.word	0x3f7ffff7
 8004cdc:	7149f2ca 	.word	0x7149f2ca
 8004ce0:	3f800007 	.word	0x3f800007
 8004ce4:	3eaaaaab 	.word	0x3eaaaaab
 8004ce8:	3fb8aa3b 	.word	0x3fb8aa3b
 8004cec:	36eca570 	.word	0x36eca570
 8004cf0:	3fb8aa00 	.word	0x3fb8aa00
 8004cf4:	4b800000 	.word	0x4b800000
 8004cf8:	001cc471 	.word	0x001cc471
 8004cfc:	005db3d6 	.word	0x005db3d6
 8004d00:	08005100 	.word	0x08005100
 8004d04:	fffff000 	.word	0xfffff000
 8004d08:	3e6c3255 	.word	0x3e6c3255
 8004d0c:	3e53f142 	.word	0x3e53f142
 8004d10:	3e8ba305 	.word	0x3e8ba305
 8004d14:	3edb6db7 	.word	0x3edb6db7
 8004d18:	3f19999a 	.word	0x3f19999a
 8004d1c:	3f76384f 	.word	0x3f76384f
 8004d20:	3f763800 	.word	0x3f763800
 8004d24:	369dc3a0 	.word	0x369dc3a0
 8004d28:	08005110 	.word	0x08005110
 8004d2c:	08005108 	.word	0x08005108
 8004d30:	3338aa3c 	.word	0x3338aa3c
 8004d34:	f040 8092 	bne.w	8004e5c <__ieee754_powf+0x52c>
 8004d38:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8004d30 <__ieee754_powf+0x400>
 8004d3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d40:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8004d44:	eef4 6ac7 	vcmpe.f32	s13, s14
 8004d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4c:	f73f aef6 	bgt.w	8004b3c <__ieee754_powf+0x20c>
 8004d50:	15db      	asrs	r3, r3, #23
 8004d52:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8004d56:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004d5a:	4103      	asrs	r3, r0
 8004d5c:	4423      	add	r3, r4
 8004d5e:	4949      	ldr	r1, [pc, #292]	; (8004e84 <__ieee754_powf+0x554>)
 8004d60:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004d64:	3a7f      	subs	r2, #127	; 0x7f
 8004d66:	4111      	asrs	r1, r2
 8004d68:	ea23 0101 	bic.w	r1, r3, r1
 8004d6c:	ee07 1a10 	vmov	s14, r1
 8004d70:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8004d74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004d78:	f1c2 0217 	rsb	r2, r2, #23
 8004d7c:	4110      	asrs	r0, r2
 8004d7e:	2c00      	cmp	r4, #0
 8004d80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d84:	bfb8      	it	lt
 8004d86:	4240      	neglt	r0, r0
 8004d88:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8004d8c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8004e88 <__ieee754_powf+0x558>
 8004d90:	ee17 3a10 	vmov	r3, s14
 8004d94:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004d98:	f023 030f 	bic.w	r3, r3, #15
 8004d9c:	ee07 3a10 	vmov	s14, r3
 8004da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004da4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8004da8:	eddf 7a38 	vldr	s15, [pc, #224]	; 8004e8c <__ieee754_powf+0x55c>
 8004dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8004db4:	eddf 6a36 	vldr	s13, [pc, #216]	; 8004e90 <__ieee754_powf+0x560>
 8004db8:	eeb0 0a67 	vmov.f32	s0, s15
 8004dbc:	eea7 0a26 	vfma.f32	s0, s14, s13
 8004dc0:	eeb0 6a40 	vmov.f32	s12, s0
 8004dc4:	eea7 6a66 	vfms.f32	s12, s14, s13
 8004dc8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004dcc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004dd0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8004e94 <__ieee754_powf+0x564>
 8004dd4:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8004e98 <__ieee754_powf+0x568>
 8004dd8:	eea7 6a26 	vfma.f32	s12, s14, s13
 8004ddc:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8004e9c <__ieee754_powf+0x56c>
 8004de0:	eee6 6a07 	vfma.f32	s13, s12, s14
 8004de4:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8004ea0 <__ieee754_powf+0x570>
 8004de8:	eea6 6a87 	vfma.f32	s12, s13, s14
 8004dec:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8004ea4 <__ieee754_powf+0x574>
 8004df0:	eee6 6a07 	vfma.f32	s13, s12, s14
 8004df4:	eeb0 6a40 	vmov.f32	s12, s0
 8004df8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8004dfc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004e00:	eeb0 7a46 	vmov.f32	s14, s12
 8004e04:	ee77 6a66 	vsub.f32	s13, s14, s13
 8004e08:	ee20 6a06 	vmul.f32	s12, s0, s12
 8004e0c:	eee0 7a27 	vfma.f32	s15, s0, s15
 8004e10:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004e14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e18:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8004e1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004e20:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8004e24:	ee10 3a10 	vmov	r3, s0
 8004e28:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8004e2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e30:	da1a      	bge.n	8004e68 <__ieee754_powf+0x538>
 8004e32:	f000 f8b7 	bl	8004fa4 <scalbnf>
 8004e36:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004e3a:	e5cd      	b.n	80049d8 <__ieee754_powf+0xa8>
 8004e3c:	4a1a      	ldr	r2, [pc, #104]	; (8004ea8 <__ieee754_powf+0x578>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	dd02      	ble.n	8004e48 <__ieee754_powf+0x518>
 8004e42:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8004eac <__ieee754_powf+0x57c>
 8004e46:	e67b      	b.n	8004b40 <__ieee754_powf+0x210>
 8004e48:	d108      	bne.n	8004e5c <__ieee754_powf+0x52c>
 8004e4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e4e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8004e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e56:	f6ff af7b 	blt.w	8004d50 <__ieee754_powf+0x420>
 8004e5a:	e7f2      	b.n	8004e42 <__ieee754_powf+0x512>
 8004e5c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8004e60:	f73f af76 	bgt.w	8004d50 <__ieee754_powf+0x420>
 8004e64:	2000      	movs	r0, #0
 8004e66:	e78f      	b.n	8004d88 <__ieee754_powf+0x458>
 8004e68:	ee00 3a10 	vmov	s0, r3
 8004e6c:	e7e3      	b.n	8004e36 <__ieee754_powf+0x506>
 8004e6e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004e72:	e5b1      	b.n	80049d8 <__ieee754_powf+0xa8>
 8004e74:	eeb0 0a68 	vmov.f32	s0, s17
 8004e78:	e5ae      	b.n	80049d8 <__ieee754_powf+0xa8>
 8004e7a:	eeb0 0a48 	vmov.f32	s0, s16
 8004e7e:	e5ab      	b.n	80049d8 <__ieee754_powf+0xa8>
 8004e80:	2600      	movs	r6, #0
 8004e82:	e590      	b.n	80049a6 <__ieee754_powf+0x76>
 8004e84:	007fffff 	.word	0x007fffff
 8004e88:	3f317218 	.word	0x3f317218
 8004e8c:	35bfbe8c 	.word	0x35bfbe8c
 8004e90:	3f317200 	.word	0x3f317200
 8004e94:	3331bb4c 	.word	0x3331bb4c
 8004e98:	b5ddea0e 	.word	0xb5ddea0e
 8004e9c:	388ab355 	.word	0x388ab355
 8004ea0:	bb360b61 	.word	0xbb360b61
 8004ea4:	3e2aaaab 	.word	0x3e2aaaab
 8004ea8:	43160000 	.word	0x43160000
 8004eac:	0da24260 	.word	0x0da24260

08004eb0 <__ieee754_sqrtf>:
 8004eb0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004eb4:	4770      	bx	lr

08004eb6 <fabsf>:
 8004eb6:	ee10 3a10 	vmov	r3, s0
 8004eba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ebe:	ee00 3a10 	vmov	s0, r3
 8004ec2:	4770      	bx	lr

08004ec4 <finitef>:
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	ed8d 0a01 	vstr	s0, [sp, #4]
 8004eca:	9801      	ldr	r0, [sp, #4]
 8004ecc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004ed0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8004ed4:	bfac      	ite	ge
 8004ed6:	2000      	movge	r0, #0
 8004ed8:	2001      	movlt	r0, #1
 8004eda:	b002      	add	sp, #8
 8004edc:	4770      	bx	lr
	...

08004ee0 <nanf>:
 8004ee0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004ee8 <nanf+0x8>
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	7fc00000 	.word	0x7fc00000

08004eec <rintf>:
 8004eec:	ee10 2a10 	vmov	r2, s0
 8004ef0:	b513      	push	{r0, r1, r4, lr}
 8004ef2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004ef6:	397f      	subs	r1, #127	; 0x7f
 8004ef8:	2916      	cmp	r1, #22
 8004efa:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8004efe:	dc47      	bgt.n	8004f90 <rintf+0xa4>
 8004f00:	b32b      	cbz	r3, 8004f4e <rintf+0x62>
 8004f02:	2900      	cmp	r1, #0
 8004f04:	ee10 3a10 	vmov	r3, s0
 8004f08:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8004f0c:	da21      	bge.n	8004f52 <rintf+0x66>
 8004f0e:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8004f12:	425b      	negs	r3, r3
 8004f14:	4921      	ldr	r1, [pc, #132]	; (8004f9c <rintf+0xb0>)
 8004f16:	0a5b      	lsrs	r3, r3, #9
 8004f18:	0d12      	lsrs	r2, r2, #20
 8004f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1e:	0512      	lsls	r2, r2, #20
 8004f20:	4313      	orrs	r3, r2
 8004f22:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	edd1 6a00 	vldr	s13, [r1]
 8004f2e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8004f32:	ed8d 7a01 	vstr	s14, [sp, #4]
 8004f36:	eddd 7a01 	vldr	s15, [sp, #4]
 8004f3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004f3e:	ee17 3a90 	vmov	r3, s15
 8004f42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f46:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8004f4a:	ee00 3a10 	vmov	s0, r3
 8004f4e:	b002      	add	sp, #8
 8004f50:	bd10      	pop	{r4, pc}
 8004f52:	4a13      	ldr	r2, [pc, #76]	; (8004fa0 <rintf+0xb4>)
 8004f54:	410a      	asrs	r2, r1
 8004f56:	4213      	tst	r3, r2
 8004f58:	d0f9      	beq.n	8004f4e <rintf+0x62>
 8004f5a:	0854      	lsrs	r4, r2, #1
 8004f5c:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8004f60:	d006      	beq.n	8004f70 <rintf+0x84>
 8004f62:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004f66:	ea23 0304 	bic.w	r3, r3, r4
 8004f6a:	fa42 f101 	asr.w	r1, r2, r1
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	4a0a      	ldr	r2, [pc, #40]	; (8004f9c <rintf+0xb0>)
 8004f72:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8004f76:	ed90 7a00 	vldr	s14, [r0]
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f82:	edcd 7a01 	vstr	s15, [sp, #4]
 8004f86:	ed9d 0a01 	vldr	s0, [sp, #4]
 8004f8a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004f8e:	e7de      	b.n	8004f4e <rintf+0x62>
 8004f90:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004f94:	d3db      	bcc.n	8004f4e <rintf+0x62>
 8004f96:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004f9a:	e7d8      	b.n	8004f4e <rintf+0x62>
 8004f9c:	08005118 	.word	0x08005118
 8004fa0:	007fffff 	.word	0x007fffff

08004fa4 <scalbnf>:
 8004fa4:	ee10 3a10 	vmov	r3, s0
 8004fa8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004fac:	d025      	beq.n	8004ffa <scalbnf+0x56>
 8004fae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004fb2:	d302      	bcc.n	8004fba <scalbnf+0x16>
 8004fb4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004fb8:	4770      	bx	lr
 8004fba:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8004fbe:	d122      	bne.n	8005006 <scalbnf+0x62>
 8004fc0:	4b2a      	ldr	r3, [pc, #168]	; (800506c <scalbnf+0xc8>)
 8004fc2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005070 <scalbnf+0xcc>
 8004fc6:	4298      	cmp	r0, r3
 8004fc8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004fcc:	db16      	blt.n	8004ffc <scalbnf+0x58>
 8004fce:	ee10 3a10 	vmov	r3, s0
 8004fd2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004fd6:	3a19      	subs	r2, #25
 8004fd8:	4402      	add	r2, r0
 8004fda:	2afe      	cmp	r2, #254	; 0xfe
 8004fdc:	dd15      	ble.n	800500a <scalbnf+0x66>
 8004fde:	ee10 3a10 	vmov	r3, s0
 8004fe2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8005074 <scalbnf+0xd0>
 8004fe6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8005078 <scalbnf+0xd4>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	eeb0 7a67 	vmov.f32	s14, s15
 8004ff0:	bfb8      	it	lt
 8004ff2:	eef0 7a66 	vmovlt.f32	s15, s13
 8004ff6:	ee27 0a27 	vmul.f32	s0, s14, s15
 8004ffa:	4770      	bx	lr
 8004ffc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800507c <scalbnf+0xd8>
 8005000:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005004:	4770      	bx	lr
 8005006:	0dd2      	lsrs	r2, r2, #23
 8005008:	e7e6      	b.n	8004fd8 <scalbnf+0x34>
 800500a:	2a00      	cmp	r2, #0
 800500c:	dd06      	ble.n	800501c <scalbnf+0x78>
 800500e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005012:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005016:	ee00 3a10 	vmov	s0, r3
 800501a:	4770      	bx	lr
 800501c:	f112 0f16 	cmn.w	r2, #22
 8005020:	da1a      	bge.n	8005058 <scalbnf+0xb4>
 8005022:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005026:	4298      	cmp	r0, r3
 8005028:	ee10 3a10 	vmov	r3, s0
 800502c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005030:	dd0a      	ble.n	8005048 <scalbnf+0xa4>
 8005032:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005074 <scalbnf+0xd0>
 8005036:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005078 <scalbnf+0xd4>
 800503a:	eef0 7a40 	vmov.f32	s15, s0
 800503e:	2b00      	cmp	r3, #0
 8005040:	bf18      	it	ne
 8005042:	eeb0 0a47 	vmovne.f32	s0, s14
 8005046:	e7db      	b.n	8005000 <scalbnf+0x5c>
 8005048:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800507c <scalbnf+0xd8>
 800504c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005080 <scalbnf+0xdc>
 8005050:	eef0 7a40 	vmov.f32	s15, s0
 8005054:	2b00      	cmp	r3, #0
 8005056:	e7f3      	b.n	8005040 <scalbnf+0x9c>
 8005058:	3219      	adds	r2, #25
 800505a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800505e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005062:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005084 <scalbnf+0xe0>
 8005066:	ee07 3a10 	vmov	s14, r3
 800506a:	e7c4      	b.n	8004ff6 <scalbnf+0x52>
 800506c:	ffff3cb0 	.word	0xffff3cb0
 8005070:	4c000000 	.word	0x4c000000
 8005074:	7149f2ca 	.word	0x7149f2ca
 8005078:	f149f2ca 	.word	0xf149f2ca
 800507c:	0da24260 	.word	0x0da24260
 8005080:	8da24260 	.word	0x8da24260
 8005084:	33000000 	.word	0x33000000

08005088 <_init>:
 8005088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508a:	bf00      	nop
 800508c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508e:	bc08      	pop	{r3}
 8005090:	469e      	mov	lr, r3
 8005092:	4770      	bx	lr

08005094 <_fini>:
 8005094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005096:	bf00      	nop
 8005098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800509a:	bc08      	pop	{r3}
 800509c:	469e      	mov	lr, r3
 800509e:	4770      	bx	lr
