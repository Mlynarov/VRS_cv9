
VRS_cv9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fe8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  08008178  08008178  00018178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084c4  080084c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080084c4  080084c4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080084c4  080084c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084c4  080084c4  000184c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084c8  080084c8  000184c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080084cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000007c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b4f9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002273  00000000  00000000  0002b599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  0002d810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000960  00000000  00000000  0002e278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000186ed  00000000  00000000  0002ebd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000087ba  00000000  00000000  000472c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007c0d2  00000000  00000000  0004fa7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000cbb51  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c8c  00000000  00000000  000cbba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008160 	.word	0x08008160

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008160 	.word	0x08008160

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <altPress_read_byte>:
#include <math.h>

uint8_t LPS_addres = LPS_DEVICE_ADDRESS	;

uint8_t altPress_read_byte(uint8_t reg_addr)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, LPS_addres, 0));
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <altPress_read_byte+0x30>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	79fa      	ldrb	r2, [r7, #7]
 8000c30:	f107 000f 	add.w	r0, r7, #15
 8000c34:	2100      	movs	r1, #0
 8000c36:	9100      	str	r1, [sp, #0]
 8000c38:	2101      	movs	r1, #1
 8000c3a:	f001 ffa7 	bl	8002b8c <i2c_master_read>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	781b      	ldrb	r3, [r3, #0]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000000 	.word	0x20000000

08000c50 <altPress_write_byte>:
{
	i2c_master_read(data, length, reg, LPS_addres, 1);
}

void altPress_write_byte(uint8_t reg_addr, uint8_t value)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	460a      	mov	r2, r1
 8000c5a:	71fb      	strb	r3, [r7, #7]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, LPS_addres, 0);
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <altPress_write_byte+0x28>)
 8000c62:	781a      	ldrb	r2, [r3, #0]
 8000c64:	79f9      	ldrb	r1, [r7, #7]
 8000c66:	79b8      	ldrb	r0, [r7, #6]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f001 ff4b 	bl	8002b04 <i2c_master_write>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000000 	.word	0x20000000

08000c7c <pressure_init>:

uint8_t pressure_init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8000c82:	2301      	movs	r3, #1
 8000c84:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8000c86:	2064      	movs	r0, #100	; 0x64
 8000c88:	f003 ffea 	bl	8004c60 <LL_mDelay>

	uint8_t val = altPress_read_byte(LPS_WHO_AM_I);
 8000c8c:	200f      	movs	r0, #15
 8000c8e:	f7ff ffc5 	bl	8000c1c <altPress_read_byte>
 8000c92:	4603      	mov	r3, r0
 8000c94:	71bb      	strb	r3, [r7, #6]

	if(val == LPS_WHO_AM_I_DEFAULT)
 8000c96:	79bb      	ldrb	r3, [r7, #6]
 8000c98:	2bbd      	cmp	r3, #189	; 0xbd
 8000c9a:	d102      	bne.n	8000ca2 <pressure_init+0x26>
	{
		status = 1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	71fb      	strb	r3, [r7, #7]
 8000ca0:	e001      	b.n	8000ca6 <pressure_init+0x2a>
	}
	else			//if the device is not found on one address, try another one
	{
			status = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	71fb      	strb	r3, [r7, #7]
			//return status;
	}

	//acc device init

	altPress_write_byte(LPS_CTRL_REG1, LPS_CTRL_REG1_SETUP);
 8000ca6:	2190      	movs	r1, #144	; 0x90
 8000ca8:	2020      	movs	r0, #32
 8000caa:	f7ff ffd1 	bl	8000c50 <altPress_write_byte>

	return status;
 8000cae:	79fb      	ldrb	r3, [r7, #7]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <get_pressure>:

float get_pressure()
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 uint8_t pressure_low,pressure_mid,pressure_high;
 float pressure,tmp=0;
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]

 pressure_low = altPress_read_byte(LPS_PRESS_OUT_XL);
 8000cc4:	2028      	movs	r0, #40	; 0x28
 8000cc6:	f7ff ffa9 	bl	8000c1c <altPress_read_byte>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	72fb      	strb	r3, [r7, #11]
 pressure_mid = altPress_read_byte(LPS_PRESS_OUT_L);
 8000cce:	2029      	movs	r0, #41	; 0x29
 8000cd0:	f7ff ffa4 	bl	8000c1c <altPress_read_byte>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	72bb      	strb	r3, [r7, #10]
 pressure_high = altPress_read_byte(LPS_PRESS_OUT_H);
 8000cd8:	202a      	movs	r0, #42	; 0x2a
 8000cda:	f7ff ff9f 	bl	8000c1c <altPress_read_byte>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	727b      	strb	r3, [r7, #9]

 //vypocitanie tlaku strana 15 v datasheete uvedenom v altitudePressure.h
 tmp=pressure_high << 16|pressure_mid<<8|pressure_low;
 8000ce2:	7a7b      	ldrb	r3, [r7, #9]
 8000ce4:	041a      	lsls	r2, r3, #16
 8000ce6:	7abb      	ldrb	r3, [r7, #10]
 8000ce8:	021b      	lsls	r3, r3, #8
 8000cea:	431a      	orrs	r2, r3
 8000cec:	7afb      	ldrb	r3, [r7, #11]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	ee07 3a90 	vmov	s15, r3
 8000cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf8:	edc7 7a03 	vstr	s15, [r7, #12]
 pressure=tmp/4096;
 8000cfc:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d00:	eddf 6a06 	vldr	s13, [pc, #24]	; 8000d1c <get_pressure+0x64>
 8000d04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d08:	edc7 7a01 	vstr	s15, [r7, #4]

 return pressure;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	ee07 3a90 	vmov	s15, r3
}
 8000d12:	eeb0 0a67 	vmov.f32	s0, s15
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	45800000 	.word	0x45800000

08000d20 <hts_read_byte>:
#include "hts.h"

uint8_t hts221_addres = HTS_ADDRESS;

uint8_t hts_read_byte(uint8_t reg_addr)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af02      	add	r7, sp, #8
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, hts221_addres, 0));
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <hts_read_byte+0x30>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	79fa      	ldrb	r2, [r7, #7]
 8000d34:	f107 000f 	add.w	r0, r7, #15
 8000d38:	2100      	movs	r1, #0
 8000d3a:	9100      	str	r1, [sp, #0]
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	f001 ff25 	bl	8002b8c <i2c_master_read>
 8000d42:	4603      	mov	r3, r0
 8000d44:	781b      	ldrb	r3, [r3, #0]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000001 	.word	0x20000001

08000d54 <hts_readArray>:


void hts_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]
 8000d60:	4613      	mov	r3, r2
 8000d62:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, hts221_addres, 1);
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <hts_readArray+0x2c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	78fa      	ldrb	r2, [r7, #3]
 8000d6a:	78b9      	ldrb	r1, [r7, #2]
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	9000      	str	r0, [sp, #0]
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f001 ff0b 	bl	8002b8c <i2c_master_read>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000001 	.word	0x20000001

08000d84 <hts_write_byte>:

void hts_write_byte(uint8_t reg_addr, uint8_t value)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	460a      	mov	r2, r1
 8000d8e:	71fb      	strb	r3, [r7, #7]
 8000d90:	4613      	mov	r3, r2
 8000d92:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, hts221_addres, 0);
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <hts_write_byte+0x28>)
 8000d96:	781a      	ldrb	r2, [r3, #0]
 8000d98:	79f9      	ldrb	r1, [r7, #7]
 8000d9a:	79b8      	ldrb	r0, [r7, #6]
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f001 feb1 	bl	8002b04 <i2c_master_write>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000001 	.word	0x20000001

08000db0 <hts_sensore_init>:

uint8_t hts_sensore_init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8000db6:	2301      	movs	r3, #1
 8000db8:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8000dba:	2064      	movs	r0, #100	; 0x64
 8000dbc:	f003 ff50 	bl	8004c60 <LL_mDelay>

	uint8_t val = hts_read_byte(HTS_WHO_AM_I);
 8000dc0:	200f      	movs	r0, #15
 8000dc2:	f7ff ffad 	bl	8000d20 <hts_read_byte>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71bb      	strb	r3, [r7, #6]

	if(val == HTS_WHO_AM_I_DEFAULT)
 8000dca:	79bb      	ldrb	r3, [r7, #6]
 8000dcc:	2bbc      	cmp	r3, #188	; 0xbc
 8000dce:	d102      	bne.n	8000dd6 <hts_sensore_init+0x26>
	{
		status = 1;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	71fb      	strb	r3, [r7, #7]
 8000dd4:	e001      	b.n	8000dda <hts_sensore_init+0x2a>
	}
	else			//if the device is not found on one address, try another one
	{
			status = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	71fb      	strb	r3, [r7, #7]
			//return status;
	}

	//acc device init

	uint8_t ctrl1 = 134; // +-2g res
 8000dda:	2386      	movs	r3, #134	; 0x86
 8000ddc:	717b      	strb	r3, [r7, #5]
	hts_write_byte(HTS_CTRL_REG1, ctrl1);
 8000dde:	797b      	ldrb	r3, [r7, #5]
 8000de0:	4619      	mov	r1, r3
 8000de2:	2020      	movs	r0, #32
 8000de4:	f7ff ffce 	bl	8000d84 <hts_write_byte>

	return status;
 8000de8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HTS221_Get_Temperature>:

int16_t HTS221_Get_Temperature()
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b088      	sub	sp, #32
 8000df6:	af00      	add	r7, sp, #0
 int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
 int16_t T0_degC, T1_degC, value;
 uint8_t buffer[4], tmp,sign;
 int32_t tmp32;

 sign=0b10000000;
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	777b      	strb	r3, [r7, #29]

/*1. Read from 0x32 & 0x33 registers the value of coefficients T0_degC_x8 and T1_degC_x8*/
 hts_readArray(buffer,HTS_TO_DEGC_REG,2);
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2202      	movs	r2, #2
 8000e00:	2132      	movs	r1, #50	; 0x32
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ffa6 	bl	8000d54 <hts_readArray>

/*2. Read from 0x35 register the value of the MSB bits of T1_degC and T0_degC */
 tmp=hts_read_byte(HTS_MSB_T1_T0);
 8000e08:	2035      	movs	r0, #53	; 0x35
 8000e0a:	f7ff ff89 	bl	8000d20 <hts_read_byte>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	773b      	strb	r3, [r7, #28]


/*Calculate the T0_degC and T1_degC values*/
 T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8000e12:	7f3b      	ldrb	r3, [r7, #28]
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000e1c:	b21a      	sxth	r2, r3
 8000e1e:	793b      	ldrb	r3, [r7, #4]
 8000e20:	b21b      	sxth	r3, r3
 8000e22:	4313      	orrs	r3, r2
 8000e24:	837b      	strh	r3, [r7, #26]
 T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000e26:	7f3b      	ldrb	r3, [r7, #28]
 8000e28:	019b      	lsls	r3, r3, #6
 8000e2a:	b21b      	sxth	r3, r3
 8000e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	797b      	ldrb	r3, [r7, #5]
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	4313      	orrs	r3, r2
 8000e38:	833b      	strh	r3, [r7, #24]
 T0_degC = T0_degC_x8_u16>>3;
 8000e3a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000e3e:	10db      	asrs	r3, r3, #3
 8000e40:	82fb      	strh	r3, [r7, #22]
 T1_degC = T1_degC_x8_u16>>3;
 8000e42:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e46:	10db      	asrs	r3, r3, #3
 8000e48:	82bb      	strh	r3, [r7, #20]

/*3. Read from 0x3C & 0x3D registers the value of T0_OUT*/
 hts_readArray(buffer,HTS_T0_OUT,4 );
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	213c      	movs	r1, #60	; 0x3c
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff7f 	bl	8000d54 <hts_readArray>
 T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8000e56:	797b      	ldrb	r3, [r7, #5]
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	b21a      	sxth	r2, r3
 8000e5c:	793b      	ldrb	r3, [r7, #4]
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	4313      	orrs	r3, r2
 8000e62:	827b      	strh	r3, [r7, #18]

 /*4. Read from 0x3E & 0x3F registers the value of T1_OUT*/
 T1_out = (((uint16_t)buffer[3])<<8) | (uint16_t)buffer[2];
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	021b      	lsls	r3, r3, #8
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	79bb      	ldrb	r3, [r7, #6]
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	823b      	strh	r3, [r7, #16]

/* 5.Read from 0x2A & 0x2B registers the value T_OUT (ADC_OUT).*/
 hts_readArray(buffer,HTS_T_OUT_Low,2 );
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2202      	movs	r2, #2
 8000e76:	212a      	movs	r1, #42	; 0x2a
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff6b 	bl	8000d54 <hts_readArray>
 T_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8000e7e:	797b      	ldrb	r3, [r7, #5]
 8000e80:	021b      	lsls	r3, r3, #8
 8000e82:	b21a      	sxth	r2, r3
 8000e84:	793b      	ldrb	r3, [r7, #4]
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	81fb      	strh	r3, [r7, #14]


/* 6. Compute the Temperature value by linear interpolation*/
 tmp32 = ((int32_t)(T_out - T0_out)) * ((int32_t)(T1_degC - T0_degC)*10);
 8000e8c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e90:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000e9a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000e9e:	1a8a      	subs	r2, r1, r2
 8000ea0:	fb02 f203 	mul.w	r2, r2, r3
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	60bb      	str	r3, [r7, #8]
 value = tmp32 /(T1_out - T0_out) + T0_degC*10;
 8000eae:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000eb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	8afb      	ldrh	r3, [r7, #22]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	0089      	lsls	r1, r1, #2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	4413      	add	r3, r2
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	83fb      	strh	r3, [r7, #30]

// hts_write_byte(HTS221_CTRL_REG1,value);//neni som si isty reg_addresou

 //podmienka pre zistenie ci je teplota kladna alebo zaporna
 if(hts_read_byte(HTS_T_OUT_High)==sign){
 8000ed2:	202b      	movs	r0, #43	; 0x2b
 8000ed4:	f7ff ff24 	bl	8000d20 <hts_read_byte>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	7f7b      	ldrb	r3, [r7, #29]
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d103      	bne.n	8000eea <HTS221_Get_Temperature+0xf8>
	 value = value*(-1);
 8000ee2:	8bfb      	ldrh	r3, [r7, #30]
 8000ee4:	425b      	negs	r3, r3
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	83fb      	strh	r3, [r7, #30]
 }

 return value;
 8000eea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3720      	adds	r7, #32
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HTS221_Get_Humidity>:

int16_t HTS221_Get_Humidity()
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
	uint8_t buffer[2];
	int32_t tmp;

/* 1. Read H0_rH and H1_rH coefficients*/

	hts_readArray(buffer,HTS_H0_RH_X2,2);
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2202      	movs	r2, #2
 8000f00:	2130      	movs	r1, #48	; 0x30
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff26 	bl	8000d54 <hts_readArray>
	H0_rh = buffer[0]>>1;
 8000f08:	793b      	ldrb	r3, [r7, #4]
 8000f0a:	085b      	lsrs	r3, r3, #1
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	82bb      	strh	r3, [r7, #20]
	H1_rh = buffer[1]>>1;
 8000f10:	797b      	ldrb	r3, [r7, #5]
 8000f12:	085b      	lsrs	r3, r3, #1
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	827b      	strh	r3, [r7, #18]
/*2. Read H0_T0_OUT */

	hts_readArray(buffer,HTS_H0_T0_OUT_L,2);
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	2136      	movs	r1, #54	; 0x36
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff18 	bl	8000d54 <hts_readArray>
	H0_T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8000f24:	797b      	ldrb	r3, [r7, #5]
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	793b      	ldrb	r3, [r7, #4]
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	823b      	strh	r3, [r7, #16]

/*3. Read H1_T0_OUT */
	hts_readArray(buffer,HTS_H1_T0_OUT_L,2);
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2202      	movs	r2, #2
 8000f36:	213a      	movs	r1, #58	; 0x3a
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff0b 	bl	8000d54 <hts_readArray>
	H1_T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8000f3e:	797b      	ldrb	r3, [r7, #5]
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	b21a      	sxth	r2, r3
 8000f44:	793b      	ldrb	r3, [r7, #4]
 8000f46:	b21b      	sxth	r3, r3
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	81fb      	strh	r3, [r7, #14]

/*4. Read H_T_OUT */

	hts_readArray(buffer,HTS_H_OUT,2);
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2202      	movs	r2, #2
 8000f50:	2128      	movs	r1, #40	; 0x28
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fefe 	bl	8000d54 <hts_readArray>
	H_T_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8000f58:	797b      	ldrb	r3, [r7, #5]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	793b      	ldrb	r3, [r7, #4]
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	81bb      	strh	r3, [r7, #12]

/*5. Compute the RH [%] value by linear interpolation */

	tmp = ((int32_t)(H_T_out - H0_T0_out)) * ((int32_t)(H1_rh - H0_rh)*10);
 8000f66:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000f6a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000f74:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000f78:	1a8a      	subs	r2, r1, r2
 8000f7a:	fb02 f203 	mul.w	r2, r2, r3
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
	value = (tmp/(H1_T0_out - H0_T0_out) + H0_rh*10);//delenie bacha nan :D
 8000f88:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000f8c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	8abb      	ldrh	r3, [r7, #20]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	0089      	lsls	r1, r1, #2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	82fb      	strh	r3, [r7, #22]


/* Saturation condition*/
	if(value>1000) {
 8000fac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fb4:	dd02      	ble.n	8000fbc <HTS221_Get_Humidity+0xc6>
		value = 1000;
 8000fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fba:	82fb      	strh	r3, [r7, #22]
	}

	return value;
 8000fbc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	619a      	str	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <setDisplayText>:
uint8_t direction = 0;
uint16_t counter = 0;
uint8_t shorter = 0;
char displayString[15];

void setDisplayText(char text[15]){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	strncpy(displayString, &text[0],15);
 8001008:	220f      	movs	r2, #15
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4804      	ldr	r0, [pc, #16]	; (8001020 <setDisplayText+0x20>)
 800100e:	f003 fef5 	bl	8004dfc <strncpy>
	shorter = 0;
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <setDisplayText+0x24>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200000a0 	.word	0x200000a0
 8001024:	20000090 	.word	0x20000090

08001028 <updateDisplay>:

void updateDisplay(){
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	uint8_t shift = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
	for(int i = 1; i<5; i++){
 8001032:	2301      	movs	r3, #1
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	e062      	b.n	80010fe <updateDisplay+0xd6>
		switch(updateDigit){
 8001038:	4b3c      	ldr	r3, [pc, #240]	; (800112c <updateDisplay+0x104>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	3b01      	subs	r3, #1
 800103e:	2b03      	cmp	r3, #3
 8001040:	d82a      	bhi.n	8001098 <updateDisplay+0x70>
 8001042:	a201      	add	r2, pc, #4	; (adr r2, 8001048 <updateDisplay+0x20>)
 8001044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001048:	08001059 	.word	0x08001059
 800104c:	08001067 	.word	0x08001067
 8001050:	08001077 	.word	0x08001077
 8001054:	08001089 	.word	0x08001089
			case 1:
				DIGIT_1_ON;
 8001058:	2101      	movs	r1, #1
 800105a:	4835      	ldr	r0, [pc, #212]	; (8001130 <updateDisplay+0x108>)
 800105c:	f7ff ffb4 	bl	8000fc8 <LL_GPIO_SetOutputPin>
				resetAllSegments();
 8001060:	f000 fa14 	bl	800148c <resetAllSegments>

				break;
 8001064:	e018      	b.n	8001098 <updateDisplay+0x70>
			case 2:
				DIGIT_2_ON;
 8001066:	2110      	movs	r1, #16
 8001068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106c:	f7ff ffac 	bl	8000fc8 <LL_GPIO_SetOutputPin>
				resetAllSegments();
 8001070:	f000 fa0c 	bl	800148c <resetAllSegments>
				break;
 8001074:	e010      	b.n	8001098 <updateDisplay+0x70>
			case 3:
				DIGIT_3_ON;
 8001076:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800107a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107e:	f7ff ffa3 	bl	8000fc8 <LL_GPIO_SetOutputPin>
				resetAllSegments();
 8001082:	f000 fa03 	bl	800148c <resetAllSegments>
				break;
 8001086:	e007      	b.n	8001098 <updateDisplay+0x70>
			case 4:
				DIGIT_4_ON;
 8001088:	2104      	movs	r1, #4
 800108a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108e:	f7ff ff9b 	bl	8000fc8 <LL_GPIO_SetOutputPin>
				resetAllSegments();
 8001092:	f000 f9fb 	bl	800148c <resetAllSegments>
				break;
 8001096:	bf00      	nop
		}
		displayLetter(displayString[displayTextPos+updateDigit-1+shift]);
 8001098:	4b26      	ldr	r3, [pc, #152]	; (8001134 <updateDisplay+0x10c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b23      	ldr	r3, [pc, #140]	; (800112c <updateDisplay+0x104>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	1e5a      	subs	r2, r3, #1
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a23      	ldr	r2, [pc, #140]	; (8001138 <updateDisplay+0x110>)
 80010ac:	5cd3      	ldrb	r3, [r2, r3]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f89e 	bl	80011f0 <displayLetter>
		if(displayString[displayTextPos+updateDigit] == '.'){
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <updateDisplay+0x10c>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b1c      	ldr	r3, [pc, #112]	; (800112c <updateDisplay+0x104>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <updateDisplay+0x110>)
 80010c2:	5cd3      	ldrb	r3, [r2, r3]
 80010c4:	2b2e      	cmp	r3, #46	; 0x2e
 80010c6:	d106      	bne.n	80010d6 <updateDisplay+0xae>
			shift = 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	71fb      	strb	r3, [r7, #7]
			shorter = 1;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <updateDisplay+0x114>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]
			setDot();
 80010d2:	f001 f90d 	bl	80022f0 <setDot>
		}
		updateDigit = (updateDigit < 4) ? updateDigit+1 : 1;
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <updateDisplay+0x104>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d804      	bhi.n	80010e8 <updateDisplay+0xc0>
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <updateDisplay+0x104>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	e000      	b.n	80010ea <updateDisplay+0xc2>
 80010e8:	2301      	movs	r3, #1
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <updateDisplay+0x104>)
 80010ec:	7013      	strb	r3, [r2, #0]
		LL_mDelay(2);
 80010ee:	2002      	movs	r0, #2
 80010f0:	f003 fdb6 	bl	8004c60 <LL_mDelay>
		resetAllDigits();
 80010f4:	f000 f9f8 	bl	80014e8 <resetAllDigits>
	for(int i = 1; i<5; i++){
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2b04      	cmp	r3, #4
 8001102:	dd99      	ble.n	8001038 <updateDisplay+0x10>
	}
	counter +=1;
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <updateDisplay+0x118>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	b29a      	uxth	r2, r3
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <updateDisplay+0x118>)
 800110e:	801a      	strh	r2, [r3, #0]
	if(counter >= 50){
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <updateDisplay+0x118>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	2b31      	cmp	r3, #49	; 0x31
 8001116:	d904      	bls.n	8001122 <updateDisplay+0xfa>
		shiftDisplayText();
 8001118:	f000 f814 	bl	8001144 <shiftDisplayText>
		counter = 0;
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <updateDisplay+0x118>)
 800111e:	2200      	movs	r2, #0
 8001120:	801a      	strh	r2, [r3, #0]
	}

}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000002 	.word	0x20000002
 8001130:	48000400 	.word	0x48000400
 8001134:	2000008c 	.word	0x2000008c
 8001138:	200000a0 	.word	0x200000a0
 800113c:	20000090 	.word	0x20000090
 8001140:	2000008e 	.word	0x2000008e

08001144 <shiftDisplayText>:

void shiftDisplayText(){
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
	if(displayString[0] != '\0'){
 8001148:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <shiftDisplayText+0x9c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d041      	beq.n	80011d4 <shiftDisplayText+0x90>
		if(direction == 0 && displayString[displayTextPos+4+shorter] != '\0'){
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <shiftDisplayText+0xa0>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d110      	bne.n	800117a <shiftDisplayText+0x36>
 8001158:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <shiftDisplayText+0xa4>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	3304      	adds	r3, #4
 800115e:	4a23      	ldr	r2, [pc, #140]	; (80011ec <shiftDisplayText+0xa8>)
 8001160:	7812      	ldrb	r2, [r2, #0]
 8001162:	4413      	add	r3, r2
 8001164:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <shiftDisplayText+0x9c>)
 8001166:	5cd3      	ldrb	r3, [r2, r3]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d006      	beq.n	800117a <shiftDisplayText+0x36>
			displayTextPos = displayTextPos+1;
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <shiftDisplayText+0xa4>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	3301      	adds	r3, #1
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <shiftDisplayText+0xa4>)
 8001176:	701a      	strb	r2, [r3, #0]
 8001178:	e02c      	b.n	80011d4 <shiftDisplayText+0x90>
		}
		else if(direction == 0 && displayString[displayTextPos+4+shorter] == '\0'){
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <shiftDisplayText+0xa0>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10d      	bne.n	800119e <shiftDisplayText+0x5a>
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <shiftDisplayText+0xa4>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	3304      	adds	r3, #4
 8001188:	4a18      	ldr	r2, [pc, #96]	; (80011ec <shiftDisplayText+0xa8>)
 800118a:	7812      	ldrb	r2, [r2, #0]
 800118c:	4413      	add	r3, r2
 800118e:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <shiftDisplayText+0x9c>)
 8001190:	5cd3      	ldrb	r3, [r2, r3]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d103      	bne.n	800119e <shiftDisplayText+0x5a>
			direction = 1;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <shiftDisplayText+0xa0>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	e01a      	b.n	80011d4 <shiftDisplayText+0x90>
		}
		else if(displayTextPos <= 0 && direction == 1){
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <shiftDisplayText+0xa4>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d107      	bne.n	80011b6 <shiftDisplayText+0x72>
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <shiftDisplayText+0xa0>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d103      	bne.n	80011b6 <shiftDisplayText+0x72>
			direction = 0;
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <shiftDisplayText+0xa0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
 80011b4:	e00e      	b.n	80011d4 <shiftDisplayText+0x90>
		}
		else if(displayTextPos > 0 && direction == 1){
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <shiftDisplayText+0xa4>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00a      	beq.n	80011d4 <shiftDisplayText+0x90>
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <shiftDisplayText+0xa0>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d106      	bne.n	80011d4 <shiftDisplayText+0x90>
			displayTextPos = displayTextPos-1;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <shiftDisplayText+0xa4>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <shiftDisplayText+0xa4>)
 80011d0:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80011d2:	e7ff      	b.n	80011d4 <shiftDisplayText+0x90>
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	200000a0 	.word	0x200000a0
 80011e4:	2000008d 	.word	0x2000008d
 80011e8:	2000008c 	.word	0x2000008c
 80011ec:	20000090 	.word	0x20000090

080011f0 <displayLetter>:

void displayLetter(char letter){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
	switch(letter){
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	3b20      	subs	r3, #32
 80011fe:	2b59      	cmp	r3, #89	; 0x59
 8001200:	f200 813c 	bhi.w	800147c <displayLetter+0x28c>
 8001204:	a201      	add	r2, pc, #4	; (adr r2, 800120c <displayLetter+0x1c>)
 8001206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120a:	bf00      	nop
 800120c:	0800142f 	.word	0x0800142f
 8001210:	0800147d 	.word	0x0800147d
 8001214:	0800147d 	.word	0x0800147d
 8001218:	0800147d 	.word	0x0800147d
 800121c:	0800147d 	.word	0x0800147d
 8001220:	0800147d 	.word	0x0800147d
 8001224:	0800147d 	.word	0x0800147d
 8001228:	0800147d 	.word	0x0800147d
 800122c:	0800147d 	.word	0x0800147d
 8001230:	0800147d 	.word	0x0800147d
 8001234:	0800147d 	.word	0x0800147d
 8001238:	0800147d 	.word	0x0800147d
 800123c:	0800147d 	.word	0x0800147d
 8001240:	0800143b 	.word	0x0800143b
 8001244:	0800147d 	.word	0x0800147d
 8001248:	0800147d 	.word	0x0800147d
 800124c:	08001477 	.word	0x08001477
 8001250:	08001441 	.word	0x08001441
 8001254:	08001447 	.word	0x08001447
 8001258:	0800144d 	.word	0x0800144d
 800125c:	08001453 	.word	0x08001453
 8001260:	08001459 	.word	0x08001459
 8001264:	0800145f 	.word	0x0800145f
 8001268:	08001465 	.word	0x08001465
 800126c:	0800146b 	.word	0x0800146b
 8001270:	08001471 	.word	0x08001471
 8001274:	0800147d 	.word	0x0800147d
 8001278:	0800147d 	.word	0x0800147d
 800127c:	0800147d 	.word	0x0800147d
 8001280:	0800147d 	.word	0x0800147d
 8001284:	0800147d 	.word	0x0800147d
 8001288:	0800147d 	.word	0x0800147d
 800128c:	0800147d 	.word	0x0800147d
 8001290:	08001375 	.word	0x08001375
 8001294:	0800147d 	.word	0x0800147d
 8001298:	08001387 	.word	0x08001387
 800129c:	0800147d 	.word	0x0800147d
 80012a0:	08001399 	.word	0x08001399
 80012a4:	0800139f 	.word	0x0800139f
 80012a8:	080013a5 	.word	0x080013a5
 80012ac:	080013ab 	.word	0x080013ab
 80012b0:	080013b7 	.word	0x080013b7
 80012b4:	080013bd 	.word	0x080013bd
 80012b8:	080013c3 	.word	0x080013c3
 80012bc:	080013c9 	.word	0x080013c9
 80012c0:	080013cf 	.word	0x080013cf
 80012c4:	0800147d 	.word	0x0800147d
 80012c8:	080013db 	.word	0x080013db
 80012cc:	080013e7 	.word	0x080013e7
 80012d0:	0800147d 	.word	0x0800147d
 80012d4:	0800147d 	.word	0x0800147d
 80012d8:	080013f9 	.word	0x080013f9
 80012dc:	0800147d 	.word	0x0800147d
 80012e0:	08001405 	.word	0x08001405
 80012e4:	08001411 	.word	0x08001411
 80012e8:	08001417 	.word	0x08001417
 80012ec:	0800141d 	.word	0x0800141d
 80012f0:	0800147d 	.word	0x0800147d
 80012f4:	08001429 	.word	0x08001429
 80012f8:	0800147d 	.word	0x0800147d
 80012fc:	0800147d 	.word	0x0800147d
 8001300:	0800147d 	.word	0x0800147d
 8001304:	0800147d 	.word	0x0800147d
 8001308:	08001435 	.word	0x08001435
 800130c:	0800147d 	.word	0x0800147d
 8001310:	0800137b 	.word	0x0800137b
 8001314:	08001381 	.word	0x08001381
 8001318:	0800138d 	.word	0x0800138d
 800131c:	08001393 	.word	0x08001393
 8001320:	0800147d 	.word	0x0800147d
 8001324:	0800147d 	.word	0x0800147d
 8001328:	0800147d 	.word	0x0800147d
 800132c:	080013b1 	.word	0x080013b1
 8001330:	0800147d 	.word	0x0800147d
 8001334:	0800147d 	.word	0x0800147d
 8001338:	0800147d 	.word	0x0800147d
 800133c:	0800147d 	.word	0x0800147d
 8001340:	0800147d 	.word	0x0800147d
 8001344:	080013d5 	.word	0x080013d5
 8001348:	080013e1 	.word	0x080013e1
 800134c:	0800147d 	.word	0x0800147d
 8001350:	080013ed 	.word	0x080013ed
 8001354:	080013f3 	.word	0x080013f3
 8001358:	0800147d 	.word	0x0800147d
 800135c:	080013ff 	.word	0x080013ff
 8001360:	0800140b 	.word	0x0800140b
 8001364:	0800147d 	.word	0x0800147d
 8001368:	0800147d 	.word	0x0800147d
 800136c:	0800147d 	.word	0x0800147d
 8001370:	08001423 	.word	0x08001423
		case 'A':
			setA();
 8001374:	f000 f8d8 	bl	8001528 <setA>
			break;
 8001378:	e083      	b.n	8001482 <displayLetter+0x292>
		case 'a':
			seta();
 800137a:	f000 f8ff 	bl	800157c <seta>
			break;
 800137e:	e080      	b.n	8001482 <displayLetter+0x292>
		case 'b':
			setb();
 8001380:	f000 f926 	bl	80015d0 <setb>
			break;
 8001384:	e07d      	b.n	8001482 <displayLetter+0x292>
		case 'C':
			setC();
 8001386:	f000 f94d 	bl	8001624 <setC>
			break;
 800138a:	e07a      	b.n	8001482 <displayLetter+0x292>
		case 'c':
			setc();
 800138c:	f000 f974 	bl	8001678 <setc>
			break;
 8001390:	e077      	b.n	8001482 <displayLetter+0x292>
		case 'd':
			setd();
 8001392:	f000 f99b 	bl	80016cc <setd>
			break;
 8001396:	e074      	b.n	8001482 <displayLetter+0x292>
		case 'E':
			setE();
 8001398:	f000 f9c2 	bl	8001720 <setE>
			break;
 800139c:	e071      	b.n	8001482 <displayLetter+0x292>
		case 'F':
			setF();
 800139e:	f000 f9e9 	bl	8001774 <setF>
			break;
 80013a2:	e06e      	b.n	8001482 <displayLetter+0x292>
		case 'G':
			setG();
 80013a4:	f000 fa10 	bl	80017c8 <setG>
			break;
 80013a8:	e06b      	b.n	8001482 <displayLetter+0x292>
		case 'H':
			setH();
 80013aa:	f000 fa37 	bl	800181c <setH>
			break;
 80013ae:	e068      	b.n	8001482 <displayLetter+0x292>
		case 'h':
			seth();
 80013b0:	f000 fa5e 	bl	8001870 <seth>
			break;
 80013b4:	e065      	b.n	8001482 <displayLetter+0x292>
		case 'I':
			setI();
 80013b6:	f000 fa85 	bl	80018c4 <setI>
			break;
 80013ba:	e062      	b.n	8001482 <displayLetter+0x292>
		case 'J':
			setJ();
 80013bc:	f000 faac 	bl	8001918 <setJ>
			break;
 80013c0:	e05f      	b.n	8001482 <displayLetter+0x292>
		case 'K':
			setK();
 80013c2:	f000 fccb 	bl	8001d5c <setK>
			break;
 80013c6:	e05c      	b.n	8001482 <displayLetter+0x292>
		case 'L':
			setL();
 80013c8:	f000 fad0 	bl	800196c <setL>
			break;
 80013cc:	e059      	b.n	8001482 <displayLetter+0x292>
		case 'M':
			setM();
 80013ce:	f000 fcef 	bl	8001db0 <setM>
			break;
 80013d2:	e056      	b.n	8001482 <displayLetter+0x292>
		case 'n':
			setn();
 80013d4:	f000 faf4 	bl	80019c0 <setn>
			break;
 80013d8:	e053      	b.n	8001482 <displayLetter+0x292>
		case 'O':
			setO();
 80013da:	f000 fb1b 	bl	8001a14 <setO>
			break;
 80013de:	e050      	b.n	8001482 <displayLetter+0x292>
		case 'o':
			seto();
 80013e0:	f000 fb42 	bl	8001a68 <seto>
			break;
 80013e4:	e04d      	b.n	8001482 <displayLetter+0x292>
		case 'P':
			setP();
 80013e6:	f000 fb69 	bl	8001abc <setP>
			break;
 80013ea:	e04a      	b.n	8001482 <displayLetter+0x292>
		case 'q':
			setq();
 80013ec:	f000 fb90 	bl	8001b10 <setq>
			break;
 80013f0:	e047      	b.n	8001482 <displayLetter+0x292>
		case 'r':
			setr();
 80013f2:	f000 fbb7 	bl	8001b64 <setr>
			break;
 80013f6:	e044      	b.n	8001482 <displayLetter+0x292>
		case 'S':
			setS();
 80013f8:	f000 fbde 	bl	8001bb8 <setS>
			break;
 80013fc:	e041      	b.n	8001482 <displayLetter+0x292>
		case 't':
			sett();
 80013fe:	f000 fc05 	bl	8001c0c <sett>
			break;
 8001402:	e03e      	b.n	8001482 <displayLetter+0x292>
		case 'U':
			setU();
 8001404:	f000 fc2c 	bl	8001c60 <setU>
			break;
 8001408:	e03b      	b.n	8001482 <displayLetter+0x292>
		case 'u':
			setu();
 800140a:	f000 fc53 	bl	8001cb4 <setu>
			break;
 800140e:	e038      	b.n	8001482 <displayLetter+0x292>
		case 'V':
			setV();
 8001410:	f000 fcf4 	bl	8001dfc <setV>
			break;
 8001414:	e035      	b.n	8001482 <displayLetter+0x292>
		case 'W':
			setW();
 8001416:	f000 fd1b 	bl	8001e50 <setW>
			break;
 800141a:	e032      	b.n	8001482 <displayLetter+0x292>
		case 'X':
			setX();
 800141c:	f000 fd42 	bl	8001ea4 <setX>
			break;
 8001420:	e02f      	b.n	8001482 <displayLetter+0x292>
		case 'y':
			sety();
 8001422:	f000 fc71 	bl	8001d08 <sety>
			break;
 8001426:	e02c      	b.n	8001482 <displayLetter+0x292>
		case 'Z':
			setZ();
 8001428:	f000 fd66 	bl	8001ef8 <setZ>
			break;
 800142c:	e029      	b.n	8001482 <displayLetter+0x292>
		case ' ':
			resetAllSegments();
 800142e:	f000 f82d 	bl	800148c <resetAllSegments>
			break;
 8001432:	e026      	b.n	8001482 <displayLetter+0x292>
		case '_':
			setLine();
 8001434:	f000 ff2e 	bl	8002294 <setLine>
			break;
 8001438:	e023      	b.n	8001482 <displayLetter+0x292>
		case '-':
			setDash();
 800143a:	f000 ff63 	bl	8002304 <setDash>
			break;
 800143e:	e020      	b.n	8001482 <displayLetter+0x292>


		case '1':
			setOne();
 8001440:	f000 fd84 	bl	8001f4c <setOne>
			break;
 8001444:	e01d      	b.n	8001482 <displayLetter+0x292>
		case '2':
			setTwo();
 8001446:	f000 fdab 	bl	8001fa0 <setTwo>
			break;
 800144a:	e01a      	b.n	8001482 <displayLetter+0x292>
		case '3':
			setThree();
 800144c:	f000 fdd2 	bl	8001ff4 <setThree>
			break;
 8001450:	e017      	b.n	8001482 <displayLetter+0x292>
		case '4':
			setFour();
 8001452:	f000 fdf9 	bl	8002048 <setFour>
			break;
 8001456:	e014      	b.n	8001482 <displayLetter+0x292>
		case '5':
			setFive();
 8001458:	f000 fe20 	bl	800209c <setFive>
			break;
 800145c:	e011      	b.n	8001482 <displayLetter+0x292>
		case '6':
			setSix();
 800145e:	f000 fe47 	bl	80020f0 <setSix>
			break;
 8001462:	e00e      	b.n	8001482 <displayLetter+0x292>
		case '7':
			setSeven();
 8001464:	f000 fe6e 	bl	8002144 <setSeven>
			break;
 8001468:	e00b      	b.n	8001482 <displayLetter+0x292>
		case '8':
			setEight();
 800146a:	f000 fe95 	bl	8002198 <setEight>
			break;
 800146e:	e008      	b.n	8001482 <displayLetter+0x292>
		case '9':
			setNine();
 8001470:	f000 febc 	bl	80021ec <setNine>
			break;
 8001474:	e005      	b.n	8001482 <displayLetter+0x292>
		case '0':
			setZero();
 8001476:	f000 fee3 	bl	8002240 <setZero>
			break;
 800147a:	e002      	b.n	8001482 <displayLetter+0x292>
		default:
			setDot();
 800147c:	f000 ff38 	bl	80022f0 <setDot>
			break;
 8001480:	bf00      	nop
	}
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop

0800148c <resetAllSegments>:
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
}

void resetAllSegments(void){
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001490:	2102      	movs	r1, #2
 8001492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001496:	f7ff fd97 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800149a:	2101      	movs	r1, #1
 800149c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a0:	f7ff fd92 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80014a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ac:	f7ff fd8c 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 80014b0:	2120      	movs	r1, #32
 80014b2:	480c      	ldr	r0, [pc, #48]	; (80014e4 <resetAllSegments+0x58>)
 80014b4:	f7ff fd88 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80014b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c0:	f7ff fd82 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80014c4:	2108      	movs	r1, #8
 80014c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ca:	f7ff fd7d 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 80014ce:	2110      	movs	r1, #16
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <resetAllSegments+0x58>)
 80014d2:	f7ff fd79 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentDP_Pin);
 80014d6:	2102      	movs	r1, #2
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <resetAllSegments+0x58>)
 80014da:	f7ff fd75 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	48000400 	.word	0x48000400

080014e8 <resetAllDigits>:

void resetAllDigits(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, digit1_Pin);
 80014ec:	2101      	movs	r1, #1
 80014ee:	480d      	ldr	r0, [pc, #52]	; (8001524 <resetAllDigits+0x3c>)
 80014f0:	f7ff fd78 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, digit2_Pin);
 80014f4:	2110      	movs	r1, #16
 80014f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fa:	f7ff fd73 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, digit3_Pin);
 80014fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001506:	f7ff fd6d 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, digit4_Pin);
 800150a:	2104      	movs	r1, #4
 800150c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001510:	f7ff fd68 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, digitTime_Pin);
 8001514:	2180      	movs	r1, #128	; 0x80
 8001516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151a:	f7ff fd63 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	48000400 	.word	0x48000400

08001528 <setA>:

void setA(void){
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800152c:	2102      	movs	r1, #2
 800152e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001532:	f7ff fd57 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001536:	2101      	movs	r1, #1
 8001538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153c:	f7ff fd52 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001548:	f7ff fd4c 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800154c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001554:	f7ff fd46 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001558:	2108      	movs	r1, #8
 800155a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155e:	f7ff fd41 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001562:	2110      	movs	r1, #16
 8001564:	4804      	ldr	r0, [pc, #16]	; (8001578 <setA+0x50>)
 8001566:	f7ff fd3d 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	// reset D
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800156a:	2120      	movs	r1, #32
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <setA+0x50>)
 800156e:	f7ff fd2b 	bl	8000fc8 <LL_GPIO_SetOutputPin>

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	48000400 	.word	0x48000400

0800157c <seta>:
void seta(void){
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001580:	2102      	movs	r1, #2
 8001582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001586:	f7ff fd2d 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800158a:	2101      	movs	r1, #1
 800158c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001590:	f7ff fd28 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159c:	f7ff fd22 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80015a0:	2120      	movs	r1, #32
 80015a2:	480a      	ldr	r0, [pc, #40]	; (80015cc <seta+0x50>)
 80015a4:	f7ff fd1e 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80015a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b0:	f7ff fd18 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80015b4:	2110      	movs	r1, #16
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <seta+0x50>)
 80015b8:	f7ff fd14 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	// reset f
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80015bc:	2108      	movs	r1, #8
 80015be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c2:	f7ff fd01 	bl	8000fc8 <LL_GPIO_SetOutputPin>

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	48000400 	.word	0x48000400

080015d0 <setb>:
void setb(void){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80015d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015dc:	f7ff fd02 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80015e0:	2120      	movs	r1, #32
 80015e2:	480f      	ldr	r0, [pc, #60]	; (8001620 <setb+0x50>)
 80015e4:	f7ff fcfe 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80015e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f0:	f7ff fcf8 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80015f4:	2108      	movs	r1, #8
 80015f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fa:	f7ff fcf3 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80015fe:	2110      	movs	r1, #16
 8001600:	4807      	ldr	r0, [pc, #28]	; (8001620 <setb+0x50>)
 8001602:	f7ff fcef 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	// reset a,b
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001606:	2102      	movs	r1, #2
 8001608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160c:	f7ff fcdc 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001610:	2101      	movs	r1, #1
 8001612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001616:	f7ff fcd7 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	48000400 	.word	0x48000400

08001624 <setC>:
void setC(void){
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001628:	2102      	movs	r1, #2
 800162a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162e:	f7ff fcd9 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001632:	2120      	movs	r1, #32
 8001634:	480f      	ldr	r0, [pc, #60]	; (8001674 <setC+0x50>)
 8001636:	f7ff fcd5 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800163a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800163e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001642:	f7ff fccf 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001646:	2108      	movs	r1, #8
 8001648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164c:	f7ff fcca 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	// reset B,C,G
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001650:	2101      	movs	r1, #1
 8001652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001656:	f7ff fcb7 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800165a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800165e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001662:	f7ff fcb1 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001666:	2110      	movs	r1, #16
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <setC+0x50>)
 800166a:	f7ff fcad 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	48000400 	.word	0x48000400

08001678 <setc>:
void setc(void){
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800167c:	2120      	movs	r1, #32
 800167e:	4812      	ldr	r0, [pc, #72]	; (80016c8 <setc+0x50>)
 8001680:	f7ff fcb0 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001684:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168c:	f7ff fcaa 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001690:	2110      	movs	r1, #16
 8001692:	480d      	ldr	r0, [pc, #52]	; (80016c8 <setc+0x50>)
 8001694:	f7ff fca6 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001698:	2102      	movs	r1, #2
 800169a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169e:	f7ff fc93 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80016a2:	2101      	movs	r1, #1
 80016a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a8:	f7ff fc8e 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80016ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b4:	f7ff fc88 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80016b8:	2108      	movs	r1, #8
 80016ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016be:	f7ff fc83 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	48000400 	.word	0x48000400

080016cc <setd>:
void setd(void){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80016d0:	2101      	movs	r1, #1
 80016d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d6:	f7ff fc85 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80016da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e2:	f7ff fc7f 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80016e6:	2120      	movs	r1, #32
 80016e8:	480c      	ldr	r0, [pc, #48]	; (800171c <setd+0x50>)
 80016ea:	f7ff fc7b 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80016ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f6:	f7ff fc75 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80016fa:	2110      	movs	r1, #16
 80016fc:	4807      	ldr	r0, [pc, #28]	; (800171c <setd+0x50>)
 80016fe:	f7ff fc71 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001702:	2102      	movs	r1, #2
 8001704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001708:	f7ff fc5e 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 800170c:	2108      	movs	r1, #8
 800170e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001712:	f7ff fc59 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	48000400 	.word	0x48000400

08001720 <setE>:
void setE(void){
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001724:	2102      	movs	r1, #2
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172a:	f7ff fc5b 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800172e:	2120      	movs	r1, #32
 8001730:	480f      	ldr	r0, [pc, #60]	; (8001770 <setE+0x50>)
 8001732:	f7ff fc57 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800173a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173e:	f7ff fc51 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001742:	2108      	movs	r1, #8
 8001744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001748:	f7ff fc4c 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800174c:	2110      	movs	r1, #16
 800174e:	4808      	ldr	r0, [pc, #32]	; (8001770 <setE+0x50>)
 8001750:	f7ff fc48 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001754:	2101      	movs	r1, #1
 8001756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175a:	f7ff fc35 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800175e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001766:	f7ff fc2f 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	48000400 	.word	0x48000400

08001774 <setF>:
void setF(void){
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001778:	2102      	movs	r1, #2
 800177a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177e:	f7ff fc31 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001782:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178a:	f7ff fc2b 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800178e:	2108      	movs	r1, #8
 8001790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001794:	f7ff fc26 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001798:	2110      	movs	r1, #16
 800179a:	480a      	ldr	r0, [pc, #40]	; (80017c4 <setF+0x50>)
 800179c:	f7ff fc22 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80017a0:	2101      	movs	r1, #1
 80017a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a6:	f7ff fc0f 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80017aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b2:	f7ff fc09 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 80017b6:	2120      	movs	r1, #32
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <setF+0x50>)
 80017ba:	f7ff fc05 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	48000400 	.word	0x48000400

080017c8 <setG>:
void setG(void){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80017cc:	2102      	movs	r1, #2
 80017ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d2:	f7ff fc07 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80017d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017de:	f7ff fc01 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80017e2:	2120      	movs	r1, #32
 80017e4:	480c      	ldr	r0, [pc, #48]	; (8001818 <setG+0x50>)
 80017e6:	f7ff fbfd 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80017ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f2:	f7ff fbf7 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80017f6:	2108      	movs	r1, #8
 80017f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fc:	f7ff fbf2 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001800:	2101      	movs	r1, #1
 8001802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001806:	f7ff fbdf 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800180a:	2110      	movs	r1, #16
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <setG+0x50>)
 800180e:	f7ff fbdb 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	48000400 	.word	0x48000400

0800181c <setH>:
void setH(void){
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001820:	2101      	movs	r1, #1
 8001822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001826:	f7ff fbdd 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800182a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800182e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001832:	f7ff fbd7 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001836:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800183a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183e:	f7ff fbd1 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001842:	2108      	movs	r1, #8
 8001844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001848:	f7ff fbcc 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800184c:	2110      	movs	r1, #16
 800184e:	4807      	ldr	r0, [pc, #28]	; (800186c <setH+0x50>)
 8001850:	f7ff fbc8 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001854:	2102      	movs	r1, #2
 8001856:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185a:	f7ff fbb5 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800185e:	2120      	movs	r1, #32
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <setH+0x50>)
 8001862:	f7ff fbb1 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	48000400 	.word	0x48000400

08001870 <seth>:
void seth(void){
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001874:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187c:	f7ff fbb2 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001880:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001888:	f7ff fbac 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800188c:	2108      	movs	r1, #8
 800188e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001892:	f7ff fba7 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001896:	2110      	movs	r1, #16
 8001898:	4809      	ldr	r0, [pc, #36]	; (80018c0 <seth+0x50>)
 800189a:	f7ff fba3 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800189e:	2102      	movs	r1, #2
 80018a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a4:	f7ff fb90 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80018a8:	2101      	movs	r1, #1
 80018aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ae:	f7ff fb8b 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 80018b2:	2120      	movs	r1, #32
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <seth+0x50>)
 80018b6:	f7ff fb87 	bl	8000fc8 <LL_GPIO_SetOutputPin>

}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	48000400 	.word	0x48000400

080018c4 <setI>:
void setI(void){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80018c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d0:	f7ff fb88 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80018d4:	2108      	movs	r1, #8
 80018d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018da:	f7ff fb83 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80018de:	2102      	movs	r1, #2
 80018e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e4:	f7ff fb70 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80018e8:	2101      	movs	r1, #1
 80018ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ee:	f7ff fb6b 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80018f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fa:	f7ff fb65 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 80018fe:	2120      	movs	r1, #32
 8001900:	4804      	ldr	r0, [pc, #16]	; (8001914 <setI+0x50>)
 8001902:	f7ff fb61 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001906:	2110      	movs	r1, #16
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <setI+0x50>)
 800190a:	f7ff fb5d 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	48000400 	.word	0x48000400

08001918 <setJ>:
void setJ(void){
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800191c:	2101      	movs	r1, #1
 800191e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001922:	f7ff fb5f 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001926:	f44f 7180 	mov.w	r1, #256	; 0x100
 800192a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192e:	f7ff fb59 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001932:	2120      	movs	r1, #32
 8001934:	480c      	ldr	r0, [pc, #48]	; (8001968 <setJ+0x50>)
 8001936:	f7ff fb55 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800193a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800193e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001942:	f7ff fb4f 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001946:	2102      	movs	r1, #2
 8001948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194c:	f7ff fb3c 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001950:	2108      	movs	r1, #8
 8001952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001956:	f7ff fb37 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800195a:	2110      	movs	r1, #16
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <setJ+0x50>)
 800195e:	f7ff fb33 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	48000400 	.word	0x48000400

0800196c <setL>:
void setL(void){
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001970:	2120      	movs	r1, #32
 8001972:	4812      	ldr	r0, [pc, #72]	; (80019bc <setL+0x50>)
 8001974:	f7ff fb36 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001978:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800197c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001980:	f7ff fb30 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001984:	2108      	movs	r1, #8
 8001986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198a:	f7ff fb2b 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800198e:	2102      	movs	r1, #2
 8001990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001994:	f7ff fb18 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001998:	2101      	movs	r1, #1
 800199a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199e:	f7ff fb13 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80019a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019aa:	f7ff fb0d 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 80019ae:	2110      	movs	r1, #16
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <setL+0x50>)
 80019b2:	f7ff fb09 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	48000400 	.word	0x48000400

080019c0 <setn>:
void setn(void){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80019c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019cc:	f7ff fb0a 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80019d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d8:	f7ff fb04 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80019dc:	2110      	movs	r1, #16
 80019de:	480c      	ldr	r0, [pc, #48]	; (8001a10 <setn+0x50>)
 80019e0:	f7ff fb00 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80019e4:	2102      	movs	r1, #2
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ea:	f7ff faed 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80019ee:	2101      	movs	r1, #1
 80019f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f4:	f7ff fae8 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 80019f8:	2120      	movs	r1, #32
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <setn+0x50>)
 80019fc:	f7ff fae4 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001a00:	2108      	movs	r1, #8
 8001a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a06:	f7ff fadf 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	48000400 	.word	0x48000400

08001a14 <setO>:
void setO(void){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001a18:	2102      	movs	r1, #2
 8001a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a1e:	f7ff fae1 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001a22:	2101      	movs	r1, #1
 8001a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a28:	f7ff fadc 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001a2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a34:	f7ff fad6 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001a38:	2120      	movs	r1, #32
 8001a3a:	480a      	ldr	r0, [pc, #40]	; (8001a64 <setO+0x50>)
 8001a3c:	f7ff fad2 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001a40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a48:	f7ff facc 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001a4c:	2108      	movs	r1, #8
 8001a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a52:	f7ff fac7 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001a56:	2110      	movs	r1, #16
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <setO+0x50>)
 8001a5a:	f7ff fab5 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	48000400 	.word	0x48000400

08001a68 <seto>:
void seto(void){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001a6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a74:	f7ff fab6 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001a78:	2120      	movs	r1, #32
 8001a7a:	480f      	ldr	r0, [pc, #60]	; (8001ab8 <seto+0x50>)
 8001a7c:	f7ff fab2 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001a80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a88:	f7ff faac 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001a8c:	2110      	movs	r1, #16
 8001a8e:	480a      	ldr	r0, [pc, #40]	; (8001ab8 <seto+0x50>)
 8001a90:	f7ff faa8 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001a94:	2102      	movs	r1, #2
 8001a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9a:	f7ff fa95 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa4:	f7ff fa90 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001aa8:	2108      	movs	r1, #8
 8001aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aae:	f7ff fa8b 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	48000400 	.word	0x48000400

08001abc <setP>:
void setP(void){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac6:	f7ff fa8d 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001aca:	2101      	movs	r1, #1
 8001acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad0:	f7ff fa88 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001ad4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001adc:	f7ff fa82 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001ae0:	2108      	movs	r1, #8
 8001ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae6:	f7ff fa7d 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001aea:	2110      	movs	r1, #16
 8001aec:	4807      	ldr	r0, [pc, #28]	; (8001b0c <setP+0x50>)
 8001aee:	f7ff fa79 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001af2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afa:	f7ff fa65 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001afe:	2120      	movs	r1, #32
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <setP+0x50>)
 8001b02:	f7ff fa61 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	48000400 	.word	0x48000400

08001b10 <setq>:
void setq(void){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001b14:	2102      	movs	r1, #2
 8001b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1a:	f7ff fa63 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001b1e:	2101      	movs	r1, #1
 8001b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b24:	f7ff fa5e 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001b28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b30:	f7ff fa58 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001b34:	2108      	movs	r1, #8
 8001b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3a:	f7ff fa53 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001b3e:	2110      	movs	r1, #16
 8001b40:	4807      	ldr	r0, [pc, #28]	; (8001b60 <setq+0x50>)
 8001b42:	f7ff fa4f 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001b46:	2120      	movs	r1, #32
 8001b48:	4805      	ldr	r0, [pc, #20]	; (8001b60 <setq+0x50>)
 8001b4a:	f7ff fa3d 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001b4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b56:	f7ff fa37 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	48000400 	.word	0x48000400

08001b64 <setr>:
void setr(void){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001b68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b70:	f7ff fa38 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001b74:	2110      	movs	r1, #16
 8001b76:	480f      	ldr	r0, [pc, #60]	; (8001bb4 <setr+0x50>)
 8001b78:	f7ff fa34 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b82:	f7ff fa21 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001b86:	2101      	movs	r1, #1
 8001b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8c:	f7ff fa1c 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001b90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b98:	f7ff fa16 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001b9c:	2120      	movs	r1, #32
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <setr+0x50>)
 8001ba0:	f7ff fa12 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001ba4:	2108      	movs	r1, #8
 8001ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001baa:	f7ff fa0d 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	48000400 	.word	0x48000400

08001bb8 <setS>:
void setS(void){
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001bbc:	2102      	movs	r1, #2
 8001bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc2:	f7ff fa0f 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001bc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bce:	f7ff fa09 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001bd2:	2120      	movs	r1, #32
 8001bd4:	480c      	ldr	r0, [pc, #48]	; (8001c08 <setS+0x50>)
 8001bd6:	f7ff fa05 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001bda:	2108      	movs	r1, #8
 8001bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be0:	f7ff fa00 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001be4:	2110      	movs	r1, #16
 8001be6:	4808      	ldr	r0, [pc, #32]	; (8001c08 <setS+0x50>)
 8001be8:	f7ff f9fc 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001bec:	2101      	movs	r1, #1
 8001bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf2:	f7ff f9e9 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001bf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bfe:	f7ff f9e3 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	48000400 	.word	0x48000400

08001c0c <sett>:
void sett(void){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001c10:	2120      	movs	r1, #32
 8001c12:	4812      	ldr	r0, [pc, #72]	; (8001c5c <sett+0x50>)
 8001c14:	f7ff f9e6 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001c18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c20:	f7ff f9e0 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001c24:	2108      	movs	r1, #8
 8001c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c2a:	f7ff f9db 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001c2e:	2110      	movs	r1, #16
 8001c30:	480a      	ldr	r0, [pc, #40]	; (8001c5c <sett+0x50>)
 8001c32:	f7ff f9d7 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001c36:	2102      	movs	r1, #2
 8001c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c3c:	f7ff f9c4 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001c40:	2101      	movs	r1, #1
 8001c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c46:	f7ff f9bf 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001c4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c52:	f7ff f9b9 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	48000400 	.word	0x48000400

08001c60 <setU>:
void setU(void){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001c64:	2101      	movs	r1, #1
 8001c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6a:	f7ff f9bb 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c76:	f7ff f9b5 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001c7a:	2120      	movs	r1, #32
 8001c7c:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <setU+0x50>)
 8001c7e:	f7ff f9b1 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001c82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8a:	f7ff f9ab 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001c8e:	2108      	movs	r1, #8
 8001c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c94:	f7ff f9a6 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001c98:	2102      	movs	r1, #2
 8001c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9e:	f7ff f993 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001ca2:	2110      	movs	r1, #16
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <setU+0x50>)
 8001ca6:	f7ff f98f 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	48000400 	.word	0x48000400

08001cb4 <setu>:
void setu(void){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001cb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc0:	f7ff f990 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001cc4:	2120      	movs	r1, #32
 8001cc6:	480f      	ldr	r0, [pc, #60]	; (8001d04 <setu+0x50>)
 8001cc8:	f7ff f98c 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001ccc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd4:	f7ff f986 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001cd8:	2102      	movs	r1, #2
 8001cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cde:	f7ff f973 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce8:	f7ff f96e 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001cec:	2108      	movs	r1, #8
 8001cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf2:	f7ff f969 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001cf6:	2110      	movs	r1, #16
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <setu+0x50>)
 8001cfa:	f7ff f965 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	48000400 	.word	0x48000400

08001d08 <sety>:
void sety(void){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d12:	f7ff f967 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001d16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1e:	f7ff f961 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001d22:	2120      	movs	r1, #32
 8001d24:	480c      	ldr	r0, [pc, #48]	; (8001d58 <sety+0x50>)
 8001d26:	f7ff f95d 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001d2a:	2108      	movs	r1, #8
 8001d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d30:	f7ff f958 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001d34:	2110      	movs	r1, #16
 8001d36:	4808      	ldr	r0, [pc, #32]	; (8001d58 <sety+0x50>)
 8001d38:	f7ff f954 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d42:	f7ff f941 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001d46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4e:	f7ff f93b 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	48000400 	.word	0x48000400

08001d5c <setK>:


// Disgusting letters :D
void setK(void){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001d60:	2102      	movs	r1, #2
 8001d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d66:	f7ff f93d 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001d6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d72:	f7ff f937 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001d76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d7e:	f7ff f931 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001d82:	2108      	movs	r1, #8
 8001d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d88:	f7ff f92c 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001d8c:	2110      	movs	r1, #16
 8001d8e:	4807      	ldr	r0, [pc, #28]	; (8001dac <setK+0x50>)
 8001d90:	f7ff f928 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001d94:	2101      	movs	r1, #1
 8001d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d9a:	f7ff f915 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001d9e:	2120      	movs	r1, #32
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <setK+0x50>)
 8001da2:	f7ff f911 	bl	8000fc8 <LL_GPIO_SetOutputPin>

}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	48000400 	.word	0x48000400

08001db0 <setM>:
void setM(void){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001db4:	2102      	movs	r1, #2
 8001db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dba:	f7ff f913 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc4:	f7ff f90e 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001dc8:	2120      	movs	r1, #32
 8001dca:	480b      	ldr	r0, [pc, #44]	; (8001df8 <setM+0x48>)
 8001dcc:	f7ff f90a 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001dd0:	2108      	movs	r1, #8
 8001dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd6:	f7ff f905 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001dda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de2:	f7ff f8f1 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001de6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dee:	f7ff f8eb 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	48000400 	.word	0x48000400

08001dfc <setV>:
void setV(void){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001e00:	2101      	movs	r1, #1
 8001e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e06:	f7ff f8ed 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001e0a:	2120      	movs	r1, #32
 8001e0c:	480f      	ldr	r0, [pc, #60]	; (8001e4c <setV+0x50>)
 8001e0e:	f7ff f8e9 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001e12:	2108      	movs	r1, #8
 8001e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e18:	f7ff f8e4 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e22:	f7ff f8d1 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001e26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e2e:	f7ff f8cb 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001e32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3a:	f7ff f8c5 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001e3e:	2110      	movs	r1, #16
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <setV+0x50>)
 8001e42:	f7ff f8c1 	bl	8000fc8 <LL_GPIO_SetOutputPin>

}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	48000400 	.word	0x48000400

08001e50 <setW>:
void setW(void){
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001e54:	2101      	movs	r1, #1
 8001e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5a:	f7ff f8c3 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001e5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e66:	f7ff f8bd 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001e6a:	2120      	movs	r1, #32
 8001e6c:	480c      	ldr	r0, [pc, #48]	; (8001ea0 <setW+0x50>)
 8001e6e:	f7ff f8b9 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001e72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7a:	f7ff f8b3 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001e7e:	2108      	movs	r1, #8
 8001e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e84:	f7ff f8ae 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001e88:	2110      	movs	r1, #16
 8001e8a:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <setW+0x50>)
 8001e8c:	f7ff f8aa 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001e90:	2102      	movs	r1, #2
 8001e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e96:	f7ff f897 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	48000400 	.word	0x48000400

08001ea4 <setX>:
void setX(void){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eae:	f7ff f899 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001eb2:	2120      	movs	r1, #32
 8001eb4:	480f      	ldr	r0, [pc, #60]	; (8001ef4 <setX+0x50>)
 8001eb6:	f7ff f895 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001eba:	2110      	movs	r1, #16
 8001ebc:	480d      	ldr	r0, [pc, #52]	; (8001ef4 <setX+0x50>)
 8001ebe:	f7ff f891 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec8:	f7ff f87e 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001ecc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed4:	f7ff f878 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001ed8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee0:	f7ff f872 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001ee4:	2108      	movs	r1, #8
 8001ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eea:	f7ff f86d 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	48000400 	.word	0x48000400

08001ef8 <setZ>:
void setZ(void){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001efc:	2102      	movs	r1, #2
 8001efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f02:	f7ff f86f 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001f06:	2101      	movs	r1, #1
 8001f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0c:	f7ff f86a 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001f10:	2120      	movs	r1, #32
 8001f12:	480d      	ldr	r0, [pc, #52]	; (8001f48 <setZ+0x50>)
 8001f14:	f7ff f866 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001f18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f20:	f7ff f860 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001f24:	2110      	movs	r1, #16
 8001f26:	4808      	ldr	r0, [pc, #32]	; (8001f48 <setZ+0x50>)
 8001f28:	f7ff f85c 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001f2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f34:	f7ff f848 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001f38:	2108      	movs	r1, #8
 8001f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f3e:	f7ff f843 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	48000400 	.word	0x48000400

08001f4c <setOne>:

// numbers
void setOne(void){
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001f50:	2101      	movs	r1, #1
 8001f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f56:	f7ff f845 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f62:	f7ff f83f 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001f66:	2102      	movs	r1, #2
 8001f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6c:	f7ff f82c 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001f70:	2120      	movs	r1, #32
 8001f72:	480a      	ldr	r0, [pc, #40]	; (8001f9c <setOne+0x50>)
 8001f74:	f7ff f828 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001f78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f80:	f7ff f822 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001f84:	2108      	movs	r1, #8
 8001f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8a:	f7ff f81d 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001f8e:	2110      	movs	r1, #16
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <setOne+0x50>)
 8001f92:	f7ff f819 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	48000400 	.word	0x48000400

08001fa0 <setTwo>:
void setTwo(void){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001faa:	f7ff f81b 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001fae:	2101      	movs	r1, #1
 8001fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb4:	f7ff f816 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001fb8:	2120      	movs	r1, #32
 8001fba:	480d      	ldr	r0, [pc, #52]	; (8001ff0 <setTwo+0x50>)
 8001fbc:	f7ff f812 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001fc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc8:	f7ff f80c 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001fcc:	2110      	movs	r1, #16
 8001fce:	4808      	ldr	r0, [pc, #32]	; (8001ff0 <setTwo+0x50>)
 8001fd0:	f7ff f808 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001fd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fdc:	f7fe fff4 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001fe0:	2108      	movs	r1, #8
 8001fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe6:	f7fe ffef 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	48000400 	.word	0x48000400

08001ff4 <setThree>:
void setThree(void){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ffe:	f7fe fff1 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8002002:	2101      	movs	r1, #1
 8002004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002008:	f7fe ffec 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800200c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002014:	f7fe ffe6 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8002018:	2120      	movs	r1, #32
 800201a:	480a      	ldr	r0, [pc, #40]	; (8002044 <setThree+0x50>)
 800201c:	f7fe ffe2 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8002020:	2110      	movs	r1, #16
 8002022:	4808      	ldr	r0, [pc, #32]	; (8002044 <setThree+0x50>)
 8002024:	f7fe ffde 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8002028:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800202c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002030:	f7fe ffca 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8002034:	2108      	movs	r1, #8
 8002036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800203a:	f7fe ffc5 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	48000400 	.word	0x48000400

08002048 <setFour>:
void setFour(void){
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800204c:	2101      	movs	r1, #1
 800204e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002052:	f7fe ffc7 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8002056:	f44f 7180 	mov.w	r1, #256	; 0x100
 800205a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800205e:	f7fe ffc1 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8002062:	2108      	movs	r1, #8
 8002064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002068:	f7fe ffbc 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800206c:	2110      	movs	r1, #16
 800206e:	480a      	ldr	r0, [pc, #40]	; (8002098 <setFour+0x50>)
 8002070:	f7fe ffb8 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8002074:	2102      	movs	r1, #2
 8002076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207a:	f7fe ffa5 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800207e:	2120      	movs	r1, #32
 8002080:	4805      	ldr	r0, [pc, #20]	; (8002098 <setFour+0x50>)
 8002082:	f7fe ffa1 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8002086:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800208a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208e:	f7fe ff9b 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	48000400 	.word	0x48000400

0800209c <setFive>:
void setFive(void){
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80020a0:	2102      	movs	r1, #2
 80020a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a6:	f7fe ff9d 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80020aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b2:	f7fe ff97 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80020b6:	2120      	movs	r1, #32
 80020b8:	480c      	ldr	r0, [pc, #48]	; (80020ec <setFive+0x50>)
 80020ba:	f7fe ff93 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80020be:	2108      	movs	r1, #8
 80020c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c4:	f7fe ff8e 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80020c8:	2110      	movs	r1, #16
 80020ca:	4808      	ldr	r0, [pc, #32]	; (80020ec <setFive+0x50>)
 80020cc:	f7fe ff8a 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80020d0:	2101      	movs	r1, #1
 80020d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d6:	f7fe ff77 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80020da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e2:	f7fe ff71 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	48000400 	.word	0x48000400

080020f0 <setSix>:
void setSix(void){
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80020f4:	2102      	movs	r1, #2
 80020f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fa:	f7fe ff73 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80020fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002106:	f7fe ff6d 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800210a:	2120      	movs	r1, #32
 800210c:	480c      	ldr	r0, [pc, #48]	; (8002140 <setSix+0x50>)
 800210e:	f7fe ff69 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8002112:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800211a:	f7fe ff63 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800211e:	2108      	movs	r1, #8
 8002120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002124:	f7fe ff5e 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8002128:	2110      	movs	r1, #16
 800212a:	4805      	ldr	r0, [pc, #20]	; (8002140 <setSix+0x50>)
 800212c:	f7fe ff5a 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8002130:	2101      	movs	r1, #1
 8002132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002136:	f7fe ff47 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	48000400 	.word	0x48000400

08002144 <setSeven>:
void setSeven(void){
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8002148:	2102      	movs	r1, #2
 800214a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800214e:	f7fe ff49 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8002152:	2101      	movs	r1, #1
 8002154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002158:	f7fe ff44 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800215c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002164:	f7fe ff3e 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8002168:	2120      	movs	r1, #32
 800216a:	480a      	ldr	r0, [pc, #40]	; (8002194 <setSeven+0x50>)
 800216c:	f7fe ff2c 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8002170:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002178:	f7fe ff26 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 800217c:	2108      	movs	r1, #8
 800217e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002182:	f7fe ff21 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8002186:	2110      	movs	r1, #16
 8002188:	4802      	ldr	r0, [pc, #8]	; (8002194 <setSeven+0x50>)
 800218a:	f7fe ff1d 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	48000400 	.word	0x48000400

08002198 <setEight>:
void setEight(void){
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800219c:	2102      	movs	r1, #2
 800219e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a2:	f7fe ff1f 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80021a6:	2101      	movs	r1, #1
 80021a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ac:	f7fe ff1a 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80021b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b8:	f7fe ff14 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80021bc:	2120      	movs	r1, #32
 80021be:	480a      	ldr	r0, [pc, #40]	; (80021e8 <setEight+0x50>)
 80021c0:	f7fe ff10 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80021c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021cc:	f7fe ff0a 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80021d0:	2108      	movs	r1, #8
 80021d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d6:	f7fe ff05 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80021da:	2110      	movs	r1, #16
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <setEight+0x50>)
 80021de:	f7fe ff01 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	48000400 	.word	0x48000400

080021ec <setNine>:
void setNine(void){
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80021f0:	2102      	movs	r1, #2
 80021f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f6:	f7fe fef5 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80021fa:	2101      	movs	r1, #1
 80021fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002200:	f7fe fef0 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8002204:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800220c:	f7fe feea 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8002210:	2120      	movs	r1, #32
 8002212:	480a      	ldr	r0, [pc, #40]	; (800223c <setNine+0x50>)
 8002214:	f7fe fee6 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8002218:	2108      	movs	r1, #8
 800221a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221e:	f7fe fee1 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8002222:	2110      	movs	r1, #16
 8002224:	4805      	ldr	r0, [pc, #20]	; (800223c <setNine+0x50>)
 8002226:	f7fe fedd 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800222a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800222e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002232:	f7fe fec9 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	48000400 	.word	0x48000400

08002240 <setZero>:
void setZero(void){
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8002244:	2102      	movs	r1, #2
 8002246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224a:	f7fe fecb 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800224e:	2101      	movs	r1, #1
 8002250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002254:	f7fe fec6 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8002258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800225c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002260:	f7fe fec0 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8002264:	2120      	movs	r1, #32
 8002266:	480a      	ldr	r0, [pc, #40]	; (8002290 <setZero+0x50>)
 8002268:	f7fe febc 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800226c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002274:	f7fe feb6 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8002278:	2108      	movs	r1, #8
 800227a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227e:	f7fe feb1 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8002282:	2110      	movs	r1, #16
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <setZero+0x50>)
 8002286:	f7fe fe9f 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	48000400 	.word	0x48000400

08002294 <setLine>:

void setLine(void){
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8002298:	2120      	movs	r1, #32
 800229a:	4814      	ldr	r0, [pc, #80]	; (80022ec <setLine+0x58>)
 800229c:	f7fe fea2 	bl	8000fe4 <LL_GPIO_ResetOutputPin>

	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80022a0:	2102      	movs	r1, #2
 80022a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a6:	f7fe fe8f 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80022aa:	2101      	movs	r1, #1
 80022ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b0:	f7fe fe8a 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80022b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022bc:	f7fe fe84 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80022c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c8:	f7fe fe7e 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80022cc:	2108      	movs	r1, #8
 80022ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d2:	f7fe fe79 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 80022d6:	2110      	movs	r1, #16
 80022d8:	4804      	ldr	r0, [pc, #16]	; (80022ec <setLine+0x58>)
 80022da:	f7fe fe75 	bl	8000fc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentDP_Pin);
 80022de:	2102      	movs	r1, #2
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <setLine+0x58>)
 80022e2:	f7fe fe71 	bl	8000fc8 <LL_GPIO_SetOutputPin>
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	48000400 	.word	0x48000400

080022f0 <setDot>:
// and dot to end
void setDot(void){
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
 80022f4:	2102      	movs	r1, #2
 80022f6:	4802      	ldr	r0, [pc, #8]	; (8002300 <setDot+0x10>)
 80022f8:	f7fe fe74 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	48000400 	.word	0x48000400

08002304 <setDash>:

void setDash(void){
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8002308:	2110      	movs	r1, #16
 800230a:	4802      	ldr	r0, [pc, #8]	; (8002314 <setDash+0x10>)
 800230c:	f7fe fe6a 	bl	8000fe4 <LL_GPIO_ResetOutputPin>
}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}
 8002314:	48000400 	.word	0x48000400

08002318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <__NVIC_GetPriorityGrouping+0x18>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	f003 0307 	and.w	r3, r3, #7
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	2b00      	cmp	r3, #0
 8002344:	db0b      	blt.n	800235e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	f003 021f 	and.w	r2, r3, #31
 800234c:	4907      	ldr	r1, [pc, #28]	; (800236c <__NVIC_EnableIRQ+0x38>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	2001      	movs	r0, #1
 8002356:	fa00 f202 	lsl.w	r2, r0, r2
 800235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000e100 	.word	0xe000e100

08002370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	2b00      	cmp	r3, #0
 8002382:	db0a      	blt.n	800239a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	490c      	ldr	r1, [pc, #48]	; (80023bc <__NVIC_SetPriority+0x4c>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	440b      	add	r3, r1
 8002394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002398:	e00a      	b.n	80023b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4908      	ldr	r1, [pc, #32]	; (80023c0 <__NVIC_SetPriority+0x50>)
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	3b04      	subs	r3, #4
 80023a8:	0112      	lsls	r2, r2, #4
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	440b      	add	r3, r1
 80023ae:	761a      	strb	r2, [r3, #24]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000e100 	.word	0xe000e100
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	; 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f1c3 0307 	rsb	r3, r3, #7
 80023de:	2b04      	cmp	r3, #4
 80023e0:	bf28      	it	cs
 80023e2:	2304      	movcs	r3, #4
 80023e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2b06      	cmp	r3, #6
 80023ec:	d902      	bls.n	80023f4 <NVIC_EncodePriority+0x30>
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3b03      	subs	r3, #3
 80023f2:	e000      	b.n	80023f6 <NVIC_EncodePriority+0x32>
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	f04f 32ff 	mov.w	r2, #4294967295
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	401a      	ands	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800240c:	f04f 31ff 	mov.w	r1, #4294967295
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43d9      	mvns	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	4313      	orrs	r3, r2
         );
}
 800241e:	4618      	mov	r0, r3
 8002420:	3724      	adds	r7, #36	; 0x24
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002436:	695a      	ldr	r2, [r3, #20]
 8002438:	4907      	ldr	r1, [pc, #28]	; (8002458 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4313      	orrs	r3, r2
 800243e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002442:	695a      	ldr	r2, [r3, #20]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4013      	ands	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800244a:	68fb      	ldr	r3, [r7, #12]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	40021000 	.word	0x40021000

0800245c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8002466:	4a13      	ldr	r2, [pc, #76]	; (80024b4 <LL_SYSCFG_SetEXTISource+0x58>)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	b2db      	uxtb	r3, r3
 800246c:	3302      	adds	r3, #2
 800246e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	0c1b      	lsrs	r3, r3, #16
 8002476:	43db      	mvns	r3, r3
 8002478:	ea02 0103 	and.w	r1, r2, r3
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	0c1b      	lsrs	r3, r3, #16
 8002480:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	fa93 f3a3 	rbit	r3, r3
 8002488:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	fa03 f202 	lsl.w	r2, r3, r2
 800249a:	4806      	ldr	r0, [pc, #24]	; (80024b4 <LL_SYSCFG_SetEXTISource+0x58>)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	430a      	orrs	r2, r1
 80024a2:	3302      	adds	r3, #2
 80024a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	40010000 	.word	0x40010000

080024b8 <LL_GPIO_SetPinMode>:
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	613b      	str	r3, [r7, #16]
  return result;
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2103      	movs	r1, #3
 80024e0:	fa01 f303 	lsl.w	r3, r1, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	401a      	ands	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	61bb      	str	r3, [r7, #24]
  return result;
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	431a      	orrs	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	601a      	str	r2, [r3, #0]
}
 800250a:	bf00      	nop
 800250c:	3724      	adds	r7, #36	; 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <LL_GPIO_SetPinPull>:
{
 8002516:	b480      	push	{r7}
 8002518:	b089      	sub	sp, #36	; 0x24
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	fa93 f3a3 	rbit	r3, r3
 8002530:	613b      	str	r3, [r7, #16]
  return result;
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	fab3 f383 	clz	r3, r3
 8002538:	b2db      	uxtb	r3, r3
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	2103      	movs	r1, #3
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	401a      	ands	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	61bb      	str	r3, [r7, #24]
  return result;
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	431a      	orrs	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	60da      	str	r2, [r3, #12]
}
 8002568:	bf00      	nop
 800256a:	3724      	adds	r7, #36	; 0x24
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_GPIO_ResetOutputPin>:
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	; 0x28
 8002594:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8002596:	f107 031c 	add.w	r3, r7, #28
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
 80025b0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80025b2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80025b6:	f7ff ff39 	bl	800242c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80025ba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80025be:	f7ff ff35 	bl	800242c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80025c2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80025c6:	f7ff ff31 	bl	800242c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 80025ca:	f641 119f 	movw	r1, #6559	; 0x199f
 80025ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025d2:	f7ff ffcf 	bl	8002574 <LL_GPIO_ResetOutputPin>
                          |digit2_Pin|digitTime_Pin|segmentC_Pin|segmentE_Pin
                          |digit3_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, digit1_Pin|segmentDP_Pin|segmentG_Pin|segmentD_Pin);
 80025d6:	2133      	movs	r1, #51	; 0x33
 80025d8:	482b      	ldr	r0, [pc, #172]	; (8002688 <MX_GPIO_Init+0xf8>)
 80025da:	f7ff ffcb 	bl	8002574 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 80025de:	f641 139f 	movw	r3, #6559	; 0x199f
 80025e2:	607b      	str	r3, [r7, #4]
                          |digit2_Pin|digitTime_Pin|segmentC_Pin|segmentE_Pin
                          |digit3_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80025e4:	2301      	movs	r3, #1
 80025e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	4619      	mov	r1, r3
 80025f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025fc:	f001 fdbe 	bl	800417c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = digit1_Pin|segmentDP_Pin|segmentG_Pin|segmentD_Pin;
 8002600:	2333      	movs	r3, #51	; 0x33
 8002602:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002604:	2301      	movs	r3, #1
 8002606:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002614:	1d3b      	adds	r3, r7, #4
 8002616:	4619      	mov	r1, r3
 8002618:	481b      	ldr	r0, [pc, #108]	; (8002688 <MX_GPIO_Init+0xf8>)
 800261a:	f001 fdaf 	bl	800417c <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 800261e:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8002622:	2001      	movs	r0, #1
 8002624:	f7ff ff1a 	bl	800245c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(button_GPIO_Port, button_Pin, LL_GPIO_PULL_UP);
 8002628:	2201      	movs	r2, #1
 800262a:	2108      	movs	r1, #8
 800262c:	4816      	ldr	r0, [pc, #88]	; (8002688 <MX_GPIO_Init+0xf8>)
 800262e:	f7ff ff72 	bl	8002516 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(button_GPIO_Port, button_Pin, LL_GPIO_MODE_INPUT);
 8002632:	2200      	movs	r2, #0
 8002634:	2108      	movs	r1, #8
 8002636:	4814      	ldr	r0, [pc, #80]	; (8002688 <MX_GPIO_Init+0xf8>)
 8002638:	f7ff ff3e 	bl	80024b8 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 800263c:	2308      	movs	r3, #8
 800263e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8002640:	2300      	movs	r3, #0
 8002642:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002644:	2301      	movs	r3, #1
 8002646:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800264a:	2300      	movs	r3, #0
 800264c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8002650:	2301      	movs	r3, #1
 8002652:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8002656:	f107 031c 	add.w	r3, r7, #28
 800265a:	4618      	mov	r0, r3
 800265c:	f001 fb96 	bl	8003d8c <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002660:	f7ff fe5a 	bl	8002318 <__NVIC_GetPriorityGrouping>
 8002664:	4603      	mov	r3, r0
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff feaa 	bl	80023c4 <NVIC_EncodePriority>
 8002670:	4603      	mov	r3, r0
 8002672:	4619      	mov	r1, r3
 8002674:	2009      	movs	r0, #9
 8002676:	f7ff fe7b 	bl	8002370 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 800267a:	2009      	movs	r0, #9
 800267c:	f7ff fe5a 	bl	8002334 <__NVIC_EnableIRQ>

}
 8002680:	bf00      	nop
 8002682:	3728      	adds	r7, #40	; 0x28
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	48000400 	.word	0x48000400

0800268c <__NVIC_GetPriorityGrouping>:
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	0a1b      	lsrs	r3, r3, #8
 8002696:	f003 0307 	and.w	r3, r3, #7
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_EnableIRQ>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	db0b      	blt.n	80026d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	f003 021f 	and.w	r2, r3, #31
 80026c0:	4907      	ldr	r1, [pc, #28]	; (80026e0 <__NVIC_EnableIRQ+0x38>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	2001      	movs	r0, #1
 80026ca:	fa00 f202 	lsl.w	r2, r0, r2
 80026ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000e100 	.word	0xe000e100

080026e4 <__NVIC_SetPriority>:
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	6039      	str	r1, [r7, #0]
 80026ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	db0a      	blt.n	800270e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	490c      	ldr	r1, [pc, #48]	; (8002730 <__NVIC_SetPriority+0x4c>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	0112      	lsls	r2, r2, #4
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	440b      	add	r3, r1
 8002708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800270c:	e00a      	b.n	8002724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	b2da      	uxtb	r2, r3
 8002712:	4908      	ldr	r1, [pc, #32]	; (8002734 <__NVIC_SetPriority+0x50>)
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	3b04      	subs	r3, #4
 800271c:	0112      	lsls	r2, r2, #4
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	440b      	add	r3, r1
 8002722:	761a      	strb	r2, [r3, #24]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000e100 	.word	0xe000e100
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <NVIC_EncodePriority>:
{
 8002738:	b480      	push	{r7}
 800273a:	b089      	sub	sp, #36	; 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f1c3 0307 	rsb	r3, r3, #7
 8002752:	2b04      	cmp	r3, #4
 8002754:	bf28      	it	cs
 8002756:	2304      	movcs	r3, #4
 8002758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3304      	adds	r3, #4
 800275e:	2b06      	cmp	r3, #6
 8002760:	d902      	bls.n	8002768 <NVIC_EncodePriority+0x30>
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3b03      	subs	r3, #3
 8002766:	e000      	b.n	800276a <NVIC_EncodePriority+0x32>
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	f04f 32ff 	mov.w	r2, #4294967295
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43da      	mvns	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	401a      	ands	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002780:	f04f 31ff 	mov.w	r1, #4294967295
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	43d9      	mvns	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	4313      	orrs	r3, r2
}
 8002792:	4618      	mov	r0, r3
 8002794:	3724      	adds	r7, #36	; 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f043 0201 	orr.w	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	601a      	str	r2, [r3, #0]
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	601a      	str	r2, [r3, #0]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	601a      	str	r2, [r3, #0]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80027fe:	b480      	push	{r7}
 8002800:	b085      	sub	sp, #20
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002812:	f023 0306 	bic.w	r3, r3, #6
 8002816:	68b9      	ldr	r1, [r7, #8]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	430a      	orrs	r2, r1
 800281c:	431a      	orrs	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	60da      	str	r2, [r3, #12]
}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	60da      	str	r2, [r3, #12]
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f043 0204 	orr.w	r2, r3, #4
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	601a      	str	r2, [r3, #0]
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 0204 	bic.w	r2, r3, #4
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	601a      	str	r2, [r3, #0]
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d101      	bne.n	80028a6 <LL_I2C_IsActiveFlag_TXIS+0x18>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d101      	bne.n	80028cc <LL_I2C_IsActiveFlag_RXNE+0x18>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <LL_I2C_IsActiveFlag_RXNE+0x1a>
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	d101      	bne.n	80028f2 <LL_I2C_IsActiveFlag_STOP+0x18>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <LL_I2C_IsActiveFlag_STOP+0x1a>
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	f043 0220 	orr.w	r2, r3, #32
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	61da      	str	r2, [r3, #28]
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	605a      	str	r2, [r3, #4]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	0d5b      	lsrs	r3, r3, #21
 8002956:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <LL_I2C_HandleTransfer+0x48>)
 800295c:	430b      	orrs	r3, r1
 800295e:	43db      	mvns	r3, r3
 8002960:	401a      	ands	r2, r3
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4319      	orrs	r1, r3
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	041b      	lsls	r3, r3, #16
 800296c:	4319      	orrs	r1, r3
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	4319      	orrs	r1, r3
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	430b      	orrs	r3, r1
 8002976:	431a      	orrs	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	03ff7bff 	.word	0x03ff7bff

0800298c <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	b2db      	uxtb	r3, r3
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	460b      	mov	r3, r1
 80029b0:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <LL_AHB1_GRP1_EnableClock>:
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80029cc:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	4907      	ldr	r1, [pc, #28]	; (80029f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029da:	695a      	ldr	r2, [r3, #20]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4013      	ands	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029e2:	68fb      	ldr	r3, [r7, #12]
}
 80029e4:	bf00      	nop
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	40021000 	.word	0x40021000

080029f4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80029fc:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <LL_APB1_GRP1_EnableClock+0x2c>)
 80029fe:	69da      	ldr	r2, [r3, #28]
 8002a00:	4907      	ldr	r1, [pc, #28]	; (8002a20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a0a:	69da      	ldr	r2, [r3, #28]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a12:	68fb      	ldr	r3, [r7, #12]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	40021000 	.word	0x40021000

08002a24 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08e      	sub	sp, #56	; 0x38
 8002a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002a2a:	f107 031c 	add.w	r3, r7, #28
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	609a      	str	r2, [r3, #8]
 8002a36:	60da      	str	r2, [r3, #12]
 8002a38:	611a      	str	r2, [r3, #16]
 8002a3a:	615a      	str	r2, [r3, #20]
 8002a3c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
 8002a4c:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002a4e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002a52:	f7ff ffb7 	bl	80029c4 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002a56:	23c0      	movs	r3, #192	; 0xc0
 8002a58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002a62:	2301      	movs	r3, #1
 8002a64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002a66:	2301      	movs	r3, #1
 8002a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002a6a:	2304      	movs	r3, #4
 8002a6c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6e:	1d3b      	adds	r3, r7, #4
 8002a70:	4619      	mov	r1, r3
 8002a72:	4821      	ldr	r0, [pc, #132]	; (8002af8 <MX_I2C1_Init+0xd4>)
 8002a74:	f001 fb82 	bl	800417c <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002a78:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002a7c:	f7ff ffba 	bl	80029f4 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8002a80:	f7ff fe04 	bl	800268c <__NVIC_GetPriorityGrouping>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2200      	movs	r2, #0
 8002a88:	2102      	movs	r1, #2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fe54 	bl	8002738 <NVIC_EncodePriority>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4619      	mov	r1, r3
 8002a94:	201f      	movs	r0, #31
 8002a96:	f7ff fe25 	bl	80026e4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002a9a:	201f      	movs	r0, #31
 8002a9c:	f7ff fe04 	bl	80026a8 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8002aa0:	4816      	ldr	r0, [pc, #88]	; (8002afc <MX_I2C1_Init+0xd8>)
 8002aa2:	f7ff ff3d 	bl	8002920 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8002aa6:	4815      	ldr	r0, [pc, #84]	; (8002afc <MX_I2C1_Init+0xd8>)
 8002aa8:	f7ff fec1 	bl	800282e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002aac:	4813      	ldr	r0, [pc, #76]	; (8002afc <MX_I2C1_Init+0xd8>)
 8002aae:	f7ff fe96 	bl	80027de <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8002ab2:	4812      	ldr	r0, [pc, #72]	; (8002afc <MX_I2C1_Init+0xd8>)
 8002ab4:	f7ff fe83 	bl	80027be <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8002abc:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <MX_I2C1_Init+0xdc>)
 8002abe:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002ad4:	f107 031c 	add.w	r3, r7, #28
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4808      	ldr	r0, [pc, #32]	; (8002afc <MX_I2C1_Init+0xd8>)
 8002adc:	f001 fc61 	bl	80043a2 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4805      	ldr	r0, [pc, #20]	; (8002afc <MX_I2C1_Init+0xd8>)
 8002ae6:	f7ff fe8a 	bl	80027fe <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8002aea:	4804      	ldr	r0, [pc, #16]	; (8002afc <MX_I2C1_Init+0xd8>)
 8002aec:	f7ff fe57 	bl	800279e <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8002af0:	bf00      	nop
 8002af2:	3738      	adds	r7, #56	; 0x38
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	48000400 	.word	0x48000400
 8002afc:	40005400 	.word	0x40005400
 8002b00:	2000090e 	.word	0x2000090e

08002b04 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	4608      	mov	r0, r1
 8002b0e:	4611      	mov	r1, r2
 8002b10:	461a      	mov	r2, r3
 8002b12:	4623      	mov	r3, r4
 8002b14:	71fb      	strb	r3, [r7, #7]
 8002b16:	4603      	mov	r3, r0
 8002b18:	71bb      	strb	r3, [r7, #6]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	717b      	strb	r3, [r7, #5]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8002b22:	793b      	ldrb	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8002b28:	79bb      	ldrb	r3, [r7, #6]
 8002b2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b2e:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002b30:	7979      	ldrb	r1, [r7, #5]
 8002b32:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <i2c_master_write+0x80>)
 8002b34:	9301      	str	r3, [sp, #4]
 8002b36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	2200      	movs	r2, #0
 8002b40:	4811      	ldr	r0, [pc, #68]	; (8002b88 <i2c_master_write+0x84>)
 8002b42:	f7ff fefd 	bl	8002940 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8002b46:	79bb      	ldrb	r3, [r7, #6]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	480f      	ldr	r0, [pc, #60]	; (8002b88 <i2c_master_write+0x84>)
 8002b4c:	f7ff ff2b 	bl	80029a6 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002b50:	e00a      	b.n	8002b68 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8002b52:	480d      	ldr	r0, [pc, #52]	; (8002b88 <i2c_master_write+0x84>)
 8002b54:	f7ff fe9b 	bl	800288e <LL_I2C_IsActiveFlag_TXIS>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d004      	beq.n	8002b68 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	4619      	mov	r1, r3
 8002b62:	4809      	ldr	r0, [pc, #36]	; (8002b88 <i2c_master_write+0x84>)
 8002b64:	f7ff ff1f 	bl	80029a6 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002b68:	4807      	ldr	r0, [pc, #28]	; (8002b88 <i2c_master_write+0x84>)
 8002b6a:	f7ff feb6 	bl	80028da <LL_I2C_IsActiveFlag_STOP>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0ee      	beq.n	8002b52 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8002b74:	4804      	ldr	r0, [pc, #16]	; (8002b88 <i2c_master_write+0x84>)
 8002b76:	f7ff fec3 	bl	8002900 <LL_I2C_ClearFlag_STOP>
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd90      	pop	{r4, r7, pc}
 8002b82:	bf00      	nop
 8002b84:	80002000 	.word	0x80002000
 8002b88:	40005400 	.word	0x40005400

08002b8c <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	4608      	mov	r0, r1
 8002b96:	4611      	mov	r1, r2
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	70fb      	strb	r3, [r7, #3]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	70bb      	strb	r3, [r7, #2]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8002ba6:	4a30      	ldr	r2, [pc, #192]	; (8002c68 <i2c_master_read+0xdc>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8002bac:	7c3b      	ldrb	r3, [r7, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8002bb2:	78bb      	ldrb	r3, [r7, #2]
 8002bb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bb8:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8002bba:	4b2c      	ldr	r3, [pc, #176]	; (8002c6c <i2c_master_read+0xe0>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8002bc0:	482b      	ldr	r0, [pc, #172]	; (8002c70 <i2c_master_read+0xe4>)
 8002bc2:	f7ff fe44 	bl	800284e <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002bc6:	7879      	ldrb	r1, [r7, #1]
 8002bc8:	4b2a      	ldr	r3, [pc, #168]	; (8002c74 <i2c_master_read+0xe8>)
 8002bca:	9301      	str	r3, [sp, #4]
 8002bcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	4826      	ldr	r0, [pc, #152]	; (8002c70 <i2c_master_read+0xe4>)
 8002bd8:	f7ff feb2 	bl	8002940 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002bdc:	e00a      	b.n	8002bf4 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8002bde:	4824      	ldr	r0, [pc, #144]	; (8002c70 <i2c_master_read+0xe4>)
 8002be0:	f7ff fe55 	bl	800288e <LL_I2C_IsActiveFlag_TXIS>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d004      	beq.n	8002bf4 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8002bea:	78bb      	ldrb	r3, [r7, #2]
 8002bec:	4619      	mov	r1, r3
 8002bee:	4820      	ldr	r0, [pc, #128]	; (8002c70 <i2c_master_read+0xe4>)
 8002bf0:	f7ff fed9 	bl	80029a6 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002bf4:	481e      	ldr	r0, [pc, #120]	; (8002c70 <i2c_master_read+0xe4>)
 8002bf6:	f7ff fe70 	bl	80028da <LL_I2C_IsActiveFlag_STOP>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ee      	beq.n	8002bde <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8002c00:	481b      	ldr	r0, [pc, #108]	; (8002c70 <i2c_master_read+0xe4>)
 8002c02:	f7ff fe7d 	bl	8002900 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8002c06:	bf00      	nop
 8002c08:	4819      	ldr	r0, [pc, #100]	; (8002c70 <i2c_master_read+0xe4>)
 8002c0a:	f7ff fe66 	bl	80028da <LL_I2C_IsActiveFlag_STOP>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f9      	bne.n	8002c08 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8002c14:	7879      	ldrb	r1, [r7, #1]
 8002c16:	78fb      	ldrb	r3, [r7, #3]
 8002c18:	4a17      	ldr	r2, [pc, #92]	; (8002c78 <i2c_master_read+0xec>)
 8002c1a:	9201      	str	r2, [sp, #4]
 8002c1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c20:	9200      	str	r2, [sp, #0]
 8002c22:	2200      	movs	r2, #0
 8002c24:	4812      	ldr	r0, [pc, #72]	; (8002c70 <i2c_master_read+0xe4>)
 8002c26:	f7ff fe8b 	bl	8002940 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8002c2a:	bf00      	nop
 8002c2c:	4810      	ldr	r0, [pc, #64]	; (8002c70 <i2c_master_read+0xe4>)
 8002c2e:	f7ff fe54 	bl	80028da <LL_I2C_IsActiveFlag_STOP>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f9      	beq.n	8002c2c <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8002c38:	480d      	ldr	r0, [pc, #52]	; (8002c70 <i2c_master_read+0xe4>)
 8002c3a:	f7ff fe61 	bl	8002900 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8002c3e:	480c      	ldr	r0, [pc, #48]	; (8002c70 <i2c_master_read+0xe4>)
 8002c40:	f7ff fe15 	bl	800286e <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8002c44:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <i2c_master_read+0xe4>)
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <i2c_master_read+0xe4>)
 8002c4a:	f043 0310 	orr.w	r3, r3, #16
 8002c4e:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8002c50:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <i2c_master_read+0xf0>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8002c56:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <i2c_master_read+0xe0>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8002c5c:	4b02      	ldr	r3, [pc, #8]	; (8002c68 <i2c_master_read+0xdc>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	200000b0 	.word	0x200000b0
 8002c6c:	20000091 	.word	0x20000091
 8002c70:	40005400 	.word	0x40005400
 8002c74:	80002000 	.word	0x80002000
 8002c78:	80002400 	.word	0x80002400
 8002c7c:	20000092 	.word	0x20000092

08002c80 <I2C1_EV_IRQHandler>:
	(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
	end_of_read_flag = 0;
}

void I2C1_EV_IRQHandler(void)
{
 8002c80:	b598      	push	{r3, r4, r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
  /* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8002c84:	4812      	ldr	r0, [pc, #72]	; (8002cd0 <I2C1_EV_IRQHandler+0x50>)
 8002c86:	f7ff fe15 	bl	80028b4 <LL_I2C_IsActiveFlag_RXNE>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d01c      	beq.n	8002cca <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8002c90:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <I2C1_EV_IRQHandler+0x54>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <I2C1_EV_IRQHandler+0x58>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	1c59      	adds	r1, r3, #1
 8002c9c:	b2c8      	uxtb	r0, r1
 8002c9e:	490e      	ldr	r1, [pc, #56]	; (8002cd8 <I2C1_EV_IRQHandler+0x58>)
 8002ca0:	7008      	strb	r0, [r1, #0]
 8002ca2:	18d4      	adds	r4, r2, r3
 8002ca4:	480a      	ldr	r0, [pc, #40]	; (8002cd0 <I2C1_EV_IRQHandler+0x50>)
 8002ca6:	f7ff fe71 	bl	800298c <LL_I2C_ReceiveData8>
 8002caa:	4603      	mov	r3, r0
 8002cac:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8002cae:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <I2C1_EV_IRQHandler+0x58>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b13      	cmp	r3, #19
 8002cb6:	d903      	bls.n	8002cc0 <I2C1_EV_IRQHandler+0x40>
 8002cb8:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <I2C1_EV_IRQHandler+0x58>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	e001      	b.n	8002cc4 <I2C1_EV_IRQHandler+0x44>
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <I2C1_EV_IRQHandler+0x58>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <I2C1_EV_IRQHandler+0x5c>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd98      	pop	{r3, r4, r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40005400 	.word	0x40005400
 8002cd4:	200000b0 	.word	0x200000b0
 8002cd8:	20000092 	.word	0x20000092
 8002cdc:	20000091 	.word	0x20000091

08002ce0 <__NVIC_SetPriorityGrouping>:
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d12:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	60d3      	str	r3, [r2, #12]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <LL_RCC_HSI_Enable+0x1c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <LL_RCC_HSI_Enable+0x1c>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6013      	str	r3, [r2, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000

08002d48 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <LL_RCC_HSI_IsReady+0x20>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	40021000 	.word	0x40021000

08002d6c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002d74:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4904      	ldr	r1, [pc, #16]	; (8002d94 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000

08002d98 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <LL_RCC_SetSysClkSource+0x24>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f023 0203 	bic.w	r2, r3, #3
 8002da8:	4904      	ldr	r1, [pc, #16]	; (8002dbc <LL_RCC_SetSysClkSource+0x24>)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002dc4:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <LL_RCC_GetSysClkSource+0x18>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 030c 	and.w	r3, r3, #12
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000

08002ddc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <LL_RCC_SetAHBPrescaler+0x24>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dec:	4904      	ldr	r1, [pc, #16]	; (8002e00 <LL_RCC_SetAHBPrescaler+0x24>)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	40021000 	.word	0x40021000

08002e04 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e14:	4904      	ldr	r1, [pc, #16]	; (8002e28 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	40021000 	.word	0x40021000

08002e2c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002e34:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e3c:	4904      	ldr	r1, [pc, #16]	; (8002e50 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	604b      	str	r3, [r1, #4]
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	40021000 	.word	0x40021000

08002e54 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <LL_RCC_SetI2CClockSource+0x2c>)
 8002e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	0e1b      	lsrs	r3, r3, #24
 8002e64:	43db      	mvns	r3, r3
 8002e66:	401a      	ands	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e6e:	4904      	ldr	r1, [pc, #16]	; (8002e80 <LL_RCC_SetI2CClockSource+0x2c>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	40021000 	.word	0x40021000

08002e84 <LL_APB1_GRP1_EnableClock>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002e8c:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e8e:	69da      	ldr	r2, [r3, #28]
 8002e90:	4907      	ldr	r1, [pc, #28]	; (8002eb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e9a:	69da      	ldr	r2, [r3, #28]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	40021000 	.word	0x40021000

08002eb4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002ebc:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002ebe:	699a      	ldr	r2, [r3, #24]
 8002ec0:	4907      	ldr	r1, [pc, #28]	; (8002ee0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002eca:	699a      	ldr	r2, [r3, #24]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
}
 8002ed4:	bf00      	nop
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	40021000 	.word	0x40021000

08002ee4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <LL_FLASH_SetLatency+0x24>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f023 0207 	bic.w	r2, r3, #7
 8002ef4:	4904      	ldr	r1, [pc, #16]	; (8002f08 <LL_FLASH_SetLatency+0x24>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	600b      	str	r3, [r1, #0]
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	40022000 	.word	0x40022000

08002f0c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <LL_FLASH_GetLatency+0x18>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0307 	and.w	r3, r3, #7
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40022000 	.word	0x40022000

08002f28 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f043 0201 	orr.w	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	601a      	str	r2, [r3, #0]
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f043 0201 	orr.w	r2, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	60da      	str	r2, [r3, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002f6e:	2001      	movs	r0, #1
 8002f70:	f7ff ffa0 	bl	8002eb4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002f74:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002f78:	f7ff ff84 	bl	8002e84 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f7c:	2003      	movs	r0, #3
 8002f7e:	f7ff feaf 	bl	8002ce0 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f82:	f000 f871 	bl	8003068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f86:	f7ff fb03 	bl	8002590 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002f8a:	f000 fd45 	bl	8003a18 <MX_TIM2_Init>
  MX_I2C1_Init();
 8002f8e:	f7ff fd49 	bl	8002a24 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //LL_TIM_EnableIT_CC2(TIM2);
  LL_TIM_EnableIT_UPDATE(TIM2);
 8002f92:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002f96:	f7ff ffd7 	bl	8002f48 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 8002f9a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002f9e:	f7ff ffc3 	bl	8002f28 <LL_TIM_EnableCounter>

  uint8_t htsSensorStatus = hts_sensore_init();
 8002fa2:	f7fd ff05 	bl	8000db0 <hts_sensore_init>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	71fb      	strb	r3, [r7, #7]
  uint8_t pressureSensorStatus = pressure_init();
 8002faa:	f7fd fe67 	bl	8000c7c <pressure_init>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71bb      	strb	r3, [r7, #6]

  resetAllDigits();
 8002fb2:	f7fe fa99 	bl	80014e8 <resetAllDigits>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //lsm6ds0_get_acc(acc, (acc+1), (acc+2));
	  if(mode == 0){
 8002fb6:	4b2b      	ldr	r3, [pc, #172]	; (8003064 <main+0xfc>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10f      	bne.n	8002fde <main+0x76>
		  if(htsSensorStatus == 1){
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d102      	bne.n	8002fca <main+0x62>
			  printTemperature();
 8002fc4:	f000 f886 	bl	80030d4 <printTemperature>
 8002fc8:	e7f5      	b.n	8002fb6 <main+0x4e>
		  }
		  else if(htsSensorStatus == 0){
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f2      	bne.n	8002fb6 <main+0x4e>
			  mode +=1;
 8002fd0:	4b24      	ldr	r3, [pc, #144]	; (8003064 <main+0xfc>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	4b22      	ldr	r3, [pc, #136]	; (8003064 <main+0xfc>)
 8002fda:	701a      	strb	r2, [r3, #0]
 8002fdc:	e7eb      	b.n	8002fb6 <main+0x4e>
		  }
	  }
	  else if(mode == 1){
 8002fde:	4b21      	ldr	r3, [pc, #132]	; (8003064 <main+0xfc>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d10f      	bne.n	8003006 <main+0x9e>
		  if(htsSensorStatus == 1){
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d102      	bne.n	8002ff2 <main+0x8a>
			  printHumidity();
 8002fec:	f000 f8fe 	bl	80031ec <printHumidity>
 8002ff0:	e7e1      	b.n	8002fb6 <main+0x4e>
		  }
		  else if(htsSensorStatus == 0){
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1de      	bne.n	8002fb6 <main+0x4e>
			  mode +=1;
 8002ff8:	4b1a      	ldr	r3, [pc, #104]	; (8003064 <main+0xfc>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	4b18      	ldr	r3, [pc, #96]	; (8003064 <main+0xfc>)
 8003002:	701a      	strb	r2, [r3, #0]
 8003004:	e7d7      	b.n	8002fb6 <main+0x4e>
		  }
	  }
	  else if(mode == 2){
 8003006:	4b17      	ldr	r3, [pc, #92]	; (8003064 <main+0xfc>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d10f      	bne.n	800302e <main+0xc6>
		  if(pressureSensorStatus == 1){
 800300e:	79bb      	ldrb	r3, [r7, #6]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d102      	bne.n	800301a <main+0xb2>
			  printPressure();
 8003014:	f000 f91c 	bl	8003250 <printPressure>
 8003018:	e7cd      	b.n	8002fb6 <main+0x4e>
		  }
		  else if(pressureSensorStatus == 0){
 800301a:	79bb      	ldrb	r3, [r7, #6]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1ca      	bne.n	8002fb6 <main+0x4e>
			  mode +=1;
 8003020:	4b10      	ldr	r3, [pc, #64]	; (8003064 <main+0xfc>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	b2da      	uxtb	r2, r3
 8003028:	4b0e      	ldr	r3, [pc, #56]	; (8003064 <main+0xfc>)
 800302a:	701a      	strb	r2, [r3, #0]
 800302c:	e7c3      	b.n	8002fb6 <main+0x4e>
		  }
	  }
	  else if(mode == 3){
 800302e:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <main+0xfc>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b03      	cmp	r3, #3
 8003034:	d1bf      	bne.n	8002fb6 <main+0x4e>
		  if(pressureSensorStatus == 1 && htsSensorStatus == 1){
 8003036:	79bb      	ldrb	r3, [r7, #6]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d105      	bne.n	8003048 <main+0xe0>
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d102      	bne.n	8003048 <main+0xe0>
			  printAltitude();
 8003042:	f000 f93d 	bl	80032c0 <printAltitude>
 8003046:	e00b      	b.n	8003060 <main+0xf8>
		  }
		  else if(pressureSensorStatus == 0 || htsSensorStatus == 0){
 8003048:	79bb      	ldrb	r3, [r7, #6]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <main+0xec>
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1b0      	bne.n	8002fb6 <main+0x4e>
			  mode +=1;
 8003054:	4b03      	ldr	r3, [pc, #12]	; (8003064 <main+0xfc>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	b2da      	uxtb	r2, r3
 800305c:	4b01      	ldr	r3, [pc, #4]	; (8003064 <main+0xfc>)
 800305e:	701a      	strb	r2, [r3, #0]
	  if(mode == 0){
 8003060:	e7a9      	b.n	8002fb6 <main+0x4e>
 8003062:	bf00      	nop
 8003064:	20000093 	.word	0x20000093

08003068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800306c:	2000      	movs	r0, #0
 800306e:	f7ff ff39 	bl	8002ee4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8003072:	bf00      	nop
 8003074:	f7ff ff4a 	bl	8002f0c <LL_FLASH_GetLatency>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1fa      	bne.n	8003074 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800307e:	f7ff fe53 	bl	8002d28 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8003082:	bf00      	nop
 8003084:	f7ff fe60 	bl	8002d48 <LL_RCC_HSI_IsReady>
 8003088:	4603      	mov	r3, r0
 800308a:	2b01      	cmp	r3, #1
 800308c:	d1fa      	bne.n	8003084 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800308e:	2010      	movs	r0, #16
 8003090:	f7ff fe6c 	bl	8002d6c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003094:	2000      	movs	r0, #0
 8003096:	f7ff fea1 	bl	8002ddc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800309a:	2000      	movs	r0, #0
 800309c:	f7ff feb2 	bl	8002e04 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80030a0:	2000      	movs	r0, #0
 80030a2:	f7ff fec3 	bl	8002e2c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80030a6:	2000      	movs	r0, #0
 80030a8:	f7ff fe76 	bl	8002d98 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80030ac:	bf00      	nop
 80030ae:	f7ff fe87 	bl	8002dc0 <LL_RCC_GetSysClkSource>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1fa      	bne.n	80030ae <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80030b8:	4805      	ldr	r0, [pc, #20]	; (80030d0 <SystemClock_Config+0x68>)
 80030ba:	f001 fdc3 	bl	8004c44 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80030be:	4804      	ldr	r0, [pc, #16]	; (80030d0 <SystemClock_Config+0x68>)
 80030c0:	f001 fdf4 	bl	8004cac <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80030c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80030c8:	f7ff fec4 	bl	8002e54 <LL_RCC_SetI2CClockSource>
}
 80030cc:	bf00      	nop
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	007a1200 	.word	0x007a1200

080030d4 <printTemperature>:

/* USER CODE BEGIN 4 */
void printTemperature(void){
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
	char valueString[15];
	int16_t temperature = HTS221_Get_Temperature();
 80030da:	f7fd fe8a 	bl	8000df2 <HTS221_Get_Temperature>
 80030de:	4603      	mov	r3, r0
 80030e0:	82fb      	strh	r3, [r7, #22]
	sprintf(valueString, "%d", temperature);
 80030e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80030e6:	1d3b      	adds	r3, r7, #4
 80030e8:	493a      	ldr	r1, [pc, #232]	; (80031d4 <printTemperature+0x100>)
 80030ea:	4618      	mov	r0, r3
 80030ec:	f001 fe44 	bl	8004d78 <siprintf>
	memset(displayText, '\0', 15);
 80030f0:	220f      	movs	r2, #15
 80030f2:	2100      	movs	r1, #0
 80030f4:	4838      	ldr	r0, [pc, #224]	; (80031d8 <printTemperature+0x104>)
 80030f6:	f001 fe37 	bl	8004d68 <memset>
	strcat(displayText, "tEMP_");
 80030fa:	4837      	ldr	r0, [pc, #220]	; (80031d8 <printTemperature+0x104>)
 80030fc:	f7fd f868 	bl	80001d0 <strlen>
 8003100:	4603      	mov	r3, r0
 8003102:	461a      	mov	r2, r3
 8003104:	4b34      	ldr	r3, [pc, #208]	; (80031d8 <printTemperature+0x104>)
 8003106:	4413      	add	r3, r2
 8003108:	4a34      	ldr	r2, [pc, #208]	; (80031dc <printTemperature+0x108>)
 800310a:	6810      	ldr	r0, [r2, #0]
 800310c:	6018      	str	r0, [r3, #0]
 800310e:	8892      	ldrh	r2, [r2, #4]
 8003110:	809a      	strh	r2, [r3, #4]
	if(valueString[0]=='-'){
 8003112:	793b      	ldrb	r3, [r7, #4]
 8003114:	2b2d      	cmp	r3, #45	; 0x2d
 8003116:	d119      	bne.n	800314c <printTemperature+0x78>
		strncat(displayText, valueString, 3);
 8003118:	1d3b      	adds	r3, r7, #4
 800311a:	2203      	movs	r2, #3
 800311c:	4619      	mov	r1, r3
 800311e:	482e      	ldr	r0, [pc, #184]	; (80031d8 <printTemperature+0x104>)
 8003120:	f001 fe59 	bl	8004dd6 <strncat>
		strcat(displayText, ".");
 8003124:	482c      	ldr	r0, [pc, #176]	; (80031d8 <printTemperature+0x104>)
 8003126:	f7fd f853 	bl	80001d0 <strlen>
 800312a:	4603      	mov	r3, r0
 800312c:	461a      	mov	r2, r3
 800312e:	4b2a      	ldr	r3, [pc, #168]	; (80031d8 <printTemperature+0x104>)
 8003130:	4413      	add	r3, r2
 8003132:	492b      	ldr	r1, [pc, #172]	; (80031e0 <printTemperature+0x10c>)
 8003134:	461a      	mov	r2, r3
 8003136:	460b      	mov	r3, r1
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	8013      	strh	r3, [r2, #0]
		strncat(displayText, &valueString[3],1);
 800313c:	1d3b      	adds	r3, r7, #4
 800313e:	3303      	adds	r3, #3
 8003140:	2201      	movs	r2, #1
 8003142:	4619      	mov	r1, r3
 8003144:	4824      	ldr	r0, [pc, #144]	; (80031d8 <printTemperature+0x104>)
 8003146:	f001 fe46 	bl	8004dd6 <strncat>
 800314a:	e03c      	b.n	80031c6 <printTemperature+0xf2>
	}
	else if(temperature > 999){
 800314c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003150:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003154:	db0c      	blt.n	8003170 <printTemperature+0x9c>
		strcat(displayText, "99.9");
 8003156:	4820      	ldr	r0, [pc, #128]	; (80031d8 <printTemperature+0x104>)
 8003158:	f7fd f83a 	bl	80001d0 <strlen>
 800315c:	4603      	mov	r3, r0
 800315e:	461a      	mov	r2, r3
 8003160:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <printTemperature+0x104>)
 8003162:	4413      	add	r3, r2
 8003164:	4a1f      	ldr	r2, [pc, #124]	; (80031e4 <printTemperature+0x110>)
 8003166:	6810      	ldr	r0, [r2, #0]
 8003168:	6018      	str	r0, [r3, #0]
 800316a:	7912      	ldrb	r2, [r2, #4]
 800316c:	711a      	strb	r2, [r3, #4]
 800316e:	e02a      	b.n	80031c6 <printTemperature+0xf2>
	}
	else if(temperature < (-999)){
 8003170:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003174:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003178:	dc0c      	bgt.n	8003194 <printTemperature+0xc0>
		strcat(displayText, "-99.9");
 800317a:	4817      	ldr	r0, [pc, #92]	; (80031d8 <printTemperature+0x104>)
 800317c:	f7fd f828 	bl	80001d0 <strlen>
 8003180:	4603      	mov	r3, r0
 8003182:	461a      	mov	r2, r3
 8003184:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <printTemperature+0x104>)
 8003186:	4413      	add	r3, r2
 8003188:	4a17      	ldr	r2, [pc, #92]	; (80031e8 <printTemperature+0x114>)
 800318a:	6810      	ldr	r0, [r2, #0]
 800318c:	6018      	str	r0, [r3, #0]
 800318e:	8892      	ldrh	r2, [r2, #4]
 8003190:	809a      	strh	r2, [r3, #4]
 8003192:	e018      	b.n	80031c6 <printTemperature+0xf2>
	}
	else{
		strncat(displayText, valueString, 2);
 8003194:	1d3b      	adds	r3, r7, #4
 8003196:	2202      	movs	r2, #2
 8003198:	4619      	mov	r1, r3
 800319a:	480f      	ldr	r0, [pc, #60]	; (80031d8 <printTemperature+0x104>)
 800319c:	f001 fe1b 	bl	8004dd6 <strncat>
		strcat(displayText, ".");
 80031a0:	480d      	ldr	r0, [pc, #52]	; (80031d8 <printTemperature+0x104>)
 80031a2:	f7fd f815 	bl	80001d0 <strlen>
 80031a6:	4603      	mov	r3, r0
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <printTemperature+0x104>)
 80031ac:	4413      	add	r3, r2
 80031ae:	490c      	ldr	r1, [pc, #48]	; (80031e0 <printTemperature+0x10c>)
 80031b0:	461a      	mov	r2, r3
 80031b2:	460b      	mov	r3, r1
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	8013      	strh	r3, [r2, #0]
		strncat(displayText, &valueString[2],1);
 80031b8:	1d3b      	adds	r3, r7, #4
 80031ba:	3302      	adds	r3, #2
 80031bc:	2201      	movs	r2, #1
 80031be:	4619      	mov	r1, r3
 80031c0:	4805      	ldr	r0, [pc, #20]	; (80031d8 <printTemperature+0x104>)
 80031c2:	f001 fe08 	bl	8004dd6 <strncat>
	}
	setDisplayText(displayText);
 80031c6:	4804      	ldr	r0, [pc, #16]	; (80031d8 <printTemperature+0x104>)
 80031c8:	f7fd ff1a 	bl	8001000 <setDisplayText>
}
 80031cc:	bf00      	nop
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	08008178 	.word	0x08008178
 80031d8:	200000c0 	.word	0x200000c0
 80031dc:	0800817c 	.word	0x0800817c
 80031e0:	08008184 	.word	0x08008184
 80031e4:	08008188 	.word	0x08008188
 80031e8:	08008190 	.word	0x08008190

080031ec <printHumidity>:

void printHumidity(void){
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
	char valueString[15];
	int16_t humidity = HTS221_Get_Humidity();
 80031f2:	f7fd fe80 	bl	8000ef6 <HTS221_Get_Humidity>
 80031f6:	4603      	mov	r3, r0
 80031f8:	82fb      	strh	r3, [r7, #22]
	sprintf(valueString, "%d", humidity);
 80031fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	4910      	ldr	r1, [pc, #64]	; (8003244 <printHumidity+0x58>)
 8003202:	4618      	mov	r0, r3
 8003204:	f001 fdb8 	bl	8004d78 <siprintf>
	memset(displayText, '\0', 15);
 8003208:	220f      	movs	r2, #15
 800320a:	2100      	movs	r1, #0
 800320c:	480e      	ldr	r0, [pc, #56]	; (8003248 <printHumidity+0x5c>)
 800320e:	f001 fdab 	bl	8004d68 <memset>
	strcat(displayText, "HUM_");
 8003212:	480d      	ldr	r0, [pc, #52]	; (8003248 <printHumidity+0x5c>)
 8003214:	f7fc ffdc 	bl	80001d0 <strlen>
 8003218:	4603      	mov	r3, r0
 800321a:	461a      	mov	r2, r3
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <printHumidity+0x5c>)
 800321e:	4413      	add	r3, r2
 8003220:	4a0a      	ldr	r2, [pc, #40]	; (800324c <printHumidity+0x60>)
 8003222:	6810      	ldr	r0, [r2, #0]
 8003224:	6018      	str	r0, [r3, #0]
 8003226:	7912      	ldrb	r2, [r2, #4]
 8003228:	711a      	strb	r2, [r3, #4]
	strncat(displayText, valueString, 2);
 800322a:	1d3b      	adds	r3, r7, #4
 800322c:	2202      	movs	r2, #2
 800322e:	4619      	mov	r1, r3
 8003230:	4805      	ldr	r0, [pc, #20]	; (8003248 <printHumidity+0x5c>)
 8003232:	f001 fdd0 	bl	8004dd6 <strncat>
	setDisplayText(displayText);
 8003236:	4804      	ldr	r0, [pc, #16]	; (8003248 <printHumidity+0x5c>)
 8003238:	f7fd fee2 	bl	8001000 <setDisplayText>
}
 800323c:	bf00      	nop
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	08008178 	.word	0x08008178
 8003248:	200000c0 	.word	0x200000c0
 800324c:	08008198 	.word	0x08008198

08003250 <printPressure>:

void printPressure(void){
 8003250:	b5b0      	push	{r4, r5, r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
	char valueString[15];
	float pressure = 0;
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
	pressure = (float)get_pressure();
 800325c:	f7fd fd2c 	bl	8000cb8 <get_pressure>
 8003260:	ed87 0a05 	vstr	s0, [r7, #20]
	gcvt(pressure, 6, valueString);
 8003264:	6978      	ldr	r0, [r7, #20]
 8003266:	f7fd f96f 	bl	8000548 <__aeabi_f2d>
 800326a:	4604      	mov	r4, r0
 800326c:	460d      	mov	r5, r1
 800326e:	1d3b      	adds	r3, r7, #4
 8003270:	4619      	mov	r1, r3
 8003272:	2006      	movs	r0, #6
 8003274:	ec45 4b10 	vmov	d0, r4, r5
 8003278:	f001 fd28 	bl	8004ccc <gcvt>
	memset(displayText, '\0', 15);
 800327c:	220f      	movs	r2, #15
 800327e:	2100      	movs	r1, #0
 8003280:	480d      	ldr	r0, [pc, #52]	; (80032b8 <printPressure+0x68>)
 8003282:	f001 fd71 	bl	8004d68 <memset>
	strcat(displayText, "bar_");
 8003286:	480c      	ldr	r0, [pc, #48]	; (80032b8 <printPressure+0x68>)
 8003288:	f7fc ffa2 	bl	80001d0 <strlen>
 800328c:	4603      	mov	r3, r0
 800328e:	461a      	mov	r2, r3
 8003290:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <printPressure+0x68>)
 8003292:	4413      	add	r3, r2
 8003294:	4a09      	ldr	r2, [pc, #36]	; (80032bc <printPressure+0x6c>)
 8003296:	6810      	ldr	r0, [r2, #0]
 8003298:	6018      	str	r0, [r3, #0]
 800329a:	7912      	ldrb	r2, [r2, #4]
 800329c:	711a      	strb	r2, [r3, #4]
	strcat(displayText, valueString);
 800329e:	1d3b      	adds	r3, r7, #4
 80032a0:	4619      	mov	r1, r3
 80032a2:	4805      	ldr	r0, [pc, #20]	; (80032b8 <printPressure+0x68>)
 80032a4:	f001 fd88 	bl	8004db8 <strcat>
	setDisplayText(displayText);
 80032a8:	4803      	ldr	r0, [pc, #12]	; (80032b8 <printPressure+0x68>)
 80032aa:	f7fd fea9 	bl	8001000 <setDisplayText>
}
 80032ae:	bf00      	nop
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bdb0      	pop	{r4, r5, r7, pc}
 80032b6:	bf00      	nop
 80032b8:	200000c0 	.word	0x200000c0
 80032bc:	080081a0 	.word	0x080081a0

080032c0 <printAltitude>:

void printAltitude(void){
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af00      	add	r7, sp, #0
	char valueString[15];
	int16_t temperature = HTS221_Get_Temperature();
 80032c6:	f7fd fd94 	bl	8000df2 <HTS221_Get_Temperature>
 80032ca:	4603      	mov	r3, r0
 80032cc:	84fb      	strh	r3, [r7, #38]	; 0x26
	float pressure = (float)get_pressure();
 80032ce:	f7fd fcf3 	bl	8000cb8 <get_pressure>
 80032d2:	ed87 0a08 	vstr	s0, [r7, #32]

	float tempVar1 = powf((1013.25/pressure),1/5.257)-1;
 80032d6:	eddf 6a68 	vldr	s13, [pc, #416]	; 8003478 <printAltitude+0x1b8>
 80032da:	edd7 7a08 	vldr	s15, [r7, #32]
 80032de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032e2:	eddf 0a66 	vldr	s1, [pc, #408]	; 800347c <printAltitude+0x1bc>
 80032e6:	eeb0 0a47 	vmov.f32	s0, s14
 80032ea:	f004 faf5 	bl	80078d8 <powf>
 80032ee:	eef0 7a40 	vmov.f32	s15, s0
 80032f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032fa:	edc7 7a07 	vstr	s15, [r7, #28]
	float tempVar2 = (float)temperature/10+273.15;
 80032fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800330a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800330e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003312:	ee16 0a90 	vmov	r0, s13
 8003316:	f7fd f917 	bl	8000548 <__aeabi_f2d>
 800331a:	a353      	add	r3, pc, #332	; (adr r3, 8003468 <printAltitude+0x1a8>)
 800331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003320:	f7fc ffb4 	bl	800028c <__adddf3>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4610      	mov	r0, r2
 800332a:	4619      	mov	r1, r3
 800332c:	f7fd fc26 	bl	8000b7c <__aeabi_d2f>
 8003330:	4603      	mov	r3, r0
 8003332:	61bb      	str	r3, [r7, #24]
	float altitude = (tempVar1*tempVar2)/0.0065;
 8003334:	ed97 7a07 	vldr	s14, [r7, #28]
 8003338:	edd7 7a06 	vldr	s15, [r7, #24]
 800333c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003340:	ee17 0a90 	vmov	r0, s15
 8003344:	f7fd f900 	bl	8000548 <__aeabi_f2d>
 8003348:	a349      	add	r3, pc, #292	; (adr r3, 8003470 <printAltitude+0x1b0>)
 800334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334e:	f7fd fa7d 	bl	800084c <__aeabi_ddiv>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4610      	mov	r0, r2
 8003358:	4619      	mov	r1, r3
 800335a:	f7fd fc0f 	bl	8000b7c <__aeabi_d2f>
 800335e:	4603      	mov	r3, r0
 8003360:	617b      	str	r3, [r7, #20]

	memset(displayText, '\0', 15);
 8003362:	220f      	movs	r2, #15
 8003364:	2100      	movs	r1, #0
 8003366:	4846      	ldr	r0, [pc, #280]	; (8003480 <printAltitude+0x1c0>)
 8003368:	f001 fcfe 	bl	8004d68 <memset>
	int altitudeInt = (int)floor(10*altitude);
 800336c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003370:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003378:	ee17 0a90 	vmov	r0, s15
 800337c:	f7fd f8e4 	bl	8000548 <__aeabi_f2d>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	ec43 2b10 	vmov	d0, r2, r3
 8003388:	f004 fa26 	bl	80077d8 <floor>
 800338c:	ec53 2b10 	vmov	r2, r3, d0
 8003390:	4610      	mov	r0, r2
 8003392:	4619      	mov	r1, r3
 8003394:	f7fd fbca 	bl	8000b2c <__aeabi_d2iz>
 8003398:	4603      	mov	r3, r0
 800339a:	613b      	str	r3, [r7, #16]
	if(altitudeInt>=0){
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	db2b      	blt.n	80033fa <printAltitude+0x13a>
		sprintf(valueString, "%05d", altitudeInt);
 80033a2:	463b      	mov	r3, r7
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4937      	ldr	r1, [pc, #220]	; (8003484 <printAltitude+0x1c4>)
 80033a8:	4618      	mov	r0, r3
 80033aa:	f001 fce5 	bl	8004d78 <siprintf>
		strcat(displayText, "ALt_");
 80033ae:	4834      	ldr	r0, [pc, #208]	; (8003480 <printAltitude+0x1c0>)
 80033b0:	f7fc ff0e 	bl	80001d0 <strlen>
 80033b4:	4603      	mov	r3, r0
 80033b6:	461a      	mov	r2, r3
 80033b8:	4b31      	ldr	r3, [pc, #196]	; (8003480 <printAltitude+0x1c0>)
 80033ba:	4413      	add	r3, r2
 80033bc:	4a32      	ldr	r2, [pc, #200]	; (8003488 <printAltitude+0x1c8>)
 80033be:	6810      	ldr	r0, [r2, #0]
 80033c0:	6018      	str	r0, [r3, #0]
 80033c2:	7912      	ldrb	r2, [r2, #4]
 80033c4:	711a      	strb	r2, [r3, #4]
		strncat(displayText, valueString, 4);
 80033c6:	463b      	mov	r3, r7
 80033c8:	2204      	movs	r2, #4
 80033ca:	4619      	mov	r1, r3
 80033cc:	482c      	ldr	r0, [pc, #176]	; (8003480 <printAltitude+0x1c0>)
 80033ce:	f001 fd02 	bl	8004dd6 <strncat>
		strcat(displayText, ".");
 80033d2:	482b      	ldr	r0, [pc, #172]	; (8003480 <printAltitude+0x1c0>)
 80033d4:	f7fc fefc 	bl	80001d0 <strlen>
 80033d8:	4603      	mov	r3, r0
 80033da:	461a      	mov	r2, r3
 80033dc:	4b28      	ldr	r3, [pc, #160]	; (8003480 <printAltitude+0x1c0>)
 80033de:	4413      	add	r3, r2
 80033e0:	492a      	ldr	r1, [pc, #168]	; (800348c <printAltitude+0x1cc>)
 80033e2:	461a      	mov	r2, r3
 80033e4:	460b      	mov	r3, r1
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	8013      	strh	r3, [r2, #0]
		strncat(displayText, &valueString[4],1);
 80033ea:	463b      	mov	r3, r7
 80033ec:	3304      	adds	r3, #4
 80033ee:	2201      	movs	r2, #1
 80033f0:	4619      	mov	r1, r3
 80033f2:	4823      	ldr	r0, [pc, #140]	; (8003480 <printAltitude+0x1c0>)
 80033f4:	f001 fcef 	bl	8004dd6 <strncat>
 80033f8:	e02d      	b.n	8003456 <printAltitude+0x196>
	}
	else if(altitudeInt<0){
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	da2a      	bge.n	8003456 <printAltitude+0x196>
		sprintf(valueString, "%06d", altitudeInt);
 8003400:	463b      	mov	r3, r7
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4922      	ldr	r1, [pc, #136]	; (8003490 <printAltitude+0x1d0>)
 8003406:	4618      	mov	r0, r3
 8003408:	f001 fcb6 	bl	8004d78 <siprintf>
		strcat(displayText, "ALt_");
 800340c:	481c      	ldr	r0, [pc, #112]	; (8003480 <printAltitude+0x1c0>)
 800340e:	f7fc fedf 	bl	80001d0 <strlen>
 8003412:	4603      	mov	r3, r0
 8003414:	461a      	mov	r2, r3
 8003416:	4b1a      	ldr	r3, [pc, #104]	; (8003480 <printAltitude+0x1c0>)
 8003418:	4413      	add	r3, r2
 800341a:	4a1b      	ldr	r2, [pc, #108]	; (8003488 <printAltitude+0x1c8>)
 800341c:	6810      	ldr	r0, [r2, #0]
 800341e:	6018      	str	r0, [r3, #0]
 8003420:	7912      	ldrb	r2, [r2, #4]
 8003422:	711a      	strb	r2, [r3, #4]
		strncat(displayText, valueString, 5);
 8003424:	463b      	mov	r3, r7
 8003426:	2205      	movs	r2, #5
 8003428:	4619      	mov	r1, r3
 800342a:	4815      	ldr	r0, [pc, #84]	; (8003480 <printAltitude+0x1c0>)
 800342c:	f001 fcd3 	bl	8004dd6 <strncat>
		strcat(displayText, ".");
 8003430:	4813      	ldr	r0, [pc, #76]	; (8003480 <printAltitude+0x1c0>)
 8003432:	f7fc fecd 	bl	80001d0 <strlen>
 8003436:	4603      	mov	r3, r0
 8003438:	461a      	mov	r2, r3
 800343a:	4b11      	ldr	r3, [pc, #68]	; (8003480 <printAltitude+0x1c0>)
 800343c:	4413      	add	r3, r2
 800343e:	4913      	ldr	r1, [pc, #76]	; (800348c <printAltitude+0x1cc>)
 8003440:	461a      	mov	r2, r3
 8003442:	460b      	mov	r3, r1
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	8013      	strh	r3, [r2, #0]
		strncat(displayText, &valueString[5],1);
 8003448:	463b      	mov	r3, r7
 800344a:	3305      	adds	r3, #5
 800344c:	2201      	movs	r2, #1
 800344e:	4619      	mov	r1, r3
 8003450:	480b      	ldr	r0, [pc, #44]	; (8003480 <printAltitude+0x1c0>)
 8003452:	f001 fcc0 	bl	8004dd6 <strncat>
	}
	setDisplayText(displayText);
 8003456:	480a      	ldr	r0, [pc, #40]	; (8003480 <printAltitude+0x1c0>)
 8003458:	f7fd fdd2 	bl	8001000 <setDisplayText>
}
 800345c:	bf00      	nop
 800345e:	3728      	adds	r7, #40	; 0x28
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	f3af 8000 	nop.w
 8003468:	66666666 	.word	0x66666666
 800346c:	40711266 	.word	0x40711266
 8003470:	76c8b439 	.word	0x76c8b439
 8003474:	3f7a9fbe 	.word	0x3f7a9fbe
 8003478:	447d5000 	.word	0x447d5000
 800347c:	3e42c9b4 	.word	0x3e42c9b4
 8003480:	200000c0 	.word	0x200000c0
 8003484:	080081a8 	.word	0x080081a8
 8003488:	080081b0 	.word	0x080081b0
 800348c:	08008184 	.word	0x08008184
 8003490:	080081b8 	.word	0x080081b8

08003494 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800349c:	4b07      	ldr	r3, [pc, #28]	; (80034bc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4013      	ands	r3, r2
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	bf0c      	ite	eq
 80034aa:	2301      	moveq	r3, #1
 80034ac:	2300      	movne	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	40010400 	.word	0x40010400

080034c0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80034c8:	4a04      	ldr	r2, [pc, #16]	; (80034dc <LL_EXTI_ClearFlag_0_31+0x1c>)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6153      	str	r3, [r2, #20]
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40010400 	.word	0x40010400

080034e0 <LL_TIM_ClearFlag_UPDATE>:
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f06f 0201 	mvn.w	r2, #1
 80034ee:	611a      	str	r2, [r3, #16]
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <LL_TIM_IsActiveFlag_UPDATE>:
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003522:	b480      	push	{r7}
 8003524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003526:	e7fe      	b.n	8003526 <NMI_Handler+0x4>

08003528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800352c:	e7fe      	b.n	800352c <HardFault_Handler+0x4>

0800352e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800352e:	b480      	push	{r7}
 8003530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003532:	e7fe      	b.n	8003532 <MemManage_Handler+0x4>

08003534 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003538:	e7fe      	b.n	8003538 <BusFault_Handler+0x4>

0800353a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800353a:	b480      	push	{r7}
 800353c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800353e:	e7fe      	b.n	800353e <UsageFault_Handler+0x4>

08003540 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800354e:	b480      	push	{r7}
 8003550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003552:	bf00      	nop
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 800357c:	2008      	movs	r0, #8
 800357e:	f7ff ff89 	bl	8003494 <LL_EXTI_IsActiveFlag_0_31>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01d      	beq.n	80035c4 <EXTI3_IRQHandler+0x4c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8003588:	2008      	movs	r0, #8
 800358a:	f7ff ff99 	bl	80034c0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_3 */
    if(mode == 3){
 800358e:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <EXTI3_IRQHandler+0x50>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b03      	cmp	r3, #3
 8003594:	d106      	bne.n	80035a4 <EXTI3_IRQHandler+0x2c>
		mode = 0;
 8003596:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <EXTI3_IRQHandler+0x50>)
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
		displayTextPos = 0;
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <EXTI3_IRQHandler+0x54>)
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	e008      	b.n	80035b6 <EXTI3_IRQHandler+0x3e>
	}
    else{
		mode++;
 80035a4:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <EXTI3_IRQHandler+0x50>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	3301      	adds	r3, #1
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <EXTI3_IRQHandler+0x50>)
 80035ae:	701a      	strb	r2, [r3, #0]
		displayTextPos = 0;
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <EXTI3_IRQHandler+0x54>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]
	}
	LL_mDelay(500);
 80035b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035ba:	f001 fb51 	bl	8004c60 <LL_mDelay>
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 80035be:	2008      	movs	r0, #8
 80035c0:	f7ff ff7e 	bl	80034c0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80035c4:	bf00      	nop
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20000093 	.word	0x20000093
 80035cc:	2000008c 	.word	0x2000008c

080035d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 80035d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80035d8:	f7ff ff90 	bl	80034fc <LL_TIM_IsActiveFlag_UPDATE>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <TIM2_IRQHandler+0x16>
		updateDisplay();
 80035e2:	f7fd fd21 	bl	8001028 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM2);
 80035e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80035ea:	f7ff ff79 	bl	80034e0 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035f2:	b480      	push	{r7}
 80035f4:	af00      	add	r7, sp, #0
	return 1;
 80035f6:	2301      	movs	r3, #1
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <_kill>:

int _kill(int pid, int sig)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800360c:	f001 fb82 	bl	8004d14 <__errno>
 8003610:	4603      	mov	r3, r0
 8003612:	2216      	movs	r2, #22
 8003614:	601a      	str	r2, [r3, #0]
	return -1;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <_exit>:

void _exit (int status)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800362a:	f04f 31ff 	mov.w	r1, #4294967295
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ffe7 	bl	8003602 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003634:	e7fe      	b.n	8003634 <_exit+0x12>

08003636 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b086      	sub	sp, #24
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	e00a      	b.n	800365e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003648:	f3af 8000 	nop.w
 800364c:	4601      	mov	r1, r0
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	60ba      	str	r2, [r7, #8]
 8003654:	b2ca      	uxtb	r2, r1
 8003656:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	3301      	adds	r3, #1
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	429a      	cmp	r2, r3
 8003664:	dbf0      	blt.n	8003648 <_read+0x12>
	}

return len;
 8003666:	687b      	ldr	r3, [r7, #4]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	e009      	b.n	8003696 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	60ba      	str	r2, [r7, #8]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	3301      	adds	r3, #1
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	429a      	cmp	r2, r3
 800369c:	dbf1      	blt.n	8003682 <_write+0x12>
	}
	return len;
 800369e:	687b      	ldr	r3, [r7, #4]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <_close>:

int _close(int file)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	return -1;
 80036b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036d0:	605a      	str	r2, [r3, #4]
	return 0;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <_isatty>:

int _isatty(int file)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	return 1;
 80036e8:	2301      	movs	r3, #1
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b085      	sub	sp, #20
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
	return 0;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003718:	4a14      	ldr	r2, [pc, #80]	; (800376c <_sbrk+0x5c>)
 800371a:	4b15      	ldr	r3, [pc, #84]	; (8003770 <_sbrk+0x60>)
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003724:	4b13      	ldr	r3, [pc, #76]	; (8003774 <_sbrk+0x64>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <_sbrk+0x64>)
 800372e:	4a12      	ldr	r2, [pc, #72]	; (8003778 <_sbrk+0x68>)
 8003730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <_sbrk+0x64>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4413      	add	r3, r2
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	429a      	cmp	r2, r3
 800373e:	d207      	bcs.n	8003750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003740:	f001 fae8 	bl	8004d14 <__errno>
 8003744:	4603      	mov	r3, r0
 8003746:	220c      	movs	r2, #12
 8003748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800374a:	f04f 33ff 	mov.w	r3, #4294967295
 800374e:	e009      	b.n	8003764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003750:	4b08      	ldr	r3, [pc, #32]	; (8003774 <_sbrk+0x64>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <_sbrk+0x64>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	4a05      	ldr	r2, [pc, #20]	; (8003774 <_sbrk+0x64>)
 8003760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003762:	68fb      	ldr	r3, [r7, #12]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20003000 	.word	0x20003000
 8003770:	00000400 	.word	0x00000400
 8003774:	20000094 	.word	0x20000094
 8003778:	200000f0 	.word	0x200000f0

0800377c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <SystemInit+0x20>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003786:	4a05      	ldr	r2, [pc, #20]	; (800379c <SystemInit+0x20>)
 8003788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800378c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003790:	bf00      	nop
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	e000ed00 	.word	0xe000ed00

080037a0 <__NVIC_GetPriorityGrouping>:
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a4:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <__NVIC_GetPriorityGrouping+0x18>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	0a1b      	lsrs	r3, r3, #8
 80037aa:	f003 0307 	and.w	r3, r3, #7
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <__NVIC_EnableIRQ>:
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	db0b      	blt.n	80037e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	f003 021f 	and.w	r2, r3, #31
 80037d4:	4907      	ldr	r1, [pc, #28]	; (80037f4 <__NVIC_EnableIRQ+0x38>)
 80037d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	2001      	movs	r0, #1
 80037de:	fa00 f202 	lsl.w	r2, r0, r2
 80037e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	e000e100 	.word	0xe000e100

080037f8 <__NVIC_SetPriority>:
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	6039      	str	r1, [r7, #0]
 8003802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003808:	2b00      	cmp	r3, #0
 800380a:	db0a      	blt.n	8003822 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	b2da      	uxtb	r2, r3
 8003810:	490c      	ldr	r1, [pc, #48]	; (8003844 <__NVIC_SetPriority+0x4c>)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	0112      	lsls	r2, r2, #4
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	440b      	add	r3, r1
 800381c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003820:	e00a      	b.n	8003838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	b2da      	uxtb	r2, r3
 8003826:	4908      	ldr	r1, [pc, #32]	; (8003848 <__NVIC_SetPriority+0x50>)
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	3b04      	subs	r3, #4
 8003830:	0112      	lsls	r2, r2, #4
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	440b      	add	r3, r1
 8003836:	761a      	strb	r2, [r3, #24]
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	e000e100 	.word	0xe000e100
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <NVIC_EncodePriority>:
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	; 0x24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f1c3 0307 	rsb	r3, r3, #7
 8003866:	2b04      	cmp	r3, #4
 8003868:	bf28      	it	cs
 800386a:	2304      	movcs	r3, #4
 800386c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3304      	adds	r3, #4
 8003872:	2b06      	cmp	r3, #6
 8003874:	d902      	bls.n	800387c <NVIC_EncodePriority+0x30>
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3b03      	subs	r3, #3
 800387a:	e000      	b.n	800387e <NVIC_EncodePriority+0x32>
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003880:	f04f 32ff 	mov.w	r2, #4294967295
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43da      	mvns	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	401a      	ands	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003894:	f04f 31ff 	mov.w	r1, #4294967295
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	fa01 f303 	lsl.w	r3, r1, r3
 800389e:	43d9      	mvns	r1, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a4:	4313      	orrs	r3, r2
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3724      	adds	r7, #36	; 0x24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <LL_APB1_GRP1_EnableClock>:
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80038bc:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80038be:	69da      	ldr	r2, [r3, #28]
 80038c0:	4907      	ldr	r1, [pc, #28]	; (80038e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80038ca:	69da      	ldr	r2, [r3, #28]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4013      	ands	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038d2:	68fb      	ldr	r3, [r7, #12]
}
 80038d4:	bf00      	nop
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	40021000 	.word	0x40021000

080038e4 <LL_TIM_DisableARRPreload>:
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	601a      	str	r2, [r3, #0]
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <LL_TIM_OC_DisableFast>:
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d028      	beq.n	8003966 <LL_TIM_OC_DisableFast+0x62>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b04      	cmp	r3, #4
 8003918:	d023      	beq.n	8003962 <LL_TIM_OC_DisableFast+0x5e>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b10      	cmp	r3, #16
 800391e:	d01e      	beq.n	800395e <LL_TIM_OC_DisableFast+0x5a>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d019      	beq.n	800395a <LL_TIM_OC_DisableFast+0x56>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800392c:	d013      	beq.n	8003956 <LL_TIM_OC_DisableFast+0x52>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003934:	d00d      	beq.n	8003952 <LL_TIM_OC_DisableFast+0x4e>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800393c:	d007      	beq.n	800394e <LL_TIM_OC_DisableFast+0x4a>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003944:	d101      	bne.n	800394a <LL_TIM_OC_DisableFast+0x46>
 8003946:	2307      	movs	r3, #7
 8003948:	e00e      	b.n	8003968 <LL_TIM_OC_DisableFast+0x64>
 800394a:	2308      	movs	r3, #8
 800394c:	e00c      	b.n	8003968 <LL_TIM_OC_DisableFast+0x64>
 800394e:	2306      	movs	r3, #6
 8003950:	e00a      	b.n	8003968 <LL_TIM_OC_DisableFast+0x64>
 8003952:	2305      	movs	r3, #5
 8003954:	e008      	b.n	8003968 <LL_TIM_OC_DisableFast+0x64>
 8003956:	2304      	movs	r3, #4
 8003958:	e006      	b.n	8003968 <LL_TIM_OC_DisableFast+0x64>
 800395a:	2303      	movs	r3, #3
 800395c:	e004      	b.n	8003968 <LL_TIM_OC_DisableFast+0x64>
 800395e:	2302      	movs	r3, #2
 8003960:	e002      	b.n	8003968 <LL_TIM_OC_DisableFast+0x64>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <LL_TIM_OC_DisableFast+0x64>
 8003966:	2300      	movs	r3, #0
 8003968:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3318      	adds	r3, #24
 800396e:	4619      	mov	r1, r3
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	4a0b      	ldr	r2, [pc, #44]	; (80039a0 <LL_TIM_OC_DisableFast+0x9c>)
 8003974:	5cd3      	ldrb	r3, [r2, r3]
 8003976:	440b      	add	r3, r1
 8003978:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	4908      	ldr	r1, [pc, #32]	; (80039a4 <LL_TIM_OC_DisableFast+0xa0>)
 8003982:	5ccb      	ldrb	r3, [r1, r3]
 8003984:	4619      	mov	r1, r3
 8003986:	2304      	movs	r3, #4
 8003988:	408b      	lsls	r3, r1
 800398a:	43db      	mvns	r3, r3
 800398c:	401a      	ands	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	601a      	str	r2, [r3, #0]
}
 8003992:	bf00      	nop
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	080081c0 	.word	0x080081c0
 80039a4:	080081cc 	.word	0x080081cc

080039a8 <LL_TIM_SetClockSource>:
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80039ba:	f023 0307 	bic.w	r3, r3, #7
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	609a      	str	r2, [r3, #8]
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <LL_TIM_SetTriggerOutput>:
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	605a      	str	r2, [r3, #4]
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <LL_TIM_DisableMasterSlaveMode>:
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	609a      	str	r2, [r3, #8]
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08e      	sub	sp, #56	; 0x38
 8003a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	605a      	str	r2, [r3, #4]
 8003a28:	609a      	str	r2, [r3, #8]
 8003a2a:	60da      	str	r2, [r3, #12]
 8003a2c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003a2e:	1d3b      	adds	r3, r7, #4
 8003a30:	2220      	movs	r2, #32
 8003a32:	2100      	movs	r1, #0
 8003a34:	4618      	mov	r0, r3
 8003a36:	f001 f997 	bl	8004d68 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	f7ff ff3a 	bl	80038b4 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003a40:	f7ff feae 	bl	80037a0 <__NVIC_GetPriorityGrouping>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2200      	movs	r2, #0
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff fefe 	bl	800384c <NVIC_EncodePriority>
 8003a50:	4603      	mov	r3, r0
 8003a52:	4619      	mov	r1, r3
 8003a54:	201c      	movs	r0, #28
 8003a56:	f7ff fecf 	bl	80037f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8003a5a:	201c      	movs	r0, #28
 8003a5c:	f7ff feae 	bl	80037bc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8003a60:	f240 331f 	movw	r3, #799	; 0x31f
 8003a64:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003a66:	2300      	movs	r3, #0
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 49;
 8003a6a:	2331      	movs	r3, #49	; 0x31
 8003a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8003a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a76:	4619      	mov	r1, r3
 8003a78:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a7c:	f000 fd5e 	bl	800453c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8003a80:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a84:	f7ff ff2e 	bl	80038e4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003a88:	2100      	movs	r1, #0
 8003a8a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a8e:	f7ff ff8b 	bl	80039a8 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8003a92:	2300      	movs	r3, #0
 8003a94:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003aa6:	1d3b      	adds	r3, r7, #4
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2101      	movs	r1, #1
 8003aac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003ab0:	f000 fdb6 	bl	8004620 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003aba:	f7ff ff23 	bl	8003904 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8003abe:	2100      	movs	r1, #0
 8003ac0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003ac4:	f7ff ff85 	bl	80039d2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8003ac8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003acc:	f7ff ff94 	bl	80039f8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003ad0:	bf00      	nop
 8003ad2:	3738      	adds	r7, #56	; 0x38
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003adc:	480d      	ldr	r0, [pc, #52]	; (8003b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ade:	490e      	ldr	r1, [pc, #56]	; (8003b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ae0:	4a0e      	ldr	r2, [pc, #56]	; (8003b1c <LoopForever+0xe>)
  movs r3, #0
 8003ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ae4:	e002      	b.n	8003aec <LoopCopyDataInit>

08003ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aea:	3304      	adds	r3, #4

08003aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003af0:	d3f9      	bcc.n	8003ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003af2:	4a0b      	ldr	r2, [pc, #44]	; (8003b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003af4:	4c0b      	ldr	r4, [pc, #44]	; (8003b24 <LoopForever+0x16>)
  movs r3, #0
 8003af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003af8:	e001      	b.n	8003afe <LoopFillZerobss>

08003afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003afc:	3204      	adds	r2, #4

08003afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b00:	d3fb      	bcc.n	8003afa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b02:	f7ff fe3b 	bl	800377c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b06:	f001 f90b 	bl	8004d20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b0a:	f7ff fa2d 	bl	8002f68 <main>

08003b0e <LoopForever>:

LoopForever:
    b LoopForever
 8003b0e:	e7fe      	b.n	8003b0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003b10:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8003b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003b1c:	080084cc 	.word	0x080084cc
  ldr r2, =_sbss
 8003b20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003b24:	200000ec 	.word	0x200000ec

08003b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b28:	e7fe      	b.n	8003b28 <ADC1_2_IRQHandler>
	...

08003b2c <LL_EXTI_EnableIT_0_31>:
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <LL_EXTI_EnableIT_0_31+0x20>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	4904      	ldr	r1, [pc, #16]	; (8003b4c <LL_EXTI_EnableIT_0_31+0x20>)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	600b      	str	r3, [r1, #0]
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	40010400 	.word	0x40010400

08003b50 <LL_EXTI_EnableIT_32_63>:
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <LL_EXTI_EnableIT_32_63+0x20>)
 8003b5a:	6a1a      	ldr	r2, [r3, #32]
 8003b5c:	4904      	ldr	r1, [pc, #16]	; (8003b70 <LL_EXTI_EnableIT_32_63+0x20>)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	620b      	str	r3, [r1, #32]
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	40010400 	.word	0x40010400

08003b74 <LL_EXTI_DisableIT_0_31>:
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <LL_EXTI_DisableIT_0_31+0x24>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	43db      	mvns	r3, r3
 8003b84:	4904      	ldr	r1, [pc, #16]	; (8003b98 <LL_EXTI_DisableIT_0_31+0x24>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40010400 	.word	0x40010400

08003b9c <LL_EXTI_DisableIT_32_63>:
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <LL_EXTI_DisableIT_32_63+0x24>)
 8003ba6:	6a1a      	ldr	r2, [r3, #32]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	43db      	mvns	r3, r3
 8003bac:	4904      	ldr	r1, [pc, #16]	; (8003bc0 <LL_EXTI_DisableIT_32_63+0x24>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	620b      	str	r3, [r1, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40010400 	.word	0x40010400

08003bc4 <LL_EXTI_EnableEvent_0_31>:
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	4904      	ldr	r1, [pc, #16]	; (8003be4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	40010400 	.word	0x40010400

08003be8 <LL_EXTI_EnableEvent_32_63>:
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003bf0:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003bf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bf4:	4904      	ldr	r1, [pc, #16]	; (8003c08 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	40010400 	.word	0x40010400

08003c0c <LL_EXTI_DisableEvent_0_31>:
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003c14:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	4904      	ldr	r1, [pc, #16]	; (8003c30 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	604b      	str	r3, [r1, #4]
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40010400 	.word	0x40010400

08003c34 <LL_EXTI_DisableEvent_32_63>:
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003c3c:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	43db      	mvns	r3, r3
 8003c44:	4904      	ldr	r1, [pc, #16]	; (8003c58 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40010400 	.word	0x40010400

08003c5c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003c64:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	4904      	ldr	r1, [pc, #16]	; (8003c7c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	608b      	str	r3, [r1, #8]
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	40010400 	.word	0x40010400

08003c80 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003c8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c8c:	4904      	ldr	r1, [pc, #16]	; (8003ca0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	40010400 	.word	0x40010400

08003ca4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003cac:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	4904      	ldr	r1, [pc, #16]	; (8003cc8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40010400 	.word	0x40010400

08003ccc <LL_EXTI_DisableRisingTrig_32_63>:
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003cd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	4904      	ldr	r1, [pc, #16]	; (8003cf0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40010400 	.word	0x40010400

08003cf4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	4904      	ldr	r1, [pc, #16]	; (8003d14 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60cb      	str	r3, [r1, #12]
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	40010400 	.word	0x40010400

08003d18 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d24:	4904      	ldr	r1, [pc, #16]	; (8003d38 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	40010400 	.word	0x40010400

08003d3c <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003d44:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	4904      	ldr	r1, [pc, #16]	; (8003d60 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	60cb      	str	r3, [r1, #12]
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40010400 	.word	0x40010400

08003d64 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003d6c:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	43db      	mvns	r3, r3
 8003d74:	4904      	ldr	r1, [pc, #16]	; (8003d88 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40010400 	.word	0x40010400

08003d8c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8003d94:	2300      	movs	r3, #0
 8003d96:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	7a1b      	ldrb	r3, [r3, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 80cd 	beq.w	8003f3c <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d061      	beq.n	8003e6e <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	7a5b      	ldrb	r3, [r3, #9]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d01c      	beq.n	8003dec <LL_EXTI_Init+0x60>
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	dc25      	bgt.n	8003e02 <LL_EXTI_Init+0x76>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <LL_EXTI_Init+0x34>
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d00b      	beq.n	8003dd6 <LL_EXTI_Init+0x4a>
 8003dbe:	e020      	b.n	8003e02 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ff21 	bl	8003c0c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff feac 	bl	8003b2c <LL_EXTI_EnableIT_0_31>
          break;
 8003dd4:	e018      	b.n	8003e08 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff feca 	bl	8003b74 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff feed 	bl	8003bc4 <LL_EXTI_EnableEvent_0_31>
          break;
 8003dea:	e00d      	b.n	8003e08 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fe9b 	bl	8003b2c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff fee2 	bl	8003bc4 <LL_EXTI_EnableEvent_0_31>
          break;
 8003e00:	e002      	b.n	8003e08 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
          break;
 8003e06:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	7a9b      	ldrb	r3, [r3, #10]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d02e      	beq.n	8003e6e <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	7a9b      	ldrb	r3, [r3, #10]
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d01c      	beq.n	8003e52 <LL_EXTI_Init+0xc6>
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	dc25      	bgt.n	8003e68 <LL_EXTI_Init+0xdc>
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d002      	beq.n	8003e26 <LL_EXTI_Init+0x9a>
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d00b      	beq.n	8003e3c <LL_EXTI_Init+0xb0>
 8003e24:	e020      	b.n	8003e68 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ff86 	bl	8003d3c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff ff11 	bl	8003c5c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003e3a:	e019      	b.n	8003e70 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ff2f 	bl	8003ca4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff ff52 	bl	8003cf4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003e50:	e00e      	b.n	8003e70 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff ff00 	bl	8003c5c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff ff47 	bl	8003cf4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003e66:	e003      	b.n	8003e70 <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
            break;
 8003e6c:	e000      	b.n	8003e70 <LL_EXTI_Init+0xe4>
        }
      }
 8003e6e:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d076      	beq.n	8003f66 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	7a5b      	ldrb	r3, [r3, #9]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d01c      	beq.n	8003eba <LL_EXTI_Init+0x12e>
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	dc25      	bgt.n	8003ed0 <LL_EXTI_Init+0x144>
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <LL_EXTI_Init+0x102>
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d00b      	beq.n	8003ea4 <LL_EXTI_Init+0x118>
 8003e8c:	e020      	b.n	8003ed0 <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff fece 	bl	8003c34 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fe57 	bl	8003b50 <LL_EXTI_EnableIT_32_63>
          break;
 8003ea2:	e018      	b.n	8003ed6 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff fe77 	bl	8003b9c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff fe98 	bl	8003be8 <LL_EXTI_EnableEvent_32_63>
          break;
 8003eb8:	e00d      	b.n	8003ed6 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff fe46 	bl	8003b50 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff fe8d 	bl	8003be8 <LL_EXTI_EnableEvent_32_63>
          break;
 8003ece:	e002      	b.n	8003ed6 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	73fb      	strb	r3, [r7, #15]
          break;
 8003ed4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	7a9b      	ldrb	r3, [r3, #10]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d043      	beq.n	8003f66 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	7a9b      	ldrb	r3, [r3, #10]
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	d01c      	beq.n	8003f20 <LL_EXTI_Init+0x194>
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	dc25      	bgt.n	8003f36 <LL_EXTI_Init+0x1aa>
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d002      	beq.n	8003ef4 <LL_EXTI_Init+0x168>
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d00b      	beq.n	8003f0a <LL_EXTI_Init+0x17e>
 8003ef2:	e020      	b.n	8003f36 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff ff33 	bl	8003d64 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff febc 	bl	8003c80 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8003f08:	e02e      	b.n	8003f68 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff fedc 	bl	8003ccc <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff fefd 	bl	8003d18 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8003f1e:	e023      	b.n	8003f68 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff feab 	bl	8003c80 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fef2 	bl	8003d18 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8003f34:	e018      	b.n	8003f68 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	73fb      	strb	r3, [r7, #15]
            break;
 8003f3a:	e015      	b.n	8003f68 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff fe17 	bl	8003b74 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fe5e 	bl	8003c0c <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff fe21 	bl	8003b9c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fe68 	bl	8003c34 <LL_EXTI_DisableEvent_32_63>
 8003f64:	e000      	b.n	8003f68 <LL_EXTI_Init+0x1dc>
      }
 8003f66:	bf00      	nop
#endif
  }
  return status;
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <LL_GPIO_SetPinMode>:
{
 8003f72:	b480      	push	{r7}
 8003f74:	b089      	sub	sp, #36	; 0x24
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	fa93 f3a3 	rbit	r3, r3
 8003f8c:	613b      	str	r3, [r7, #16]
  return result;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	fab3 f383 	clz	r3, r3
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	2103      	movs	r1, #3
 8003f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	401a      	ands	r2, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	fa93 f3a3 	rbit	r3, r3
 8003fac:	61bb      	str	r3, [r7, #24]
  return result;
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	fab3 f383 	clz	r3, r3
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	601a      	str	r2, [r3, #0]
}
 8003fc4:	bf00      	nop
 8003fc6:	3724      	adds	r7, #36	; 0x24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <LL_GPIO_SetPinOutputType>:
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	401a      	ands	r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	fb01 f303 	mul.w	r3, r1, r3
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	605a      	str	r2, [r3, #4]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <LL_GPIO_SetPinSpeed>:
{
 8004000:	b480      	push	{r7}
 8004002:	b089      	sub	sp, #36	; 0x24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	fa93 f3a3 	rbit	r3, r3
 800401a:	613b      	str	r3, [r7, #16]
  return result;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	fab3 f383 	clz	r3, r3
 8004022:	b2db      	uxtb	r3, r3
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	2103      	movs	r1, #3
 8004028:	fa01 f303 	lsl.w	r3, r1, r3
 800402c:	43db      	mvns	r3, r3
 800402e:	401a      	ands	r2, r3
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	fa93 f3a3 	rbit	r3, r3
 800403a:	61bb      	str	r3, [r7, #24]
  return result;
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	fab3 f383 	clz	r3, r3
 8004042:	b2db      	uxtb	r3, r3
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	fa01 f303 	lsl.w	r3, r1, r3
 800404c:	431a      	orrs	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	609a      	str	r2, [r3, #8]
}
 8004052:	bf00      	nop
 8004054:	3724      	adds	r7, #36	; 0x24
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <LL_GPIO_SetPinPull>:
{
 800405e:	b480      	push	{r7}
 8004060:	b089      	sub	sp, #36	; 0x24
 8004062:	af00      	add	r7, sp, #0
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	fa93 f3a3 	rbit	r3, r3
 8004078:	613b      	str	r3, [r7, #16]
  return result;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	fab3 f383 	clz	r3, r3
 8004080:	b2db      	uxtb	r3, r3
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	2103      	movs	r1, #3
 8004086:	fa01 f303 	lsl.w	r3, r1, r3
 800408a:	43db      	mvns	r3, r3
 800408c:	401a      	ands	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	fa93 f3a3 	rbit	r3, r3
 8004098:	61bb      	str	r3, [r7, #24]
  return result;
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	fab3 f383 	clz	r3, r3
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	fa01 f303 	lsl.w	r3, r1, r3
 80040aa:	431a      	orrs	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	60da      	str	r2, [r3, #12]
}
 80040b0:	bf00      	nop
 80040b2:	3724      	adds	r7, #36	; 0x24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <LL_GPIO_SetAFPin_0_7>:
{
 80040bc:	b480      	push	{r7}
 80040be:	b089      	sub	sp, #36	; 0x24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1a      	ldr	r2, [r3, #32]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	fa93 f3a3 	rbit	r3, r3
 80040d6:	613b      	str	r3, [r7, #16]
  return result;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	fab3 f383 	clz	r3, r3
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	210f      	movs	r1, #15
 80040e4:	fa01 f303 	lsl.w	r3, r1, r3
 80040e8:	43db      	mvns	r3, r3
 80040ea:	401a      	ands	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	fa93 f3a3 	rbit	r3, r3
 80040f6:	61bb      	str	r3, [r7, #24]
  return result;
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	fa01 f303 	lsl.w	r3, r1, r3
 8004108:	431a      	orrs	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	621a      	str	r2, [r3, #32]
}
 800410e:	bf00      	nop
 8004110:	3724      	adds	r7, #36	; 0x24
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <LL_GPIO_SetAFPin_8_15>:
{
 800411a:	b480      	push	{r7}
 800411c:	b089      	sub	sp, #36	; 0x24
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	0a1b      	lsrs	r3, r3, #8
 800412e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	fa93 f3a3 	rbit	r3, r3
 8004136:	613b      	str	r3, [r7, #16]
  return result;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	210f      	movs	r1, #15
 8004144:	fa01 f303 	lsl.w	r3, r1, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	401a      	ands	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	0a1b      	lsrs	r3, r3, #8
 8004150:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	fa93 f3a3 	rbit	r3, r3
 8004158:	61bb      	str	r3, [r7, #24]
  return result;
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	fab3 f383 	clz	r3, r3
 8004160:	b2db      	uxtb	r3, r3
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	fa01 f303 	lsl.w	r3, r1, r3
 800416a:	431a      	orrs	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004170:	bf00      	nop
 8004172:	3724      	adds	r7, #36	; 0x24
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	fa93 f3a3 	rbit	r3, r3
 8004192:	613b      	str	r3, [r7, #16]
  return result;
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	fab3 f383 	clz	r3, r3
 800419a:	b2db      	uxtb	r3, r3
 800419c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800419e:	e051      	b.n	8004244 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	2101      	movs	r1, #1
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ac:	4013      	ands	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d043      	beq.n	800423e <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d003      	beq.n	80041c6 <LL_GPIO_Init+0x4a>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d10e      	bne.n	80041e4 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	461a      	mov	r2, r3
 80041cc:	69b9      	ldr	r1, [r7, #24]
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff ff16 	bl	8004000 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	6819      	ldr	r1, [r3, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	461a      	mov	r2, r3
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7ff fef6 	bl	8003fd0 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	461a      	mov	r2, r3
 80041ea:	69b9      	ldr	r1, [r7, #24]
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff ff36 	bl	800405e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d11a      	bne.n	8004230 <LL_GPIO_Init+0xb4>
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	fa93 f3a3 	rbit	r3, r3
 8004204:	60bb      	str	r3, [r7, #8]
  return result;
 8004206:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004208:	fab3 f383 	clz	r3, r3
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b07      	cmp	r3, #7
 8004210:	d807      	bhi.n	8004222 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	461a      	mov	r2, r3
 8004218:	69b9      	ldr	r1, [r7, #24]
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff ff4e 	bl	80040bc <LL_GPIO_SetAFPin_0_7>
 8004220:	e006      	b.n	8004230 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	461a      	mov	r2, r3
 8004228:	69b9      	ldr	r1, [r7, #24]
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7ff ff75 	bl	800411a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	461a      	mov	r2, r3
 8004236:	69b9      	ldr	r1, [r7, #24]
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff fe9a 	bl	8003f72 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	3301      	adds	r3, #1
 8004242:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	fa22 f303 	lsr.w	r3, r2, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1a6      	bne.n	80041a0 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <LL_I2C_Enable>:
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f043 0201 	orr.w	r2, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	601a      	str	r2, [r3, #0]
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <LL_I2C_Disable>:
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f023 0201 	bic.w	r2, r3, #1
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	601a      	str	r2, [r3, #0]
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <LL_I2C_ConfigFilters>:
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	0219      	lsls	r1, r3, #8
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	430b      	orrs	r3, r1
 80042b8:	431a      	orrs	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	601a      	str	r2, [r3, #0]
}
 80042be:	bf00      	nop
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <LL_I2C_SetOwnAddress1>:
{
 80042ca:	b480      	push	{r7}
 80042cc:	b085      	sub	sp, #20
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80042de:	f023 0307 	bic.w	r3, r3, #7
 80042e2:	68b9      	ldr	r1, [r7, #8]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	431a      	orrs	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	609a      	str	r2, [r3, #8]
}
 80042ee:	bf00      	nop
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <LL_I2C_EnableOwnAddress1>:
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	609a      	str	r2, [r3, #8]
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <LL_I2C_DisableOwnAddress1>:
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	609a      	str	r2, [r3, #8]
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <LL_I2C_SetTiming>:
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	611a      	str	r2, [r3, #16]
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <LL_I2C_SetMode>:
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	601a      	str	r2, [r3, #0]
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <LL_I2C_AcknowledgeNextData>:
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	431a      	orrs	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	605a      	str	r2, [r3, #4]
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff ff65 	bl	800427c <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6899      	ldr	r1, [r3, #8]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	461a      	mov	r2, r3
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff ff6d 	bl	800429c <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	4619      	mov	r1, r3
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7ff ffb6 	bl	800433a <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff ff44 	bl	800425c <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7ff ffa0 	bl	800431a <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	6919      	ldr	r1, [r3, #16]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	461a      	mov	r2, r3
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff ff70 	bl	80042ca <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff ff81 	bl	80042fa <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4619      	mov	r1, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff ffa9 	bl	8004356 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	4619      	mov	r1, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff ffb6 	bl	800437c <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <LL_TIM_SetPrescaler>:
{
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	629a      	str	r2, [r3, #40]	; 0x28
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <LL_TIM_SetAutoReload>:
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <LL_TIM_SetRepetitionCounter>:
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <LL_TIM_OC_SetCompareCH1>:
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <LL_TIM_OC_SetCompareCH2>:
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	639a      	str	r2, [r3, #56]	; 0x38
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <LL_TIM_OC_SetCompareCH3>:
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <LL_TIM_OC_SetCompareCH4>:
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <LL_TIM_OC_SetCompareCH5>:
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	659a      	str	r2, [r3, #88]	; 0x58
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <LL_TIM_OC_SetCompareCH6>:
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f043 0201 	orr.w	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	615a      	str	r2, [r3, #20]
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
	...

0800453c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a2f      	ldr	r2, [pc, #188]	; (800460c <LL_TIM_Init+0xd0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d007      	beq.n	8004564 <LL_TIM_Init+0x28>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455a:	d003      	beq.n	8004564 <LL_TIM_Init+0x28>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a2c      	ldr	r2, [pc, #176]	; (8004610 <LL_TIM_Init+0xd4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d106      	bne.n	8004572 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a25      	ldr	r2, [pc, #148]	; (800460c <LL_TIM_Init+0xd0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d013      	beq.n	80045a2 <LL_TIM_Init+0x66>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004580:	d00f      	beq.n	80045a2 <LL_TIM_Init+0x66>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a22      	ldr	r2, [pc, #136]	; (8004610 <LL_TIM_Init+0xd4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00b      	beq.n	80045a2 <LL_TIM_Init+0x66>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a21      	ldr	r2, [pc, #132]	; (8004614 <LL_TIM_Init+0xd8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d007      	beq.n	80045a2 <LL_TIM_Init+0x66>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a20      	ldr	r2, [pc, #128]	; (8004618 <LL_TIM_Init+0xdc>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d003      	beq.n	80045a2 <LL_TIM_Init+0x66>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a1f      	ldr	r2, [pc, #124]	; (800461c <LL_TIM_Init+0xe0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d106      	bne.n	80045b0 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	4619      	mov	r1, r3
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ff3a 	bl	8004436 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	4619      	mov	r1, r3
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff ff26 	bl	800441a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a0e      	ldr	r2, [pc, #56]	; (800460c <LL_TIM_Init+0xd0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00b      	beq.n	80045ee <LL_TIM_Init+0xb2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a0e      	ldr	r2, [pc, #56]	; (8004614 <LL_TIM_Init+0xd8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d007      	beq.n	80045ee <LL_TIM_Init+0xb2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a0d      	ldr	r2, [pc, #52]	; (8004618 <LL_TIM_Init+0xdc>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d003      	beq.n	80045ee <LL_TIM_Init+0xb2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a0c      	ldr	r2, [pc, #48]	; (800461c <LL_TIM_Init+0xe0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d105      	bne.n	80045fa <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	4619      	mov	r1, r3
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff ff2c 	bl	8004452 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff ff8d 	bl	800451a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40012c00 	.word	0x40012c00
 8004610:	40000400 	.word	0x40000400
 8004614:	40014000 	.word	0x40014000
 8004618:	40014400 	.word	0x40014400
 800461c:	40014800 	.word	0x40014800

08004620 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004636:	d045      	beq.n	80046c4 <LL_TIM_OC_Init+0xa4>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800463e:	d848      	bhi.n	80046d2 <LL_TIM_OC_Init+0xb2>
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004646:	d036      	beq.n	80046b6 <LL_TIM_OC_Init+0x96>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464e:	d840      	bhi.n	80046d2 <LL_TIM_OC_Init+0xb2>
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004656:	d027      	beq.n	80046a8 <LL_TIM_OC_Init+0x88>
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465e:	d838      	bhi.n	80046d2 <LL_TIM_OC_Init+0xb2>
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004666:	d018      	beq.n	800469a <LL_TIM_OC_Init+0x7a>
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800466e:	d830      	bhi.n	80046d2 <LL_TIM_OC_Init+0xb2>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d003      	beq.n	800467e <LL_TIM_OC_Init+0x5e>
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b10      	cmp	r3, #16
 800467a:	d007      	beq.n	800468c <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 800467c:	e029      	b.n	80046d2 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 f82d 	bl	80046e0 <OC1Config>
 8004686:	4603      	mov	r3, r0
 8004688:	75fb      	strb	r3, [r7, #23]
      break;
 800468a:	e023      	b.n	80046d4 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 f8a0 	bl	80047d4 <OC2Config>
 8004694:	4603      	mov	r3, r0
 8004696:	75fb      	strb	r3, [r7, #23]
      break;
 8004698:	e01c      	b.n	80046d4 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f917 	bl	80048d0 <OC3Config>
 80046a2:	4603      	mov	r3, r0
 80046a4:	75fb      	strb	r3, [r7, #23]
      break;
 80046a6:	e015      	b.n	80046d4 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 f98e 	bl	80049cc <OC4Config>
 80046b0:	4603      	mov	r3, r0
 80046b2:	75fb      	strb	r3, [r7, #23]
      break;
 80046b4:	e00e      	b.n	80046d4 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f9ed 	bl	8004a98 <OC5Config>
 80046be:	4603      	mov	r3, r0
 80046c0:	75fb      	strb	r3, [r7, #23]
      break;
 80046c2:	e007      	b.n	80046d4 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 fa44 	bl	8004b54 <OC6Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	75fb      	strb	r3, [r7, #23]
      break;
 80046d0:	e000      	b.n	80046d4 <LL_TIM_OC_Init+0xb4>
      break;
 80046d2:	bf00      	nop
  }

  return result;
 80046d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	f023 0201 	bic.w	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0303 	bic.w	r3, r3, #3
 800470e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	6812      	ldr	r2, [r2, #0]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f023 0202 	bic.w	r2, r3, #2
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f023 0201 	bic.w	r2, r3, #1
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a20      	ldr	r2, [pc, #128]	; (80047c4 <OC1Config+0xe4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00b      	beq.n	800475e <OC1Config+0x7e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a1f      	ldr	r2, [pc, #124]	; (80047c8 <OC1Config+0xe8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d007      	beq.n	800475e <OC1Config+0x7e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a1e      	ldr	r2, [pc, #120]	; (80047cc <OC1Config+0xec>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d003      	beq.n	800475e <OC1Config+0x7e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a1d      	ldr	r2, [pc, #116]	; (80047d0 <OC1Config+0xf0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d11e      	bne.n	800479c <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f023 0208 	bic.w	r2, r3, #8
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f023 0204 	bic.w	r2, r3, #4
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4313      	orrs	r3, r2
 800477c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4619      	mov	r1, r3
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff fe5d 	bl	800446e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40012c00 	.word	0x40012c00
 80047c8:	40014000 	.word	0x40014000
 80047cc:	40014400 	.word	0x40014400
 80047d0:	40014800 	.word	0x40014800

080047d4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f023 0210 	bic.w	r2, r3, #16
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	6812      	ldr	r2, [r2, #0]
 8004812:	0212      	lsls	r2, r2, #8
 8004814:	4313      	orrs	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f023 0220 	bic.w	r2, r3, #32
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	4313      	orrs	r3, r2
 8004826:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f023 0210 	bic.w	r2, r3, #16
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a21      	ldr	r2, [pc, #132]	; (80048c0 <OC2Config+0xec>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00b      	beq.n	8004858 <OC2Config+0x84>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a20      	ldr	r2, [pc, #128]	; (80048c4 <OC2Config+0xf0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d007      	beq.n	8004858 <OC2Config+0x84>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a1f      	ldr	r2, [pc, #124]	; (80048c8 <OC2Config+0xf4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d003      	beq.n	8004858 <OC2Config+0x84>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a1e      	ldr	r2, [pc, #120]	; (80048cc <OC2Config+0xf8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d11f      	bne.n	8004898 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	019b      	lsls	r3, r3, #6
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	019b      	lsls	r3, r3, #6
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4313      	orrs	r3, r2
 8004886:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7ff fded 	bl	800448a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40012c00 	.word	0x40012c00
 80048c4:	40014000 	.word	0x40014000
 80048c8:	40014400 	.word	0x40014400
 80048cc:	40014800 	.word	0x40014800

080048d0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0303 	bic.w	r3, r3, #3
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	021b      	lsls	r3, r3, #8
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a21      	ldr	r2, [pc, #132]	; (80049bc <OC3Config+0xec>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00b      	beq.n	8004952 <OC3Config+0x82>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a20      	ldr	r2, [pc, #128]	; (80049c0 <OC3Config+0xf0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d007      	beq.n	8004952 <OC3Config+0x82>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a1f      	ldr	r2, [pc, #124]	; (80049c4 <OC3Config+0xf4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d003      	beq.n	8004952 <OC3Config+0x82>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a1e      	ldr	r2, [pc, #120]	; (80049c8 <OC3Config+0xf8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d11f      	bne.n	8004992 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	029b      	lsls	r3, r3, #10
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	029b      	lsls	r3, r3, #10
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	4313      	orrs	r3, r2
 8004980:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	015b      	lsls	r3, r3, #5
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	4619      	mov	r1, r3
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff fd7e 	bl	80044a6 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40012c00 	.word	0x40012c00
 80049c0:	40014000 	.word	0x40014000
 80049c4:	40014400 	.word	0x40014400
 80049c8:	40014800 	.word	0x40014800

080049cc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	0212      	lsls	r2, r2, #8
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	031b      	lsls	r3, r3, #12
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	031b      	lsls	r3, r3, #12
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a15      	ldr	r2, [pc, #84]	; (8004a88 <OC4Config+0xbc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00b      	beq.n	8004a50 <OC4Config+0x84>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a14      	ldr	r2, [pc, #80]	; (8004a8c <OC4Config+0xc0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d007      	beq.n	8004a50 <OC4Config+0x84>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a13      	ldr	r2, [pc, #76]	; (8004a90 <OC4Config+0xc4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <OC4Config+0x84>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a12      	ldr	r2, [pc, #72]	; (8004a94 <OC4Config+0xc8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d107      	bne.n	8004a60 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	019b      	lsls	r3, r3, #6
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	4619      	mov	r1, r3
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7ff fd25 	bl	80044c2 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3718      	adds	r7, #24
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40012c00 	.word	0x40012c00
 8004a8c:	40014000 	.word	0x40014000
 8004a90:	40014400 	.word	0x40014400
 8004a94:	40014800 	.word	0x40014800

08004a98 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	041b      	lsls	r3, r3, #16
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	041b      	lsls	r3, r3, #16
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <OC5Config+0xac>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00b      	beq.n	8004b0c <OC5Config+0x74>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a14      	ldr	r2, [pc, #80]	; (8004b48 <OC5Config+0xb0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d007      	beq.n	8004b0c <OC5Config+0x74>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a13      	ldr	r2, [pc, #76]	; (8004b4c <OC5Config+0xb4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <OC5Config+0x74>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a12      	ldr	r2, [pc, #72]	; (8004b50 <OC5Config+0xb8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d109      	bne.n	8004b20 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff fcd6 	bl	80044de <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40012c00 	.word	0x40012c00
 8004b48:	40014000 	.word	0x40014000
 8004b4c:	40014400 	.word	0x40014400
 8004b50:	40014800 	.word	0x40014800

08004b54 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b74:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	6812      	ldr	r2, [r2, #0]
 8004b84:	0212      	lsls	r2, r2, #8
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	051b      	lsls	r3, r3, #20
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	051b      	lsls	r3, r3, #20
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a14      	ldr	r2, [pc, #80]	; (8004c00 <OC6Config+0xac>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00b      	beq.n	8004bca <OC6Config+0x76>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <OC6Config+0xb0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d007      	beq.n	8004bca <OC6Config+0x76>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a12      	ldr	r2, [pc, #72]	; (8004c08 <OC6Config+0xb4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d003      	beq.n	8004bca <OC6Config+0x76>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a11      	ldr	r2, [pc, #68]	; (8004c0c <OC6Config+0xb8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d109      	bne.n	8004bde <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	029b      	lsls	r3, r3, #10
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	4619      	mov	r1, r3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff fc87 	bl	80044fe <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40012c00 	.word	0x40012c00
 8004c04:	40014000 	.word	0x40014000
 8004c08:	40014400 	.word	0x40014400
 8004c0c:	40014800 	.word	0x40014800

08004c10 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c22:	4a07      	ldr	r2, [pc, #28]	; (8004c40 <LL_InitTick+0x30>)
 8004c24:	3b01      	subs	r3, #1
 8004c26:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <LL_InitTick+0x30>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c2e:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <LL_InitTick+0x30>)
 8004c30:	2205      	movs	r2, #5
 8004c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	e000e010 	.word	0xe000e010

08004c44 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004c4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff ffdd 	bl	8004c10 <LL_InitTick>
}
 8004c56:	bf00      	nop
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004c68:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <LL_mDelay+0x48>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004c6e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c76:	d00c      	beq.n	8004c92 <LL_mDelay+0x32>
  {
    Delay++;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8004c7e:	e008      	b.n	8004c92 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004c80:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <LL_mDelay+0x48>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <LL_mDelay+0x32>
    {
      Delay--;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1f3      	bne.n	8004c80 <LL_mDelay+0x20>
    }
  }
}
 8004c98:	bf00      	nop
 8004c9a:	bf00      	nop
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	e000e010 	.word	0xe000e010

08004cac <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004cb4:	4a04      	ldr	r2, [pc, #16]	; (8004cc8 <LL_SetSystemCoreClock+0x1c>)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6013      	str	r3, [r2, #0]
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	20000004 	.word	0x20000004

08004ccc <gcvt>:
 8004ccc:	b530      	push	{r4, r5, lr}
 8004cce:	2200      	movs	r2, #0
 8004cd0:	b085      	sub	sp, #20
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	ec51 0b10 	vmov	r0, r1, d0
 8004cdc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004ce0:	f7fb fefc 	bl	8000adc <__aeabi_dcmplt>
 8004ce4:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004ce8:	4622      	mov	r2, r4
 8004cea:	b118      	cbz	r0, 8004cf4 <gcvt+0x28>
 8004cec:	232d      	movs	r3, #45	; 0x2d
 8004cee:	f802 3b01 	strb.w	r3, [r2], #1
 8004cf2:	3d01      	subs	r5, #1
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	4806      	ldr	r0, [pc, #24]	; (8004d10 <gcvt+0x44>)
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	2367      	movs	r3, #103	; 0x67
 8004cfe:	6800      	ldr	r0, [r0, #0]
 8004d00:	f000 f906 	bl	8004f10 <_gcvt>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	bf14      	ite	ne
 8004d08:	4620      	movne	r0, r4
 8004d0a:	2000      	moveq	r0, #0
 8004d0c:	b005      	add	sp, #20
 8004d0e:	bd30      	pop	{r4, r5, pc}
 8004d10:	20000008 	.word	0x20000008

08004d14 <__errno>:
 8004d14:	4b01      	ldr	r3, [pc, #4]	; (8004d1c <__errno+0x8>)
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	20000008 	.word	0x20000008

08004d20 <__libc_init_array>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	4d0d      	ldr	r5, [pc, #52]	; (8004d58 <__libc_init_array+0x38>)
 8004d24:	4c0d      	ldr	r4, [pc, #52]	; (8004d5c <__libc_init_array+0x3c>)
 8004d26:	1b64      	subs	r4, r4, r5
 8004d28:	10a4      	asrs	r4, r4, #2
 8004d2a:	2600      	movs	r6, #0
 8004d2c:	42a6      	cmp	r6, r4
 8004d2e:	d109      	bne.n	8004d44 <__libc_init_array+0x24>
 8004d30:	4d0b      	ldr	r5, [pc, #44]	; (8004d60 <__libc_init_array+0x40>)
 8004d32:	4c0c      	ldr	r4, [pc, #48]	; (8004d64 <__libc_init_array+0x44>)
 8004d34:	f003 fa14 	bl	8008160 <_init>
 8004d38:	1b64      	subs	r4, r4, r5
 8004d3a:	10a4      	asrs	r4, r4, #2
 8004d3c:	2600      	movs	r6, #0
 8004d3e:	42a6      	cmp	r6, r4
 8004d40:	d105      	bne.n	8004d4e <__libc_init_array+0x2e>
 8004d42:	bd70      	pop	{r4, r5, r6, pc}
 8004d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d48:	4798      	blx	r3
 8004d4a:	3601      	adds	r6, #1
 8004d4c:	e7ee      	b.n	8004d2c <__libc_init_array+0xc>
 8004d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d52:	4798      	blx	r3
 8004d54:	3601      	adds	r6, #1
 8004d56:	e7f2      	b.n	8004d3e <__libc_init_array+0x1e>
 8004d58:	080084c4 	.word	0x080084c4
 8004d5c:	080084c4 	.word	0x080084c4
 8004d60:	080084c4 	.word	0x080084c4
 8004d64:	080084c8 	.word	0x080084c8

08004d68 <memset>:
 8004d68:	4402      	add	r2, r0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d100      	bne.n	8004d72 <memset+0xa>
 8004d70:	4770      	bx	lr
 8004d72:	f803 1b01 	strb.w	r1, [r3], #1
 8004d76:	e7f9      	b.n	8004d6c <memset+0x4>

08004d78 <siprintf>:
 8004d78:	b40e      	push	{r1, r2, r3}
 8004d7a:	b500      	push	{lr}
 8004d7c:	b09c      	sub	sp, #112	; 0x70
 8004d7e:	ab1d      	add	r3, sp, #116	; 0x74
 8004d80:	9002      	str	r0, [sp, #8]
 8004d82:	9006      	str	r0, [sp, #24]
 8004d84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d88:	4809      	ldr	r0, [pc, #36]	; (8004db0 <siprintf+0x38>)
 8004d8a:	9107      	str	r1, [sp, #28]
 8004d8c:	9104      	str	r1, [sp, #16]
 8004d8e:	4909      	ldr	r1, [pc, #36]	; (8004db4 <siprintf+0x3c>)
 8004d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d94:	9105      	str	r1, [sp, #20]
 8004d96:	6800      	ldr	r0, [r0, #0]
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	a902      	add	r1, sp, #8
 8004d9c:	f000 fe00 	bl	80059a0 <_svfiprintf_r>
 8004da0:	9b02      	ldr	r3, [sp, #8]
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	b01c      	add	sp, #112	; 0x70
 8004da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dac:	b003      	add	sp, #12
 8004dae:	4770      	bx	lr
 8004db0:	20000008 	.word	0x20000008
 8004db4:	ffff0208 	.word	0xffff0208

08004db8 <strcat>:
 8004db8:	b510      	push	{r4, lr}
 8004dba:	4602      	mov	r2, r0
 8004dbc:	7814      	ldrb	r4, [r2, #0]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	3201      	adds	r2, #1
 8004dc2:	2c00      	cmp	r4, #0
 8004dc4:	d1fa      	bne.n	8004dbc <strcat+0x4>
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dcc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dd0:	2a00      	cmp	r2, #0
 8004dd2:	d1f9      	bne.n	8004dc8 <strcat+0x10>
 8004dd4:	bd10      	pop	{r4, pc}

08004dd6 <strncat>:
 8004dd6:	b530      	push	{r4, r5, lr}
 8004dd8:	4604      	mov	r4, r0
 8004dda:	7825      	ldrb	r5, [r4, #0]
 8004ddc:	4623      	mov	r3, r4
 8004dde:	3401      	adds	r4, #1
 8004de0:	2d00      	cmp	r5, #0
 8004de2:	d1fa      	bne.n	8004dda <strncat+0x4>
 8004de4:	3a01      	subs	r2, #1
 8004de6:	d304      	bcc.n	8004df2 <strncat+0x1c>
 8004de8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dec:	f803 4b01 	strb.w	r4, [r3], #1
 8004df0:	b904      	cbnz	r4, 8004df4 <strncat+0x1e>
 8004df2:	bd30      	pop	{r4, r5, pc}
 8004df4:	2a00      	cmp	r2, #0
 8004df6:	d1f5      	bne.n	8004de4 <strncat+0xe>
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	e7f3      	b.n	8004de4 <strncat+0xe>

08004dfc <strncpy>:
 8004dfc:	b510      	push	{r4, lr}
 8004dfe:	3901      	subs	r1, #1
 8004e00:	4603      	mov	r3, r0
 8004e02:	b132      	cbz	r2, 8004e12 <strncpy+0x16>
 8004e04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004e08:	f803 4b01 	strb.w	r4, [r3], #1
 8004e0c:	3a01      	subs	r2, #1
 8004e0e:	2c00      	cmp	r4, #0
 8004e10:	d1f7      	bne.n	8004e02 <strncpy+0x6>
 8004e12:	441a      	add	r2, r3
 8004e14:	2100      	movs	r1, #0
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d100      	bne.n	8004e1c <strncpy+0x20>
 8004e1a:	bd10      	pop	{r4, pc}
 8004e1c:	f803 1b01 	strb.w	r1, [r3], #1
 8004e20:	e7f9      	b.n	8004e16 <strncpy+0x1a>

08004e22 <print_e>:
 8004e22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e24:	b087      	sub	sp, #28
 8004e26:	ec43 2b10 	vmov	d0, r2, r3
 8004e2a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004e2c:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8004e30:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004e32:	ab04      	add	r3, sp, #16
 8004e34:	9301      	str	r3, [sp, #4]
 8004e36:	ab03      	add	r3, sp, #12
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	1c62      	adds	r2, r4, #1
 8004e3c:	ab05      	add	r3, sp, #20
 8004e3e:	460f      	mov	r7, r1
 8004e40:	2102      	movs	r1, #2
 8004e42:	f001 f905 	bl	8006050 <_dtoa_r>
 8004e46:	9a05      	ldr	r2, [sp, #20]
 8004e48:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d105      	bne.n	8004e5c <print_e+0x3a>
 8004e50:	4601      	mov	r1, r0
 8004e52:	4638      	mov	r0, r7
 8004e54:	f001 f848 	bl	8005ee8 <strcpy>
 8004e58:	b007      	add	sp, #28
 8004e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e5c:	463b      	mov	r3, r7
 8004e5e:	7801      	ldrb	r1, [r0, #0]
 8004e60:	f803 1b01 	strb.w	r1, [r3], #1
 8004e64:	2c00      	cmp	r4, #0
 8004e66:	bfc8      	it	gt
 8004e68:	2501      	movgt	r5, #1
 8004e6a:	212e      	movs	r1, #46	; 0x2e
 8004e6c:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8004e70:	b10f      	cbz	r7, 8004e76 <print_e+0x54>
 8004e72:	2c00      	cmp	r4, #0
 8004e74:	dc37      	bgt.n	8004ee6 <print_e+0xc4>
 8004e76:	2e67      	cmp	r6, #103	; 0x67
 8004e78:	d046      	beq.n	8004f08 <print_e+0xe6>
 8004e7a:	2e47      	cmp	r6, #71	; 0x47
 8004e7c:	d046      	beq.n	8004f0c <print_e+0xea>
 8004e7e:	212e      	movs	r1, #46	; 0x2e
 8004e80:	2030      	movs	r0, #48	; 0x30
 8004e82:	2c00      	cmp	r4, #0
 8004e84:	dc38      	bgt.n	8004ef8 <print_e+0xd6>
 8004e86:	1e51      	subs	r1, r2, #1
 8004e88:	2900      	cmp	r1, #0
 8004e8a:	bfb8      	it	lt
 8004e8c:	f1c2 0201 	rsblt	r2, r2, #1
 8004e90:	4618      	mov	r0, r3
 8004e92:	9105      	str	r1, [sp, #20]
 8004e94:	bfbc      	itt	lt
 8004e96:	212d      	movlt	r1, #45	; 0x2d
 8004e98:	9205      	strlt	r2, [sp, #20]
 8004e9a:	f800 6b02 	strb.w	r6, [r0], #2
 8004e9e:	bfb8      	it	lt
 8004ea0:	7059      	strblt	r1, [r3, #1]
 8004ea2:	9905      	ldr	r1, [sp, #20]
 8004ea4:	bfa4      	itt	ge
 8004ea6:	222b      	movge	r2, #43	; 0x2b
 8004ea8:	705a      	strbge	r2, [r3, #1]
 8004eaa:	2963      	cmp	r1, #99	; 0x63
 8004eac:	dd0b      	ble.n	8004ec6 <print_e+0xa4>
 8004eae:	2264      	movs	r2, #100	; 0x64
 8004eb0:	fb91 f2f2 	sdiv	r2, r1, r2
 8004eb4:	f102 0430 	add.w	r4, r2, #48	; 0x30
 8004eb8:	1cd8      	adds	r0, r3, #3
 8004eba:	709c      	strb	r4, [r3, #2]
 8004ebc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8004ec0:	fb03 1202 	mla	r2, r3, r2, r1
 8004ec4:	9205      	str	r2, [sp, #20]
 8004ec6:	9a05      	ldr	r2, [sp, #20]
 8004ec8:	230a      	movs	r3, #10
 8004eca:	fb92 f3f3 	sdiv	r3, r2, r3
 8004ece:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004ed2:	7001      	strb	r1, [r0, #0]
 8004ed4:	f06f 0109 	mvn.w	r1, #9
 8004ed8:	fb01 2303 	mla	r3, r1, r3, r2
 8004edc:	3330      	adds	r3, #48	; 0x30
 8004ede:	7043      	strb	r3, [r0, #1]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	7083      	strb	r3, [r0, #2]
 8004ee4:	e7b8      	b.n	8004e58 <print_e+0x36>
 8004ee6:	b10d      	cbz	r5, 8004eec <print_e+0xca>
 8004ee8:	f803 1b01 	strb.w	r1, [r3], #1
 8004eec:	7805      	ldrb	r5, [r0, #0]
 8004eee:	f803 5b01 	strb.w	r5, [r3], #1
 8004ef2:	3c01      	subs	r4, #1
 8004ef4:	2500      	movs	r5, #0
 8004ef6:	e7b9      	b.n	8004e6c <print_e+0x4a>
 8004ef8:	b10d      	cbz	r5, 8004efe <print_e+0xdc>
 8004efa:	f803 1b01 	strb.w	r1, [r3], #1
 8004efe:	f803 0b01 	strb.w	r0, [r3], #1
 8004f02:	3c01      	subs	r4, #1
 8004f04:	2500      	movs	r5, #0
 8004f06:	e7bc      	b.n	8004e82 <print_e+0x60>
 8004f08:	2665      	movs	r6, #101	; 0x65
 8004f0a:	e7bc      	b.n	8004e86 <print_e+0x64>
 8004f0c:	2645      	movs	r6, #69	; 0x45
 8004f0e:	e7ba      	b.n	8004e86 <print_e+0x64>

08004f10 <_gcvt>:
 8004f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f14:	ec55 4b10 	vmov	r4, r5, d0
 8004f18:	b088      	sub	sp, #32
 8004f1a:	4681      	mov	r9, r0
 8004f1c:	4688      	mov	r8, r1
 8004f1e:	4616      	mov	r6, r2
 8004f20:	469a      	mov	sl, r3
 8004f22:	ee10 0a10 	vmov	r0, s0
 8004f26:	2200      	movs	r2, #0
 8004f28:	2300      	movs	r3, #0
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8004f2e:	f7fb fdd5 	bl	8000adc <__aeabi_dcmplt>
 8004f32:	b110      	cbz	r0, 8004f3a <_gcvt+0x2a>
 8004f34:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004f38:	461d      	mov	r5, r3
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	4620      	mov	r0, r4
 8004f40:	4629      	mov	r1, r5
 8004f42:	f7fb fdc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f46:	b138      	cbz	r0, 8004f58 <_gcvt+0x48>
 8004f48:	2330      	movs	r3, #48	; 0x30
 8004f4a:	7033      	strb	r3, [r6, #0]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	7073      	strb	r3, [r6, #1]
 8004f50:	4630      	mov	r0, r6
 8004f52:	b008      	add	sp, #32
 8004f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f58:	a34b      	add	r3, pc, #300	; (adr r3, 8005088 <_gcvt+0x178>)
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	4620      	mov	r0, r4
 8004f60:	4629      	mov	r1, r5
 8004f62:	f7fb fdc5 	bl	8000af0 <__aeabi_dcmple>
 8004f66:	b158      	cbz	r0, 8004f80 <_gcvt+0x70>
 8004f68:	f108 31ff 	add.w	r1, r8, #4294967295
 8004f6c:	9100      	str	r1, [sp, #0]
 8004f6e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8004f72:	4622      	mov	r2, r4
 8004f74:	462b      	mov	r3, r5
 8004f76:	4631      	mov	r1, r6
 8004f78:	4648      	mov	r0, r9
 8004f7a:	f7ff ff52 	bl	8004e22 <print_e>
 8004f7e:	e7e7      	b.n	8004f50 <_gcvt+0x40>
 8004f80:	4640      	mov	r0, r8
 8004f82:	f000 fc03 	bl	800578c <_mprec_log10>
 8004f86:	4622      	mov	r2, r4
 8004f88:	ec51 0b10 	vmov	r0, r1, d0
 8004f8c:	462b      	mov	r3, r5
 8004f8e:	f7fb fdaf 	bl	8000af0 <__aeabi_dcmple>
 8004f92:	2800      	cmp	r0, #0
 8004f94:	d1e8      	bne.n	8004f68 <_gcvt+0x58>
 8004f96:	ab07      	add	r3, sp, #28
 8004f98:	9301      	str	r3, [sp, #4]
 8004f9a:	ab06      	add	r3, sp, #24
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	4642      	mov	r2, r8
 8004fa0:	ab05      	add	r3, sp, #20
 8004fa2:	ec45 4b10 	vmov	d0, r4, r5
 8004fa6:	2102      	movs	r1, #2
 8004fa8:	4648      	mov	r0, r9
 8004faa:	f001 f851 	bl	8006050 <_dtoa_r>
 8004fae:	9a05      	ldr	r2, [sp, #20]
 8004fb0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d00e      	beq.n	8004fd6 <_gcvt+0xc6>
 8004fb8:	4633      	mov	r3, r6
 8004fba:	44b0      	add	r8, r6
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	f810 5b01 	ldrb.w	r5, [r0], #1
 8004fc2:	9905      	ldr	r1, [sp, #20]
 8004fc4:	eba8 0203 	sub.w	r2, r8, r3
 8004fc8:	b10d      	cbz	r5, 8004fce <_gcvt+0xbe>
 8004fca:	2900      	cmp	r1, #0
 8004fcc:	dc08      	bgt.n	8004fe0 <_gcvt+0xd0>
 8004fce:	2000      	movs	r0, #0
 8004fd0:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8004fd4:	e00d      	b.n	8004ff2 <_gcvt+0xe2>
 8004fd6:	4601      	mov	r1, r0
 8004fd8:	4630      	mov	r0, r6
 8004fda:	f000 ff85 	bl	8005ee8 <strcpy>
 8004fde:	e7b7      	b.n	8004f50 <_gcvt+0x40>
 8004fe0:	3901      	subs	r1, #1
 8004fe2:	f803 5b01 	strb.w	r5, [r3], #1
 8004fe6:	9105      	str	r1, [sp, #20]
 8004fe8:	e7e8      	b.n	8004fbc <_gcvt+0xac>
 8004fea:	f803 cb01 	strb.w	ip, [r3], #1
 8004fee:	3a01      	subs	r2, #1
 8004ff0:	2001      	movs	r0, #1
 8004ff2:	2900      	cmp	r1, #0
 8004ff4:	460d      	mov	r5, r1
 8004ff6:	dc2a      	bgt.n	800504e <_gcvt+0x13e>
 8004ff8:	b100      	cbz	r0, 8004ffc <_gcvt+0xec>
 8004ffa:	9105      	str	r1, [sp, #20]
 8004ffc:	b90f      	cbnz	r7, 8005002 <_gcvt+0xf2>
 8004ffe:	7821      	ldrb	r1, [r4, #0]
 8005000:	b311      	cbz	r1, 8005048 <_gcvt+0x138>
 8005002:	42b3      	cmp	r3, r6
 8005004:	bf04      	itt	eq
 8005006:	2130      	moveq	r1, #48	; 0x30
 8005008:	f803 1b01 	strbeq.w	r1, [r3], #1
 800500c:	212e      	movs	r1, #46	; 0x2e
 800500e:	7019      	strb	r1, [r3, #0]
 8005010:	9905      	ldr	r1, [sp, #20]
 8005012:	4618      	mov	r0, r3
 8005014:	2500      	movs	r5, #0
 8005016:	eba1 0c03 	sub.w	ip, r1, r3
 800501a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800501e:	eb1c 0f00 	cmn.w	ip, r0
 8005022:	d41c      	bmi.n	800505e <_gcvt+0x14e>
 8005024:	2900      	cmp	r1, #0
 8005026:	f1c1 0000 	rsb	r0, r1, #0
 800502a:	bfc8      	it	gt
 800502c:	2000      	movgt	r0, #0
 800502e:	f100 0c01 	add.w	ip, r0, #1
 8005032:	4463      	add	r3, ip
 8005034:	4401      	add	r1, r0
 8005036:	b105      	cbz	r5, 800503a <_gcvt+0x12a>
 8005038:	9105      	str	r1, [sp, #20]
 800503a:	1e61      	subs	r1, r4, #1
 800503c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005040:	b108      	cbz	r0, 8005046 <_gcvt+0x136>
 8005042:	2a00      	cmp	r2, #0
 8005044:	dc0f      	bgt.n	8005066 <_gcvt+0x156>
 8005046:	b9df      	cbnz	r7, 8005080 <_gcvt+0x170>
 8005048:	2200      	movs	r2, #0
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	e780      	b.n	8004f50 <_gcvt+0x40>
 800504e:	2a00      	cmp	r2, #0
 8005050:	f101 31ff 	add.w	r1, r1, #4294967295
 8005054:	dcc9      	bgt.n	8004fea <_gcvt+0xda>
 8005056:	2800      	cmp	r0, #0
 8005058:	d0d0      	beq.n	8004ffc <_gcvt+0xec>
 800505a:	9505      	str	r5, [sp, #20]
 800505c:	e7ce      	b.n	8004ffc <_gcvt+0xec>
 800505e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8005062:	2501      	movs	r5, #1
 8005064:	e7db      	b.n	800501e <_gcvt+0x10e>
 8005066:	f803 0b01 	strb.w	r0, [r3], #1
 800506a:	3a01      	subs	r2, #1
 800506c:	e7e6      	b.n	800503c <_gcvt+0x12c>
 800506e:	f801 5b01 	strb.w	r5, [r1], #1
 8005072:	1a60      	subs	r0, r4, r1
 8005074:	2800      	cmp	r0, #0
 8005076:	dcfa      	bgt.n	800506e <_gcvt+0x15e>
 8005078:	2a00      	cmp	r2, #0
 800507a:	bfa8      	it	ge
 800507c:	189b      	addge	r3, r3, r2
 800507e:	e7e3      	b.n	8005048 <_gcvt+0x138>
 8005080:	4619      	mov	r1, r3
 8005082:	189c      	adds	r4, r3, r2
 8005084:	2530      	movs	r5, #48	; 0x30
 8005086:	e7f4      	b.n	8005072 <_gcvt+0x162>
 8005088:	eb1c432d 	.word	0xeb1c432d
 800508c:	3f1a36e2 	.word	0x3f1a36e2

08005090 <_Balloc>:
 8005090:	b570      	push	{r4, r5, r6, lr}
 8005092:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005094:	4604      	mov	r4, r0
 8005096:	460d      	mov	r5, r1
 8005098:	b976      	cbnz	r6, 80050b8 <_Balloc+0x28>
 800509a:	2010      	movs	r0, #16
 800509c:	f001 fdd6 	bl	8006c4c <malloc>
 80050a0:	4602      	mov	r2, r0
 80050a2:	6260      	str	r0, [r4, #36]	; 0x24
 80050a4:	b920      	cbnz	r0, 80050b0 <_Balloc+0x20>
 80050a6:	4b18      	ldr	r3, [pc, #96]	; (8005108 <_Balloc+0x78>)
 80050a8:	4818      	ldr	r0, [pc, #96]	; (800510c <_Balloc+0x7c>)
 80050aa:	2166      	movs	r1, #102	; 0x66
 80050ac:	f000 ff24 	bl	8005ef8 <__assert_func>
 80050b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050b4:	6006      	str	r6, [r0, #0]
 80050b6:	60c6      	str	r6, [r0, #12]
 80050b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80050ba:	68f3      	ldr	r3, [r6, #12]
 80050bc:	b183      	cbz	r3, 80050e0 <_Balloc+0x50>
 80050be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80050c6:	b9b8      	cbnz	r0, 80050f8 <_Balloc+0x68>
 80050c8:	2101      	movs	r1, #1
 80050ca:	fa01 f605 	lsl.w	r6, r1, r5
 80050ce:	1d72      	adds	r2, r6, #5
 80050d0:	0092      	lsls	r2, r2, #2
 80050d2:	4620      	mov	r0, r4
 80050d4:	f000 fb78 	bl	80057c8 <_calloc_r>
 80050d8:	b160      	cbz	r0, 80050f4 <_Balloc+0x64>
 80050da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80050de:	e00e      	b.n	80050fe <_Balloc+0x6e>
 80050e0:	2221      	movs	r2, #33	; 0x21
 80050e2:	2104      	movs	r1, #4
 80050e4:	4620      	mov	r0, r4
 80050e6:	f000 fb6f 	bl	80057c8 <_calloc_r>
 80050ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050ec:	60f0      	str	r0, [r6, #12]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e4      	bne.n	80050be <_Balloc+0x2e>
 80050f4:	2000      	movs	r0, #0
 80050f6:	bd70      	pop	{r4, r5, r6, pc}
 80050f8:	6802      	ldr	r2, [r0, #0]
 80050fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80050fe:	2300      	movs	r3, #0
 8005100:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005104:	e7f7      	b.n	80050f6 <_Balloc+0x66>
 8005106:	bf00      	nop
 8005108:	080081dc 	.word	0x080081dc
 800510c:	080081f3 	.word	0x080081f3

08005110 <_Bfree>:
 8005110:	b570      	push	{r4, r5, r6, lr}
 8005112:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005114:	4605      	mov	r5, r0
 8005116:	460c      	mov	r4, r1
 8005118:	b976      	cbnz	r6, 8005138 <_Bfree+0x28>
 800511a:	2010      	movs	r0, #16
 800511c:	f001 fd96 	bl	8006c4c <malloc>
 8005120:	4602      	mov	r2, r0
 8005122:	6268      	str	r0, [r5, #36]	; 0x24
 8005124:	b920      	cbnz	r0, 8005130 <_Bfree+0x20>
 8005126:	4b09      	ldr	r3, [pc, #36]	; (800514c <_Bfree+0x3c>)
 8005128:	4809      	ldr	r0, [pc, #36]	; (8005150 <_Bfree+0x40>)
 800512a:	218a      	movs	r1, #138	; 0x8a
 800512c:	f000 fee4 	bl	8005ef8 <__assert_func>
 8005130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005134:	6006      	str	r6, [r0, #0]
 8005136:	60c6      	str	r6, [r0, #12]
 8005138:	b13c      	cbz	r4, 800514a <_Bfree+0x3a>
 800513a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800513c:	6862      	ldr	r2, [r4, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005144:	6021      	str	r1, [r4, #0]
 8005146:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800514a:	bd70      	pop	{r4, r5, r6, pc}
 800514c:	080081dc 	.word	0x080081dc
 8005150:	080081f3 	.word	0x080081f3

08005154 <__multadd>:
 8005154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005158:	690e      	ldr	r6, [r1, #16]
 800515a:	4607      	mov	r7, r0
 800515c:	4698      	mov	r8, r3
 800515e:	460c      	mov	r4, r1
 8005160:	f101 0014 	add.w	r0, r1, #20
 8005164:	2300      	movs	r3, #0
 8005166:	6805      	ldr	r5, [r0, #0]
 8005168:	b2a9      	uxth	r1, r5
 800516a:	fb02 8101 	mla	r1, r2, r1, r8
 800516e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005172:	0c2d      	lsrs	r5, r5, #16
 8005174:	fb02 c505 	mla	r5, r2, r5, ip
 8005178:	b289      	uxth	r1, r1
 800517a:	3301      	adds	r3, #1
 800517c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005180:	429e      	cmp	r6, r3
 8005182:	f840 1b04 	str.w	r1, [r0], #4
 8005186:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800518a:	dcec      	bgt.n	8005166 <__multadd+0x12>
 800518c:	f1b8 0f00 	cmp.w	r8, #0
 8005190:	d022      	beq.n	80051d8 <__multadd+0x84>
 8005192:	68a3      	ldr	r3, [r4, #8]
 8005194:	42b3      	cmp	r3, r6
 8005196:	dc19      	bgt.n	80051cc <__multadd+0x78>
 8005198:	6861      	ldr	r1, [r4, #4]
 800519a:	4638      	mov	r0, r7
 800519c:	3101      	adds	r1, #1
 800519e:	f7ff ff77 	bl	8005090 <_Balloc>
 80051a2:	4605      	mov	r5, r0
 80051a4:	b928      	cbnz	r0, 80051b2 <__multadd+0x5e>
 80051a6:	4602      	mov	r2, r0
 80051a8:	4b0d      	ldr	r3, [pc, #52]	; (80051e0 <__multadd+0x8c>)
 80051aa:	480e      	ldr	r0, [pc, #56]	; (80051e4 <__multadd+0x90>)
 80051ac:	21b5      	movs	r1, #181	; 0xb5
 80051ae:	f000 fea3 	bl	8005ef8 <__assert_func>
 80051b2:	6922      	ldr	r2, [r4, #16]
 80051b4:	3202      	adds	r2, #2
 80051b6:	f104 010c 	add.w	r1, r4, #12
 80051ba:	0092      	lsls	r2, r2, #2
 80051bc:	300c      	adds	r0, #12
 80051be:	f001 fd4d 	bl	8006c5c <memcpy>
 80051c2:	4621      	mov	r1, r4
 80051c4:	4638      	mov	r0, r7
 80051c6:	f7ff ffa3 	bl	8005110 <_Bfree>
 80051ca:	462c      	mov	r4, r5
 80051cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80051d0:	3601      	adds	r6, #1
 80051d2:	f8c3 8014 	str.w	r8, [r3, #20]
 80051d6:	6126      	str	r6, [r4, #16]
 80051d8:	4620      	mov	r0, r4
 80051da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051de:	bf00      	nop
 80051e0:	08008253 	.word	0x08008253
 80051e4:	080081f3 	.word	0x080081f3

080051e8 <__hi0bits>:
 80051e8:	0c03      	lsrs	r3, r0, #16
 80051ea:	041b      	lsls	r3, r3, #16
 80051ec:	b9d3      	cbnz	r3, 8005224 <__hi0bits+0x3c>
 80051ee:	0400      	lsls	r0, r0, #16
 80051f0:	2310      	movs	r3, #16
 80051f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80051f6:	bf04      	itt	eq
 80051f8:	0200      	lsleq	r0, r0, #8
 80051fa:	3308      	addeq	r3, #8
 80051fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005200:	bf04      	itt	eq
 8005202:	0100      	lsleq	r0, r0, #4
 8005204:	3304      	addeq	r3, #4
 8005206:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800520a:	bf04      	itt	eq
 800520c:	0080      	lsleq	r0, r0, #2
 800520e:	3302      	addeq	r3, #2
 8005210:	2800      	cmp	r0, #0
 8005212:	db05      	blt.n	8005220 <__hi0bits+0x38>
 8005214:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005218:	f103 0301 	add.w	r3, r3, #1
 800521c:	bf08      	it	eq
 800521e:	2320      	moveq	r3, #32
 8005220:	4618      	mov	r0, r3
 8005222:	4770      	bx	lr
 8005224:	2300      	movs	r3, #0
 8005226:	e7e4      	b.n	80051f2 <__hi0bits+0xa>

08005228 <__lo0bits>:
 8005228:	6803      	ldr	r3, [r0, #0]
 800522a:	f013 0207 	ands.w	r2, r3, #7
 800522e:	4601      	mov	r1, r0
 8005230:	d00b      	beq.n	800524a <__lo0bits+0x22>
 8005232:	07da      	lsls	r2, r3, #31
 8005234:	d424      	bmi.n	8005280 <__lo0bits+0x58>
 8005236:	0798      	lsls	r0, r3, #30
 8005238:	bf49      	itett	mi
 800523a:	085b      	lsrmi	r3, r3, #1
 800523c:	089b      	lsrpl	r3, r3, #2
 800523e:	2001      	movmi	r0, #1
 8005240:	600b      	strmi	r3, [r1, #0]
 8005242:	bf5c      	itt	pl
 8005244:	600b      	strpl	r3, [r1, #0]
 8005246:	2002      	movpl	r0, #2
 8005248:	4770      	bx	lr
 800524a:	b298      	uxth	r0, r3
 800524c:	b9b0      	cbnz	r0, 800527c <__lo0bits+0x54>
 800524e:	0c1b      	lsrs	r3, r3, #16
 8005250:	2010      	movs	r0, #16
 8005252:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005256:	bf04      	itt	eq
 8005258:	0a1b      	lsreq	r3, r3, #8
 800525a:	3008      	addeq	r0, #8
 800525c:	071a      	lsls	r2, r3, #28
 800525e:	bf04      	itt	eq
 8005260:	091b      	lsreq	r3, r3, #4
 8005262:	3004      	addeq	r0, #4
 8005264:	079a      	lsls	r2, r3, #30
 8005266:	bf04      	itt	eq
 8005268:	089b      	lsreq	r3, r3, #2
 800526a:	3002      	addeq	r0, #2
 800526c:	07da      	lsls	r2, r3, #31
 800526e:	d403      	bmi.n	8005278 <__lo0bits+0x50>
 8005270:	085b      	lsrs	r3, r3, #1
 8005272:	f100 0001 	add.w	r0, r0, #1
 8005276:	d005      	beq.n	8005284 <__lo0bits+0x5c>
 8005278:	600b      	str	r3, [r1, #0]
 800527a:	4770      	bx	lr
 800527c:	4610      	mov	r0, r2
 800527e:	e7e8      	b.n	8005252 <__lo0bits+0x2a>
 8005280:	2000      	movs	r0, #0
 8005282:	4770      	bx	lr
 8005284:	2020      	movs	r0, #32
 8005286:	4770      	bx	lr

08005288 <__i2b>:
 8005288:	b510      	push	{r4, lr}
 800528a:	460c      	mov	r4, r1
 800528c:	2101      	movs	r1, #1
 800528e:	f7ff feff 	bl	8005090 <_Balloc>
 8005292:	4602      	mov	r2, r0
 8005294:	b928      	cbnz	r0, 80052a2 <__i2b+0x1a>
 8005296:	4b05      	ldr	r3, [pc, #20]	; (80052ac <__i2b+0x24>)
 8005298:	4805      	ldr	r0, [pc, #20]	; (80052b0 <__i2b+0x28>)
 800529a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800529e:	f000 fe2b 	bl	8005ef8 <__assert_func>
 80052a2:	2301      	movs	r3, #1
 80052a4:	6144      	str	r4, [r0, #20]
 80052a6:	6103      	str	r3, [r0, #16]
 80052a8:	bd10      	pop	{r4, pc}
 80052aa:	bf00      	nop
 80052ac:	08008253 	.word	0x08008253
 80052b0:	080081f3 	.word	0x080081f3

080052b4 <__multiply>:
 80052b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b8:	4614      	mov	r4, r2
 80052ba:	690a      	ldr	r2, [r1, #16]
 80052bc:	6923      	ldr	r3, [r4, #16]
 80052be:	429a      	cmp	r2, r3
 80052c0:	bfb8      	it	lt
 80052c2:	460b      	movlt	r3, r1
 80052c4:	460d      	mov	r5, r1
 80052c6:	bfbc      	itt	lt
 80052c8:	4625      	movlt	r5, r4
 80052ca:	461c      	movlt	r4, r3
 80052cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80052d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80052d4:	68ab      	ldr	r3, [r5, #8]
 80052d6:	6869      	ldr	r1, [r5, #4]
 80052d8:	eb0a 0709 	add.w	r7, sl, r9
 80052dc:	42bb      	cmp	r3, r7
 80052de:	b085      	sub	sp, #20
 80052e0:	bfb8      	it	lt
 80052e2:	3101      	addlt	r1, #1
 80052e4:	f7ff fed4 	bl	8005090 <_Balloc>
 80052e8:	b930      	cbnz	r0, 80052f8 <__multiply+0x44>
 80052ea:	4602      	mov	r2, r0
 80052ec:	4b42      	ldr	r3, [pc, #264]	; (80053f8 <__multiply+0x144>)
 80052ee:	4843      	ldr	r0, [pc, #268]	; (80053fc <__multiply+0x148>)
 80052f0:	f240 115d 	movw	r1, #349	; 0x15d
 80052f4:	f000 fe00 	bl	8005ef8 <__assert_func>
 80052f8:	f100 0614 	add.w	r6, r0, #20
 80052fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005300:	4633      	mov	r3, r6
 8005302:	2200      	movs	r2, #0
 8005304:	4543      	cmp	r3, r8
 8005306:	d31e      	bcc.n	8005346 <__multiply+0x92>
 8005308:	f105 0c14 	add.w	ip, r5, #20
 800530c:	f104 0314 	add.w	r3, r4, #20
 8005310:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005314:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005318:	9202      	str	r2, [sp, #8]
 800531a:	ebac 0205 	sub.w	r2, ip, r5
 800531e:	3a15      	subs	r2, #21
 8005320:	f022 0203 	bic.w	r2, r2, #3
 8005324:	3204      	adds	r2, #4
 8005326:	f105 0115 	add.w	r1, r5, #21
 800532a:	458c      	cmp	ip, r1
 800532c:	bf38      	it	cc
 800532e:	2204      	movcc	r2, #4
 8005330:	9201      	str	r2, [sp, #4]
 8005332:	9a02      	ldr	r2, [sp, #8]
 8005334:	9303      	str	r3, [sp, #12]
 8005336:	429a      	cmp	r2, r3
 8005338:	d808      	bhi.n	800534c <__multiply+0x98>
 800533a:	2f00      	cmp	r7, #0
 800533c:	dc55      	bgt.n	80053ea <__multiply+0x136>
 800533e:	6107      	str	r7, [r0, #16]
 8005340:	b005      	add	sp, #20
 8005342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005346:	f843 2b04 	str.w	r2, [r3], #4
 800534a:	e7db      	b.n	8005304 <__multiply+0x50>
 800534c:	f8b3 a000 	ldrh.w	sl, [r3]
 8005350:	f1ba 0f00 	cmp.w	sl, #0
 8005354:	d020      	beq.n	8005398 <__multiply+0xe4>
 8005356:	f105 0e14 	add.w	lr, r5, #20
 800535a:	46b1      	mov	r9, r6
 800535c:	2200      	movs	r2, #0
 800535e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005362:	f8d9 b000 	ldr.w	fp, [r9]
 8005366:	b2a1      	uxth	r1, r4
 8005368:	fa1f fb8b 	uxth.w	fp, fp
 800536c:	fb0a b101 	mla	r1, sl, r1, fp
 8005370:	4411      	add	r1, r2
 8005372:	f8d9 2000 	ldr.w	r2, [r9]
 8005376:	0c24      	lsrs	r4, r4, #16
 8005378:	0c12      	lsrs	r2, r2, #16
 800537a:	fb0a 2404 	mla	r4, sl, r4, r2
 800537e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005382:	b289      	uxth	r1, r1
 8005384:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005388:	45f4      	cmp	ip, lr
 800538a:	f849 1b04 	str.w	r1, [r9], #4
 800538e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005392:	d8e4      	bhi.n	800535e <__multiply+0xaa>
 8005394:	9901      	ldr	r1, [sp, #4]
 8005396:	5072      	str	r2, [r6, r1]
 8005398:	9a03      	ldr	r2, [sp, #12]
 800539a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800539e:	3304      	adds	r3, #4
 80053a0:	f1b9 0f00 	cmp.w	r9, #0
 80053a4:	d01f      	beq.n	80053e6 <__multiply+0x132>
 80053a6:	6834      	ldr	r4, [r6, #0]
 80053a8:	f105 0114 	add.w	r1, r5, #20
 80053ac:	46b6      	mov	lr, r6
 80053ae:	f04f 0a00 	mov.w	sl, #0
 80053b2:	880a      	ldrh	r2, [r1, #0]
 80053b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80053b8:	fb09 b202 	mla	r2, r9, r2, fp
 80053bc:	4492      	add	sl, r2
 80053be:	b2a4      	uxth	r4, r4
 80053c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80053c4:	f84e 4b04 	str.w	r4, [lr], #4
 80053c8:	f851 4b04 	ldr.w	r4, [r1], #4
 80053cc:	f8be 2000 	ldrh.w	r2, [lr]
 80053d0:	0c24      	lsrs	r4, r4, #16
 80053d2:	fb09 2404 	mla	r4, r9, r4, r2
 80053d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80053da:	458c      	cmp	ip, r1
 80053dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80053e0:	d8e7      	bhi.n	80053b2 <__multiply+0xfe>
 80053e2:	9a01      	ldr	r2, [sp, #4]
 80053e4:	50b4      	str	r4, [r6, r2]
 80053e6:	3604      	adds	r6, #4
 80053e8:	e7a3      	b.n	8005332 <__multiply+0x7e>
 80053ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1a5      	bne.n	800533e <__multiply+0x8a>
 80053f2:	3f01      	subs	r7, #1
 80053f4:	e7a1      	b.n	800533a <__multiply+0x86>
 80053f6:	bf00      	nop
 80053f8:	08008253 	.word	0x08008253
 80053fc:	080081f3 	.word	0x080081f3

08005400 <__pow5mult>:
 8005400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005404:	4615      	mov	r5, r2
 8005406:	f012 0203 	ands.w	r2, r2, #3
 800540a:	4606      	mov	r6, r0
 800540c:	460f      	mov	r7, r1
 800540e:	d007      	beq.n	8005420 <__pow5mult+0x20>
 8005410:	4c25      	ldr	r4, [pc, #148]	; (80054a8 <__pow5mult+0xa8>)
 8005412:	3a01      	subs	r2, #1
 8005414:	2300      	movs	r3, #0
 8005416:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800541a:	f7ff fe9b 	bl	8005154 <__multadd>
 800541e:	4607      	mov	r7, r0
 8005420:	10ad      	asrs	r5, r5, #2
 8005422:	d03d      	beq.n	80054a0 <__pow5mult+0xa0>
 8005424:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005426:	b97c      	cbnz	r4, 8005448 <__pow5mult+0x48>
 8005428:	2010      	movs	r0, #16
 800542a:	f001 fc0f 	bl	8006c4c <malloc>
 800542e:	4602      	mov	r2, r0
 8005430:	6270      	str	r0, [r6, #36]	; 0x24
 8005432:	b928      	cbnz	r0, 8005440 <__pow5mult+0x40>
 8005434:	4b1d      	ldr	r3, [pc, #116]	; (80054ac <__pow5mult+0xac>)
 8005436:	481e      	ldr	r0, [pc, #120]	; (80054b0 <__pow5mult+0xb0>)
 8005438:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800543c:	f000 fd5c 	bl	8005ef8 <__assert_func>
 8005440:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005444:	6004      	str	r4, [r0, #0]
 8005446:	60c4      	str	r4, [r0, #12]
 8005448:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800544c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005450:	b94c      	cbnz	r4, 8005466 <__pow5mult+0x66>
 8005452:	f240 2171 	movw	r1, #625	; 0x271
 8005456:	4630      	mov	r0, r6
 8005458:	f7ff ff16 	bl	8005288 <__i2b>
 800545c:	2300      	movs	r3, #0
 800545e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005462:	4604      	mov	r4, r0
 8005464:	6003      	str	r3, [r0, #0]
 8005466:	f04f 0900 	mov.w	r9, #0
 800546a:	07eb      	lsls	r3, r5, #31
 800546c:	d50a      	bpl.n	8005484 <__pow5mult+0x84>
 800546e:	4639      	mov	r1, r7
 8005470:	4622      	mov	r2, r4
 8005472:	4630      	mov	r0, r6
 8005474:	f7ff ff1e 	bl	80052b4 <__multiply>
 8005478:	4639      	mov	r1, r7
 800547a:	4680      	mov	r8, r0
 800547c:	4630      	mov	r0, r6
 800547e:	f7ff fe47 	bl	8005110 <_Bfree>
 8005482:	4647      	mov	r7, r8
 8005484:	106d      	asrs	r5, r5, #1
 8005486:	d00b      	beq.n	80054a0 <__pow5mult+0xa0>
 8005488:	6820      	ldr	r0, [r4, #0]
 800548a:	b938      	cbnz	r0, 800549c <__pow5mult+0x9c>
 800548c:	4622      	mov	r2, r4
 800548e:	4621      	mov	r1, r4
 8005490:	4630      	mov	r0, r6
 8005492:	f7ff ff0f 	bl	80052b4 <__multiply>
 8005496:	6020      	str	r0, [r4, #0]
 8005498:	f8c0 9000 	str.w	r9, [r0]
 800549c:	4604      	mov	r4, r0
 800549e:	e7e4      	b.n	800546a <__pow5mult+0x6a>
 80054a0:	4638      	mov	r0, r7
 80054a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054a6:	bf00      	nop
 80054a8:	08008358 	.word	0x08008358
 80054ac:	080081dc 	.word	0x080081dc
 80054b0:	080081f3 	.word	0x080081f3

080054b4 <__lshift>:
 80054b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054b8:	460c      	mov	r4, r1
 80054ba:	6849      	ldr	r1, [r1, #4]
 80054bc:	6923      	ldr	r3, [r4, #16]
 80054be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80054c2:	68a3      	ldr	r3, [r4, #8]
 80054c4:	4607      	mov	r7, r0
 80054c6:	4691      	mov	r9, r2
 80054c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80054cc:	f108 0601 	add.w	r6, r8, #1
 80054d0:	42b3      	cmp	r3, r6
 80054d2:	db0b      	blt.n	80054ec <__lshift+0x38>
 80054d4:	4638      	mov	r0, r7
 80054d6:	f7ff fddb 	bl	8005090 <_Balloc>
 80054da:	4605      	mov	r5, r0
 80054dc:	b948      	cbnz	r0, 80054f2 <__lshift+0x3e>
 80054de:	4602      	mov	r2, r0
 80054e0:	4b28      	ldr	r3, [pc, #160]	; (8005584 <__lshift+0xd0>)
 80054e2:	4829      	ldr	r0, [pc, #164]	; (8005588 <__lshift+0xd4>)
 80054e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80054e8:	f000 fd06 	bl	8005ef8 <__assert_func>
 80054ec:	3101      	adds	r1, #1
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	e7ee      	b.n	80054d0 <__lshift+0x1c>
 80054f2:	2300      	movs	r3, #0
 80054f4:	f100 0114 	add.w	r1, r0, #20
 80054f8:	f100 0210 	add.w	r2, r0, #16
 80054fc:	4618      	mov	r0, r3
 80054fe:	4553      	cmp	r3, sl
 8005500:	db33      	blt.n	800556a <__lshift+0xb6>
 8005502:	6920      	ldr	r0, [r4, #16]
 8005504:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005508:	f104 0314 	add.w	r3, r4, #20
 800550c:	f019 091f 	ands.w	r9, r9, #31
 8005510:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005514:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005518:	d02b      	beq.n	8005572 <__lshift+0xbe>
 800551a:	f1c9 0e20 	rsb	lr, r9, #32
 800551e:	468a      	mov	sl, r1
 8005520:	2200      	movs	r2, #0
 8005522:	6818      	ldr	r0, [r3, #0]
 8005524:	fa00 f009 	lsl.w	r0, r0, r9
 8005528:	4302      	orrs	r2, r0
 800552a:	f84a 2b04 	str.w	r2, [sl], #4
 800552e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005532:	459c      	cmp	ip, r3
 8005534:	fa22 f20e 	lsr.w	r2, r2, lr
 8005538:	d8f3      	bhi.n	8005522 <__lshift+0x6e>
 800553a:	ebac 0304 	sub.w	r3, ip, r4
 800553e:	3b15      	subs	r3, #21
 8005540:	f023 0303 	bic.w	r3, r3, #3
 8005544:	3304      	adds	r3, #4
 8005546:	f104 0015 	add.w	r0, r4, #21
 800554a:	4584      	cmp	ip, r0
 800554c:	bf38      	it	cc
 800554e:	2304      	movcc	r3, #4
 8005550:	50ca      	str	r2, [r1, r3]
 8005552:	b10a      	cbz	r2, 8005558 <__lshift+0xa4>
 8005554:	f108 0602 	add.w	r6, r8, #2
 8005558:	3e01      	subs	r6, #1
 800555a:	4638      	mov	r0, r7
 800555c:	612e      	str	r6, [r5, #16]
 800555e:	4621      	mov	r1, r4
 8005560:	f7ff fdd6 	bl	8005110 <_Bfree>
 8005564:	4628      	mov	r0, r5
 8005566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800556a:	f842 0f04 	str.w	r0, [r2, #4]!
 800556e:	3301      	adds	r3, #1
 8005570:	e7c5      	b.n	80054fe <__lshift+0x4a>
 8005572:	3904      	subs	r1, #4
 8005574:	f853 2b04 	ldr.w	r2, [r3], #4
 8005578:	f841 2f04 	str.w	r2, [r1, #4]!
 800557c:	459c      	cmp	ip, r3
 800557e:	d8f9      	bhi.n	8005574 <__lshift+0xc0>
 8005580:	e7ea      	b.n	8005558 <__lshift+0xa4>
 8005582:	bf00      	nop
 8005584:	08008253 	.word	0x08008253
 8005588:	080081f3 	.word	0x080081f3

0800558c <__mcmp>:
 800558c:	b530      	push	{r4, r5, lr}
 800558e:	6902      	ldr	r2, [r0, #16]
 8005590:	690c      	ldr	r4, [r1, #16]
 8005592:	1b12      	subs	r2, r2, r4
 8005594:	d10e      	bne.n	80055b4 <__mcmp+0x28>
 8005596:	f100 0314 	add.w	r3, r0, #20
 800559a:	3114      	adds	r1, #20
 800559c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80055a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80055a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80055a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80055ac:	42a5      	cmp	r5, r4
 80055ae:	d003      	beq.n	80055b8 <__mcmp+0x2c>
 80055b0:	d305      	bcc.n	80055be <__mcmp+0x32>
 80055b2:	2201      	movs	r2, #1
 80055b4:	4610      	mov	r0, r2
 80055b6:	bd30      	pop	{r4, r5, pc}
 80055b8:	4283      	cmp	r3, r0
 80055ba:	d3f3      	bcc.n	80055a4 <__mcmp+0x18>
 80055bc:	e7fa      	b.n	80055b4 <__mcmp+0x28>
 80055be:	f04f 32ff 	mov.w	r2, #4294967295
 80055c2:	e7f7      	b.n	80055b4 <__mcmp+0x28>

080055c4 <__mdiff>:
 80055c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c8:	460c      	mov	r4, r1
 80055ca:	4606      	mov	r6, r0
 80055cc:	4611      	mov	r1, r2
 80055ce:	4620      	mov	r0, r4
 80055d0:	4617      	mov	r7, r2
 80055d2:	f7ff ffdb 	bl	800558c <__mcmp>
 80055d6:	1e05      	subs	r5, r0, #0
 80055d8:	d110      	bne.n	80055fc <__mdiff+0x38>
 80055da:	4629      	mov	r1, r5
 80055dc:	4630      	mov	r0, r6
 80055de:	f7ff fd57 	bl	8005090 <_Balloc>
 80055e2:	b930      	cbnz	r0, 80055f2 <__mdiff+0x2e>
 80055e4:	4b39      	ldr	r3, [pc, #228]	; (80056cc <__mdiff+0x108>)
 80055e6:	4602      	mov	r2, r0
 80055e8:	f240 2132 	movw	r1, #562	; 0x232
 80055ec:	4838      	ldr	r0, [pc, #224]	; (80056d0 <__mdiff+0x10c>)
 80055ee:	f000 fc83 	bl	8005ef8 <__assert_func>
 80055f2:	2301      	movs	r3, #1
 80055f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80055f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055fc:	bfa4      	itt	ge
 80055fe:	463b      	movge	r3, r7
 8005600:	4627      	movge	r7, r4
 8005602:	4630      	mov	r0, r6
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	bfa6      	itte	ge
 8005608:	461c      	movge	r4, r3
 800560a:	2500      	movge	r5, #0
 800560c:	2501      	movlt	r5, #1
 800560e:	f7ff fd3f 	bl	8005090 <_Balloc>
 8005612:	b920      	cbnz	r0, 800561e <__mdiff+0x5a>
 8005614:	4b2d      	ldr	r3, [pc, #180]	; (80056cc <__mdiff+0x108>)
 8005616:	4602      	mov	r2, r0
 8005618:	f44f 7110 	mov.w	r1, #576	; 0x240
 800561c:	e7e6      	b.n	80055ec <__mdiff+0x28>
 800561e:	693e      	ldr	r6, [r7, #16]
 8005620:	60c5      	str	r5, [r0, #12]
 8005622:	6925      	ldr	r5, [r4, #16]
 8005624:	f107 0114 	add.w	r1, r7, #20
 8005628:	f104 0914 	add.w	r9, r4, #20
 800562c:	f100 0e14 	add.w	lr, r0, #20
 8005630:	f107 0210 	add.w	r2, r7, #16
 8005634:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005638:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800563c:	46f2      	mov	sl, lr
 800563e:	2700      	movs	r7, #0
 8005640:	f859 3b04 	ldr.w	r3, [r9], #4
 8005644:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005648:	fa1f f883 	uxth.w	r8, r3
 800564c:	fa17 f78b 	uxtah	r7, r7, fp
 8005650:	0c1b      	lsrs	r3, r3, #16
 8005652:	eba7 0808 	sub.w	r8, r7, r8
 8005656:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800565a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800565e:	fa1f f888 	uxth.w	r8, r8
 8005662:	141f      	asrs	r7, r3, #16
 8005664:	454d      	cmp	r5, r9
 8005666:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800566a:	f84a 3b04 	str.w	r3, [sl], #4
 800566e:	d8e7      	bhi.n	8005640 <__mdiff+0x7c>
 8005670:	1b2b      	subs	r3, r5, r4
 8005672:	3b15      	subs	r3, #21
 8005674:	f023 0303 	bic.w	r3, r3, #3
 8005678:	3304      	adds	r3, #4
 800567a:	3415      	adds	r4, #21
 800567c:	42a5      	cmp	r5, r4
 800567e:	bf38      	it	cc
 8005680:	2304      	movcc	r3, #4
 8005682:	4419      	add	r1, r3
 8005684:	4473      	add	r3, lr
 8005686:	469e      	mov	lr, r3
 8005688:	460d      	mov	r5, r1
 800568a:	4565      	cmp	r5, ip
 800568c:	d30e      	bcc.n	80056ac <__mdiff+0xe8>
 800568e:	f10c 0203 	add.w	r2, ip, #3
 8005692:	1a52      	subs	r2, r2, r1
 8005694:	f022 0203 	bic.w	r2, r2, #3
 8005698:	3903      	subs	r1, #3
 800569a:	458c      	cmp	ip, r1
 800569c:	bf38      	it	cc
 800569e:	2200      	movcc	r2, #0
 80056a0:	441a      	add	r2, r3
 80056a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80056a6:	b17b      	cbz	r3, 80056c8 <__mdiff+0x104>
 80056a8:	6106      	str	r6, [r0, #16]
 80056aa:	e7a5      	b.n	80055f8 <__mdiff+0x34>
 80056ac:	f855 8b04 	ldr.w	r8, [r5], #4
 80056b0:	fa17 f488 	uxtah	r4, r7, r8
 80056b4:	1422      	asrs	r2, r4, #16
 80056b6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80056ba:	b2a4      	uxth	r4, r4
 80056bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80056c0:	f84e 4b04 	str.w	r4, [lr], #4
 80056c4:	1417      	asrs	r7, r2, #16
 80056c6:	e7e0      	b.n	800568a <__mdiff+0xc6>
 80056c8:	3e01      	subs	r6, #1
 80056ca:	e7ea      	b.n	80056a2 <__mdiff+0xde>
 80056cc:	08008253 	.word	0x08008253
 80056d0:	080081f3 	.word	0x080081f3

080056d4 <__d2b>:
 80056d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80056d8:	4689      	mov	r9, r1
 80056da:	2101      	movs	r1, #1
 80056dc:	ec57 6b10 	vmov	r6, r7, d0
 80056e0:	4690      	mov	r8, r2
 80056e2:	f7ff fcd5 	bl	8005090 <_Balloc>
 80056e6:	4604      	mov	r4, r0
 80056e8:	b930      	cbnz	r0, 80056f8 <__d2b+0x24>
 80056ea:	4602      	mov	r2, r0
 80056ec:	4b25      	ldr	r3, [pc, #148]	; (8005784 <__d2b+0xb0>)
 80056ee:	4826      	ldr	r0, [pc, #152]	; (8005788 <__d2b+0xb4>)
 80056f0:	f240 310a 	movw	r1, #778	; 0x30a
 80056f4:	f000 fc00 	bl	8005ef8 <__assert_func>
 80056f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80056fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005700:	bb35      	cbnz	r5, 8005750 <__d2b+0x7c>
 8005702:	2e00      	cmp	r6, #0
 8005704:	9301      	str	r3, [sp, #4]
 8005706:	d028      	beq.n	800575a <__d2b+0x86>
 8005708:	4668      	mov	r0, sp
 800570a:	9600      	str	r6, [sp, #0]
 800570c:	f7ff fd8c 	bl	8005228 <__lo0bits>
 8005710:	9900      	ldr	r1, [sp, #0]
 8005712:	b300      	cbz	r0, 8005756 <__d2b+0x82>
 8005714:	9a01      	ldr	r2, [sp, #4]
 8005716:	f1c0 0320 	rsb	r3, r0, #32
 800571a:	fa02 f303 	lsl.w	r3, r2, r3
 800571e:	430b      	orrs	r3, r1
 8005720:	40c2      	lsrs	r2, r0
 8005722:	6163      	str	r3, [r4, #20]
 8005724:	9201      	str	r2, [sp, #4]
 8005726:	9b01      	ldr	r3, [sp, #4]
 8005728:	61a3      	str	r3, [r4, #24]
 800572a:	2b00      	cmp	r3, #0
 800572c:	bf14      	ite	ne
 800572e:	2202      	movne	r2, #2
 8005730:	2201      	moveq	r2, #1
 8005732:	6122      	str	r2, [r4, #16]
 8005734:	b1d5      	cbz	r5, 800576c <__d2b+0x98>
 8005736:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800573a:	4405      	add	r5, r0
 800573c:	f8c9 5000 	str.w	r5, [r9]
 8005740:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005744:	f8c8 0000 	str.w	r0, [r8]
 8005748:	4620      	mov	r0, r4
 800574a:	b003      	add	sp, #12
 800574c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005754:	e7d5      	b.n	8005702 <__d2b+0x2e>
 8005756:	6161      	str	r1, [r4, #20]
 8005758:	e7e5      	b.n	8005726 <__d2b+0x52>
 800575a:	a801      	add	r0, sp, #4
 800575c:	f7ff fd64 	bl	8005228 <__lo0bits>
 8005760:	9b01      	ldr	r3, [sp, #4]
 8005762:	6163      	str	r3, [r4, #20]
 8005764:	2201      	movs	r2, #1
 8005766:	6122      	str	r2, [r4, #16]
 8005768:	3020      	adds	r0, #32
 800576a:	e7e3      	b.n	8005734 <__d2b+0x60>
 800576c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005770:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005774:	f8c9 0000 	str.w	r0, [r9]
 8005778:	6918      	ldr	r0, [r3, #16]
 800577a:	f7ff fd35 	bl	80051e8 <__hi0bits>
 800577e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005782:	e7df      	b.n	8005744 <__d2b+0x70>
 8005784:	08008253 	.word	0x08008253
 8005788:	080081f3 	.word	0x080081f3

0800578c <_mprec_log10>:
 800578c:	2817      	cmp	r0, #23
 800578e:	b5d0      	push	{r4, r6, r7, lr}
 8005790:	4604      	mov	r4, r0
 8005792:	dc07      	bgt.n	80057a4 <_mprec_log10+0x18>
 8005794:	4809      	ldr	r0, [pc, #36]	; (80057bc <_mprec_log10+0x30>)
 8005796:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800579a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800579e:	ec41 0b10 	vmov	d0, r0, r1
 80057a2:	bdd0      	pop	{r4, r6, r7, pc}
 80057a4:	4906      	ldr	r1, [pc, #24]	; (80057c0 <_mprec_log10+0x34>)
 80057a6:	4f07      	ldr	r7, [pc, #28]	; (80057c4 <_mprec_log10+0x38>)
 80057a8:	2000      	movs	r0, #0
 80057aa:	2600      	movs	r6, #0
 80057ac:	4632      	mov	r2, r6
 80057ae:	463b      	mov	r3, r7
 80057b0:	f7fa ff22 	bl	80005f8 <__aeabi_dmul>
 80057b4:	3c01      	subs	r4, #1
 80057b6:	d1f9      	bne.n	80057ac <_mprec_log10+0x20>
 80057b8:	e7f1      	b.n	800579e <_mprec_log10+0x12>
 80057ba:	bf00      	nop
 80057bc:	08008290 	.word	0x08008290
 80057c0:	3ff00000 	.word	0x3ff00000
 80057c4:	40240000 	.word	0x40240000

080057c8 <_calloc_r>:
 80057c8:	b513      	push	{r0, r1, r4, lr}
 80057ca:	434a      	muls	r2, r1
 80057cc:	4611      	mov	r1, r2
 80057ce:	9201      	str	r2, [sp, #4]
 80057d0:	f000 f80a 	bl	80057e8 <_malloc_r>
 80057d4:	4604      	mov	r4, r0
 80057d6:	b118      	cbz	r0, 80057e0 <_calloc_r+0x18>
 80057d8:	9a01      	ldr	r2, [sp, #4]
 80057da:	2100      	movs	r1, #0
 80057dc:	f7ff fac4 	bl	8004d68 <memset>
 80057e0:	4620      	mov	r0, r4
 80057e2:	b002      	add	sp, #8
 80057e4:	bd10      	pop	{r4, pc}
	...

080057e8 <_malloc_r>:
 80057e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ea:	1ccd      	adds	r5, r1, #3
 80057ec:	f025 0503 	bic.w	r5, r5, #3
 80057f0:	3508      	adds	r5, #8
 80057f2:	2d0c      	cmp	r5, #12
 80057f4:	bf38      	it	cc
 80057f6:	250c      	movcc	r5, #12
 80057f8:	2d00      	cmp	r5, #0
 80057fa:	4606      	mov	r6, r0
 80057fc:	db01      	blt.n	8005802 <_malloc_r+0x1a>
 80057fe:	42a9      	cmp	r1, r5
 8005800:	d903      	bls.n	800580a <_malloc_r+0x22>
 8005802:	230c      	movs	r3, #12
 8005804:	6033      	str	r3, [r6, #0]
 8005806:	2000      	movs	r0, #0
 8005808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800580a:	f001 fa4f 	bl	8006cac <__malloc_lock>
 800580e:	4921      	ldr	r1, [pc, #132]	; (8005894 <_malloc_r+0xac>)
 8005810:	680a      	ldr	r2, [r1, #0]
 8005812:	4614      	mov	r4, r2
 8005814:	b99c      	cbnz	r4, 800583e <_malloc_r+0x56>
 8005816:	4f20      	ldr	r7, [pc, #128]	; (8005898 <_malloc_r+0xb0>)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	b923      	cbnz	r3, 8005826 <_malloc_r+0x3e>
 800581c:	4621      	mov	r1, r4
 800581e:	4630      	mov	r0, r6
 8005820:	f000 fb52 	bl	8005ec8 <_sbrk_r>
 8005824:	6038      	str	r0, [r7, #0]
 8005826:	4629      	mov	r1, r5
 8005828:	4630      	mov	r0, r6
 800582a:	f000 fb4d 	bl	8005ec8 <_sbrk_r>
 800582e:	1c43      	adds	r3, r0, #1
 8005830:	d123      	bne.n	800587a <_malloc_r+0x92>
 8005832:	230c      	movs	r3, #12
 8005834:	6033      	str	r3, [r6, #0]
 8005836:	4630      	mov	r0, r6
 8005838:	f001 fa3e 	bl	8006cb8 <__malloc_unlock>
 800583c:	e7e3      	b.n	8005806 <_malloc_r+0x1e>
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	1b5b      	subs	r3, r3, r5
 8005842:	d417      	bmi.n	8005874 <_malloc_r+0x8c>
 8005844:	2b0b      	cmp	r3, #11
 8005846:	d903      	bls.n	8005850 <_malloc_r+0x68>
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	441c      	add	r4, r3
 800584c:	6025      	str	r5, [r4, #0]
 800584e:	e004      	b.n	800585a <_malloc_r+0x72>
 8005850:	6863      	ldr	r3, [r4, #4]
 8005852:	42a2      	cmp	r2, r4
 8005854:	bf0c      	ite	eq
 8005856:	600b      	streq	r3, [r1, #0]
 8005858:	6053      	strne	r3, [r2, #4]
 800585a:	4630      	mov	r0, r6
 800585c:	f001 fa2c 	bl	8006cb8 <__malloc_unlock>
 8005860:	f104 000b 	add.w	r0, r4, #11
 8005864:	1d23      	adds	r3, r4, #4
 8005866:	f020 0007 	bic.w	r0, r0, #7
 800586a:	1ac2      	subs	r2, r0, r3
 800586c:	d0cc      	beq.n	8005808 <_malloc_r+0x20>
 800586e:	1a1b      	subs	r3, r3, r0
 8005870:	50a3      	str	r3, [r4, r2]
 8005872:	e7c9      	b.n	8005808 <_malloc_r+0x20>
 8005874:	4622      	mov	r2, r4
 8005876:	6864      	ldr	r4, [r4, #4]
 8005878:	e7cc      	b.n	8005814 <_malloc_r+0x2c>
 800587a:	1cc4      	adds	r4, r0, #3
 800587c:	f024 0403 	bic.w	r4, r4, #3
 8005880:	42a0      	cmp	r0, r4
 8005882:	d0e3      	beq.n	800584c <_malloc_r+0x64>
 8005884:	1a21      	subs	r1, r4, r0
 8005886:	4630      	mov	r0, r6
 8005888:	f000 fb1e 	bl	8005ec8 <_sbrk_r>
 800588c:	3001      	adds	r0, #1
 800588e:	d1dd      	bne.n	800584c <_malloc_r+0x64>
 8005890:	e7cf      	b.n	8005832 <_malloc_r+0x4a>
 8005892:	bf00      	nop
 8005894:	20000098 	.word	0x20000098
 8005898:	2000009c 	.word	0x2000009c

0800589c <_realloc_r>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	4607      	mov	r7, r0
 80058a0:	4614      	mov	r4, r2
 80058a2:	460e      	mov	r6, r1
 80058a4:	b921      	cbnz	r1, 80058b0 <_realloc_r+0x14>
 80058a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80058aa:	4611      	mov	r1, r2
 80058ac:	f7ff bf9c 	b.w	80057e8 <_malloc_r>
 80058b0:	b922      	cbnz	r2, 80058bc <_realloc_r+0x20>
 80058b2:	f001 fa07 	bl	8006cc4 <_free_r>
 80058b6:	4625      	mov	r5, r4
 80058b8:	4628      	mov	r0, r5
 80058ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058bc:	f001 fa52 	bl	8006d64 <_malloc_usable_size_r>
 80058c0:	42a0      	cmp	r0, r4
 80058c2:	d20f      	bcs.n	80058e4 <_realloc_r+0x48>
 80058c4:	4621      	mov	r1, r4
 80058c6:	4638      	mov	r0, r7
 80058c8:	f7ff ff8e 	bl	80057e8 <_malloc_r>
 80058cc:	4605      	mov	r5, r0
 80058ce:	2800      	cmp	r0, #0
 80058d0:	d0f2      	beq.n	80058b8 <_realloc_r+0x1c>
 80058d2:	4631      	mov	r1, r6
 80058d4:	4622      	mov	r2, r4
 80058d6:	f001 f9c1 	bl	8006c5c <memcpy>
 80058da:	4631      	mov	r1, r6
 80058dc:	4638      	mov	r0, r7
 80058de:	f001 f9f1 	bl	8006cc4 <_free_r>
 80058e2:	e7e9      	b.n	80058b8 <_realloc_r+0x1c>
 80058e4:	4635      	mov	r5, r6
 80058e6:	e7e7      	b.n	80058b8 <_realloc_r+0x1c>

080058e8 <__ssputs_r>:
 80058e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ec:	688e      	ldr	r6, [r1, #8]
 80058ee:	429e      	cmp	r6, r3
 80058f0:	4682      	mov	sl, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	4690      	mov	r8, r2
 80058f6:	461f      	mov	r7, r3
 80058f8:	d838      	bhi.n	800596c <__ssputs_r+0x84>
 80058fa:	898a      	ldrh	r2, [r1, #12]
 80058fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005900:	d032      	beq.n	8005968 <__ssputs_r+0x80>
 8005902:	6825      	ldr	r5, [r4, #0]
 8005904:	6909      	ldr	r1, [r1, #16]
 8005906:	eba5 0901 	sub.w	r9, r5, r1
 800590a:	6965      	ldr	r5, [r4, #20]
 800590c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005910:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005914:	3301      	adds	r3, #1
 8005916:	444b      	add	r3, r9
 8005918:	106d      	asrs	r5, r5, #1
 800591a:	429d      	cmp	r5, r3
 800591c:	bf38      	it	cc
 800591e:	461d      	movcc	r5, r3
 8005920:	0553      	lsls	r3, r2, #21
 8005922:	d531      	bpl.n	8005988 <__ssputs_r+0xa0>
 8005924:	4629      	mov	r1, r5
 8005926:	f7ff ff5f 	bl	80057e8 <_malloc_r>
 800592a:	4606      	mov	r6, r0
 800592c:	b950      	cbnz	r0, 8005944 <__ssputs_r+0x5c>
 800592e:	230c      	movs	r3, #12
 8005930:	f8ca 3000 	str.w	r3, [sl]
 8005934:	89a3      	ldrh	r3, [r4, #12]
 8005936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800593a:	81a3      	strh	r3, [r4, #12]
 800593c:	f04f 30ff 	mov.w	r0, #4294967295
 8005940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005944:	6921      	ldr	r1, [r4, #16]
 8005946:	464a      	mov	r2, r9
 8005948:	f001 f988 	bl	8006c5c <memcpy>
 800594c:	89a3      	ldrh	r3, [r4, #12]
 800594e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005956:	81a3      	strh	r3, [r4, #12]
 8005958:	6126      	str	r6, [r4, #16]
 800595a:	6165      	str	r5, [r4, #20]
 800595c:	444e      	add	r6, r9
 800595e:	eba5 0509 	sub.w	r5, r5, r9
 8005962:	6026      	str	r6, [r4, #0]
 8005964:	60a5      	str	r5, [r4, #8]
 8005966:	463e      	mov	r6, r7
 8005968:	42be      	cmp	r6, r7
 800596a:	d900      	bls.n	800596e <__ssputs_r+0x86>
 800596c:	463e      	mov	r6, r7
 800596e:	4632      	mov	r2, r6
 8005970:	6820      	ldr	r0, [r4, #0]
 8005972:	4641      	mov	r1, r8
 8005974:	f001 f980 	bl	8006c78 <memmove>
 8005978:	68a3      	ldr	r3, [r4, #8]
 800597a:	6822      	ldr	r2, [r4, #0]
 800597c:	1b9b      	subs	r3, r3, r6
 800597e:	4432      	add	r2, r6
 8005980:	60a3      	str	r3, [r4, #8]
 8005982:	6022      	str	r2, [r4, #0]
 8005984:	2000      	movs	r0, #0
 8005986:	e7db      	b.n	8005940 <__ssputs_r+0x58>
 8005988:	462a      	mov	r2, r5
 800598a:	f7ff ff87 	bl	800589c <_realloc_r>
 800598e:	4606      	mov	r6, r0
 8005990:	2800      	cmp	r0, #0
 8005992:	d1e1      	bne.n	8005958 <__ssputs_r+0x70>
 8005994:	6921      	ldr	r1, [r4, #16]
 8005996:	4650      	mov	r0, sl
 8005998:	f001 f994 	bl	8006cc4 <_free_r>
 800599c:	e7c7      	b.n	800592e <__ssputs_r+0x46>
	...

080059a0 <_svfiprintf_r>:
 80059a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a4:	4698      	mov	r8, r3
 80059a6:	898b      	ldrh	r3, [r1, #12]
 80059a8:	061b      	lsls	r3, r3, #24
 80059aa:	b09d      	sub	sp, #116	; 0x74
 80059ac:	4607      	mov	r7, r0
 80059ae:	460d      	mov	r5, r1
 80059b0:	4614      	mov	r4, r2
 80059b2:	d50e      	bpl.n	80059d2 <_svfiprintf_r+0x32>
 80059b4:	690b      	ldr	r3, [r1, #16]
 80059b6:	b963      	cbnz	r3, 80059d2 <_svfiprintf_r+0x32>
 80059b8:	2140      	movs	r1, #64	; 0x40
 80059ba:	f7ff ff15 	bl	80057e8 <_malloc_r>
 80059be:	6028      	str	r0, [r5, #0]
 80059c0:	6128      	str	r0, [r5, #16]
 80059c2:	b920      	cbnz	r0, 80059ce <_svfiprintf_r+0x2e>
 80059c4:	230c      	movs	r3, #12
 80059c6:	603b      	str	r3, [r7, #0]
 80059c8:	f04f 30ff 	mov.w	r0, #4294967295
 80059cc:	e0d1      	b.n	8005b72 <_svfiprintf_r+0x1d2>
 80059ce:	2340      	movs	r3, #64	; 0x40
 80059d0:	616b      	str	r3, [r5, #20]
 80059d2:	2300      	movs	r3, #0
 80059d4:	9309      	str	r3, [sp, #36]	; 0x24
 80059d6:	2320      	movs	r3, #32
 80059d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80059e0:	2330      	movs	r3, #48	; 0x30
 80059e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b8c <_svfiprintf_r+0x1ec>
 80059e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059ea:	f04f 0901 	mov.w	r9, #1
 80059ee:	4623      	mov	r3, r4
 80059f0:	469a      	mov	sl, r3
 80059f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059f6:	b10a      	cbz	r2, 80059fc <_svfiprintf_r+0x5c>
 80059f8:	2a25      	cmp	r2, #37	; 0x25
 80059fa:	d1f9      	bne.n	80059f0 <_svfiprintf_r+0x50>
 80059fc:	ebba 0b04 	subs.w	fp, sl, r4
 8005a00:	d00b      	beq.n	8005a1a <_svfiprintf_r+0x7a>
 8005a02:	465b      	mov	r3, fp
 8005a04:	4622      	mov	r2, r4
 8005a06:	4629      	mov	r1, r5
 8005a08:	4638      	mov	r0, r7
 8005a0a:	f7ff ff6d 	bl	80058e8 <__ssputs_r>
 8005a0e:	3001      	adds	r0, #1
 8005a10:	f000 80aa 	beq.w	8005b68 <_svfiprintf_r+0x1c8>
 8005a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a16:	445a      	add	r2, fp
 8005a18:	9209      	str	r2, [sp, #36]	; 0x24
 8005a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 80a2 	beq.w	8005b68 <_svfiprintf_r+0x1c8>
 8005a24:	2300      	movs	r3, #0
 8005a26:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a2e:	f10a 0a01 	add.w	sl, sl, #1
 8005a32:	9304      	str	r3, [sp, #16]
 8005a34:	9307      	str	r3, [sp, #28]
 8005a36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a3a:	931a      	str	r3, [sp, #104]	; 0x68
 8005a3c:	4654      	mov	r4, sl
 8005a3e:	2205      	movs	r2, #5
 8005a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a44:	4851      	ldr	r0, [pc, #324]	; (8005b8c <_svfiprintf_r+0x1ec>)
 8005a46:	f7fa fbcb 	bl	80001e0 <memchr>
 8005a4a:	9a04      	ldr	r2, [sp, #16]
 8005a4c:	b9d8      	cbnz	r0, 8005a86 <_svfiprintf_r+0xe6>
 8005a4e:	06d0      	lsls	r0, r2, #27
 8005a50:	bf44      	itt	mi
 8005a52:	2320      	movmi	r3, #32
 8005a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a58:	0711      	lsls	r1, r2, #28
 8005a5a:	bf44      	itt	mi
 8005a5c:	232b      	movmi	r3, #43	; 0x2b
 8005a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a62:	f89a 3000 	ldrb.w	r3, [sl]
 8005a66:	2b2a      	cmp	r3, #42	; 0x2a
 8005a68:	d015      	beq.n	8005a96 <_svfiprintf_r+0xf6>
 8005a6a:	9a07      	ldr	r2, [sp, #28]
 8005a6c:	4654      	mov	r4, sl
 8005a6e:	2000      	movs	r0, #0
 8005a70:	f04f 0c0a 	mov.w	ip, #10
 8005a74:	4621      	mov	r1, r4
 8005a76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a7a:	3b30      	subs	r3, #48	; 0x30
 8005a7c:	2b09      	cmp	r3, #9
 8005a7e:	d94e      	bls.n	8005b1e <_svfiprintf_r+0x17e>
 8005a80:	b1b0      	cbz	r0, 8005ab0 <_svfiprintf_r+0x110>
 8005a82:	9207      	str	r2, [sp, #28]
 8005a84:	e014      	b.n	8005ab0 <_svfiprintf_r+0x110>
 8005a86:	eba0 0308 	sub.w	r3, r0, r8
 8005a8a:	fa09 f303 	lsl.w	r3, r9, r3
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	9304      	str	r3, [sp, #16]
 8005a92:	46a2      	mov	sl, r4
 8005a94:	e7d2      	b.n	8005a3c <_svfiprintf_r+0x9c>
 8005a96:	9b03      	ldr	r3, [sp, #12]
 8005a98:	1d19      	adds	r1, r3, #4
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	9103      	str	r1, [sp, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	bfbb      	ittet	lt
 8005aa2:	425b      	neglt	r3, r3
 8005aa4:	f042 0202 	orrlt.w	r2, r2, #2
 8005aa8:	9307      	strge	r3, [sp, #28]
 8005aaa:	9307      	strlt	r3, [sp, #28]
 8005aac:	bfb8      	it	lt
 8005aae:	9204      	strlt	r2, [sp, #16]
 8005ab0:	7823      	ldrb	r3, [r4, #0]
 8005ab2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ab4:	d10c      	bne.n	8005ad0 <_svfiprintf_r+0x130>
 8005ab6:	7863      	ldrb	r3, [r4, #1]
 8005ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aba:	d135      	bne.n	8005b28 <_svfiprintf_r+0x188>
 8005abc:	9b03      	ldr	r3, [sp, #12]
 8005abe:	1d1a      	adds	r2, r3, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	9203      	str	r2, [sp, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bfb8      	it	lt
 8005ac8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005acc:	3402      	adds	r4, #2
 8005ace:	9305      	str	r3, [sp, #20]
 8005ad0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b9c <_svfiprintf_r+0x1fc>
 8005ad4:	7821      	ldrb	r1, [r4, #0]
 8005ad6:	2203      	movs	r2, #3
 8005ad8:	4650      	mov	r0, sl
 8005ada:	f7fa fb81 	bl	80001e0 <memchr>
 8005ade:	b140      	cbz	r0, 8005af2 <_svfiprintf_r+0x152>
 8005ae0:	2340      	movs	r3, #64	; 0x40
 8005ae2:	eba0 000a 	sub.w	r0, r0, sl
 8005ae6:	fa03 f000 	lsl.w	r0, r3, r0
 8005aea:	9b04      	ldr	r3, [sp, #16]
 8005aec:	4303      	orrs	r3, r0
 8005aee:	3401      	adds	r4, #1
 8005af0:	9304      	str	r3, [sp, #16]
 8005af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af6:	4826      	ldr	r0, [pc, #152]	; (8005b90 <_svfiprintf_r+0x1f0>)
 8005af8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005afc:	2206      	movs	r2, #6
 8005afe:	f7fa fb6f 	bl	80001e0 <memchr>
 8005b02:	2800      	cmp	r0, #0
 8005b04:	d038      	beq.n	8005b78 <_svfiprintf_r+0x1d8>
 8005b06:	4b23      	ldr	r3, [pc, #140]	; (8005b94 <_svfiprintf_r+0x1f4>)
 8005b08:	bb1b      	cbnz	r3, 8005b52 <_svfiprintf_r+0x1b2>
 8005b0a:	9b03      	ldr	r3, [sp, #12]
 8005b0c:	3307      	adds	r3, #7
 8005b0e:	f023 0307 	bic.w	r3, r3, #7
 8005b12:	3308      	adds	r3, #8
 8005b14:	9303      	str	r3, [sp, #12]
 8005b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b18:	4433      	add	r3, r6
 8005b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b1c:	e767      	b.n	80059ee <_svfiprintf_r+0x4e>
 8005b1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b22:	460c      	mov	r4, r1
 8005b24:	2001      	movs	r0, #1
 8005b26:	e7a5      	b.n	8005a74 <_svfiprintf_r+0xd4>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	3401      	adds	r4, #1
 8005b2c:	9305      	str	r3, [sp, #20]
 8005b2e:	4619      	mov	r1, r3
 8005b30:	f04f 0c0a 	mov.w	ip, #10
 8005b34:	4620      	mov	r0, r4
 8005b36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b3a:	3a30      	subs	r2, #48	; 0x30
 8005b3c:	2a09      	cmp	r2, #9
 8005b3e:	d903      	bls.n	8005b48 <_svfiprintf_r+0x1a8>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0c5      	beq.n	8005ad0 <_svfiprintf_r+0x130>
 8005b44:	9105      	str	r1, [sp, #20]
 8005b46:	e7c3      	b.n	8005ad0 <_svfiprintf_r+0x130>
 8005b48:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e7f0      	b.n	8005b34 <_svfiprintf_r+0x194>
 8005b52:	ab03      	add	r3, sp, #12
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	462a      	mov	r2, r5
 8005b58:	4b0f      	ldr	r3, [pc, #60]	; (8005b98 <_svfiprintf_r+0x1f8>)
 8005b5a:	a904      	add	r1, sp, #16
 8005b5c:	4638      	mov	r0, r7
 8005b5e:	f3af 8000 	nop.w
 8005b62:	1c42      	adds	r2, r0, #1
 8005b64:	4606      	mov	r6, r0
 8005b66:	d1d6      	bne.n	8005b16 <_svfiprintf_r+0x176>
 8005b68:	89ab      	ldrh	r3, [r5, #12]
 8005b6a:	065b      	lsls	r3, r3, #25
 8005b6c:	f53f af2c 	bmi.w	80059c8 <_svfiprintf_r+0x28>
 8005b70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b72:	b01d      	add	sp, #116	; 0x74
 8005b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b78:	ab03      	add	r3, sp, #12
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	462a      	mov	r2, r5
 8005b7e:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <_svfiprintf_r+0x1f8>)
 8005b80:	a904      	add	r1, sp, #16
 8005b82:	4638      	mov	r0, r7
 8005b84:	f000 f87a 	bl	8005c7c <_printf_i>
 8005b88:	e7eb      	b.n	8005b62 <_svfiprintf_r+0x1c2>
 8005b8a:	bf00      	nop
 8005b8c:	08008364 	.word	0x08008364
 8005b90:	0800836e 	.word	0x0800836e
 8005b94:	00000000 	.word	0x00000000
 8005b98:	080058e9 	.word	0x080058e9
 8005b9c:	0800836a 	.word	0x0800836a

08005ba0 <_printf_common>:
 8005ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba4:	4616      	mov	r6, r2
 8005ba6:	4699      	mov	r9, r3
 8005ba8:	688a      	ldr	r2, [r1, #8]
 8005baa:	690b      	ldr	r3, [r1, #16]
 8005bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	bfb8      	it	lt
 8005bb4:	4613      	movlt	r3, r2
 8005bb6:	6033      	str	r3, [r6, #0]
 8005bb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bbc:	4607      	mov	r7, r0
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	b10a      	cbz	r2, 8005bc6 <_printf_common+0x26>
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	6033      	str	r3, [r6, #0]
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	0699      	lsls	r1, r3, #26
 8005bca:	bf42      	ittt	mi
 8005bcc:	6833      	ldrmi	r3, [r6, #0]
 8005bce:	3302      	addmi	r3, #2
 8005bd0:	6033      	strmi	r3, [r6, #0]
 8005bd2:	6825      	ldr	r5, [r4, #0]
 8005bd4:	f015 0506 	ands.w	r5, r5, #6
 8005bd8:	d106      	bne.n	8005be8 <_printf_common+0x48>
 8005bda:	f104 0a19 	add.w	sl, r4, #25
 8005bde:	68e3      	ldr	r3, [r4, #12]
 8005be0:	6832      	ldr	r2, [r6, #0]
 8005be2:	1a9b      	subs	r3, r3, r2
 8005be4:	42ab      	cmp	r3, r5
 8005be6:	dc26      	bgt.n	8005c36 <_printf_common+0x96>
 8005be8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bec:	1e13      	subs	r3, r2, #0
 8005bee:	6822      	ldr	r2, [r4, #0]
 8005bf0:	bf18      	it	ne
 8005bf2:	2301      	movne	r3, #1
 8005bf4:	0692      	lsls	r2, r2, #26
 8005bf6:	d42b      	bmi.n	8005c50 <_printf_common+0xb0>
 8005bf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	4638      	mov	r0, r7
 8005c00:	47c0      	blx	r8
 8005c02:	3001      	adds	r0, #1
 8005c04:	d01e      	beq.n	8005c44 <_printf_common+0xa4>
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	68e5      	ldr	r5, [r4, #12]
 8005c0a:	6832      	ldr	r2, [r6, #0]
 8005c0c:	f003 0306 	and.w	r3, r3, #6
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	bf08      	it	eq
 8005c14:	1aad      	subeq	r5, r5, r2
 8005c16:	68a3      	ldr	r3, [r4, #8]
 8005c18:	6922      	ldr	r2, [r4, #16]
 8005c1a:	bf0c      	ite	eq
 8005c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c20:	2500      	movne	r5, #0
 8005c22:	4293      	cmp	r3, r2
 8005c24:	bfc4      	itt	gt
 8005c26:	1a9b      	subgt	r3, r3, r2
 8005c28:	18ed      	addgt	r5, r5, r3
 8005c2a:	2600      	movs	r6, #0
 8005c2c:	341a      	adds	r4, #26
 8005c2e:	42b5      	cmp	r5, r6
 8005c30:	d11a      	bne.n	8005c68 <_printf_common+0xc8>
 8005c32:	2000      	movs	r0, #0
 8005c34:	e008      	b.n	8005c48 <_printf_common+0xa8>
 8005c36:	2301      	movs	r3, #1
 8005c38:	4652      	mov	r2, sl
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	4638      	mov	r0, r7
 8005c3e:	47c0      	blx	r8
 8005c40:	3001      	adds	r0, #1
 8005c42:	d103      	bne.n	8005c4c <_printf_common+0xac>
 8005c44:	f04f 30ff 	mov.w	r0, #4294967295
 8005c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c4c:	3501      	adds	r5, #1
 8005c4e:	e7c6      	b.n	8005bde <_printf_common+0x3e>
 8005c50:	18e1      	adds	r1, r4, r3
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	2030      	movs	r0, #48	; 0x30
 8005c56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c5a:	4422      	add	r2, r4
 8005c5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c64:	3302      	adds	r3, #2
 8005c66:	e7c7      	b.n	8005bf8 <_printf_common+0x58>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	4622      	mov	r2, r4
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	4638      	mov	r0, r7
 8005c70:	47c0      	blx	r8
 8005c72:	3001      	adds	r0, #1
 8005c74:	d0e6      	beq.n	8005c44 <_printf_common+0xa4>
 8005c76:	3601      	adds	r6, #1
 8005c78:	e7d9      	b.n	8005c2e <_printf_common+0x8e>
	...

08005c7c <_printf_i>:
 8005c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c80:	460c      	mov	r4, r1
 8005c82:	4691      	mov	r9, r2
 8005c84:	7e27      	ldrb	r7, [r4, #24]
 8005c86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c88:	2f78      	cmp	r7, #120	; 0x78
 8005c8a:	4680      	mov	r8, r0
 8005c8c:	469a      	mov	sl, r3
 8005c8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c92:	d807      	bhi.n	8005ca4 <_printf_i+0x28>
 8005c94:	2f62      	cmp	r7, #98	; 0x62
 8005c96:	d80a      	bhi.n	8005cae <_printf_i+0x32>
 8005c98:	2f00      	cmp	r7, #0
 8005c9a:	f000 80d8 	beq.w	8005e4e <_printf_i+0x1d2>
 8005c9e:	2f58      	cmp	r7, #88	; 0x58
 8005ca0:	f000 80a3 	beq.w	8005dea <_printf_i+0x16e>
 8005ca4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ca8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cac:	e03a      	b.n	8005d24 <_printf_i+0xa8>
 8005cae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cb2:	2b15      	cmp	r3, #21
 8005cb4:	d8f6      	bhi.n	8005ca4 <_printf_i+0x28>
 8005cb6:	a001      	add	r0, pc, #4	; (adr r0, 8005cbc <_printf_i+0x40>)
 8005cb8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005cbc:	08005d15 	.word	0x08005d15
 8005cc0:	08005d29 	.word	0x08005d29
 8005cc4:	08005ca5 	.word	0x08005ca5
 8005cc8:	08005ca5 	.word	0x08005ca5
 8005ccc:	08005ca5 	.word	0x08005ca5
 8005cd0:	08005ca5 	.word	0x08005ca5
 8005cd4:	08005d29 	.word	0x08005d29
 8005cd8:	08005ca5 	.word	0x08005ca5
 8005cdc:	08005ca5 	.word	0x08005ca5
 8005ce0:	08005ca5 	.word	0x08005ca5
 8005ce4:	08005ca5 	.word	0x08005ca5
 8005ce8:	08005e35 	.word	0x08005e35
 8005cec:	08005d59 	.word	0x08005d59
 8005cf0:	08005e17 	.word	0x08005e17
 8005cf4:	08005ca5 	.word	0x08005ca5
 8005cf8:	08005ca5 	.word	0x08005ca5
 8005cfc:	08005e57 	.word	0x08005e57
 8005d00:	08005ca5 	.word	0x08005ca5
 8005d04:	08005d59 	.word	0x08005d59
 8005d08:	08005ca5 	.word	0x08005ca5
 8005d0c:	08005ca5 	.word	0x08005ca5
 8005d10:	08005e1f 	.word	0x08005e1f
 8005d14:	680b      	ldr	r3, [r1, #0]
 8005d16:	1d1a      	adds	r2, r3, #4
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	600a      	str	r2, [r1, #0]
 8005d1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d24:	2301      	movs	r3, #1
 8005d26:	e0a3      	b.n	8005e70 <_printf_i+0x1f4>
 8005d28:	6825      	ldr	r5, [r4, #0]
 8005d2a:	6808      	ldr	r0, [r1, #0]
 8005d2c:	062e      	lsls	r6, r5, #24
 8005d2e:	f100 0304 	add.w	r3, r0, #4
 8005d32:	d50a      	bpl.n	8005d4a <_printf_i+0xce>
 8005d34:	6805      	ldr	r5, [r0, #0]
 8005d36:	600b      	str	r3, [r1, #0]
 8005d38:	2d00      	cmp	r5, #0
 8005d3a:	da03      	bge.n	8005d44 <_printf_i+0xc8>
 8005d3c:	232d      	movs	r3, #45	; 0x2d
 8005d3e:	426d      	negs	r5, r5
 8005d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d44:	485e      	ldr	r0, [pc, #376]	; (8005ec0 <_printf_i+0x244>)
 8005d46:	230a      	movs	r3, #10
 8005d48:	e019      	b.n	8005d7e <_printf_i+0x102>
 8005d4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d4e:	6805      	ldr	r5, [r0, #0]
 8005d50:	600b      	str	r3, [r1, #0]
 8005d52:	bf18      	it	ne
 8005d54:	b22d      	sxthne	r5, r5
 8005d56:	e7ef      	b.n	8005d38 <_printf_i+0xbc>
 8005d58:	680b      	ldr	r3, [r1, #0]
 8005d5a:	6825      	ldr	r5, [r4, #0]
 8005d5c:	1d18      	adds	r0, r3, #4
 8005d5e:	6008      	str	r0, [r1, #0]
 8005d60:	0628      	lsls	r0, r5, #24
 8005d62:	d501      	bpl.n	8005d68 <_printf_i+0xec>
 8005d64:	681d      	ldr	r5, [r3, #0]
 8005d66:	e002      	b.n	8005d6e <_printf_i+0xf2>
 8005d68:	0669      	lsls	r1, r5, #25
 8005d6a:	d5fb      	bpl.n	8005d64 <_printf_i+0xe8>
 8005d6c:	881d      	ldrh	r5, [r3, #0]
 8005d6e:	4854      	ldr	r0, [pc, #336]	; (8005ec0 <_printf_i+0x244>)
 8005d70:	2f6f      	cmp	r7, #111	; 0x6f
 8005d72:	bf0c      	ite	eq
 8005d74:	2308      	moveq	r3, #8
 8005d76:	230a      	movne	r3, #10
 8005d78:	2100      	movs	r1, #0
 8005d7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d7e:	6866      	ldr	r6, [r4, #4]
 8005d80:	60a6      	str	r6, [r4, #8]
 8005d82:	2e00      	cmp	r6, #0
 8005d84:	bfa2      	ittt	ge
 8005d86:	6821      	ldrge	r1, [r4, #0]
 8005d88:	f021 0104 	bicge.w	r1, r1, #4
 8005d8c:	6021      	strge	r1, [r4, #0]
 8005d8e:	b90d      	cbnz	r5, 8005d94 <_printf_i+0x118>
 8005d90:	2e00      	cmp	r6, #0
 8005d92:	d04d      	beq.n	8005e30 <_printf_i+0x1b4>
 8005d94:	4616      	mov	r6, r2
 8005d96:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d9a:	fb03 5711 	mls	r7, r3, r1, r5
 8005d9e:	5dc7      	ldrb	r7, [r0, r7]
 8005da0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005da4:	462f      	mov	r7, r5
 8005da6:	42bb      	cmp	r3, r7
 8005da8:	460d      	mov	r5, r1
 8005daa:	d9f4      	bls.n	8005d96 <_printf_i+0x11a>
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d10b      	bne.n	8005dc8 <_printf_i+0x14c>
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	07df      	lsls	r7, r3, #31
 8005db4:	d508      	bpl.n	8005dc8 <_printf_i+0x14c>
 8005db6:	6923      	ldr	r3, [r4, #16]
 8005db8:	6861      	ldr	r1, [r4, #4]
 8005dba:	4299      	cmp	r1, r3
 8005dbc:	bfde      	ittt	le
 8005dbe:	2330      	movle	r3, #48	; 0x30
 8005dc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005dc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005dc8:	1b92      	subs	r2, r2, r6
 8005dca:	6122      	str	r2, [r4, #16]
 8005dcc:	f8cd a000 	str.w	sl, [sp]
 8005dd0:	464b      	mov	r3, r9
 8005dd2:	aa03      	add	r2, sp, #12
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	f7ff fee2 	bl	8005ba0 <_printf_common>
 8005ddc:	3001      	adds	r0, #1
 8005dde:	d14c      	bne.n	8005e7a <_printf_i+0x1fe>
 8005de0:	f04f 30ff 	mov.w	r0, #4294967295
 8005de4:	b004      	add	sp, #16
 8005de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dea:	4835      	ldr	r0, [pc, #212]	; (8005ec0 <_printf_i+0x244>)
 8005dec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	680e      	ldr	r6, [r1, #0]
 8005df4:	061f      	lsls	r7, r3, #24
 8005df6:	f856 5b04 	ldr.w	r5, [r6], #4
 8005dfa:	600e      	str	r6, [r1, #0]
 8005dfc:	d514      	bpl.n	8005e28 <_printf_i+0x1ac>
 8005dfe:	07d9      	lsls	r1, r3, #31
 8005e00:	bf44      	itt	mi
 8005e02:	f043 0320 	orrmi.w	r3, r3, #32
 8005e06:	6023      	strmi	r3, [r4, #0]
 8005e08:	b91d      	cbnz	r5, 8005e12 <_printf_i+0x196>
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	f023 0320 	bic.w	r3, r3, #32
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	2310      	movs	r3, #16
 8005e14:	e7b0      	b.n	8005d78 <_printf_i+0xfc>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	f043 0320 	orr.w	r3, r3, #32
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	2378      	movs	r3, #120	; 0x78
 8005e20:	4828      	ldr	r0, [pc, #160]	; (8005ec4 <_printf_i+0x248>)
 8005e22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e26:	e7e3      	b.n	8005df0 <_printf_i+0x174>
 8005e28:	065e      	lsls	r6, r3, #25
 8005e2a:	bf48      	it	mi
 8005e2c:	b2ad      	uxthmi	r5, r5
 8005e2e:	e7e6      	b.n	8005dfe <_printf_i+0x182>
 8005e30:	4616      	mov	r6, r2
 8005e32:	e7bb      	b.n	8005dac <_printf_i+0x130>
 8005e34:	680b      	ldr	r3, [r1, #0]
 8005e36:	6826      	ldr	r6, [r4, #0]
 8005e38:	6960      	ldr	r0, [r4, #20]
 8005e3a:	1d1d      	adds	r5, r3, #4
 8005e3c:	600d      	str	r5, [r1, #0]
 8005e3e:	0635      	lsls	r5, r6, #24
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	d501      	bpl.n	8005e48 <_printf_i+0x1cc>
 8005e44:	6018      	str	r0, [r3, #0]
 8005e46:	e002      	b.n	8005e4e <_printf_i+0x1d2>
 8005e48:	0671      	lsls	r1, r6, #25
 8005e4a:	d5fb      	bpl.n	8005e44 <_printf_i+0x1c8>
 8005e4c:	8018      	strh	r0, [r3, #0]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	6123      	str	r3, [r4, #16]
 8005e52:	4616      	mov	r6, r2
 8005e54:	e7ba      	b.n	8005dcc <_printf_i+0x150>
 8005e56:	680b      	ldr	r3, [r1, #0]
 8005e58:	1d1a      	adds	r2, r3, #4
 8005e5a:	600a      	str	r2, [r1, #0]
 8005e5c:	681e      	ldr	r6, [r3, #0]
 8005e5e:	6862      	ldr	r2, [r4, #4]
 8005e60:	2100      	movs	r1, #0
 8005e62:	4630      	mov	r0, r6
 8005e64:	f7fa f9bc 	bl	80001e0 <memchr>
 8005e68:	b108      	cbz	r0, 8005e6e <_printf_i+0x1f2>
 8005e6a:	1b80      	subs	r0, r0, r6
 8005e6c:	6060      	str	r0, [r4, #4]
 8005e6e:	6863      	ldr	r3, [r4, #4]
 8005e70:	6123      	str	r3, [r4, #16]
 8005e72:	2300      	movs	r3, #0
 8005e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e78:	e7a8      	b.n	8005dcc <_printf_i+0x150>
 8005e7a:	6923      	ldr	r3, [r4, #16]
 8005e7c:	4632      	mov	r2, r6
 8005e7e:	4649      	mov	r1, r9
 8005e80:	4640      	mov	r0, r8
 8005e82:	47d0      	blx	sl
 8005e84:	3001      	adds	r0, #1
 8005e86:	d0ab      	beq.n	8005de0 <_printf_i+0x164>
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	079b      	lsls	r3, r3, #30
 8005e8c:	d413      	bmi.n	8005eb6 <_printf_i+0x23a>
 8005e8e:	68e0      	ldr	r0, [r4, #12]
 8005e90:	9b03      	ldr	r3, [sp, #12]
 8005e92:	4298      	cmp	r0, r3
 8005e94:	bfb8      	it	lt
 8005e96:	4618      	movlt	r0, r3
 8005e98:	e7a4      	b.n	8005de4 <_printf_i+0x168>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	4632      	mov	r2, r6
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	4640      	mov	r0, r8
 8005ea2:	47d0      	blx	sl
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d09b      	beq.n	8005de0 <_printf_i+0x164>
 8005ea8:	3501      	adds	r5, #1
 8005eaa:	68e3      	ldr	r3, [r4, #12]
 8005eac:	9903      	ldr	r1, [sp, #12]
 8005eae:	1a5b      	subs	r3, r3, r1
 8005eb0:	42ab      	cmp	r3, r5
 8005eb2:	dcf2      	bgt.n	8005e9a <_printf_i+0x21e>
 8005eb4:	e7eb      	b.n	8005e8e <_printf_i+0x212>
 8005eb6:	2500      	movs	r5, #0
 8005eb8:	f104 0619 	add.w	r6, r4, #25
 8005ebc:	e7f5      	b.n	8005eaa <_printf_i+0x22e>
 8005ebe:	bf00      	nop
 8005ec0:	08008375 	.word	0x08008375
 8005ec4:	08008386 	.word	0x08008386

08005ec8 <_sbrk_r>:
 8005ec8:	b538      	push	{r3, r4, r5, lr}
 8005eca:	4d06      	ldr	r5, [pc, #24]	; (8005ee4 <_sbrk_r+0x1c>)
 8005ecc:	2300      	movs	r3, #0
 8005ece:	4604      	mov	r4, r0
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	602b      	str	r3, [r5, #0]
 8005ed4:	f7fd fc1c 	bl	8003710 <_sbrk>
 8005ed8:	1c43      	adds	r3, r0, #1
 8005eda:	d102      	bne.n	8005ee2 <_sbrk_r+0x1a>
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	b103      	cbz	r3, 8005ee2 <_sbrk_r+0x1a>
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	bd38      	pop	{r3, r4, r5, pc}
 8005ee4:	200000dc 	.word	0x200000dc

08005ee8 <strcpy>:
 8005ee8:	4603      	mov	r3, r0
 8005eea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005eee:	f803 2b01 	strb.w	r2, [r3], #1
 8005ef2:	2a00      	cmp	r2, #0
 8005ef4:	d1f9      	bne.n	8005eea <strcpy+0x2>
 8005ef6:	4770      	bx	lr

08005ef8 <__assert_func>:
 8005ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005efa:	4614      	mov	r4, r2
 8005efc:	461a      	mov	r2, r3
 8005efe:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <__assert_func+0x2c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4605      	mov	r5, r0
 8005f04:	68d8      	ldr	r0, [r3, #12]
 8005f06:	b14c      	cbz	r4, 8005f1c <__assert_func+0x24>
 8005f08:	4b07      	ldr	r3, [pc, #28]	; (8005f28 <__assert_func+0x30>)
 8005f0a:	9100      	str	r1, [sp, #0]
 8005f0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f10:	4906      	ldr	r1, [pc, #24]	; (8005f2c <__assert_func+0x34>)
 8005f12:	462b      	mov	r3, r5
 8005f14:	f000 fe88 	bl	8006c28 <fiprintf>
 8005f18:	f001 f946 	bl	80071a8 <abort>
 8005f1c:	4b04      	ldr	r3, [pc, #16]	; (8005f30 <__assert_func+0x38>)
 8005f1e:	461c      	mov	r4, r3
 8005f20:	e7f3      	b.n	8005f0a <__assert_func+0x12>
 8005f22:	bf00      	nop
 8005f24:	20000008 	.word	0x20000008
 8005f28:	08008397 	.word	0x08008397
 8005f2c:	080083a4 	.word	0x080083a4
 8005f30:	080083d2 	.word	0x080083d2

08005f34 <quorem>:
 8005f34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f38:	6903      	ldr	r3, [r0, #16]
 8005f3a:	690c      	ldr	r4, [r1, #16]
 8005f3c:	42a3      	cmp	r3, r4
 8005f3e:	4607      	mov	r7, r0
 8005f40:	f2c0 8081 	blt.w	8006046 <quorem+0x112>
 8005f44:	3c01      	subs	r4, #1
 8005f46:	f101 0814 	add.w	r8, r1, #20
 8005f4a:	f100 0514 	add.w	r5, r0, #20
 8005f4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f52:	9301      	str	r3, [sp, #4]
 8005f54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f68:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f6c:	d331      	bcc.n	8005fd2 <quorem+0x9e>
 8005f6e:	f04f 0e00 	mov.w	lr, #0
 8005f72:	4640      	mov	r0, r8
 8005f74:	46ac      	mov	ip, r5
 8005f76:	46f2      	mov	sl, lr
 8005f78:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f7c:	b293      	uxth	r3, r2
 8005f7e:	fb06 e303 	mla	r3, r6, r3, lr
 8005f82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	ebaa 0303 	sub.w	r3, sl, r3
 8005f8c:	0c12      	lsrs	r2, r2, #16
 8005f8e:	f8dc a000 	ldr.w	sl, [ip]
 8005f92:	fb06 e202 	mla	r2, r6, r2, lr
 8005f96:	fa13 f38a 	uxtah	r3, r3, sl
 8005f9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f9e:	fa1f fa82 	uxth.w	sl, r2
 8005fa2:	f8dc 2000 	ldr.w	r2, [ip]
 8005fa6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005faa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fb4:	4581      	cmp	r9, r0
 8005fb6:	f84c 3b04 	str.w	r3, [ip], #4
 8005fba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005fbe:	d2db      	bcs.n	8005f78 <quorem+0x44>
 8005fc0:	f855 300b 	ldr.w	r3, [r5, fp]
 8005fc4:	b92b      	cbnz	r3, 8005fd2 <quorem+0x9e>
 8005fc6:	9b01      	ldr	r3, [sp, #4]
 8005fc8:	3b04      	subs	r3, #4
 8005fca:	429d      	cmp	r5, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	d32e      	bcc.n	800602e <quorem+0xfa>
 8005fd0:	613c      	str	r4, [r7, #16]
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	f7ff fada 	bl	800558c <__mcmp>
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	db24      	blt.n	8006026 <quorem+0xf2>
 8005fdc:	3601      	adds	r6, #1
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f04f 0c00 	mov.w	ip, #0
 8005fe4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005fe8:	f8d0 e000 	ldr.w	lr, [r0]
 8005fec:	b293      	uxth	r3, r2
 8005fee:	ebac 0303 	sub.w	r3, ip, r3
 8005ff2:	0c12      	lsrs	r2, r2, #16
 8005ff4:	fa13 f38e 	uxtah	r3, r3, lr
 8005ff8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005ffc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006000:	b29b      	uxth	r3, r3
 8006002:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006006:	45c1      	cmp	r9, r8
 8006008:	f840 3b04 	str.w	r3, [r0], #4
 800600c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006010:	d2e8      	bcs.n	8005fe4 <quorem+0xb0>
 8006012:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006016:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800601a:	b922      	cbnz	r2, 8006026 <quorem+0xf2>
 800601c:	3b04      	subs	r3, #4
 800601e:	429d      	cmp	r5, r3
 8006020:	461a      	mov	r2, r3
 8006022:	d30a      	bcc.n	800603a <quorem+0x106>
 8006024:	613c      	str	r4, [r7, #16]
 8006026:	4630      	mov	r0, r6
 8006028:	b003      	add	sp, #12
 800602a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800602e:	6812      	ldr	r2, [r2, #0]
 8006030:	3b04      	subs	r3, #4
 8006032:	2a00      	cmp	r2, #0
 8006034:	d1cc      	bne.n	8005fd0 <quorem+0x9c>
 8006036:	3c01      	subs	r4, #1
 8006038:	e7c7      	b.n	8005fca <quorem+0x96>
 800603a:	6812      	ldr	r2, [r2, #0]
 800603c:	3b04      	subs	r3, #4
 800603e:	2a00      	cmp	r2, #0
 8006040:	d1f0      	bne.n	8006024 <quorem+0xf0>
 8006042:	3c01      	subs	r4, #1
 8006044:	e7eb      	b.n	800601e <quorem+0xea>
 8006046:	2000      	movs	r0, #0
 8006048:	e7ee      	b.n	8006028 <quorem+0xf4>
 800604a:	0000      	movs	r0, r0
 800604c:	0000      	movs	r0, r0
	...

08006050 <_dtoa_r>:
 8006050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006054:	ed2d 8b02 	vpush	{d8}
 8006058:	ec57 6b10 	vmov	r6, r7, d0
 800605c:	b095      	sub	sp, #84	; 0x54
 800605e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006060:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006064:	9105      	str	r1, [sp, #20]
 8006066:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800606a:	4604      	mov	r4, r0
 800606c:	9209      	str	r2, [sp, #36]	; 0x24
 800606e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006070:	b975      	cbnz	r5, 8006090 <_dtoa_r+0x40>
 8006072:	2010      	movs	r0, #16
 8006074:	f000 fdea 	bl	8006c4c <malloc>
 8006078:	4602      	mov	r2, r0
 800607a:	6260      	str	r0, [r4, #36]	; 0x24
 800607c:	b920      	cbnz	r0, 8006088 <_dtoa_r+0x38>
 800607e:	4bb2      	ldr	r3, [pc, #712]	; (8006348 <_dtoa_r+0x2f8>)
 8006080:	21ea      	movs	r1, #234	; 0xea
 8006082:	48b2      	ldr	r0, [pc, #712]	; (800634c <_dtoa_r+0x2fc>)
 8006084:	f7ff ff38 	bl	8005ef8 <__assert_func>
 8006088:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800608c:	6005      	str	r5, [r0, #0]
 800608e:	60c5      	str	r5, [r0, #12]
 8006090:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006092:	6819      	ldr	r1, [r3, #0]
 8006094:	b151      	cbz	r1, 80060ac <_dtoa_r+0x5c>
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	604a      	str	r2, [r1, #4]
 800609a:	2301      	movs	r3, #1
 800609c:	4093      	lsls	r3, r2
 800609e:	608b      	str	r3, [r1, #8]
 80060a0:	4620      	mov	r0, r4
 80060a2:	f7ff f835 	bl	8005110 <_Bfree>
 80060a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	1e3b      	subs	r3, r7, #0
 80060ae:	bfb9      	ittee	lt
 80060b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80060b4:	9303      	strlt	r3, [sp, #12]
 80060b6:	2300      	movge	r3, #0
 80060b8:	f8c8 3000 	strge.w	r3, [r8]
 80060bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80060c0:	4ba3      	ldr	r3, [pc, #652]	; (8006350 <_dtoa_r+0x300>)
 80060c2:	bfbc      	itt	lt
 80060c4:	2201      	movlt	r2, #1
 80060c6:	f8c8 2000 	strlt.w	r2, [r8]
 80060ca:	ea33 0309 	bics.w	r3, r3, r9
 80060ce:	d11b      	bne.n	8006108 <_dtoa_r+0xb8>
 80060d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80060d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80060d6:	6013      	str	r3, [r2, #0]
 80060d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060dc:	4333      	orrs	r3, r6
 80060de:	f000 857a 	beq.w	8006bd6 <_dtoa_r+0xb86>
 80060e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060e4:	b963      	cbnz	r3, 8006100 <_dtoa_r+0xb0>
 80060e6:	4b9b      	ldr	r3, [pc, #620]	; (8006354 <_dtoa_r+0x304>)
 80060e8:	e024      	b.n	8006134 <_dtoa_r+0xe4>
 80060ea:	4b9b      	ldr	r3, [pc, #620]	; (8006358 <_dtoa_r+0x308>)
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	3308      	adds	r3, #8
 80060f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	9800      	ldr	r0, [sp, #0]
 80060f6:	b015      	add	sp, #84	; 0x54
 80060f8:	ecbd 8b02 	vpop	{d8}
 80060fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006100:	4b94      	ldr	r3, [pc, #592]	; (8006354 <_dtoa_r+0x304>)
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	3303      	adds	r3, #3
 8006106:	e7f3      	b.n	80060f0 <_dtoa_r+0xa0>
 8006108:	ed9d 7b02 	vldr	d7, [sp, #8]
 800610c:	2200      	movs	r2, #0
 800610e:	ec51 0b17 	vmov	r0, r1, d7
 8006112:	2300      	movs	r3, #0
 8006114:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006118:	f7fa fcd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800611c:	4680      	mov	r8, r0
 800611e:	b158      	cbz	r0, 8006138 <_dtoa_r+0xe8>
 8006120:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006122:	2301      	movs	r3, #1
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 8551 	beq.w	8006bd0 <_dtoa_r+0xb80>
 800612e:	488b      	ldr	r0, [pc, #556]	; (800635c <_dtoa_r+0x30c>)
 8006130:	6018      	str	r0, [r3, #0]
 8006132:	1e43      	subs	r3, r0, #1
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	e7dd      	b.n	80060f4 <_dtoa_r+0xa4>
 8006138:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800613c:	aa12      	add	r2, sp, #72	; 0x48
 800613e:	a913      	add	r1, sp, #76	; 0x4c
 8006140:	4620      	mov	r0, r4
 8006142:	f7ff fac7 	bl	80056d4 <__d2b>
 8006146:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800614a:	4683      	mov	fp, r0
 800614c:	2d00      	cmp	r5, #0
 800614e:	d07c      	beq.n	800624a <_dtoa_r+0x1fa>
 8006150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006152:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006156:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800615a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800615e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006162:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006166:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800616a:	4b7d      	ldr	r3, [pc, #500]	; (8006360 <_dtoa_r+0x310>)
 800616c:	2200      	movs	r2, #0
 800616e:	4630      	mov	r0, r6
 8006170:	4639      	mov	r1, r7
 8006172:	f7fa f889 	bl	8000288 <__aeabi_dsub>
 8006176:	a36e      	add	r3, pc, #440	; (adr r3, 8006330 <_dtoa_r+0x2e0>)
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	f7fa fa3c 	bl	80005f8 <__aeabi_dmul>
 8006180:	a36d      	add	r3, pc, #436	; (adr r3, 8006338 <_dtoa_r+0x2e8>)
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	f7fa f881 	bl	800028c <__adddf3>
 800618a:	4606      	mov	r6, r0
 800618c:	4628      	mov	r0, r5
 800618e:	460f      	mov	r7, r1
 8006190:	f7fa f9c8 	bl	8000524 <__aeabi_i2d>
 8006194:	a36a      	add	r3, pc, #424	; (adr r3, 8006340 <_dtoa_r+0x2f0>)
 8006196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619a:	f7fa fa2d 	bl	80005f8 <__aeabi_dmul>
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	4630      	mov	r0, r6
 80061a4:	4639      	mov	r1, r7
 80061a6:	f7fa f871 	bl	800028c <__adddf3>
 80061aa:	4606      	mov	r6, r0
 80061ac:	460f      	mov	r7, r1
 80061ae:	f7fa fcbd 	bl	8000b2c <__aeabi_d2iz>
 80061b2:	2200      	movs	r2, #0
 80061b4:	4682      	mov	sl, r0
 80061b6:	2300      	movs	r3, #0
 80061b8:	4630      	mov	r0, r6
 80061ba:	4639      	mov	r1, r7
 80061bc:	f7fa fc8e 	bl	8000adc <__aeabi_dcmplt>
 80061c0:	b148      	cbz	r0, 80061d6 <_dtoa_r+0x186>
 80061c2:	4650      	mov	r0, sl
 80061c4:	f7fa f9ae 	bl	8000524 <__aeabi_i2d>
 80061c8:	4632      	mov	r2, r6
 80061ca:	463b      	mov	r3, r7
 80061cc:	f7fa fc7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80061d0:	b908      	cbnz	r0, 80061d6 <_dtoa_r+0x186>
 80061d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061d6:	f1ba 0f16 	cmp.w	sl, #22
 80061da:	d854      	bhi.n	8006286 <_dtoa_r+0x236>
 80061dc:	4b61      	ldr	r3, [pc, #388]	; (8006364 <_dtoa_r+0x314>)
 80061de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80061e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061ea:	f7fa fc77 	bl	8000adc <__aeabi_dcmplt>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d04b      	beq.n	800628a <_dtoa_r+0x23a>
 80061f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061f6:	2300      	movs	r3, #0
 80061f8:	930e      	str	r3, [sp, #56]	; 0x38
 80061fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061fc:	1b5d      	subs	r5, r3, r5
 80061fe:	1e6b      	subs	r3, r5, #1
 8006200:	9304      	str	r3, [sp, #16]
 8006202:	bf43      	ittte	mi
 8006204:	2300      	movmi	r3, #0
 8006206:	f1c5 0801 	rsbmi	r8, r5, #1
 800620a:	9304      	strmi	r3, [sp, #16]
 800620c:	f04f 0800 	movpl.w	r8, #0
 8006210:	f1ba 0f00 	cmp.w	sl, #0
 8006214:	db3b      	blt.n	800628e <_dtoa_r+0x23e>
 8006216:	9b04      	ldr	r3, [sp, #16]
 8006218:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800621c:	4453      	add	r3, sl
 800621e:	9304      	str	r3, [sp, #16]
 8006220:	2300      	movs	r3, #0
 8006222:	9306      	str	r3, [sp, #24]
 8006224:	9b05      	ldr	r3, [sp, #20]
 8006226:	2b09      	cmp	r3, #9
 8006228:	d869      	bhi.n	80062fe <_dtoa_r+0x2ae>
 800622a:	2b05      	cmp	r3, #5
 800622c:	bfc4      	itt	gt
 800622e:	3b04      	subgt	r3, #4
 8006230:	9305      	strgt	r3, [sp, #20]
 8006232:	9b05      	ldr	r3, [sp, #20]
 8006234:	f1a3 0302 	sub.w	r3, r3, #2
 8006238:	bfcc      	ite	gt
 800623a:	2500      	movgt	r5, #0
 800623c:	2501      	movle	r5, #1
 800623e:	2b03      	cmp	r3, #3
 8006240:	d869      	bhi.n	8006316 <_dtoa_r+0x2c6>
 8006242:	e8df f003 	tbb	[pc, r3]
 8006246:	4e2c      	.short	0x4e2c
 8006248:	5a4c      	.short	0x5a4c
 800624a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800624e:	441d      	add	r5, r3
 8006250:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006254:	2b20      	cmp	r3, #32
 8006256:	bfc1      	itttt	gt
 8006258:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800625c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006260:	fa09 f303 	lslgt.w	r3, r9, r3
 8006264:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006268:	bfda      	itte	le
 800626a:	f1c3 0320 	rsble	r3, r3, #32
 800626e:	fa06 f003 	lslle.w	r0, r6, r3
 8006272:	4318      	orrgt	r0, r3
 8006274:	f7fa f946 	bl	8000504 <__aeabi_ui2d>
 8006278:	2301      	movs	r3, #1
 800627a:	4606      	mov	r6, r0
 800627c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006280:	3d01      	subs	r5, #1
 8006282:	9310      	str	r3, [sp, #64]	; 0x40
 8006284:	e771      	b.n	800616a <_dtoa_r+0x11a>
 8006286:	2301      	movs	r3, #1
 8006288:	e7b6      	b.n	80061f8 <_dtoa_r+0x1a8>
 800628a:	900e      	str	r0, [sp, #56]	; 0x38
 800628c:	e7b5      	b.n	80061fa <_dtoa_r+0x1aa>
 800628e:	f1ca 0300 	rsb	r3, sl, #0
 8006292:	9306      	str	r3, [sp, #24]
 8006294:	2300      	movs	r3, #0
 8006296:	eba8 080a 	sub.w	r8, r8, sl
 800629a:	930d      	str	r3, [sp, #52]	; 0x34
 800629c:	e7c2      	b.n	8006224 <_dtoa_r+0x1d4>
 800629e:	2300      	movs	r3, #0
 80062a0:	9308      	str	r3, [sp, #32]
 80062a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	dc39      	bgt.n	800631c <_dtoa_r+0x2cc>
 80062a8:	f04f 0901 	mov.w	r9, #1
 80062ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80062b0:	464b      	mov	r3, r9
 80062b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80062b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80062b8:	2200      	movs	r2, #0
 80062ba:	6042      	str	r2, [r0, #4]
 80062bc:	2204      	movs	r2, #4
 80062be:	f102 0614 	add.w	r6, r2, #20
 80062c2:	429e      	cmp	r6, r3
 80062c4:	6841      	ldr	r1, [r0, #4]
 80062c6:	d92f      	bls.n	8006328 <_dtoa_r+0x2d8>
 80062c8:	4620      	mov	r0, r4
 80062ca:	f7fe fee1 	bl	8005090 <_Balloc>
 80062ce:	9000      	str	r0, [sp, #0]
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d14b      	bne.n	800636c <_dtoa_r+0x31c>
 80062d4:	4b24      	ldr	r3, [pc, #144]	; (8006368 <_dtoa_r+0x318>)
 80062d6:	4602      	mov	r2, r0
 80062d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80062dc:	e6d1      	b.n	8006082 <_dtoa_r+0x32>
 80062de:	2301      	movs	r3, #1
 80062e0:	e7de      	b.n	80062a0 <_dtoa_r+0x250>
 80062e2:	2300      	movs	r3, #0
 80062e4:	9308      	str	r3, [sp, #32]
 80062e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062e8:	eb0a 0903 	add.w	r9, sl, r3
 80062ec:	f109 0301 	add.w	r3, r9, #1
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	9301      	str	r3, [sp, #4]
 80062f4:	bfb8      	it	lt
 80062f6:	2301      	movlt	r3, #1
 80062f8:	e7dd      	b.n	80062b6 <_dtoa_r+0x266>
 80062fa:	2301      	movs	r3, #1
 80062fc:	e7f2      	b.n	80062e4 <_dtoa_r+0x294>
 80062fe:	2501      	movs	r5, #1
 8006300:	2300      	movs	r3, #0
 8006302:	9305      	str	r3, [sp, #20]
 8006304:	9508      	str	r5, [sp, #32]
 8006306:	f04f 39ff 	mov.w	r9, #4294967295
 800630a:	2200      	movs	r2, #0
 800630c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006310:	2312      	movs	r3, #18
 8006312:	9209      	str	r2, [sp, #36]	; 0x24
 8006314:	e7cf      	b.n	80062b6 <_dtoa_r+0x266>
 8006316:	2301      	movs	r3, #1
 8006318:	9308      	str	r3, [sp, #32]
 800631a:	e7f4      	b.n	8006306 <_dtoa_r+0x2b6>
 800631c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006320:	f8cd 9004 	str.w	r9, [sp, #4]
 8006324:	464b      	mov	r3, r9
 8006326:	e7c6      	b.n	80062b6 <_dtoa_r+0x266>
 8006328:	3101      	adds	r1, #1
 800632a:	6041      	str	r1, [r0, #4]
 800632c:	0052      	lsls	r2, r2, #1
 800632e:	e7c6      	b.n	80062be <_dtoa_r+0x26e>
 8006330:	636f4361 	.word	0x636f4361
 8006334:	3fd287a7 	.word	0x3fd287a7
 8006338:	8b60c8b3 	.word	0x8b60c8b3
 800633c:	3fc68a28 	.word	0x3fc68a28
 8006340:	509f79fb 	.word	0x509f79fb
 8006344:	3fd34413 	.word	0x3fd34413
 8006348:	080081dc 	.word	0x080081dc
 800634c:	080083e2 	.word	0x080083e2
 8006350:	7ff00000 	.word	0x7ff00000
 8006354:	080083dc 	.word	0x080083dc
 8006358:	080083d3 	.word	0x080083d3
 800635c:	080083e1 	.word	0x080083e1
 8006360:	3ff80000 	.word	0x3ff80000
 8006364:	08008290 	.word	0x08008290
 8006368:	08008253 	.word	0x08008253
 800636c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800636e:	9a00      	ldr	r2, [sp, #0]
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	9b01      	ldr	r3, [sp, #4]
 8006374:	2b0e      	cmp	r3, #14
 8006376:	f200 80ad 	bhi.w	80064d4 <_dtoa_r+0x484>
 800637a:	2d00      	cmp	r5, #0
 800637c:	f000 80aa 	beq.w	80064d4 <_dtoa_r+0x484>
 8006380:	f1ba 0f00 	cmp.w	sl, #0
 8006384:	dd36      	ble.n	80063f4 <_dtoa_r+0x3a4>
 8006386:	4ac3      	ldr	r2, [pc, #780]	; (8006694 <_dtoa_r+0x644>)
 8006388:	f00a 030f 	and.w	r3, sl, #15
 800638c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006390:	ed93 7b00 	vldr	d7, [r3]
 8006394:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006398:	ea4f 172a 	mov.w	r7, sl, asr #4
 800639c:	eeb0 8a47 	vmov.f32	s16, s14
 80063a0:	eef0 8a67 	vmov.f32	s17, s15
 80063a4:	d016      	beq.n	80063d4 <_dtoa_r+0x384>
 80063a6:	4bbc      	ldr	r3, [pc, #752]	; (8006698 <_dtoa_r+0x648>)
 80063a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80063ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063b0:	f7fa fa4c 	bl	800084c <__aeabi_ddiv>
 80063b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063b8:	f007 070f 	and.w	r7, r7, #15
 80063bc:	2503      	movs	r5, #3
 80063be:	4eb6      	ldr	r6, [pc, #728]	; (8006698 <_dtoa_r+0x648>)
 80063c0:	b957      	cbnz	r7, 80063d8 <_dtoa_r+0x388>
 80063c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063c6:	ec53 2b18 	vmov	r2, r3, d8
 80063ca:	f7fa fa3f 	bl	800084c <__aeabi_ddiv>
 80063ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063d2:	e029      	b.n	8006428 <_dtoa_r+0x3d8>
 80063d4:	2502      	movs	r5, #2
 80063d6:	e7f2      	b.n	80063be <_dtoa_r+0x36e>
 80063d8:	07f9      	lsls	r1, r7, #31
 80063da:	d508      	bpl.n	80063ee <_dtoa_r+0x39e>
 80063dc:	ec51 0b18 	vmov	r0, r1, d8
 80063e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063e4:	f7fa f908 	bl	80005f8 <__aeabi_dmul>
 80063e8:	ec41 0b18 	vmov	d8, r0, r1
 80063ec:	3501      	adds	r5, #1
 80063ee:	107f      	asrs	r7, r7, #1
 80063f0:	3608      	adds	r6, #8
 80063f2:	e7e5      	b.n	80063c0 <_dtoa_r+0x370>
 80063f4:	f000 80a6 	beq.w	8006544 <_dtoa_r+0x4f4>
 80063f8:	f1ca 0600 	rsb	r6, sl, #0
 80063fc:	4ba5      	ldr	r3, [pc, #660]	; (8006694 <_dtoa_r+0x644>)
 80063fe:	4fa6      	ldr	r7, [pc, #664]	; (8006698 <_dtoa_r+0x648>)
 8006400:	f006 020f 	and.w	r2, r6, #15
 8006404:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006410:	f7fa f8f2 	bl	80005f8 <__aeabi_dmul>
 8006414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006418:	1136      	asrs	r6, r6, #4
 800641a:	2300      	movs	r3, #0
 800641c:	2502      	movs	r5, #2
 800641e:	2e00      	cmp	r6, #0
 8006420:	f040 8085 	bne.w	800652e <_dtoa_r+0x4de>
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1d2      	bne.n	80063ce <_dtoa_r+0x37e>
 8006428:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 808c 	beq.w	8006548 <_dtoa_r+0x4f8>
 8006430:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006434:	4b99      	ldr	r3, [pc, #612]	; (800669c <_dtoa_r+0x64c>)
 8006436:	2200      	movs	r2, #0
 8006438:	4630      	mov	r0, r6
 800643a:	4639      	mov	r1, r7
 800643c:	f7fa fb4e 	bl	8000adc <__aeabi_dcmplt>
 8006440:	2800      	cmp	r0, #0
 8006442:	f000 8081 	beq.w	8006548 <_dtoa_r+0x4f8>
 8006446:	9b01      	ldr	r3, [sp, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d07d      	beq.n	8006548 <_dtoa_r+0x4f8>
 800644c:	f1b9 0f00 	cmp.w	r9, #0
 8006450:	dd3c      	ble.n	80064cc <_dtoa_r+0x47c>
 8006452:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006456:	9307      	str	r3, [sp, #28]
 8006458:	2200      	movs	r2, #0
 800645a:	4b91      	ldr	r3, [pc, #580]	; (80066a0 <_dtoa_r+0x650>)
 800645c:	4630      	mov	r0, r6
 800645e:	4639      	mov	r1, r7
 8006460:	f7fa f8ca 	bl	80005f8 <__aeabi_dmul>
 8006464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006468:	3501      	adds	r5, #1
 800646a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800646e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006472:	4628      	mov	r0, r5
 8006474:	f7fa f856 	bl	8000524 <__aeabi_i2d>
 8006478:	4632      	mov	r2, r6
 800647a:	463b      	mov	r3, r7
 800647c:	f7fa f8bc 	bl	80005f8 <__aeabi_dmul>
 8006480:	4b88      	ldr	r3, [pc, #544]	; (80066a4 <_dtoa_r+0x654>)
 8006482:	2200      	movs	r2, #0
 8006484:	f7f9 ff02 	bl	800028c <__adddf3>
 8006488:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800648c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006490:	9303      	str	r3, [sp, #12]
 8006492:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006494:	2b00      	cmp	r3, #0
 8006496:	d15c      	bne.n	8006552 <_dtoa_r+0x502>
 8006498:	4b83      	ldr	r3, [pc, #524]	; (80066a8 <_dtoa_r+0x658>)
 800649a:	2200      	movs	r2, #0
 800649c:	4630      	mov	r0, r6
 800649e:	4639      	mov	r1, r7
 80064a0:	f7f9 fef2 	bl	8000288 <__aeabi_dsub>
 80064a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064a8:	4606      	mov	r6, r0
 80064aa:	460f      	mov	r7, r1
 80064ac:	f7fa fb34 	bl	8000b18 <__aeabi_dcmpgt>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	f040 8296 	bne.w	80069e2 <_dtoa_r+0x992>
 80064b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80064ba:	4630      	mov	r0, r6
 80064bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064c0:	4639      	mov	r1, r7
 80064c2:	f7fa fb0b 	bl	8000adc <__aeabi_dcmplt>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	f040 8288 	bne.w	80069dc <_dtoa_r+0x98c>
 80064cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80064d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f2c0 8158 	blt.w	800678c <_dtoa_r+0x73c>
 80064dc:	f1ba 0f0e 	cmp.w	sl, #14
 80064e0:	f300 8154 	bgt.w	800678c <_dtoa_r+0x73c>
 80064e4:	4b6b      	ldr	r3, [pc, #428]	; (8006694 <_dtoa_r+0x644>)
 80064e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80064ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f280 80e3 	bge.w	80066bc <_dtoa_r+0x66c>
 80064f6:	9b01      	ldr	r3, [sp, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f300 80df 	bgt.w	80066bc <_dtoa_r+0x66c>
 80064fe:	f040 826d 	bne.w	80069dc <_dtoa_r+0x98c>
 8006502:	4b69      	ldr	r3, [pc, #420]	; (80066a8 <_dtoa_r+0x658>)
 8006504:	2200      	movs	r2, #0
 8006506:	4640      	mov	r0, r8
 8006508:	4649      	mov	r1, r9
 800650a:	f7fa f875 	bl	80005f8 <__aeabi_dmul>
 800650e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006512:	f7fa faf7 	bl	8000b04 <__aeabi_dcmpge>
 8006516:	9e01      	ldr	r6, [sp, #4]
 8006518:	4637      	mov	r7, r6
 800651a:	2800      	cmp	r0, #0
 800651c:	f040 8243 	bne.w	80069a6 <_dtoa_r+0x956>
 8006520:	9d00      	ldr	r5, [sp, #0]
 8006522:	2331      	movs	r3, #49	; 0x31
 8006524:	f805 3b01 	strb.w	r3, [r5], #1
 8006528:	f10a 0a01 	add.w	sl, sl, #1
 800652c:	e23f      	b.n	80069ae <_dtoa_r+0x95e>
 800652e:	07f2      	lsls	r2, r6, #31
 8006530:	d505      	bpl.n	800653e <_dtoa_r+0x4ee>
 8006532:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006536:	f7fa f85f 	bl	80005f8 <__aeabi_dmul>
 800653a:	3501      	adds	r5, #1
 800653c:	2301      	movs	r3, #1
 800653e:	1076      	asrs	r6, r6, #1
 8006540:	3708      	adds	r7, #8
 8006542:	e76c      	b.n	800641e <_dtoa_r+0x3ce>
 8006544:	2502      	movs	r5, #2
 8006546:	e76f      	b.n	8006428 <_dtoa_r+0x3d8>
 8006548:	9b01      	ldr	r3, [sp, #4]
 800654a:	f8cd a01c 	str.w	sl, [sp, #28]
 800654e:	930c      	str	r3, [sp, #48]	; 0x30
 8006550:	e78d      	b.n	800646e <_dtoa_r+0x41e>
 8006552:	9900      	ldr	r1, [sp, #0]
 8006554:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006556:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006558:	4b4e      	ldr	r3, [pc, #312]	; (8006694 <_dtoa_r+0x644>)
 800655a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800655e:	4401      	add	r1, r0
 8006560:	9102      	str	r1, [sp, #8]
 8006562:	9908      	ldr	r1, [sp, #32]
 8006564:	eeb0 8a47 	vmov.f32	s16, s14
 8006568:	eef0 8a67 	vmov.f32	s17, s15
 800656c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006570:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006574:	2900      	cmp	r1, #0
 8006576:	d045      	beq.n	8006604 <_dtoa_r+0x5b4>
 8006578:	494c      	ldr	r1, [pc, #304]	; (80066ac <_dtoa_r+0x65c>)
 800657a:	2000      	movs	r0, #0
 800657c:	f7fa f966 	bl	800084c <__aeabi_ddiv>
 8006580:	ec53 2b18 	vmov	r2, r3, d8
 8006584:	f7f9 fe80 	bl	8000288 <__aeabi_dsub>
 8006588:	9d00      	ldr	r5, [sp, #0]
 800658a:	ec41 0b18 	vmov	d8, r0, r1
 800658e:	4639      	mov	r1, r7
 8006590:	4630      	mov	r0, r6
 8006592:	f7fa facb 	bl	8000b2c <__aeabi_d2iz>
 8006596:	900c      	str	r0, [sp, #48]	; 0x30
 8006598:	f7f9 ffc4 	bl	8000524 <__aeabi_i2d>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4630      	mov	r0, r6
 80065a2:	4639      	mov	r1, r7
 80065a4:	f7f9 fe70 	bl	8000288 <__aeabi_dsub>
 80065a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065aa:	3330      	adds	r3, #48	; 0x30
 80065ac:	f805 3b01 	strb.w	r3, [r5], #1
 80065b0:	ec53 2b18 	vmov	r2, r3, d8
 80065b4:	4606      	mov	r6, r0
 80065b6:	460f      	mov	r7, r1
 80065b8:	f7fa fa90 	bl	8000adc <__aeabi_dcmplt>
 80065bc:	2800      	cmp	r0, #0
 80065be:	d165      	bne.n	800668c <_dtoa_r+0x63c>
 80065c0:	4632      	mov	r2, r6
 80065c2:	463b      	mov	r3, r7
 80065c4:	4935      	ldr	r1, [pc, #212]	; (800669c <_dtoa_r+0x64c>)
 80065c6:	2000      	movs	r0, #0
 80065c8:	f7f9 fe5e 	bl	8000288 <__aeabi_dsub>
 80065cc:	ec53 2b18 	vmov	r2, r3, d8
 80065d0:	f7fa fa84 	bl	8000adc <__aeabi_dcmplt>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	f040 80b9 	bne.w	800674c <_dtoa_r+0x6fc>
 80065da:	9b02      	ldr	r3, [sp, #8]
 80065dc:	429d      	cmp	r5, r3
 80065de:	f43f af75 	beq.w	80064cc <_dtoa_r+0x47c>
 80065e2:	4b2f      	ldr	r3, [pc, #188]	; (80066a0 <_dtoa_r+0x650>)
 80065e4:	ec51 0b18 	vmov	r0, r1, d8
 80065e8:	2200      	movs	r2, #0
 80065ea:	f7fa f805 	bl	80005f8 <__aeabi_dmul>
 80065ee:	4b2c      	ldr	r3, [pc, #176]	; (80066a0 <_dtoa_r+0x650>)
 80065f0:	ec41 0b18 	vmov	d8, r0, r1
 80065f4:	2200      	movs	r2, #0
 80065f6:	4630      	mov	r0, r6
 80065f8:	4639      	mov	r1, r7
 80065fa:	f7f9 fffd 	bl	80005f8 <__aeabi_dmul>
 80065fe:	4606      	mov	r6, r0
 8006600:	460f      	mov	r7, r1
 8006602:	e7c4      	b.n	800658e <_dtoa_r+0x53e>
 8006604:	ec51 0b17 	vmov	r0, r1, d7
 8006608:	f7f9 fff6 	bl	80005f8 <__aeabi_dmul>
 800660c:	9b02      	ldr	r3, [sp, #8]
 800660e:	9d00      	ldr	r5, [sp, #0]
 8006610:	930c      	str	r3, [sp, #48]	; 0x30
 8006612:	ec41 0b18 	vmov	d8, r0, r1
 8006616:	4639      	mov	r1, r7
 8006618:	4630      	mov	r0, r6
 800661a:	f7fa fa87 	bl	8000b2c <__aeabi_d2iz>
 800661e:	9011      	str	r0, [sp, #68]	; 0x44
 8006620:	f7f9 ff80 	bl	8000524 <__aeabi_i2d>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4630      	mov	r0, r6
 800662a:	4639      	mov	r1, r7
 800662c:	f7f9 fe2c 	bl	8000288 <__aeabi_dsub>
 8006630:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006632:	3330      	adds	r3, #48	; 0x30
 8006634:	f805 3b01 	strb.w	r3, [r5], #1
 8006638:	9b02      	ldr	r3, [sp, #8]
 800663a:	429d      	cmp	r5, r3
 800663c:	4606      	mov	r6, r0
 800663e:	460f      	mov	r7, r1
 8006640:	f04f 0200 	mov.w	r2, #0
 8006644:	d134      	bne.n	80066b0 <_dtoa_r+0x660>
 8006646:	4b19      	ldr	r3, [pc, #100]	; (80066ac <_dtoa_r+0x65c>)
 8006648:	ec51 0b18 	vmov	r0, r1, d8
 800664c:	f7f9 fe1e 	bl	800028c <__adddf3>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4630      	mov	r0, r6
 8006656:	4639      	mov	r1, r7
 8006658:	f7fa fa5e 	bl	8000b18 <__aeabi_dcmpgt>
 800665c:	2800      	cmp	r0, #0
 800665e:	d175      	bne.n	800674c <_dtoa_r+0x6fc>
 8006660:	ec53 2b18 	vmov	r2, r3, d8
 8006664:	4911      	ldr	r1, [pc, #68]	; (80066ac <_dtoa_r+0x65c>)
 8006666:	2000      	movs	r0, #0
 8006668:	f7f9 fe0e 	bl	8000288 <__aeabi_dsub>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4630      	mov	r0, r6
 8006672:	4639      	mov	r1, r7
 8006674:	f7fa fa32 	bl	8000adc <__aeabi_dcmplt>
 8006678:	2800      	cmp	r0, #0
 800667a:	f43f af27 	beq.w	80064cc <_dtoa_r+0x47c>
 800667e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006680:	1e6b      	subs	r3, r5, #1
 8006682:	930c      	str	r3, [sp, #48]	; 0x30
 8006684:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006688:	2b30      	cmp	r3, #48	; 0x30
 800668a:	d0f8      	beq.n	800667e <_dtoa_r+0x62e>
 800668c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006690:	e04a      	b.n	8006728 <_dtoa_r+0x6d8>
 8006692:	bf00      	nop
 8006694:	08008290 	.word	0x08008290
 8006698:	08008268 	.word	0x08008268
 800669c:	3ff00000 	.word	0x3ff00000
 80066a0:	40240000 	.word	0x40240000
 80066a4:	401c0000 	.word	0x401c0000
 80066a8:	40140000 	.word	0x40140000
 80066ac:	3fe00000 	.word	0x3fe00000
 80066b0:	4baf      	ldr	r3, [pc, #700]	; (8006970 <_dtoa_r+0x920>)
 80066b2:	f7f9 ffa1 	bl	80005f8 <__aeabi_dmul>
 80066b6:	4606      	mov	r6, r0
 80066b8:	460f      	mov	r7, r1
 80066ba:	e7ac      	b.n	8006616 <_dtoa_r+0x5c6>
 80066bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80066c0:	9d00      	ldr	r5, [sp, #0]
 80066c2:	4642      	mov	r2, r8
 80066c4:	464b      	mov	r3, r9
 80066c6:	4630      	mov	r0, r6
 80066c8:	4639      	mov	r1, r7
 80066ca:	f7fa f8bf 	bl	800084c <__aeabi_ddiv>
 80066ce:	f7fa fa2d 	bl	8000b2c <__aeabi_d2iz>
 80066d2:	9002      	str	r0, [sp, #8]
 80066d4:	f7f9 ff26 	bl	8000524 <__aeabi_i2d>
 80066d8:	4642      	mov	r2, r8
 80066da:	464b      	mov	r3, r9
 80066dc:	f7f9 ff8c 	bl	80005f8 <__aeabi_dmul>
 80066e0:	4602      	mov	r2, r0
 80066e2:	460b      	mov	r3, r1
 80066e4:	4630      	mov	r0, r6
 80066e6:	4639      	mov	r1, r7
 80066e8:	f7f9 fdce 	bl	8000288 <__aeabi_dsub>
 80066ec:	9e02      	ldr	r6, [sp, #8]
 80066ee:	9f01      	ldr	r7, [sp, #4]
 80066f0:	3630      	adds	r6, #48	; 0x30
 80066f2:	f805 6b01 	strb.w	r6, [r5], #1
 80066f6:	9e00      	ldr	r6, [sp, #0]
 80066f8:	1bae      	subs	r6, r5, r6
 80066fa:	42b7      	cmp	r7, r6
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	d137      	bne.n	8006772 <_dtoa_r+0x722>
 8006702:	f7f9 fdc3 	bl	800028c <__adddf3>
 8006706:	4642      	mov	r2, r8
 8006708:	464b      	mov	r3, r9
 800670a:	4606      	mov	r6, r0
 800670c:	460f      	mov	r7, r1
 800670e:	f7fa fa03 	bl	8000b18 <__aeabi_dcmpgt>
 8006712:	b9c8      	cbnz	r0, 8006748 <_dtoa_r+0x6f8>
 8006714:	4642      	mov	r2, r8
 8006716:	464b      	mov	r3, r9
 8006718:	4630      	mov	r0, r6
 800671a:	4639      	mov	r1, r7
 800671c:	f7fa f9d4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006720:	b110      	cbz	r0, 8006728 <_dtoa_r+0x6d8>
 8006722:	9b02      	ldr	r3, [sp, #8]
 8006724:	07d9      	lsls	r1, r3, #31
 8006726:	d40f      	bmi.n	8006748 <_dtoa_r+0x6f8>
 8006728:	4620      	mov	r0, r4
 800672a:	4659      	mov	r1, fp
 800672c:	f7fe fcf0 	bl	8005110 <_Bfree>
 8006730:	2300      	movs	r3, #0
 8006732:	702b      	strb	r3, [r5, #0]
 8006734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006736:	f10a 0001 	add.w	r0, sl, #1
 800673a:	6018      	str	r0, [r3, #0]
 800673c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800673e:	2b00      	cmp	r3, #0
 8006740:	f43f acd8 	beq.w	80060f4 <_dtoa_r+0xa4>
 8006744:	601d      	str	r5, [r3, #0]
 8006746:	e4d5      	b.n	80060f4 <_dtoa_r+0xa4>
 8006748:	f8cd a01c 	str.w	sl, [sp, #28]
 800674c:	462b      	mov	r3, r5
 800674e:	461d      	mov	r5, r3
 8006750:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006754:	2a39      	cmp	r2, #57	; 0x39
 8006756:	d108      	bne.n	800676a <_dtoa_r+0x71a>
 8006758:	9a00      	ldr	r2, [sp, #0]
 800675a:	429a      	cmp	r2, r3
 800675c:	d1f7      	bne.n	800674e <_dtoa_r+0x6fe>
 800675e:	9a07      	ldr	r2, [sp, #28]
 8006760:	9900      	ldr	r1, [sp, #0]
 8006762:	3201      	adds	r2, #1
 8006764:	9207      	str	r2, [sp, #28]
 8006766:	2230      	movs	r2, #48	; 0x30
 8006768:	700a      	strb	r2, [r1, #0]
 800676a:	781a      	ldrb	r2, [r3, #0]
 800676c:	3201      	adds	r2, #1
 800676e:	701a      	strb	r2, [r3, #0]
 8006770:	e78c      	b.n	800668c <_dtoa_r+0x63c>
 8006772:	4b7f      	ldr	r3, [pc, #508]	; (8006970 <_dtoa_r+0x920>)
 8006774:	2200      	movs	r2, #0
 8006776:	f7f9 ff3f 	bl	80005f8 <__aeabi_dmul>
 800677a:	2200      	movs	r2, #0
 800677c:	2300      	movs	r3, #0
 800677e:	4606      	mov	r6, r0
 8006780:	460f      	mov	r7, r1
 8006782:	f7fa f9a1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006786:	2800      	cmp	r0, #0
 8006788:	d09b      	beq.n	80066c2 <_dtoa_r+0x672>
 800678a:	e7cd      	b.n	8006728 <_dtoa_r+0x6d8>
 800678c:	9a08      	ldr	r2, [sp, #32]
 800678e:	2a00      	cmp	r2, #0
 8006790:	f000 80c4 	beq.w	800691c <_dtoa_r+0x8cc>
 8006794:	9a05      	ldr	r2, [sp, #20]
 8006796:	2a01      	cmp	r2, #1
 8006798:	f300 80a8 	bgt.w	80068ec <_dtoa_r+0x89c>
 800679c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800679e:	2a00      	cmp	r2, #0
 80067a0:	f000 80a0 	beq.w	80068e4 <_dtoa_r+0x894>
 80067a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80067a8:	9e06      	ldr	r6, [sp, #24]
 80067aa:	4645      	mov	r5, r8
 80067ac:	9a04      	ldr	r2, [sp, #16]
 80067ae:	2101      	movs	r1, #1
 80067b0:	441a      	add	r2, r3
 80067b2:	4620      	mov	r0, r4
 80067b4:	4498      	add	r8, r3
 80067b6:	9204      	str	r2, [sp, #16]
 80067b8:	f7fe fd66 	bl	8005288 <__i2b>
 80067bc:	4607      	mov	r7, r0
 80067be:	2d00      	cmp	r5, #0
 80067c0:	dd0b      	ble.n	80067da <_dtoa_r+0x78a>
 80067c2:	9b04      	ldr	r3, [sp, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	dd08      	ble.n	80067da <_dtoa_r+0x78a>
 80067c8:	42ab      	cmp	r3, r5
 80067ca:	9a04      	ldr	r2, [sp, #16]
 80067cc:	bfa8      	it	ge
 80067ce:	462b      	movge	r3, r5
 80067d0:	eba8 0803 	sub.w	r8, r8, r3
 80067d4:	1aed      	subs	r5, r5, r3
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	9304      	str	r3, [sp, #16]
 80067da:	9b06      	ldr	r3, [sp, #24]
 80067dc:	b1fb      	cbz	r3, 800681e <_dtoa_r+0x7ce>
 80067de:	9b08      	ldr	r3, [sp, #32]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 809f 	beq.w	8006924 <_dtoa_r+0x8d4>
 80067e6:	2e00      	cmp	r6, #0
 80067e8:	dd11      	ble.n	800680e <_dtoa_r+0x7be>
 80067ea:	4639      	mov	r1, r7
 80067ec:	4632      	mov	r2, r6
 80067ee:	4620      	mov	r0, r4
 80067f0:	f7fe fe06 	bl	8005400 <__pow5mult>
 80067f4:	465a      	mov	r2, fp
 80067f6:	4601      	mov	r1, r0
 80067f8:	4607      	mov	r7, r0
 80067fa:	4620      	mov	r0, r4
 80067fc:	f7fe fd5a 	bl	80052b4 <__multiply>
 8006800:	4659      	mov	r1, fp
 8006802:	9007      	str	r0, [sp, #28]
 8006804:	4620      	mov	r0, r4
 8006806:	f7fe fc83 	bl	8005110 <_Bfree>
 800680a:	9b07      	ldr	r3, [sp, #28]
 800680c:	469b      	mov	fp, r3
 800680e:	9b06      	ldr	r3, [sp, #24]
 8006810:	1b9a      	subs	r2, r3, r6
 8006812:	d004      	beq.n	800681e <_dtoa_r+0x7ce>
 8006814:	4659      	mov	r1, fp
 8006816:	4620      	mov	r0, r4
 8006818:	f7fe fdf2 	bl	8005400 <__pow5mult>
 800681c:	4683      	mov	fp, r0
 800681e:	2101      	movs	r1, #1
 8006820:	4620      	mov	r0, r4
 8006822:	f7fe fd31 	bl	8005288 <__i2b>
 8006826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006828:	2b00      	cmp	r3, #0
 800682a:	4606      	mov	r6, r0
 800682c:	dd7c      	ble.n	8006928 <_dtoa_r+0x8d8>
 800682e:	461a      	mov	r2, r3
 8006830:	4601      	mov	r1, r0
 8006832:	4620      	mov	r0, r4
 8006834:	f7fe fde4 	bl	8005400 <__pow5mult>
 8006838:	9b05      	ldr	r3, [sp, #20]
 800683a:	2b01      	cmp	r3, #1
 800683c:	4606      	mov	r6, r0
 800683e:	dd76      	ble.n	800692e <_dtoa_r+0x8de>
 8006840:	2300      	movs	r3, #0
 8006842:	9306      	str	r3, [sp, #24]
 8006844:	6933      	ldr	r3, [r6, #16]
 8006846:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800684a:	6918      	ldr	r0, [r3, #16]
 800684c:	f7fe fccc 	bl	80051e8 <__hi0bits>
 8006850:	f1c0 0020 	rsb	r0, r0, #32
 8006854:	9b04      	ldr	r3, [sp, #16]
 8006856:	4418      	add	r0, r3
 8006858:	f010 001f 	ands.w	r0, r0, #31
 800685c:	f000 8086 	beq.w	800696c <_dtoa_r+0x91c>
 8006860:	f1c0 0320 	rsb	r3, r0, #32
 8006864:	2b04      	cmp	r3, #4
 8006866:	dd7f      	ble.n	8006968 <_dtoa_r+0x918>
 8006868:	f1c0 001c 	rsb	r0, r0, #28
 800686c:	9b04      	ldr	r3, [sp, #16]
 800686e:	4403      	add	r3, r0
 8006870:	4480      	add	r8, r0
 8006872:	4405      	add	r5, r0
 8006874:	9304      	str	r3, [sp, #16]
 8006876:	f1b8 0f00 	cmp.w	r8, #0
 800687a:	dd05      	ble.n	8006888 <_dtoa_r+0x838>
 800687c:	4659      	mov	r1, fp
 800687e:	4642      	mov	r2, r8
 8006880:	4620      	mov	r0, r4
 8006882:	f7fe fe17 	bl	80054b4 <__lshift>
 8006886:	4683      	mov	fp, r0
 8006888:	9b04      	ldr	r3, [sp, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	dd05      	ble.n	800689a <_dtoa_r+0x84a>
 800688e:	4631      	mov	r1, r6
 8006890:	461a      	mov	r2, r3
 8006892:	4620      	mov	r0, r4
 8006894:	f7fe fe0e 	bl	80054b4 <__lshift>
 8006898:	4606      	mov	r6, r0
 800689a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800689c:	2b00      	cmp	r3, #0
 800689e:	d069      	beq.n	8006974 <_dtoa_r+0x924>
 80068a0:	4631      	mov	r1, r6
 80068a2:	4658      	mov	r0, fp
 80068a4:	f7fe fe72 	bl	800558c <__mcmp>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	da63      	bge.n	8006974 <_dtoa_r+0x924>
 80068ac:	2300      	movs	r3, #0
 80068ae:	4659      	mov	r1, fp
 80068b0:	220a      	movs	r2, #10
 80068b2:	4620      	mov	r0, r4
 80068b4:	f7fe fc4e 	bl	8005154 <__multadd>
 80068b8:	9b08      	ldr	r3, [sp, #32]
 80068ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068be:	4683      	mov	fp, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 818f 	beq.w	8006be4 <_dtoa_r+0xb94>
 80068c6:	4639      	mov	r1, r7
 80068c8:	2300      	movs	r3, #0
 80068ca:	220a      	movs	r2, #10
 80068cc:	4620      	mov	r0, r4
 80068ce:	f7fe fc41 	bl	8005154 <__multadd>
 80068d2:	f1b9 0f00 	cmp.w	r9, #0
 80068d6:	4607      	mov	r7, r0
 80068d8:	f300 808e 	bgt.w	80069f8 <_dtoa_r+0x9a8>
 80068dc:	9b05      	ldr	r3, [sp, #20]
 80068de:	2b02      	cmp	r3, #2
 80068e0:	dc50      	bgt.n	8006984 <_dtoa_r+0x934>
 80068e2:	e089      	b.n	80069f8 <_dtoa_r+0x9a8>
 80068e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068ea:	e75d      	b.n	80067a8 <_dtoa_r+0x758>
 80068ec:	9b01      	ldr	r3, [sp, #4]
 80068ee:	1e5e      	subs	r6, r3, #1
 80068f0:	9b06      	ldr	r3, [sp, #24]
 80068f2:	42b3      	cmp	r3, r6
 80068f4:	bfbf      	itttt	lt
 80068f6:	9b06      	ldrlt	r3, [sp, #24]
 80068f8:	9606      	strlt	r6, [sp, #24]
 80068fa:	1af2      	sublt	r2, r6, r3
 80068fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80068fe:	bfb6      	itet	lt
 8006900:	189b      	addlt	r3, r3, r2
 8006902:	1b9e      	subge	r6, r3, r6
 8006904:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006906:	9b01      	ldr	r3, [sp, #4]
 8006908:	bfb8      	it	lt
 800690a:	2600      	movlt	r6, #0
 800690c:	2b00      	cmp	r3, #0
 800690e:	bfb5      	itete	lt
 8006910:	eba8 0503 	sublt.w	r5, r8, r3
 8006914:	9b01      	ldrge	r3, [sp, #4]
 8006916:	2300      	movlt	r3, #0
 8006918:	4645      	movge	r5, r8
 800691a:	e747      	b.n	80067ac <_dtoa_r+0x75c>
 800691c:	9e06      	ldr	r6, [sp, #24]
 800691e:	9f08      	ldr	r7, [sp, #32]
 8006920:	4645      	mov	r5, r8
 8006922:	e74c      	b.n	80067be <_dtoa_r+0x76e>
 8006924:	9a06      	ldr	r2, [sp, #24]
 8006926:	e775      	b.n	8006814 <_dtoa_r+0x7c4>
 8006928:	9b05      	ldr	r3, [sp, #20]
 800692a:	2b01      	cmp	r3, #1
 800692c:	dc18      	bgt.n	8006960 <_dtoa_r+0x910>
 800692e:	9b02      	ldr	r3, [sp, #8]
 8006930:	b9b3      	cbnz	r3, 8006960 <_dtoa_r+0x910>
 8006932:	9b03      	ldr	r3, [sp, #12]
 8006934:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006938:	b9a3      	cbnz	r3, 8006964 <_dtoa_r+0x914>
 800693a:	9b03      	ldr	r3, [sp, #12]
 800693c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006940:	0d1b      	lsrs	r3, r3, #20
 8006942:	051b      	lsls	r3, r3, #20
 8006944:	b12b      	cbz	r3, 8006952 <_dtoa_r+0x902>
 8006946:	9b04      	ldr	r3, [sp, #16]
 8006948:	3301      	adds	r3, #1
 800694a:	9304      	str	r3, [sp, #16]
 800694c:	f108 0801 	add.w	r8, r8, #1
 8006950:	2301      	movs	r3, #1
 8006952:	9306      	str	r3, [sp, #24]
 8006954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006956:	2b00      	cmp	r3, #0
 8006958:	f47f af74 	bne.w	8006844 <_dtoa_r+0x7f4>
 800695c:	2001      	movs	r0, #1
 800695e:	e779      	b.n	8006854 <_dtoa_r+0x804>
 8006960:	2300      	movs	r3, #0
 8006962:	e7f6      	b.n	8006952 <_dtoa_r+0x902>
 8006964:	9b02      	ldr	r3, [sp, #8]
 8006966:	e7f4      	b.n	8006952 <_dtoa_r+0x902>
 8006968:	d085      	beq.n	8006876 <_dtoa_r+0x826>
 800696a:	4618      	mov	r0, r3
 800696c:	301c      	adds	r0, #28
 800696e:	e77d      	b.n	800686c <_dtoa_r+0x81c>
 8006970:	40240000 	.word	0x40240000
 8006974:	9b01      	ldr	r3, [sp, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	dc38      	bgt.n	80069ec <_dtoa_r+0x99c>
 800697a:	9b05      	ldr	r3, [sp, #20]
 800697c:	2b02      	cmp	r3, #2
 800697e:	dd35      	ble.n	80069ec <_dtoa_r+0x99c>
 8006980:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006984:	f1b9 0f00 	cmp.w	r9, #0
 8006988:	d10d      	bne.n	80069a6 <_dtoa_r+0x956>
 800698a:	4631      	mov	r1, r6
 800698c:	464b      	mov	r3, r9
 800698e:	2205      	movs	r2, #5
 8006990:	4620      	mov	r0, r4
 8006992:	f7fe fbdf 	bl	8005154 <__multadd>
 8006996:	4601      	mov	r1, r0
 8006998:	4606      	mov	r6, r0
 800699a:	4658      	mov	r0, fp
 800699c:	f7fe fdf6 	bl	800558c <__mcmp>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	f73f adbd 	bgt.w	8006520 <_dtoa_r+0x4d0>
 80069a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069a8:	9d00      	ldr	r5, [sp, #0]
 80069aa:	ea6f 0a03 	mvn.w	sl, r3
 80069ae:	f04f 0800 	mov.w	r8, #0
 80069b2:	4631      	mov	r1, r6
 80069b4:	4620      	mov	r0, r4
 80069b6:	f7fe fbab 	bl	8005110 <_Bfree>
 80069ba:	2f00      	cmp	r7, #0
 80069bc:	f43f aeb4 	beq.w	8006728 <_dtoa_r+0x6d8>
 80069c0:	f1b8 0f00 	cmp.w	r8, #0
 80069c4:	d005      	beq.n	80069d2 <_dtoa_r+0x982>
 80069c6:	45b8      	cmp	r8, r7
 80069c8:	d003      	beq.n	80069d2 <_dtoa_r+0x982>
 80069ca:	4641      	mov	r1, r8
 80069cc:	4620      	mov	r0, r4
 80069ce:	f7fe fb9f 	bl	8005110 <_Bfree>
 80069d2:	4639      	mov	r1, r7
 80069d4:	4620      	mov	r0, r4
 80069d6:	f7fe fb9b 	bl	8005110 <_Bfree>
 80069da:	e6a5      	b.n	8006728 <_dtoa_r+0x6d8>
 80069dc:	2600      	movs	r6, #0
 80069de:	4637      	mov	r7, r6
 80069e0:	e7e1      	b.n	80069a6 <_dtoa_r+0x956>
 80069e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80069e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80069e8:	4637      	mov	r7, r6
 80069ea:	e599      	b.n	8006520 <_dtoa_r+0x4d0>
 80069ec:	9b08      	ldr	r3, [sp, #32]
 80069ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 80fd 	beq.w	8006bf2 <_dtoa_r+0xba2>
 80069f8:	2d00      	cmp	r5, #0
 80069fa:	dd05      	ble.n	8006a08 <_dtoa_r+0x9b8>
 80069fc:	4639      	mov	r1, r7
 80069fe:	462a      	mov	r2, r5
 8006a00:	4620      	mov	r0, r4
 8006a02:	f7fe fd57 	bl	80054b4 <__lshift>
 8006a06:	4607      	mov	r7, r0
 8006a08:	9b06      	ldr	r3, [sp, #24]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d05c      	beq.n	8006ac8 <_dtoa_r+0xa78>
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	4620      	mov	r0, r4
 8006a12:	f7fe fb3d 	bl	8005090 <_Balloc>
 8006a16:	4605      	mov	r5, r0
 8006a18:	b928      	cbnz	r0, 8006a26 <_dtoa_r+0x9d6>
 8006a1a:	4b80      	ldr	r3, [pc, #512]	; (8006c1c <_dtoa_r+0xbcc>)
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006a22:	f7ff bb2e 	b.w	8006082 <_dtoa_r+0x32>
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	3202      	adds	r2, #2
 8006a2a:	0092      	lsls	r2, r2, #2
 8006a2c:	f107 010c 	add.w	r1, r7, #12
 8006a30:	300c      	adds	r0, #12
 8006a32:	f000 f913 	bl	8006c5c <memcpy>
 8006a36:	2201      	movs	r2, #1
 8006a38:	4629      	mov	r1, r5
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f7fe fd3a 	bl	80054b4 <__lshift>
 8006a40:	9b00      	ldr	r3, [sp, #0]
 8006a42:	3301      	adds	r3, #1
 8006a44:	9301      	str	r3, [sp, #4]
 8006a46:	9b00      	ldr	r3, [sp, #0]
 8006a48:	444b      	add	r3, r9
 8006a4a:	9307      	str	r3, [sp, #28]
 8006a4c:	9b02      	ldr	r3, [sp, #8]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	46b8      	mov	r8, r7
 8006a54:	9306      	str	r3, [sp, #24]
 8006a56:	4607      	mov	r7, r0
 8006a58:	9b01      	ldr	r3, [sp, #4]
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	4658      	mov	r0, fp
 8006a60:	9302      	str	r3, [sp, #8]
 8006a62:	f7ff fa67 	bl	8005f34 <quorem>
 8006a66:	4603      	mov	r3, r0
 8006a68:	3330      	adds	r3, #48	; 0x30
 8006a6a:	9004      	str	r0, [sp, #16]
 8006a6c:	4641      	mov	r1, r8
 8006a6e:	4658      	mov	r0, fp
 8006a70:	9308      	str	r3, [sp, #32]
 8006a72:	f7fe fd8b 	bl	800558c <__mcmp>
 8006a76:	463a      	mov	r2, r7
 8006a78:	4681      	mov	r9, r0
 8006a7a:	4631      	mov	r1, r6
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f7fe fda1 	bl	80055c4 <__mdiff>
 8006a82:	68c2      	ldr	r2, [r0, #12]
 8006a84:	9b08      	ldr	r3, [sp, #32]
 8006a86:	4605      	mov	r5, r0
 8006a88:	bb02      	cbnz	r2, 8006acc <_dtoa_r+0xa7c>
 8006a8a:	4601      	mov	r1, r0
 8006a8c:	4658      	mov	r0, fp
 8006a8e:	f7fe fd7d 	bl	800558c <__mcmp>
 8006a92:	9b08      	ldr	r3, [sp, #32]
 8006a94:	4602      	mov	r2, r0
 8006a96:	4629      	mov	r1, r5
 8006a98:	4620      	mov	r0, r4
 8006a9a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006a9e:	f7fe fb37 	bl	8005110 <_Bfree>
 8006aa2:	9b05      	ldr	r3, [sp, #20]
 8006aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aa6:	9d01      	ldr	r5, [sp, #4]
 8006aa8:	ea43 0102 	orr.w	r1, r3, r2
 8006aac:	9b06      	ldr	r3, [sp, #24]
 8006aae:	430b      	orrs	r3, r1
 8006ab0:	9b08      	ldr	r3, [sp, #32]
 8006ab2:	d10d      	bne.n	8006ad0 <_dtoa_r+0xa80>
 8006ab4:	2b39      	cmp	r3, #57	; 0x39
 8006ab6:	d029      	beq.n	8006b0c <_dtoa_r+0xabc>
 8006ab8:	f1b9 0f00 	cmp.w	r9, #0
 8006abc:	dd01      	ble.n	8006ac2 <_dtoa_r+0xa72>
 8006abe:	9b04      	ldr	r3, [sp, #16]
 8006ac0:	3331      	adds	r3, #49	; 0x31
 8006ac2:	9a02      	ldr	r2, [sp, #8]
 8006ac4:	7013      	strb	r3, [r2, #0]
 8006ac6:	e774      	b.n	80069b2 <_dtoa_r+0x962>
 8006ac8:	4638      	mov	r0, r7
 8006aca:	e7b9      	b.n	8006a40 <_dtoa_r+0x9f0>
 8006acc:	2201      	movs	r2, #1
 8006ace:	e7e2      	b.n	8006a96 <_dtoa_r+0xa46>
 8006ad0:	f1b9 0f00 	cmp.w	r9, #0
 8006ad4:	db06      	blt.n	8006ae4 <_dtoa_r+0xa94>
 8006ad6:	9905      	ldr	r1, [sp, #20]
 8006ad8:	ea41 0909 	orr.w	r9, r1, r9
 8006adc:	9906      	ldr	r1, [sp, #24]
 8006ade:	ea59 0101 	orrs.w	r1, r9, r1
 8006ae2:	d120      	bne.n	8006b26 <_dtoa_r+0xad6>
 8006ae4:	2a00      	cmp	r2, #0
 8006ae6:	ddec      	ble.n	8006ac2 <_dtoa_r+0xa72>
 8006ae8:	4659      	mov	r1, fp
 8006aea:	2201      	movs	r2, #1
 8006aec:	4620      	mov	r0, r4
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	f7fe fce0 	bl	80054b4 <__lshift>
 8006af4:	4631      	mov	r1, r6
 8006af6:	4683      	mov	fp, r0
 8006af8:	f7fe fd48 	bl	800558c <__mcmp>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	9b01      	ldr	r3, [sp, #4]
 8006b00:	dc02      	bgt.n	8006b08 <_dtoa_r+0xab8>
 8006b02:	d1de      	bne.n	8006ac2 <_dtoa_r+0xa72>
 8006b04:	07da      	lsls	r2, r3, #31
 8006b06:	d5dc      	bpl.n	8006ac2 <_dtoa_r+0xa72>
 8006b08:	2b39      	cmp	r3, #57	; 0x39
 8006b0a:	d1d8      	bne.n	8006abe <_dtoa_r+0xa6e>
 8006b0c:	9a02      	ldr	r2, [sp, #8]
 8006b0e:	2339      	movs	r3, #57	; 0x39
 8006b10:	7013      	strb	r3, [r2, #0]
 8006b12:	462b      	mov	r3, r5
 8006b14:	461d      	mov	r5, r3
 8006b16:	3b01      	subs	r3, #1
 8006b18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b1c:	2a39      	cmp	r2, #57	; 0x39
 8006b1e:	d050      	beq.n	8006bc2 <_dtoa_r+0xb72>
 8006b20:	3201      	adds	r2, #1
 8006b22:	701a      	strb	r2, [r3, #0]
 8006b24:	e745      	b.n	80069b2 <_dtoa_r+0x962>
 8006b26:	2a00      	cmp	r2, #0
 8006b28:	dd03      	ble.n	8006b32 <_dtoa_r+0xae2>
 8006b2a:	2b39      	cmp	r3, #57	; 0x39
 8006b2c:	d0ee      	beq.n	8006b0c <_dtoa_r+0xabc>
 8006b2e:	3301      	adds	r3, #1
 8006b30:	e7c7      	b.n	8006ac2 <_dtoa_r+0xa72>
 8006b32:	9a01      	ldr	r2, [sp, #4]
 8006b34:	9907      	ldr	r1, [sp, #28]
 8006b36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006b3a:	428a      	cmp	r2, r1
 8006b3c:	d02a      	beq.n	8006b94 <_dtoa_r+0xb44>
 8006b3e:	4659      	mov	r1, fp
 8006b40:	2300      	movs	r3, #0
 8006b42:	220a      	movs	r2, #10
 8006b44:	4620      	mov	r0, r4
 8006b46:	f7fe fb05 	bl	8005154 <__multadd>
 8006b4a:	45b8      	cmp	r8, r7
 8006b4c:	4683      	mov	fp, r0
 8006b4e:	f04f 0300 	mov.w	r3, #0
 8006b52:	f04f 020a 	mov.w	r2, #10
 8006b56:	4641      	mov	r1, r8
 8006b58:	4620      	mov	r0, r4
 8006b5a:	d107      	bne.n	8006b6c <_dtoa_r+0xb1c>
 8006b5c:	f7fe fafa 	bl	8005154 <__multadd>
 8006b60:	4680      	mov	r8, r0
 8006b62:	4607      	mov	r7, r0
 8006b64:	9b01      	ldr	r3, [sp, #4]
 8006b66:	3301      	adds	r3, #1
 8006b68:	9301      	str	r3, [sp, #4]
 8006b6a:	e775      	b.n	8006a58 <_dtoa_r+0xa08>
 8006b6c:	f7fe faf2 	bl	8005154 <__multadd>
 8006b70:	4639      	mov	r1, r7
 8006b72:	4680      	mov	r8, r0
 8006b74:	2300      	movs	r3, #0
 8006b76:	220a      	movs	r2, #10
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f7fe faeb 	bl	8005154 <__multadd>
 8006b7e:	4607      	mov	r7, r0
 8006b80:	e7f0      	b.n	8006b64 <_dtoa_r+0xb14>
 8006b82:	f1b9 0f00 	cmp.w	r9, #0
 8006b86:	9a00      	ldr	r2, [sp, #0]
 8006b88:	bfcc      	ite	gt
 8006b8a:	464d      	movgt	r5, r9
 8006b8c:	2501      	movle	r5, #1
 8006b8e:	4415      	add	r5, r2
 8006b90:	f04f 0800 	mov.w	r8, #0
 8006b94:	4659      	mov	r1, fp
 8006b96:	2201      	movs	r2, #1
 8006b98:	4620      	mov	r0, r4
 8006b9a:	9301      	str	r3, [sp, #4]
 8006b9c:	f7fe fc8a 	bl	80054b4 <__lshift>
 8006ba0:	4631      	mov	r1, r6
 8006ba2:	4683      	mov	fp, r0
 8006ba4:	f7fe fcf2 	bl	800558c <__mcmp>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	dcb2      	bgt.n	8006b12 <_dtoa_r+0xac2>
 8006bac:	d102      	bne.n	8006bb4 <_dtoa_r+0xb64>
 8006bae:	9b01      	ldr	r3, [sp, #4]
 8006bb0:	07db      	lsls	r3, r3, #31
 8006bb2:	d4ae      	bmi.n	8006b12 <_dtoa_r+0xac2>
 8006bb4:	462b      	mov	r3, r5
 8006bb6:	461d      	mov	r5, r3
 8006bb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bbc:	2a30      	cmp	r2, #48	; 0x30
 8006bbe:	d0fa      	beq.n	8006bb6 <_dtoa_r+0xb66>
 8006bc0:	e6f7      	b.n	80069b2 <_dtoa_r+0x962>
 8006bc2:	9a00      	ldr	r2, [sp, #0]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d1a5      	bne.n	8006b14 <_dtoa_r+0xac4>
 8006bc8:	f10a 0a01 	add.w	sl, sl, #1
 8006bcc:	2331      	movs	r3, #49	; 0x31
 8006bce:	e779      	b.n	8006ac4 <_dtoa_r+0xa74>
 8006bd0:	4b13      	ldr	r3, [pc, #76]	; (8006c20 <_dtoa_r+0xbd0>)
 8006bd2:	f7ff baaf 	b.w	8006134 <_dtoa_r+0xe4>
 8006bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f47f aa86 	bne.w	80060ea <_dtoa_r+0x9a>
 8006bde:	4b11      	ldr	r3, [pc, #68]	; (8006c24 <_dtoa_r+0xbd4>)
 8006be0:	f7ff baa8 	b.w	8006134 <_dtoa_r+0xe4>
 8006be4:	f1b9 0f00 	cmp.w	r9, #0
 8006be8:	dc03      	bgt.n	8006bf2 <_dtoa_r+0xba2>
 8006bea:	9b05      	ldr	r3, [sp, #20]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	f73f aec9 	bgt.w	8006984 <_dtoa_r+0x934>
 8006bf2:	9d00      	ldr	r5, [sp, #0]
 8006bf4:	4631      	mov	r1, r6
 8006bf6:	4658      	mov	r0, fp
 8006bf8:	f7ff f99c 	bl	8005f34 <quorem>
 8006bfc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006c00:	f805 3b01 	strb.w	r3, [r5], #1
 8006c04:	9a00      	ldr	r2, [sp, #0]
 8006c06:	1aaa      	subs	r2, r5, r2
 8006c08:	4591      	cmp	r9, r2
 8006c0a:	ddba      	ble.n	8006b82 <_dtoa_r+0xb32>
 8006c0c:	4659      	mov	r1, fp
 8006c0e:	2300      	movs	r3, #0
 8006c10:	220a      	movs	r2, #10
 8006c12:	4620      	mov	r0, r4
 8006c14:	f7fe fa9e 	bl	8005154 <__multadd>
 8006c18:	4683      	mov	fp, r0
 8006c1a:	e7eb      	b.n	8006bf4 <_dtoa_r+0xba4>
 8006c1c:	08008253 	.word	0x08008253
 8006c20:	080083e0 	.word	0x080083e0
 8006c24:	080083d3 	.word	0x080083d3

08006c28 <fiprintf>:
 8006c28:	b40e      	push	{r1, r2, r3}
 8006c2a:	b503      	push	{r0, r1, lr}
 8006c2c:	4601      	mov	r1, r0
 8006c2e:	ab03      	add	r3, sp, #12
 8006c30:	4805      	ldr	r0, [pc, #20]	; (8006c48 <fiprintf+0x20>)
 8006c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c36:	6800      	ldr	r0, [r0, #0]
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	f000 f8c5 	bl	8006dc8 <_vfiprintf_r>
 8006c3e:	b002      	add	sp, #8
 8006c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c44:	b003      	add	sp, #12
 8006c46:	4770      	bx	lr
 8006c48:	20000008 	.word	0x20000008

08006c4c <malloc>:
 8006c4c:	4b02      	ldr	r3, [pc, #8]	; (8006c58 <malloc+0xc>)
 8006c4e:	4601      	mov	r1, r0
 8006c50:	6818      	ldr	r0, [r3, #0]
 8006c52:	f7fe bdc9 	b.w	80057e8 <_malloc_r>
 8006c56:	bf00      	nop
 8006c58:	20000008 	.word	0x20000008

08006c5c <memcpy>:
 8006c5c:	440a      	add	r2, r1
 8006c5e:	4291      	cmp	r1, r2
 8006c60:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c64:	d100      	bne.n	8006c68 <memcpy+0xc>
 8006c66:	4770      	bx	lr
 8006c68:	b510      	push	{r4, lr}
 8006c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c72:	4291      	cmp	r1, r2
 8006c74:	d1f9      	bne.n	8006c6a <memcpy+0xe>
 8006c76:	bd10      	pop	{r4, pc}

08006c78 <memmove>:
 8006c78:	4288      	cmp	r0, r1
 8006c7a:	b510      	push	{r4, lr}
 8006c7c:	eb01 0402 	add.w	r4, r1, r2
 8006c80:	d902      	bls.n	8006c88 <memmove+0x10>
 8006c82:	4284      	cmp	r4, r0
 8006c84:	4623      	mov	r3, r4
 8006c86:	d807      	bhi.n	8006c98 <memmove+0x20>
 8006c88:	1e43      	subs	r3, r0, #1
 8006c8a:	42a1      	cmp	r1, r4
 8006c8c:	d008      	beq.n	8006ca0 <memmove+0x28>
 8006c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c96:	e7f8      	b.n	8006c8a <memmove+0x12>
 8006c98:	4402      	add	r2, r0
 8006c9a:	4601      	mov	r1, r0
 8006c9c:	428a      	cmp	r2, r1
 8006c9e:	d100      	bne.n	8006ca2 <memmove+0x2a>
 8006ca0:	bd10      	pop	{r4, pc}
 8006ca2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ca6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006caa:	e7f7      	b.n	8006c9c <memmove+0x24>

08006cac <__malloc_lock>:
 8006cac:	4801      	ldr	r0, [pc, #4]	; (8006cb4 <__malloc_lock+0x8>)
 8006cae:	f000 bc3b 	b.w	8007528 <__retarget_lock_acquire_recursive>
 8006cb2:	bf00      	nop
 8006cb4:	200000e4 	.word	0x200000e4

08006cb8 <__malloc_unlock>:
 8006cb8:	4801      	ldr	r0, [pc, #4]	; (8006cc0 <__malloc_unlock+0x8>)
 8006cba:	f000 bc36 	b.w	800752a <__retarget_lock_release_recursive>
 8006cbe:	bf00      	nop
 8006cc0:	200000e4 	.word	0x200000e4

08006cc4 <_free_r>:
 8006cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cc6:	2900      	cmp	r1, #0
 8006cc8:	d048      	beq.n	8006d5c <_free_r+0x98>
 8006cca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cce:	9001      	str	r0, [sp, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f1a1 0404 	sub.w	r4, r1, #4
 8006cd6:	bfb8      	it	lt
 8006cd8:	18e4      	addlt	r4, r4, r3
 8006cda:	f7ff ffe7 	bl	8006cac <__malloc_lock>
 8006cde:	4a20      	ldr	r2, [pc, #128]	; (8006d60 <_free_r+0x9c>)
 8006ce0:	9801      	ldr	r0, [sp, #4]
 8006ce2:	6813      	ldr	r3, [r2, #0]
 8006ce4:	4615      	mov	r5, r2
 8006ce6:	b933      	cbnz	r3, 8006cf6 <_free_r+0x32>
 8006ce8:	6063      	str	r3, [r4, #4]
 8006cea:	6014      	str	r4, [r2, #0]
 8006cec:	b003      	add	sp, #12
 8006cee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cf2:	f7ff bfe1 	b.w	8006cb8 <__malloc_unlock>
 8006cf6:	42a3      	cmp	r3, r4
 8006cf8:	d90b      	bls.n	8006d12 <_free_r+0x4e>
 8006cfa:	6821      	ldr	r1, [r4, #0]
 8006cfc:	1862      	adds	r2, r4, r1
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	bf04      	itt	eq
 8006d02:	681a      	ldreq	r2, [r3, #0]
 8006d04:	685b      	ldreq	r3, [r3, #4]
 8006d06:	6063      	str	r3, [r4, #4]
 8006d08:	bf04      	itt	eq
 8006d0a:	1852      	addeq	r2, r2, r1
 8006d0c:	6022      	streq	r2, [r4, #0]
 8006d0e:	602c      	str	r4, [r5, #0]
 8006d10:	e7ec      	b.n	8006cec <_free_r+0x28>
 8006d12:	461a      	mov	r2, r3
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	b10b      	cbz	r3, 8006d1c <_free_r+0x58>
 8006d18:	42a3      	cmp	r3, r4
 8006d1a:	d9fa      	bls.n	8006d12 <_free_r+0x4e>
 8006d1c:	6811      	ldr	r1, [r2, #0]
 8006d1e:	1855      	adds	r5, r2, r1
 8006d20:	42a5      	cmp	r5, r4
 8006d22:	d10b      	bne.n	8006d3c <_free_r+0x78>
 8006d24:	6824      	ldr	r4, [r4, #0]
 8006d26:	4421      	add	r1, r4
 8006d28:	1854      	adds	r4, r2, r1
 8006d2a:	42a3      	cmp	r3, r4
 8006d2c:	6011      	str	r1, [r2, #0]
 8006d2e:	d1dd      	bne.n	8006cec <_free_r+0x28>
 8006d30:	681c      	ldr	r4, [r3, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	6053      	str	r3, [r2, #4]
 8006d36:	4421      	add	r1, r4
 8006d38:	6011      	str	r1, [r2, #0]
 8006d3a:	e7d7      	b.n	8006cec <_free_r+0x28>
 8006d3c:	d902      	bls.n	8006d44 <_free_r+0x80>
 8006d3e:	230c      	movs	r3, #12
 8006d40:	6003      	str	r3, [r0, #0]
 8006d42:	e7d3      	b.n	8006cec <_free_r+0x28>
 8006d44:	6825      	ldr	r5, [r4, #0]
 8006d46:	1961      	adds	r1, r4, r5
 8006d48:	428b      	cmp	r3, r1
 8006d4a:	bf04      	itt	eq
 8006d4c:	6819      	ldreq	r1, [r3, #0]
 8006d4e:	685b      	ldreq	r3, [r3, #4]
 8006d50:	6063      	str	r3, [r4, #4]
 8006d52:	bf04      	itt	eq
 8006d54:	1949      	addeq	r1, r1, r5
 8006d56:	6021      	streq	r1, [r4, #0]
 8006d58:	6054      	str	r4, [r2, #4]
 8006d5a:	e7c7      	b.n	8006cec <_free_r+0x28>
 8006d5c:	b003      	add	sp, #12
 8006d5e:	bd30      	pop	{r4, r5, pc}
 8006d60:	20000098 	.word	0x20000098

08006d64 <_malloc_usable_size_r>:
 8006d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d68:	1f18      	subs	r0, r3, #4
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	bfbc      	itt	lt
 8006d6e:	580b      	ldrlt	r3, [r1, r0]
 8006d70:	18c0      	addlt	r0, r0, r3
 8006d72:	4770      	bx	lr

08006d74 <__sfputc_r>:
 8006d74:	6893      	ldr	r3, [r2, #8]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	b410      	push	{r4}
 8006d7c:	6093      	str	r3, [r2, #8]
 8006d7e:	da08      	bge.n	8006d92 <__sfputc_r+0x1e>
 8006d80:	6994      	ldr	r4, [r2, #24]
 8006d82:	42a3      	cmp	r3, r4
 8006d84:	db01      	blt.n	8006d8a <__sfputc_r+0x16>
 8006d86:	290a      	cmp	r1, #10
 8006d88:	d103      	bne.n	8006d92 <__sfputc_r+0x1e>
 8006d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d8e:	f000 b94b 	b.w	8007028 <__swbuf_r>
 8006d92:	6813      	ldr	r3, [r2, #0]
 8006d94:	1c58      	adds	r0, r3, #1
 8006d96:	6010      	str	r0, [r2, #0]
 8006d98:	7019      	strb	r1, [r3, #0]
 8006d9a:	4608      	mov	r0, r1
 8006d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <__sfputs_r>:
 8006da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da4:	4606      	mov	r6, r0
 8006da6:	460f      	mov	r7, r1
 8006da8:	4614      	mov	r4, r2
 8006daa:	18d5      	adds	r5, r2, r3
 8006dac:	42ac      	cmp	r4, r5
 8006dae:	d101      	bne.n	8006db4 <__sfputs_r+0x12>
 8006db0:	2000      	movs	r0, #0
 8006db2:	e007      	b.n	8006dc4 <__sfputs_r+0x22>
 8006db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db8:	463a      	mov	r2, r7
 8006dba:	4630      	mov	r0, r6
 8006dbc:	f7ff ffda 	bl	8006d74 <__sfputc_r>
 8006dc0:	1c43      	adds	r3, r0, #1
 8006dc2:	d1f3      	bne.n	8006dac <__sfputs_r+0xa>
 8006dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006dc8 <_vfiprintf_r>:
 8006dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dcc:	460d      	mov	r5, r1
 8006dce:	b09d      	sub	sp, #116	; 0x74
 8006dd0:	4614      	mov	r4, r2
 8006dd2:	4698      	mov	r8, r3
 8006dd4:	4606      	mov	r6, r0
 8006dd6:	b118      	cbz	r0, 8006de0 <_vfiprintf_r+0x18>
 8006dd8:	6983      	ldr	r3, [r0, #24]
 8006dda:	b90b      	cbnz	r3, 8006de0 <_vfiprintf_r+0x18>
 8006ddc:	f000 fb06 	bl	80073ec <__sinit>
 8006de0:	4b89      	ldr	r3, [pc, #548]	; (8007008 <_vfiprintf_r+0x240>)
 8006de2:	429d      	cmp	r5, r3
 8006de4:	d11b      	bne.n	8006e1e <_vfiprintf_r+0x56>
 8006de6:	6875      	ldr	r5, [r6, #4]
 8006de8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dea:	07d9      	lsls	r1, r3, #31
 8006dec:	d405      	bmi.n	8006dfa <_vfiprintf_r+0x32>
 8006dee:	89ab      	ldrh	r3, [r5, #12]
 8006df0:	059a      	lsls	r2, r3, #22
 8006df2:	d402      	bmi.n	8006dfa <_vfiprintf_r+0x32>
 8006df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006df6:	f000 fb97 	bl	8007528 <__retarget_lock_acquire_recursive>
 8006dfa:	89ab      	ldrh	r3, [r5, #12]
 8006dfc:	071b      	lsls	r3, r3, #28
 8006dfe:	d501      	bpl.n	8006e04 <_vfiprintf_r+0x3c>
 8006e00:	692b      	ldr	r3, [r5, #16]
 8006e02:	b9eb      	cbnz	r3, 8006e40 <_vfiprintf_r+0x78>
 8006e04:	4629      	mov	r1, r5
 8006e06:	4630      	mov	r0, r6
 8006e08:	f000 f960 	bl	80070cc <__swsetup_r>
 8006e0c:	b1c0      	cbz	r0, 8006e40 <_vfiprintf_r+0x78>
 8006e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e10:	07dc      	lsls	r4, r3, #31
 8006e12:	d50e      	bpl.n	8006e32 <_vfiprintf_r+0x6a>
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	b01d      	add	sp, #116	; 0x74
 8006e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e1e:	4b7b      	ldr	r3, [pc, #492]	; (800700c <_vfiprintf_r+0x244>)
 8006e20:	429d      	cmp	r5, r3
 8006e22:	d101      	bne.n	8006e28 <_vfiprintf_r+0x60>
 8006e24:	68b5      	ldr	r5, [r6, #8]
 8006e26:	e7df      	b.n	8006de8 <_vfiprintf_r+0x20>
 8006e28:	4b79      	ldr	r3, [pc, #484]	; (8007010 <_vfiprintf_r+0x248>)
 8006e2a:	429d      	cmp	r5, r3
 8006e2c:	bf08      	it	eq
 8006e2e:	68f5      	ldreq	r5, [r6, #12]
 8006e30:	e7da      	b.n	8006de8 <_vfiprintf_r+0x20>
 8006e32:	89ab      	ldrh	r3, [r5, #12]
 8006e34:	0598      	lsls	r0, r3, #22
 8006e36:	d4ed      	bmi.n	8006e14 <_vfiprintf_r+0x4c>
 8006e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e3a:	f000 fb76 	bl	800752a <__retarget_lock_release_recursive>
 8006e3e:	e7e9      	b.n	8006e14 <_vfiprintf_r+0x4c>
 8006e40:	2300      	movs	r3, #0
 8006e42:	9309      	str	r3, [sp, #36]	; 0x24
 8006e44:	2320      	movs	r3, #32
 8006e46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e4e:	2330      	movs	r3, #48	; 0x30
 8006e50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007014 <_vfiprintf_r+0x24c>
 8006e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e58:	f04f 0901 	mov.w	r9, #1
 8006e5c:	4623      	mov	r3, r4
 8006e5e:	469a      	mov	sl, r3
 8006e60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e64:	b10a      	cbz	r2, 8006e6a <_vfiprintf_r+0xa2>
 8006e66:	2a25      	cmp	r2, #37	; 0x25
 8006e68:	d1f9      	bne.n	8006e5e <_vfiprintf_r+0x96>
 8006e6a:	ebba 0b04 	subs.w	fp, sl, r4
 8006e6e:	d00b      	beq.n	8006e88 <_vfiprintf_r+0xc0>
 8006e70:	465b      	mov	r3, fp
 8006e72:	4622      	mov	r2, r4
 8006e74:	4629      	mov	r1, r5
 8006e76:	4630      	mov	r0, r6
 8006e78:	f7ff ff93 	bl	8006da2 <__sfputs_r>
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	f000 80aa 	beq.w	8006fd6 <_vfiprintf_r+0x20e>
 8006e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e84:	445a      	add	r2, fp
 8006e86:	9209      	str	r2, [sp, #36]	; 0x24
 8006e88:	f89a 3000 	ldrb.w	r3, [sl]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 80a2 	beq.w	8006fd6 <_vfiprintf_r+0x20e>
 8006e92:	2300      	movs	r3, #0
 8006e94:	f04f 32ff 	mov.w	r2, #4294967295
 8006e98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e9c:	f10a 0a01 	add.w	sl, sl, #1
 8006ea0:	9304      	str	r3, [sp, #16]
 8006ea2:	9307      	str	r3, [sp, #28]
 8006ea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ea8:	931a      	str	r3, [sp, #104]	; 0x68
 8006eaa:	4654      	mov	r4, sl
 8006eac:	2205      	movs	r2, #5
 8006eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eb2:	4858      	ldr	r0, [pc, #352]	; (8007014 <_vfiprintf_r+0x24c>)
 8006eb4:	f7f9 f994 	bl	80001e0 <memchr>
 8006eb8:	9a04      	ldr	r2, [sp, #16]
 8006eba:	b9d8      	cbnz	r0, 8006ef4 <_vfiprintf_r+0x12c>
 8006ebc:	06d1      	lsls	r1, r2, #27
 8006ebe:	bf44      	itt	mi
 8006ec0:	2320      	movmi	r3, #32
 8006ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ec6:	0713      	lsls	r3, r2, #28
 8006ec8:	bf44      	itt	mi
 8006eca:	232b      	movmi	r3, #43	; 0x2b
 8006ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ed6:	d015      	beq.n	8006f04 <_vfiprintf_r+0x13c>
 8006ed8:	9a07      	ldr	r2, [sp, #28]
 8006eda:	4654      	mov	r4, sl
 8006edc:	2000      	movs	r0, #0
 8006ede:	f04f 0c0a 	mov.w	ip, #10
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ee8:	3b30      	subs	r3, #48	; 0x30
 8006eea:	2b09      	cmp	r3, #9
 8006eec:	d94e      	bls.n	8006f8c <_vfiprintf_r+0x1c4>
 8006eee:	b1b0      	cbz	r0, 8006f1e <_vfiprintf_r+0x156>
 8006ef0:	9207      	str	r2, [sp, #28]
 8006ef2:	e014      	b.n	8006f1e <_vfiprintf_r+0x156>
 8006ef4:	eba0 0308 	sub.w	r3, r0, r8
 8006ef8:	fa09 f303 	lsl.w	r3, r9, r3
 8006efc:	4313      	orrs	r3, r2
 8006efe:	9304      	str	r3, [sp, #16]
 8006f00:	46a2      	mov	sl, r4
 8006f02:	e7d2      	b.n	8006eaa <_vfiprintf_r+0xe2>
 8006f04:	9b03      	ldr	r3, [sp, #12]
 8006f06:	1d19      	adds	r1, r3, #4
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	9103      	str	r1, [sp, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	bfbb      	ittet	lt
 8006f10:	425b      	neglt	r3, r3
 8006f12:	f042 0202 	orrlt.w	r2, r2, #2
 8006f16:	9307      	strge	r3, [sp, #28]
 8006f18:	9307      	strlt	r3, [sp, #28]
 8006f1a:	bfb8      	it	lt
 8006f1c:	9204      	strlt	r2, [sp, #16]
 8006f1e:	7823      	ldrb	r3, [r4, #0]
 8006f20:	2b2e      	cmp	r3, #46	; 0x2e
 8006f22:	d10c      	bne.n	8006f3e <_vfiprintf_r+0x176>
 8006f24:	7863      	ldrb	r3, [r4, #1]
 8006f26:	2b2a      	cmp	r3, #42	; 0x2a
 8006f28:	d135      	bne.n	8006f96 <_vfiprintf_r+0x1ce>
 8006f2a:	9b03      	ldr	r3, [sp, #12]
 8006f2c:	1d1a      	adds	r2, r3, #4
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	9203      	str	r2, [sp, #12]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	bfb8      	it	lt
 8006f36:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f3a:	3402      	adds	r4, #2
 8006f3c:	9305      	str	r3, [sp, #20]
 8006f3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007024 <_vfiprintf_r+0x25c>
 8006f42:	7821      	ldrb	r1, [r4, #0]
 8006f44:	2203      	movs	r2, #3
 8006f46:	4650      	mov	r0, sl
 8006f48:	f7f9 f94a 	bl	80001e0 <memchr>
 8006f4c:	b140      	cbz	r0, 8006f60 <_vfiprintf_r+0x198>
 8006f4e:	2340      	movs	r3, #64	; 0x40
 8006f50:	eba0 000a 	sub.w	r0, r0, sl
 8006f54:	fa03 f000 	lsl.w	r0, r3, r0
 8006f58:	9b04      	ldr	r3, [sp, #16]
 8006f5a:	4303      	orrs	r3, r0
 8006f5c:	3401      	adds	r4, #1
 8006f5e:	9304      	str	r3, [sp, #16]
 8006f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f64:	482c      	ldr	r0, [pc, #176]	; (8007018 <_vfiprintf_r+0x250>)
 8006f66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f6a:	2206      	movs	r2, #6
 8006f6c:	f7f9 f938 	bl	80001e0 <memchr>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	d03f      	beq.n	8006ff4 <_vfiprintf_r+0x22c>
 8006f74:	4b29      	ldr	r3, [pc, #164]	; (800701c <_vfiprintf_r+0x254>)
 8006f76:	bb1b      	cbnz	r3, 8006fc0 <_vfiprintf_r+0x1f8>
 8006f78:	9b03      	ldr	r3, [sp, #12]
 8006f7a:	3307      	adds	r3, #7
 8006f7c:	f023 0307 	bic.w	r3, r3, #7
 8006f80:	3308      	adds	r3, #8
 8006f82:	9303      	str	r3, [sp, #12]
 8006f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f86:	443b      	add	r3, r7
 8006f88:	9309      	str	r3, [sp, #36]	; 0x24
 8006f8a:	e767      	b.n	8006e5c <_vfiprintf_r+0x94>
 8006f8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f90:	460c      	mov	r4, r1
 8006f92:	2001      	movs	r0, #1
 8006f94:	e7a5      	b.n	8006ee2 <_vfiprintf_r+0x11a>
 8006f96:	2300      	movs	r3, #0
 8006f98:	3401      	adds	r4, #1
 8006f9a:	9305      	str	r3, [sp, #20]
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	f04f 0c0a 	mov.w	ip, #10
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fa8:	3a30      	subs	r2, #48	; 0x30
 8006faa:	2a09      	cmp	r2, #9
 8006fac:	d903      	bls.n	8006fb6 <_vfiprintf_r+0x1ee>
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0c5      	beq.n	8006f3e <_vfiprintf_r+0x176>
 8006fb2:	9105      	str	r1, [sp, #20]
 8006fb4:	e7c3      	b.n	8006f3e <_vfiprintf_r+0x176>
 8006fb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fba:	4604      	mov	r4, r0
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e7f0      	b.n	8006fa2 <_vfiprintf_r+0x1da>
 8006fc0:	ab03      	add	r3, sp, #12
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	462a      	mov	r2, r5
 8006fc6:	4b16      	ldr	r3, [pc, #88]	; (8007020 <_vfiprintf_r+0x258>)
 8006fc8:	a904      	add	r1, sp, #16
 8006fca:	4630      	mov	r0, r6
 8006fcc:	f3af 8000 	nop.w
 8006fd0:	4607      	mov	r7, r0
 8006fd2:	1c78      	adds	r0, r7, #1
 8006fd4:	d1d6      	bne.n	8006f84 <_vfiprintf_r+0x1bc>
 8006fd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fd8:	07d9      	lsls	r1, r3, #31
 8006fda:	d405      	bmi.n	8006fe8 <_vfiprintf_r+0x220>
 8006fdc:	89ab      	ldrh	r3, [r5, #12]
 8006fde:	059a      	lsls	r2, r3, #22
 8006fe0:	d402      	bmi.n	8006fe8 <_vfiprintf_r+0x220>
 8006fe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fe4:	f000 faa1 	bl	800752a <__retarget_lock_release_recursive>
 8006fe8:	89ab      	ldrh	r3, [r5, #12]
 8006fea:	065b      	lsls	r3, r3, #25
 8006fec:	f53f af12 	bmi.w	8006e14 <_vfiprintf_r+0x4c>
 8006ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ff2:	e711      	b.n	8006e18 <_vfiprintf_r+0x50>
 8006ff4:	ab03      	add	r3, sp, #12
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	462a      	mov	r2, r5
 8006ffa:	4b09      	ldr	r3, [pc, #36]	; (8007020 <_vfiprintf_r+0x258>)
 8006ffc:	a904      	add	r1, sp, #16
 8006ffe:	4630      	mov	r0, r6
 8007000:	f7fe fe3c 	bl	8005c7c <_printf_i>
 8007004:	e7e4      	b.n	8006fd0 <_vfiprintf_r+0x208>
 8007006:	bf00      	nop
 8007008:	08008464 	.word	0x08008464
 800700c:	08008484 	.word	0x08008484
 8007010:	08008444 	.word	0x08008444
 8007014:	08008364 	.word	0x08008364
 8007018:	0800836e 	.word	0x0800836e
 800701c:	00000000 	.word	0x00000000
 8007020:	08006da3 	.word	0x08006da3
 8007024:	0800836a 	.word	0x0800836a

08007028 <__swbuf_r>:
 8007028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702a:	460e      	mov	r6, r1
 800702c:	4614      	mov	r4, r2
 800702e:	4605      	mov	r5, r0
 8007030:	b118      	cbz	r0, 800703a <__swbuf_r+0x12>
 8007032:	6983      	ldr	r3, [r0, #24]
 8007034:	b90b      	cbnz	r3, 800703a <__swbuf_r+0x12>
 8007036:	f000 f9d9 	bl	80073ec <__sinit>
 800703a:	4b21      	ldr	r3, [pc, #132]	; (80070c0 <__swbuf_r+0x98>)
 800703c:	429c      	cmp	r4, r3
 800703e:	d12b      	bne.n	8007098 <__swbuf_r+0x70>
 8007040:	686c      	ldr	r4, [r5, #4]
 8007042:	69a3      	ldr	r3, [r4, #24]
 8007044:	60a3      	str	r3, [r4, #8]
 8007046:	89a3      	ldrh	r3, [r4, #12]
 8007048:	071a      	lsls	r2, r3, #28
 800704a:	d52f      	bpl.n	80070ac <__swbuf_r+0x84>
 800704c:	6923      	ldr	r3, [r4, #16]
 800704e:	b36b      	cbz	r3, 80070ac <__swbuf_r+0x84>
 8007050:	6923      	ldr	r3, [r4, #16]
 8007052:	6820      	ldr	r0, [r4, #0]
 8007054:	1ac0      	subs	r0, r0, r3
 8007056:	6963      	ldr	r3, [r4, #20]
 8007058:	b2f6      	uxtb	r6, r6
 800705a:	4283      	cmp	r3, r0
 800705c:	4637      	mov	r7, r6
 800705e:	dc04      	bgt.n	800706a <__swbuf_r+0x42>
 8007060:	4621      	mov	r1, r4
 8007062:	4628      	mov	r0, r5
 8007064:	f000 f92e 	bl	80072c4 <_fflush_r>
 8007068:	bb30      	cbnz	r0, 80070b8 <__swbuf_r+0x90>
 800706a:	68a3      	ldr	r3, [r4, #8]
 800706c:	3b01      	subs	r3, #1
 800706e:	60a3      	str	r3, [r4, #8]
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	1c5a      	adds	r2, r3, #1
 8007074:	6022      	str	r2, [r4, #0]
 8007076:	701e      	strb	r6, [r3, #0]
 8007078:	6963      	ldr	r3, [r4, #20]
 800707a:	3001      	adds	r0, #1
 800707c:	4283      	cmp	r3, r0
 800707e:	d004      	beq.n	800708a <__swbuf_r+0x62>
 8007080:	89a3      	ldrh	r3, [r4, #12]
 8007082:	07db      	lsls	r3, r3, #31
 8007084:	d506      	bpl.n	8007094 <__swbuf_r+0x6c>
 8007086:	2e0a      	cmp	r6, #10
 8007088:	d104      	bne.n	8007094 <__swbuf_r+0x6c>
 800708a:	4621      	mov	r1, r4
 800708c:	4628      	mov	r0, r5
 800708e:	f000 f919 	bl	80072c4 <_fflush_r>
 8007092:	b988      	cbnz	r0, 80070b8 <__swbuf_r+0x90>
 8007094:	4638      	mov	r0, r7
 8007096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007098:	4b0a      	ldr	r3, [pc, #40]	; (80070c4 <__swbuf_r+0x9c>)
 800709a:	429c      	cmp	r4, r3
 800709c:	d101      	bne.n	80070a2 <__swbuf_r+0x7a>
 800709e:	68ac      	ldr	r4, [r5, #8]
 80070a0:	e7cf      	b.n	8007042 <__swbuf_r+0x1a>
 80070a2:	4b09      	ldr	r3, [pc, #36]	; (80070c8 <__swbuf_r+0xa0>)
 80070a4:	429c      	cmp	r4, r3
 80070a6:	bf08      	it	eq
 80070a8:	68ec      	ldreq	r4, [r5, #12]
 80070aa:	e7ca      	b.n	8007042 <__swbuf_r+0x1a>
 80070ac:	4621      	mov	r1, r4
 80070ae:	4628      	mov	r0, r5
 80070b0:	f000 f80c 	bl	80070cc <__swsetup_r>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	d0cb      	beq.n	8007050 <__swbuf_r+0x28>
 80070b8:	f04f 37ff 	mov.w	r7, #4294967295
 80070bc:	e7ea      	b.n	8007094 <__swbuf_r+0x6c>
 80070be:	bf00      	nop
 80070c0:	08008464 	.word	0x08008464
 80070c4:	08008484 	.word	0x08008484
 80070c8:	08008444 	.word	0x08008444

080070cc <__swsetup_r>:
 80070cc:	4b32      	ldr	r3, [pc, #200]	; (8007198 <__swsetup_r+0xcc>)
 80070ce:	b570      	push	{r4, r5, r6, lr}
 80070d0:	681d      	ldr	r5, [r3, #0]
 80070d2:	4606      	mov	r6, r0
 80070d4:	460c      	mov	r4, r1
 80070d6:	b125      	cbz	r5, 80070e2 <__swsetup_r+0x16>
 80070d8:	69ab      	ldr	r3, [r5, #24]
 80070da:	b913      	cbnz	r3, 80070e2 <__swsetup_r+0x16>
 80070dc:	4628      	mov	r0, r5
 80070de:	f000 f985 	bl	80073ec <__sinit>
 80070e2:	4b2e      	ldr	r3, [pc, #184]	; (800719c <__swsetup_r+0xd0>)
 80070e4:	429c      	cmp	r4, r3
 80070e6:	d10f      	bne.n	8007108 <__swsetup_r+0x3c>
 80070e8:	686c      	ldr	r4, [r5, #4]
 80070ea:	89a3      	ldrh	r3, [r4, #12]
 80070ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070f0:	0719      	lsls	r1, r3, #28
 80070f2:	d42c      	bmi.n	800714e <__swsetup_r+0x82>
 80070f4:	06dd      	lsls	r5, r3, #27
 80070f6:	d411      	bmi.n	800711c <__swsetup_r+0x50>
 80070f8:	2309      	movs	r3, #9
 80070fa:	6033      	str	r3, [r6, #0]
 80070fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007100:	81a3      	strh	r3, [r4, #12]
 8007102:	f04f 30ff 	mov.w	r0, #4294967295
 8007106:	e03e      	b.n	8007186 <__swsetup_r+0xba>
 8007108:	4b25      	ldr	r3, [pc, #148]	; (80071a0 <__swsetup_r+0xd4>)
 800710a:	429c      	cmp	r4, r3
 800710c:	d101      	bne.n	8007112 <__swsetup_r+0x46>
 800710e:	68ac      	ldr	r4, [r5, #8]
 8007110:	e7eb      	b.n	80070ea <__swsetup_r+0x1e>
 8007112:	4b24      	ldr	r3, [pc, #144]	; (80071a4 <__swsetup_r+0xd8>)
 8007114:	429c      	cmp	r4, r3
 8007116:	bf08      	it	eq
 8007118:	68ec      	ldreq	r4, [r5, #12]
 800711a:	e7e6      	b.n	80070ea <__swsetup_r+0x1e>
 800711c:	0758      	lsls	r0, r3, #29
 800711e:	d512      	bpl.n	8007146 <__swsetup_r+0x7a>
 8007120:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007122:	b141      	cbz	r1, 8007136 <__swsetup_r+0x6a>
 8007124:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007128:	4299      	cmp	r1, r3
 800712a:	d002      	beq.n	8007132 <__swsetup_r+0x66>
 800712c:	4630      	mov	r0, r6
 800712e:	f7ff fdc9 	bl	8006cc4 <_free_r>
 8007132:	2300      	movs	r3, #0
 8007134:	6363      	str	r3, [r4, #52]	; 0x34
 8007136:	89a3      	ldrh	r3, [r4, #12]
 8007138:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800713c:	81a3      	strh	r3, [r4, #12]
 800713e:	2300      	movs	r3, #0
 8007140:	6063      	str	r3, [r4, #4]
 8007142:	6923      	ldr	r3, [r4, #16]
 8007144:	6023      	str	r3, [r4, #0]
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	f043 0308 	orr.w	r3, r3, #8
 800714c:	81a3      	strh	r3, [r4, #12]
 800714e:	6923      	ldr	r3, [r4, #16]
 8007150:	b94b      	cbnz	r3, 8007166 <__swsetup_r+0x9a>
 8007152:	89a3      	ldrh	r3, [r4, #12]
 8007154:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800715c:	d003      	beq.n	8007166 <__swsetup_r+0x9a>
 800715e:	4621      	mov	r1, r4
 8007160:	4630      	mov	r0, r6
 8007162:	f000 fa07 	bl	8007574 <__smakebuf_r>
 8007166:	89a0      	ldrh	r0, [r4, #12]
 8007168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800716c:	f010 0301 	ands.w	r3, r0, #1
 8007170:	d00a      	beq.n	8007188 <__swsetup_r+0xbc>
 8007172:	2300      	movs	r3, #0
 8007174:	60a3      	str	r3, [r4, #8]
 8007176:	6963      	ldr	r3, [r4, #20]
 8007178:	425b      	negs	r3, r3
 800717a:	61a3      	str	r3, [r4, #24]
 800717c:	6923      	ldr	r3, [r4, #16]
 800717e:	b943      	cbnz	r3, 8007192 <__swsetup_r+0xc6>
 8007180:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007184:	d1ba      	bne.n	80070fc <__swsetup_r+0x30>
 8007186:	bd70      	pop	{r4, r5, r6, pc}
 8007188:	0781      	lsls	r1, r0, #30
 800718a:	bf58      	it	pl
 800718c:	6963      	ldrpl	r3, [r4, #20]
 800718e:	60a3      	str	r3, [r4, #8]
 8007190:	e7f4      	b.n	800717c <__swsetup_r+0xb0>
 8007192:	2000      	movs	r0, #0
 8007194:	e7f7      	b.n	8007186 <__swsetup_r+0xba>
 8007196:	bf00      	nop
 8007198:	20000008 	.word	0x20000008
 800719c:	08008464 	.word	0x08008464
 80071a0:	08008484 	.word	0x08008484
 80071a4:	08008444 	.word	0x08008444

080071a8 <abort>:
 80071a8:	b508      	push	{r3, lr}
 80071aa:	2006      	movs	r0, #6
 80071ac:	f000 fa4a 	bl	8007644 <raise>
 80071b0:	2001      	movs	r0, #1
 80071b2:	f7fc fa36 	bl	8003622 <_exit>
	...

080071b8 <__sflush_r>:
 80071b8:	898a      	ldrh	r2, [r1, #12]
 80071ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071be:	4605      	mov	r5, r0
 80071c0:	0710      	lsls	r0, r2, #28
 80071c2:	460c      	mov	r4, r1
 80071c4:	d458      	bmi.n	8007278 <__sflush_r+0xc0>
 80071c6:	684b      	ldr	r3, [r1, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	dc05      	bgt.n	80071d8 <__sflush_r+0x20>
 80071cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	dc02      	bgt.n	80071d8 <__sflush_r+0x20>
 80071d2:	2000      	movs	r0, #0
 80071d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071da:	2e00      	cmp	r6, #0
 80071dc:	d0f9      	beq.n	80071d2 <__sflush_r+0x1a>
 80071de:	2300      	movs	r3, #0
 80071e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071e4:	682f      	ldr	r7, [r5, #0]
 80071e6:	602b      	str	r3, [r5, #0]
 80071e8:	d032      	beq.n	8007250 <__sflush_r+0x98>
 80071ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071ec:	89a3      	ldrh	r3, [r4, #12]
 80071ee:	075a      	lsls	r2, r3, #29
 80071f0:	d505      	bpl.n	80071fe <__sflush_r+0x46>
 80071f2:	6863      	ldr	r3, [r4, #4]
 80071f4:	1ac0      	subs	r0, r0, r3
 80071f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071f8:	b10b      	cbz	r3, 80071fe <__sflush_r+0x46>
 80071fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071fc:	1ac0      	subs	r0, r0, r3
 80071fe:	2300      	movs	r3, #0
 8007200:	4602      	mov	r2, r0
 8007202:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007204:	6a21      	ldr	r1, [r4, #32]
 8007206:	4628      	mov	r0, r5
 8007208:	47b0      	blx	r6
 800720a:	1c43      	adds	r3, r0, #1
 800720c:	89a3      	ldrh	r3, [r4, #12]
 800720e:	d106      	bne.n	800721e <__sflush_r+0x66>
 8007210:	6829      	ldr	r1, [r5, #0]
 8007212:	291d      	cmp	r1, #29
 8007214:	d82c      	bhi.n	8007270 <__sflush_r+0xb8>
 8007216:	4a2a      	ldr	r2, [pc, #168]	; (80072c0 <__sflush_r+0x108>)
 8007218:	40ca      	lsrs	r2, r1
 800721a:	07d6      	lsls	r6, r2, #31
 800721c:	d528      	bpl.n	8007270 <__sflush_r+0xb8>
 800721e:	2200      	movs	r2, #0
 8007220:	6062      	str	r2, [r4, #4]
 8007222:	04d9      	lsls	r1, r3, #19
 8007224:	6922      	ldr	r2, [r4, #16]
 8007226:	6022      	str	r2, [r4, #0]
 8007228:	d504      	bpl.n	8007234 <__sflush_r+0x7c>
 800722a:	1c42      	adds	r2, r0, #1
 800722c:	d101      	bne.n	8007232 <__sflush_r+0x7a>
 800722e:	682b      	ldr	r3, [r5, #0]
 8007230:	b903      	cbnz	r3, 8007234 <__sflush_r+0x7c>
 8007232:	6560      	str	r0, [r4, #84]	; 0x54
 8007234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007236:	602f      	str	r7, [r5, #0]
 8007238:	2900      	cmp	r1, #0
 800723a:	d0ca      	beq.n	80071d2 <__sflush_r+0x1a>
 800723c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007240:	4299      	cmp	r1, r3
 8007242:	d002      	beq.n	800724a <__sflush_r+0x92>
 8007244:	4628      	mov	r0, r5
 8007246:	f7ff fd3d 	bl	8006cc4 <_free_r>
 800724a:	2000      	movs	r0, #0
 800724c:	6360      	str	r0, [r4, #52]	; 0x34
 800724e:	e7c1      	b.n	80071d4 <__sflush_r+0x1c>
 8007250:	6a21      	ldr	r1, [r4, #32]
 8007252:	2301      	movs	r3, #1
 8007254:	4628      	mov	r0, r5
 8007256:	47b0      	blx	r6
 8007258:	1c41      	adds	r1, r0, #1
 800725a:	d1c7      	bne.n	80071ec <__sflush_r+0x34>
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d0c4      	beq.n	80071ec <__sflush_r+0x34>
 8007262:	2b1d      	cmp	r3, #29
 8007264:	d001      	beq.n	800726a <__sflush_r+0xb2>
 8007266:	2b16      	cmp	r3, #22
 8007268:	d101      	bne.n	800726e <__sflush_r+0xb6>
 800726a:	602f      	str	r7, [r5, #0]
 800726c:	e7b1      	b.n	80071d2 <__sflush_r+0x1a>
 800726e:	89a3      	ldrh	r3, [r4, #12]
 8007270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007274:	81a3      	strh	r3, [r4, #12]
 8007276:	e7ad      	b.n	80071d4 <__sflush_r+0x1c>
 8007278:	690f      	ldr	r7, [r1, #16]
 800727a:	2f00      	cmp	r7, #0
 800727c:	d0a9      	beq.n	80071d2 <__sflush_r+0x1a>
 800727e:	0793      	lsls	r3, r2, #30
 8007280:	680e      	ldr	r6, [r1, #0]
 8007282:	bf08      	it	eq
 8007284:	694b      	ldreq	r3, [r1, #20]
 8007286:	600f      	str	r7, [r1, #0]
 8007288:	bf18      	it	ne
 800728a:	2300      	movne	r3, #0
 800728c:	eba6 0807 	sub.w	r8, r6, r7
 8007290:	608b      	str	r3, [r1, #8]
 8007292:	f1b8 0f00 	cmp.w	r8, #0
 8007296:	dd9c      	ble.n	80071d2 <__sflush_r+0x1a>
 8007298:	6a21      	ldr	r1, [r4, #32]
 800729a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800729c:	4643      	mov	r3, r8
 800729e:	463a      	mov	r2, r7
 80072a0:	4628      	mov	r0, r5
 80072a2:	47b0      	blx	r6
 80072a4:	2800      	cmp	r0, #0
 80072a6:	dc06      	bgt.n	80072b6 <__sflush_r+0xfe>
 80072a8:	89a3      	ldrh	r3, [r4, #12]
 80072aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072ae:	81a3      	strh	r3, [r4, #12]
 80072b0:	f04f 30ff 	mov.w	r0, #4294967295
 80072b4:	e78e      	b.n	80071d4 <__sflush_r+0x1c>
 80072b6:	4407      	add	r7, r0
 80072b8:	eba8 0800 	sub.w	r8, r8, r0
 80072bc:	e7e9      	b.n	8007292 <__sflush_r+0xda>
 80072be:	bf00      	nop
 80072c0:	20400001 	.word	0x20400001

080072c4 <_fflush_r>:
 80072c4:	b538      	push	{r3, r4, r5, lr}
 80072c6:	690b      	ldr	r3, [r1, #16]
 80072c8:	4605      	mov	r5, r0
 80072ca:	460c      	mov	r4, r1
 80072cc:	b913      	cbnz	r3, 80072d4 <_fflush_r+0x10>
 80072ce:	2500      	movs	r5, #0
 80072d0:	4628      	mov	r0, r5
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	b118      	cbz	r0, 80072de <_fflush_r+0x1a>
 80072d6:	6983      	ldr	r3, [r0, #24]
 80072d8:	b90b      	cbnz	r3, 80072de <_fflush_r+0x1a>
 80072da:	f000 f887 	bl	80073ec <__sinit>
 80072de:	4b14      	ldr	r3, [pc, #80]	; (8007330 <_fflush_r+0x6c>)
 80072e0:	429c      	cmp	r4, r3
 80072e2:	d11b      	bne.n	800731c <_fflush_r+0x58>
 80072e4:	686c      	ldr	r4, [r5, #4]
 80072e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0ef      	beq.n	80072ce <_fflush_r+0xa>
 80072ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072f0:	07d0      	lsls	r0, r2, #31
 80072f2:	d404      	bmi.n	80072fe <_fflush_r+0x3a>
 80072f4:	0599      	lsls	r1, r3, #22
 80072f6:	d402      	bmi.n	80072fe <_fflush_r+0x3a>
 80072f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072fa:	f000 f915 	bl	8007528 <__retarget_lock_acquire_recursive>
 80072fe:	4628      	mov	r0, r5
 8007300:	4621      	mov	r1, r4
 8007302:	f7ff ff59 	bl	80071b8 <__sflush_r>
 8007306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007308:	07da      	lsls	r2, r3, #31
 800730a:	4605      	mov	r5, r0
 800730c:	d4e0      	bmi.n	80072d0 <_fflush_r+0xc>
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	059b      	lsls	r3, r3, #22
 8007312:	d4dd      	bmi.n	80072d0 <_fflush_r+0xc>
 8007314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007316:	f000 f908 	bl	800752a <__retarget_lock_release_recursive>
 800731a:	e7d9      	b.n	80072d0 <_fflush_r+0xc>
 800731c:	4b05      	ldr	r3, [pc, #20]	; (8007334 <_fflush_r+0x70>)
 800731e:	429c      	cmp	r4, r3
 8007320:	d101      	bne.n	8007326 <_fflush_r+0x62>
 8007322:	68ac      	ldr	r4, [r5, #8]
 8007324:	e7df      	b.n	80072e6 <_fflush_r+0x22>
 8007326:	4b04      	ldr	r3, [pc, #16]	; (8007338 <_fflush_r+0x74>)
 8007328:	429c      	cmp	r4, r3
 800732a:	bf08      	it	eq
 800732c:	68ec      	ldreq	r4, [r5, #12]
 800732e:	e7da      	b.n	80072e6 <_fflush_r+0x22>
 8007330:	08008464 	.word	0x08008464
 8007334:	08008484 	.word	0x08008484
 8007338:	08008444 	.word	0x08008444

0800733c <std>:
 800733c:	2300      	movs	r3, #0
 800733e:	b510      	push	{r4, lr}
 8007340:	4604      	mov	r4, r0
 8007342:	e9c0 3300 	strd	r3, r3, [r0]
 8007346:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800734a:	6083      	str	r3, [r0, #8]
 800734c:	8181      	strh	r1, [r0, #12]
 800734e:	6643      	str	r3, [r0, #100]	; 0x64
 8007350:	81c2      	strh	r2, [r0, #14]
 8007352:	6183      	str	r3, [r0, #24]
 8007354:	4619      	mov	r1, r3
 8007356:	2208      	movs	r2, #8
 8007358:	305c      	adds	r0, #92	; 0x5c
 800735a:	f7fd fd05 	bl	8004d68 <memset>
 800735e:	4b05      	ldr	r3, [pc, #20]	; (8007374 <std+0x38>)
 8007360:	6263      	str	r3, [r4, #36]	; 0x24
 8007362:	4b05      	ldr	r3, [pc, #20]	; (8007378 <std+0x3c>)
 8007364:	62a3      	str	r3, [r4, #40]	; 0x28
 8007366:	4b05      	ldr	r3, [pc, #20]	; (800737c <std+0x40>)
 8007368:	62e3      	str	r3, [r4, #44]	; 0x2c
 800736a:	4b05      	ldr	r3, [pc, #20]	; (8007380 <std+0x44>)
 800736c:	6224      	str	r4, [r4, #32]
 800736e:	6323      	str	r3, [r4, #48]	; 0x30
 8007370:	bd10      	pop	{r4, pc}
 8007372:	bf00      	nop
 8007374:	0800767d 	.word	0x0800767d
 8007378:	0800769f 	.word	0x0800769f
 800737c:	080076d7 	.word	0x080076d7
 8007380:	080076fb 	.word	0x080076fb

08007384 <_cleanup_r>:
 8007384:	4901      	ldr	r1, [pc, #4]	; (800738c <_cleanup_r+0x8>)
 8007386:	f000 b8af 	b.w	80074e8 <_fwalk_reent>
 800738a:	bf00      	nop
 800738c:	080072c5 	.word	0x080072c5

08007390 <__sfmoreglue>:
 8007390:	b570      	push	{r4, r5, r6, lr}
 8007392:	1e4a      	subs	r2, r1, #1
 8007394:	2568      	movs	r5, #104	; 0x68
 8007396:	4355      	muls	r5, r2
 8007398:	460e      	mov	r6, r1
 800739a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800739e:	f7fe fa23 	bl	80057e8 <_malloc_r>
 80073a2:	4604      	mov	r4, r0
 80073a4:	b140      	cbz	r0, 80073b8 <__sfmoreglue+0x28>
 80073a6:	2100      	movs	r1, #0
 80073a8:	e9c0 1600 	strd	r1, r6, [r0]
 80073ac:	300c      	adds	r0, #12
 80073ae:	60a0      	str	r0, [r4, #8]
 80073b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073b4:	f7fd fcd8 	bl	8004d68 <memset>
 80073b8:	4620      	mov	r0, r4
 80073ba:	bd70      	pop	{r4, r5, r6, pc}

080073bc <__sfp_lock_acquire>:
 80073bc:	4801      	ldr	r0, [pc, #4]	; (80073c4 <__sfp_lock_acquire+0x8>)
 80073be:	f000 b8b3 	b.w	8007528 <__retarget_lock_acquire_recursive>
 80073c2:	bf00      	nop
 80073c4:	200000e8 	.word	0x200000e8

080073c8 <__sfp_lock_release>:
 80073c8:	4801      	ldr	r0, [pc, #4]	; (80073d0 <__sfp_lock_release+0x8>)
 80073ca:	f000 b8ae 	b.w	800752a <__retarget_lock_release_recursive>
 80073ce:	bf00      	nop
 80073d0:	200000e8 	.word	0x200000e8

080073d4 <__sinit_lock_acquire>:
 80073d4:	4801      	ldr	r0, [pc, #4]	; (80073dc <__sinit_lock_acquire+0x8>)
 80073d6:	f000 b8a7 	b.w	8007528 <__retarget_lock_acquire_recursive>
 80073da:	bf00      	nop
 80073dc:	200000e3 	.word	0x200000e3

080073e0 <__sinit_lock_release>:
 80073e0:	4801      	ldr	r0, [pc, #4]	; (80073e8 <__sinit_lock_release+0x8>)
 80073e2:	f000 b8a2 	b.w	800752a <__retarget_lock_release_recursive>
 80073e6:	bf00      	nop
 80073e8:	200000e3 	.word	0x200000e3

080073ec <__sinit>:
 80073ec:	b510      	push	{r4, lr}
 80073ee:	4604      	mov	r4, r0
 80073f0:	f7ff fff0 	bl	80073d4 <__sinit_lock_acquire>
 80073f4:	69a3      	ldr	r3, [r4, #24]
 80073f6:	b11b      	cbz	r3, 8007400 <__sinit+0x14>
 80073f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073fc:	f7ff bff0 	b.w	80073e0 <__sinit_lock_release>
 8007400:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007404:	6523      	str	r3, [r4, #80]	; 0x50
 8007406:	4b13      	ldr	r3, [pc, #76]	; (8007454 <__sinit+0x68>)
 8007408:	4a13      	ldr	r2, [pc, #76]	; (8007458 <__sinit+0x6c>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	62a2      	str	r2, [r4, #40]	; 0x28
 800740e:	42a3      	cmp	r3, r4
 8007410:	bf04      	itt	eq
 8007412:	2301      	moveq	r3, #1
 8007414:	61a3      	streq	r3, [r4, #24]
 8007416:	4620      	mov	r0, r4
 8007418:	f000 f820 	bl	800745c <__sfp>
 800741c:	6060      	str	r0, [r4, #4]
 800741e:	4620      	mov	r0, r4
 8007420:	f000 f81c 	bl	800745c <__sfp>
 8007424:	60a0      	str	r0, [r4, #8]
 8007426:	4620      	mov	r0, r4
 8007428:	f000 f818 	bl	800745c <__sfp>
 800742c:	2200      	movs	r2, #0
 800742e:	60e0      	str	r0, [r4, #12]
 8007430:	2104      	movs	r1, #4
 8007432:	6860      	ldr	r0, [r4, #4]
 8007434:	f7ff ff82 	bl	800733c <std>
 8007438:	68a0      	ldr	r0, [r4, #8]
 800743a:	2201      	movs	r2, #1
 800743c:	2109      	movs	r1, #9
 800743e:	f7ff ff7d 	bl	800733c <std>
 8007442:	68e0      	ldr	r0, [r4, #12]
 8007444:	2202      	movs	r2, #2
 8007446:	2112      	movs	r1, #18
 8007448:	f7ff ff78 	bl	800733c <std>
 800744c:	2301      	movs	r3, #1
 800744e:	61a3      	str	r3, [r4, #24]
 8007450:	e7d2      	b.n	80073f8 <__sinit+0xc>
 8007452:	bf00      	nop
 8007454:	080081d8 	.word	0x080081d8
 8007458:	08007385 	.word	0x08007385

0800745c <__sfp>:
 800745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745e:	4607      	mov	r7, r0
 8007460:	f7ff ffac 	bl	80073bc <__sfp_lock_acquire>
 8007464:	4b1e      	ldr	r3, [pc, #120]	; (80074e0 <__sfp+0x84>)
 8007466:	681e      	ldr	r6, [r3, #0]
 8007468:	69b3      	ldr	r3, [r6, #24]
 800746a:	b913      	cbnz	r3, 8007472 <__sfp+0x16>
 800746c:	4630      	mov	r0, r6
 800746e:	f7ff ffbd 	bl	80073ec <__sinit>
 8007472:	3648      	adds	r6, #72	; 0x48
 8007474:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007478:	3b01      	subs	r3, #1
 800747a:	d503      	bpl.n	8007484 <__sfp+0x28>
 800747c:	6833      	ldr	r3, [r6, #0]
 800747e:	b30b      	cbz	r3, 80074c4 <__sfp+0x68>
 8007480:	6836      	ldr	r6, [r6, #0]
 8007482:	e7f7      	b.n	8007474 <__sfp+0x18>
 8007484:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007488:	b9d5      	cbnz	r5, 80074c0 <__sfp+0x64>
 800748a:	4b16      	ldr	r3, [pc, #88]	; (80074e4 <__sfp+0x88>)
 800748c:	60e3      	str	r3, [r4, #12]
 800748e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007492:	6665      	str	r5, [r4, #100]	; 0x64
 8007494:	f000 f847 	bl	8007526 <__retarget_lock_init_recursive>
 8007498:	f7ff ff96 	bl	80073c8 <__sfp_lock_release>
 800749c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074a4:	6025      	str	r5, [r4, #0]
 80074a6:	61a5      	str	r5, [r4, #24]
 80074a8:	2208      	movs	r2, #8
 80074aa:	4629      	mov	r1, r5
 80074ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074b0:	f7fd fc5a 	bl	8004d68 <memset>
 80074b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074bc:	4620      	mov	r0, r4
 80074be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074c0:	3468      	adds	r4, #104	; 0x68
 80074c2:	e7d9      	b.n	8007478 <__sfp+0x1c>
 80074c4:	2104      	movs	r1, #4
 80074c6:	4638      	mov	r0, r7
 80074c8:	f7ff ff62 	bl	8007390 <__sfmoreglue>
 80074cc:	4604      	mov	r4, r0
 80074ce:	6030      	str	r0, [r6, #0]
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d1d5      	bne.n	8007480 <__sfp+0x24>
 80074d4:	f7ff ff78 	bl	80073c8 <__sfp_lock_release>
 80074d8:	230c      	movs	r3, #12
 80074da:	603b      	str	r3, [r7, #0]
 80074dc:	e7ee      	b.n	80074bc <__sfp+0x60>
 80074de:	bf00      	nop
 80074e0:	080081d8 	.word	0x080081d8
 80074e4:	ffff0001 	.word	0xffff0001

080074e8 <_fwalk_reent>:
 80074e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074ec:	4606      	mov	r6, r0
 80074ee:	4688      	mov	r8, r1
 80074f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80074f4:	2700      	movs	r7, #0
 80074f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074fa:	f1b9 0901 	subs.w	r9, r9, #1
 80074fe:	d505      	bpl.n	800750c <_fwalk_reent+0x24>
 8007500:	6824      	ldr	r4, [r4, #0]
 8007502:	2c00      	cmp	r4, #0
 8007504:	d1f7      	bne.n	80074f6 <_fwalk_reent+0xe>
 8007506:	4638      	mov	r0, r7
 8007508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800750c:	89ab      	ldrh	r3, [r5, #12]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d907      	bls.n	8007522 <_fwalk_reent+0x3a>
 8007512:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007516:	3301      	adds	r3, #1
 8007518:	d003      	beq.n	8007522 <_fwalk_reent+0x3a>
 800751a:	4629      	mov	r1, r5
 800751c:	4630      	mov	r0, r6
 800751e:	47c0      	blx	r8
 8007520:	4307      	orrs	r7, r0
 8007522:	3568      	adds	r5, #104	; 0x68
 8007524:	e7e9      	b.n	80074fa <_fwalk_reent+0x12>

08007526 <__retarget_lock_init_recursive>:
 8007526:	4770      	bx	lr

08007528 <__retarget_lock_acquire_recursive>:
 8007528:	4770      	bx	lr

0800752a <__retarget_lock_release_recursive>:
 800752a:	4770      	bx	lr

0800752c <__swhatbuf_r>:
 800752c:	b570      	push	{r4, r5, r6, lr}
 800752e:	460e      	mov	r6, r1
 8007530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007534:	2900      	cmp	r1, #0
 8007536:	b096      	sub	sp, #88	; 0x58
 8007538:	4614      	mov	r4, r2
 800753a:	461d      	mov	r5, r3
 800753c:	da07      	bge.n	800754e <__swhatbuf_r+0x22>
 800753e:	2300      	movs	r3, #0
 8007540:	602b      	str	r3, [r5, #0]
 8007542:	89b3      	ldrh	r3, [r6, #12]
 8007544:	061a      	lsls	r2, r3, #24
 8007546:	d410      	bmi.n	800756a <__swhatbuf_r+0x3e>
 8007548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800754c:	e00e      	b.n	800756c <__swhatbuf_r+0x40>
 800754e:	466a      	mov	r2, sp
 8007550:	f000 f8fa 	bl	8007748 <_fstat_r>
 8007554:	2800      	cmp	r0, #0
 8007556:	dbf2      	blt.n	800753e <__swhatbuf_r+0x12>
 8007558:	9a01      	ldr	r2, [sp, #4]
 800755a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800755e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007562:	425a      	negs	r2, r3
 8007564:	415a      	adcs	r2, r3
 8007566:	602a      	str	r2, [r5, #0]
 8007568:	e7ee      	b.n	8007548 <__swhatbuf_r+0x1c>
 800756a:	2340      	movs	r3, #64	; 0x40
 800756c:	2000      	movs	r0, #0
 800756e:	6023      	str	r3, [r4, #0]
 8007570:	b016      	add	sp, #88	; 0x58
 8007572:	bd70      	pop	{r4, r5, r6, pc}

08007574 <__smakebuf_r>:
 8007574:	898b      	ldrh	r3, [r1, #12]
 8007576:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007578:	079d      	lsls	r5, r3, #30
 800757a:	4606      	mov	r6, r0
 800757c:	460c      	mov	r4, r1
 800757e:	d507      	bpl.n	8007590 <__smakebuf_r+0x1c>
 8007580:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	6123      	str	r3, [r4, #16]
 8007588:	2301      	movs	r3, #1
 800758a:	6163      	str	r3, [r4, #20]
 800758c:	b002      	add	sp, #8
 800758e:	bd70      	pop	{r4, r5, r6, pc}
 8007590:	ab01      	add	r3, sp, #4
 8007592:	466a      	mov	r2, sp
 8007594:	f7ff ffca 	bl	800752c <__swhatbuf_r>
 8007598:	9900      	ldr	r1, [sp, #0]
 800759a:	4605      	mov	r5, r0
 800759c:	4630      	mov	r0, r6
 800759e:	f7fe f923 	bl	80057e8 <_malloc_r>
 80075a2:	b948      	cbnz	r0, 80075b8 <__smakebuf_r+0x44>
 80075a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075a8:	059a      	lsls	r2, r3, #22
 80075aa:	d4ef      	bmi.n	800758c <__smakebuf_r+0x18>
 80075ac:	f023 0303 	bic.w	r3, r3, #3
 80075b0:	f043 0302 	orr.w	r3, r3, #2
 80075b4:	81a3      	strh	r3, [r4, #12]
 80075b6:	e7e3      	b.n	8007580 <__smakebuf_r+0xc>
 80075b8:	4b0d      	ldr	r3, [pc, #52]	; (80075f0 <__smakebuf_r+0x7c>)
 80075ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	6020      	str	r0, [r4, #0]
 80075c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c4:	81a3      	strh	r3, [r4, #12]
 80075c6:	9b00      	ldr	r3, [sp, #0]
 80075c8:	6163      	str	r3, [r4, #20]
 80075ca:	9b01      	ldr	r3, [sp, #4]
 80075cc:	6120      	str	r0, [r4, #16]
 80075ce:	b15b      	cbz	r3, 80075e8 <__smakebuf_r+0x74>
 80075d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075d4:	4630      	mov	r0, r6
 80075d6:	f000 f8c9 	bl	800776c <_isatty_r>
 80075da:	b128      	cbz	r0, 80075e8 <__smakebuf_r+0x74>
 80075dc:	89a3      	ldrh	r3, [r4, #12]
 80075de:	f023 0303 	bic.w	r3, r3, #3
 80075e2:	f043 0301 	orr.w	r3, r3, #1
 80075e6:	81a3      	strh	r3, [r4, #12]
 80075e8:	89a0      	ldrh	r0, [r4, #12]
 80075ea:	4305      	orrs	r5, r0
 80075ec:	81a5      	strh	r5, [r4, #12]
 80075ee:	e7cd      	b.n	800758c <__smakebuf_r+0x18>
 80075f0:	08007385 	.word	0x08007385

080075f4 <_raise_r>:
 80075f4:	291f      	cmp	r1, #31
 80075f6:	b538      	push	{r3, r4, r5, lr}
 80075f8:	4604      	mov	r4, r0
 80075fa:	460d      	mov	r5, r1
 80075fc:	d904      	bls.n	8007608 <_raise_r+0x14>
 80075fe:	2316      	movs	r3, #22
 8007600:	6003      	str	r3, [r0, #0]
 8007602:	f04f 30ff 	mov.w	r0, #4294967295
 8007606:	bd38      	pop	{r3, r4, r5, pc}
 8007608:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800760a:	b112      	cbz	r2, 8007612 <_raise_r+0x1e>
 800760c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007610:	b94b      	cbnz	r3, 8007626 <_raise_r+0x32>
 8007612:	4620      	mov	r0, r4
 8007614:	f000 f830 	bl	8007678 <_getpid_r>
 8007618:	462a      	mov	r2, r5
 800761a:	4601      	mov	r1, r0
 800761c:	4620      	mov	r0, r4
 800761e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007622:	f000 b817 	b.w	8007654 <_kill_r>
 8007626:	2b01      	cmp	r3, #1
 8007628:	d00a      	beq.n	8007640 <_raise_r+0x4c>
 800762a:	1c59      	adds	r1, r3, #1
 800762c:	d103      	bne.n	8007636 <_raise_r+0x42>
 800762e:	2316      	movs	r3, #22
 8007630:	6003      	str	r3, [r0, #0]
 8007632:	2001      	movs	r0, #1
 8007634:	e7e7      	b.n	8007606 <_raise_r+0x12>
 8007636:	2400      	movs	r4, #0
 8007638:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800763c:	4628      	mov	r0, r5
 800763e:	4798      	blx	r3
 8007640:	2000      	movs	r0, #0
 8007642:	e7e0      	b.n	8007606 <_raise_r+0x12>

08007644 <raise>:
 8007644:	4b02      	ldr	r3, [pc, #8]	; (8007650 <raise+0xc>)
 8007646:	4601      	mov	r1, r0
 8007648:	6818      	ldr	r0, [r3, #0]
 800764a:	f7ff bfd3 	b.w	80075f4 <_raise_r>
 800764e:	bf00      	nop
 8007650:	20000008 	.word	0x20000008

08007654 <_kill_r>:
 8007654:	b538      	push	{r3, r4, r5, lr}
 8007656:	4d07      	ldr	r5, [pc, #28]	; (8007674 <_kill_r+0x20>)
 8007658:	2300      	movs	r3, #0
 800765a:	4604      	mov	r4, r0
 800765c:	4608      	mov	r0, r1
 800765e:	4611      	mov	r1, r2
 8007660:	602b      	str	r3, [r5, #0]
 8007662:	f7fb ffce 	bl	8003602 <_kill>
 8007666:	1c43      	adds	r3, r0, #1
 8007668:	d102      	bne.n	8007670 <_kill_r+0x1c>
 800766a:	682b      	ldr	r3, [r5, #0]
 800766c:	b103      	cbz	r3, 8007670 <_kill_r+0x1c>
 800766e:	6023      	str	r3, [r4, #0]
 8007670:	bd38      	pop	{r3, r4, r5, pc}
 8007672:	bf00      	nop
 8007674:	200000dc 	.word	0x200000dc

08007678 <_getpid_r>:
 8007678:	f7fb bfbb 	b.w	80035f2 <_getpid>

0800767c <__sread>:
 800767c:	b510      	push	{r4, lr}
 800767e:	460c      	mov	r4, r1
 8007680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007684:	f000 f894 	bl	80077b0 <_read_r>
 8007688:	2800      	cmp	r0, #0
 800768a:	bfab      	itete	ge
 800768c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800768e:	89a3      	ldrhlt	r3, [r4, #12]
 8007690:	181b      	addge	r3, r3, r0
 8007692:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007696:	bfac      	ite	ge
 8007698:	6563      	strge	r3, [r4, #84]	; 0x54
 800769a:	81a3      	strhlt	r3, [r4, #12]
 800769c:	bd10      	pop	{r4, pc}

0800769e <__swrite>:
 800769e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a2:	461f      	mov	r7, r3
 80076a4:	898b      	ldrh	r3, [r1, #12]
 80076a6:	05db      	lsls	r3, r3, #23
 80076a8:	4605      	mov	r5, r0
 80076aa:	460c      	mov	r4, r1
 80076ac:	4616      	mov	r6, r2
 80076ae:	d505      	bpl.n	80076bc <__swrite+0x1e>
 80076b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b4:	2302      	movs	r3, #2
 80076b6:	2200      	movs	r2, #0
 80076b8:	f000 f868 	bl	800778c <_lseek_r>
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076c6:	81a3      	strh	r3, [r4, #12]
 80076c8:	4632      	mov	r2, r6
 80076ca:	463b      	mov	r3, r7
 80076cc:	4628      	mov	r0, r5
 80076ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076d2:	f000 b817 	b.w	8007704 <_write_r>

080076d6 <__sseek>:
 80076d6:	b510      	push	{r4, lr}
 80076d8:	460c      	mov	r4, r1
 80076da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076de:	f000 f855 	bl	800778c <_lseek_r>
 80076e2:	1c43      	adds	r3, r0, #1
 80076e4:	89a3      	ldrh	r3, [r4, #12]
 80076e6:	bf15      	itete	ne
 80076e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80076ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076f2:	81a3      	strheq	r3, [r4, #12]
 80076f4:	bf18      	it	ne
 80076f6:	81a3      	strhne	r3, [r4, #12]
 80076f8:	bd10      	pop	{r4, pc}

080076fa <__sclose>:
 80076fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fe:	f000 b813 	b.w	8007728 <_close_r>
	...

08007704 <_write_r>:
 8007704:	b538      	push	{r3, r4, r5, lr}
 8007706:	4d07      	ldr	r5, [pc, #28]	; (8007724 <_write_r+0x20>)
 8007708:	4604      	mov	r4, r0
 800770a:	4608      	mov	r0, r1
 800770c:	4611      	mov	r1, r2
 800770e:	2200      	movs	r2, #0
 8007710:	602a      	str	r2, [r5, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	f7fb ffac 	bl	8003670 <_write>
 8007718:	1c43      	adds	r3, r0, #1
 800771a:	d102      	bne.n	8007722 <_write_r+0x1e>
 800771c:	682b      	ldr	r3, [r5, #0]
 800771e:	b103      	cbz	r3, 8007722 <_write_r+0x1e>
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	bd38      	pop	{r3, r4, r5, pc}
 8007724:	200000dc 	.word	0x200000dc

08007728 <_close_r>:
 8007728:	b538      	push	{r3, r4, r5, lr}
 800772a:	4d06      	ldr	r5, [pc, #24]	; (8007744 <_close_r+0x1c>)
 800772c:	2300      	movs	r3, #0
 800772e:	4604      	mov	r4, r0
 8007730:	4608      	mov	r0, r1
 8007732:	602b      	str	r3, [r5, #0]
 8007734:	f7fb ffb8 	bl	80036a8 <_close>
 8007738:	1c43      	adds	r3, r0, #1
 800773a:	d102      	bne.n	8007742 <_close_r+0x1a>
 800773c:	682b      	ldr	r3, [r5, #0]
 800773e:	b103      	cbz	r3, 8007742 <_close_r+0x1a>
 8007740:	6023      	str	r3, [r4, #0]
 8007742:	bd38      	pop	{r3, r4, r5, pc}
 8007744:	200000dc 	.word	0x200000dc

08007748 <_fstat_r>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	4d07      	ldr	r5, [pc, #28]	; (8007768 <_fstat_r+0x20>)
 800774c:	2300      	movs	r3, #0
 800774e:	4604      	mov	r4, r0
 8007750:	4608      	mov	r0, r1
 8007752:	4611      	mov	r1, r2
 8007754:	602b      	str	r3, [r5, #0]
 8007756:	f7fb ffb3 	bl	80036c0 <_fstat>
 800775a:	1c43      	adds	r3, r0, #1
 800775c:	d102      	bne.n	8007764 <_fstat_r+0x1c>
 800775e:	682b      	ldr	r3, [r5, #0]
 8007760:	b103      	cbz	r3, 8007764 <_fstat_r+0x1c>
 8007762:	6023      	str	r3, [r4, #0]
 8007764:	bd38      	pop	{r3, r4, r5, pc}
 8007766:	bf00      	nop
 8007768:	200000dc 	.word	0x200000dc

0800776c <_isatty_r>:
 800776c:	b538      	push	{r3, r4, r5, lr}
 800776e:	4d06      	ldr	r5, [pc, #24]	; (8007788 <_isatty_r+0x1c>)
 8007770:	2300      	movs	r3, #0
 8007772:	4604      	mov	r4, r0
 8007774:	4608      	mov	r0, r1
 8007776:	602b      	str	r3, [r5, #0]
 8007778:	f7fb ffb2 	bl	80036e0 <_isatty>
 800777c:	1c43      	adds	r3, r0, #1
 800777e:	d102      	bne.n	8007786 <_isatty_r+0x1a>
 8007780:	682b      	ldr	r3, [r5, #0]
 8007782:	b103      	cbz	r3, 8007786 <_isatty_r+0x1a>
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	bd38      	pop	{r3, r4, r5, pc}
 8007788:	200000dc 	.word	0x200000dc

0800778c <_lseek_r>:
 800778c:	b538      	push	{r3, r4, r5, lr}
 800778e:	4d07      	ldr	r5, [pc, #28]	; (80077ac <_lseek_r+0x20>)
 8007790:	4604      	mov	r4, r0
 8007792:	4608      	mov	r0, r1
 8007794:	4611      	mov	r1, r2
 8007796:	2200      	movs	r2, #0
 8007798:	602a      	str	r2, [r5, #0]
 800779a:	461a      	mov	r2, r3
 800779c:	f7fb ffab 	bl	80036f6 <_lseek>
 80077a0:	1c43      	adds	r3, r0, #1
 80077a2:	d102      	bne.n	80077aa <_lseek_r+0x1e>
 80077a4:	682b      	ldr	r3, [r5, #0]
 80077a6:	b103      	cbz	r3, 80077aa <_lseek_r+0x1e>
 80077a8:	6023      	str	r3, [r4, #0]
 80077aa:	bd38      	pop	{r3, r4, r5, pc}
 80077ac:	200000dc 	.word	0x200000dc

080077b0 <_read_r>:
 80077b0:	b538      	push	{r3, r4, r5, lr}
 80077b2:	4d07      	ldr	r5, [pc, #28]	; (80077d0 <_read_r+0x20>)
 80077b4:	4604      	mov	r4, r0
 80077b6:	4608      	mov	r0, r1
 80077b8:	4611      	mov	r1, r2
 80077ba:	2200      	movs	r2, #0
 80077bc:	602a      	str	r2, [r5, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	f7fb ff39 	bl	8003636 <_read>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d102      	bne.n	80077ce <_read_r+0x1e>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	b103      	cbz	r3, 80077ce <_read_r+0x1e>
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	200000dc 	.word	0x200000dc
 80077d4:	00000000 	.word	0x00000000

080077d8 <floor>:
 80077d8:	ec51 0b10 	vmov	r0, r1, d0
 80077dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80077e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80077e8:	2e13      	cmp	r6, #19
 80077ea:	ee10 5a10 	vmov	r5, s0
 80077ee:	ee10 8a10 	vmov	r8, s0
 80077f2:	460c      	mov	r4, r1
 80077f4:	dc32      	bgt.n	800785c <floor+0x84>
 80077f6:	2e00      	cmp	r6, #0
 80077f8:	da14      	bge.n	8007824 <floor+0x4c>
 80077fa:	a333      	add	r3, pc, #204	; (adr r3, 80078c8 <floor+0xf0>)
 80077fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007800:	f7f8 fd44 	bl	800028c <__adddf3>
 8007804:	2200      	movs	r2, #0
 8007806:	2300      	movs	r3, #0
 8007808:	f7f9 f986 	bl	8000b18 <__aeabi_dcmpgt>
 800780c:	b138      	cbz	r0, 800781e <floor+0x46>
 800780e:	2c00      	cmp	r4, #0
 8007810:	da57      	bge.n	80078c2 <floor+0xea>
 8007812:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007816:	431d      	orrs	r5, r3
 8007818:	d001      	beq.n	800781e <floor+0x46>
 800781a:	4c2d      	ldr	r4, [pc, #180]	; (80078d0 <floor+0xf8>)
 800781c:	2500      	movs	r5, #0
 800781e:	4621      	mov	r1, r4
 8007820:	4628      	mov	r0, r5
 8007822:	e025      	b.n	8007870 <floor+0x98>
 8007824:	4f2b      	ldr	r7, [pc, #172]	; (80078d4 <floor+0xfc>)
 8007826:	4137      	asrs	r7, r6
 8007828:	ea01 0307 	and.w	r3, r1, r7
 800782c:	4303      	orrs	r3, r0
 800782e:	d01f      	beq.n	8007870 <floor+0x98>
 8007830:	a325      	add	r3, pc, #148	; (adr r3, 80078c8 <floor+0xf0>)
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	f7f8 fd29 	bl	800028c <__adddf3>
 800783a:	2200      	movs	r2, #0
 800783c:	2300      	movs	r3, #0
 800783e:	f7f9 f96b 	bl	8000b18 <__aeabi_dcmpgt>
 8007842:	2800      	cmp	r0, #0
 8007844:	d0eb      	beq.n	800781e <floor+0x46>
 8007846:	2c00      	cmp	r4, #0
 8007848:	bfbe      	ittt	lt
 800784a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800784e:	fa43 f606 	asrlt.w	r6, r3, r6
 8007852:	19a4      	addlt	r4, r4, r6
 8007854:	ea24 0407 	bic.w	r4, r4, r7
 8007858:	2500      	movs	r5, #0
 800785a:	e7e0      	b.n	800781e <floor+0x46>
 800785c:	2e33      	cmp	r6, #51	; 0x33
 800785e:	dd0b      	ble.n	8007878 <floor+0xa0>
 8007860:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007864:	d104      	bne.n	8007870 <floor+0x98>
 8007866:	ee10 2a10 	vmov	r2, s0
 800786a:	460b      	mov	r3, r1
 800786c:	f7f8 fd0e 	bl	800028c <__adddf3>
 8007870:	ec41 0b10 	vmov	d0, r0, r1
 8007874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007878:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800787c:	f04f 33ff 	mov.w	r3, #4294967295
 8007880:	fa23 f707 	lsr.w	r7, r3, r7
 8007884:	4207      	tst	r7, r0
 8007886:	d0f3      	beq.n	8007870 <floor+0x98>
 8007888:	a30f      	add	r3, pc, #60	; (adr r3, 80078c8 <floor+0xf0>)
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	f7f8 fcfd 	bl	800028c <__adddf3>
 8007892:	2200      	movs	r2, #0
 8007894:	2300      	movs	r3, #0
 8007896:	f7f9 f93f 	bl	8000b18 <__aeabi_dcmpgt>
 800789a:	2800      	cmp	r0, #0
 800789c:	d0bf      	beq.n	800781e <floor+0x46>
 800789e:	2c00      	cmp	r4, #0
 80078a0:	da02      	bge.n	80078a8 <floor+0xd0>
 80078a2:	2e14      	cmp	r6, #20
 80078a4:	d103      	bne.n	80078ae <floor+0xd6>
 80078a6:	3401      	adds	r4, #1
 80078a8:	ea25 0507 	bic.w	r5, r5, r7
 80078ac:	e7b7      	b.n	800781e <floor+0x46>
 80078ae:	2301      	movs	r3, #1
 80078b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80078b4:	fa03 f606 	lsl.w	r6, r3, r6
 80078b8:	4435      	add	r5, r6
 80078ba:	4545      	cmp	r5, r8
 80078bc:	bf38      	it	cc
 80078be:	18e4      	addcc	r4, r4, r3
 80078c0:	e7f2      	b.n	80078a8 <floor+0xd0>
 80078c2:	2500      	movs	r5, #0
 80078c4:	462c      	mov	r4, r5
 80078c6:	e7aa      	b.n	800781e <floor+0x46>
 80078c8:	8800759c 	.word	0x8800759c
 80078cc:	7e37e43c 	.word	0x7e37e43c
 80078d0:	bff00000 	.word	0xbff00000
 80078d4:	000fffff 	.word	0x000fffff

080078d8 <powf>:
 80078d8:	b508      	push	{r3, lr}
 80078da:	ed2d 8b04 	vpush	{d8-d9}
 80078de:	eeb0 9a40 	vmov.f32	s18, s0
 80078e2:	eef0 8a60 	vmov.f32	s17, s1
 80078e6:	f000 f88f 	bl	8007a08 <__ieee754_powf>
 80078ea:	4b43      	ldr	r3, [pc, #268]	; (80079f8 <powf+0x120>)
 80078ec:	f993 3000 	ldrsb.w	r3, [r3]
 80078f0:	3301      	adds	r3, #1
 80078f2:	eeb0 8a40 	vmov.f32	s16, s0
 80078f6:	d012      	beq.n	800791e <powf+0x46>
 80078f8:	eef4 8a68 	vcmp.f32	s17, s17
 80078fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007900:	d60d      	bvs.n	800791e <powf+0x46>
 8007902:	eeb4 9a49 	vcmp.f32	s18, s18
 8007906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800790a:	d70d      	bvc.n	8007928 <powf+0x50>
 800790c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007914:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007918:	bf08      	it	eq
 800791a:	eeb0 8a67 	vmoveq.f32	s16, s15
 800791e:	eeb0 0a48 	vmov.f32	s0, s16
 8007922:	ecbd 8b04 	vpop	{d8-d9}
 8007926:	bd08      	pop	{r3, pc}
 8007928:	eddf 9a34 	vldr	s19, [pc, #208]	; 80079fc <powf+0x124>
 800792c:	eeb4 9a69 	vcmp.f32	s18, s19
 8007930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007934:	d116      	bne.n	8007964 <powf+0x8c>
 8007936:	eef4 8a69 	vcmp.f32	s17, s19
 800793a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793e:	d057      	beq.n	80079f0 <powf+0x118>
 8007940:	eeb0 0a68 	vmov.f32	s0, s17
 8007944:	f000 fb2a 	bl	8007f9c <finitef>
 8007948:	2800      	cmp	r0, #0
 800794a:	d0e8      	beq.n	800791e <powf+0x46>
 800794c:	eef4 8ae9 	vcmpe.f32	s17, s19
 8007950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007954:	d5e3      	bpl.n	800791e <powf+0x46>
 8007956:	f7fd f9dd 	bl	8004d14 <__errno>
 800795a:	2321      	movs	r3, #33	; 0x21
 800795c:	6003      	str	r3, [r0, #0]
 800795e:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8007a00 <powf+0x128>
 8007962:	e7dc      	b.n	800791e <powf+0x46>
 8007964:	f000 fb1a 	bl	8007f9c <finitef>
 8007968:	bb50      	cbnz	r0, 80079c0 <powf+0xe8>
 800796a:	eeb0 0a49 	vmov.f32	s0, s18
 800796e:	f000 fb15 	bl	8007f9c <finitef>
 8007972:	b328      	cbz	r0, 80079c0 <powf+0xe8>
 8007974:	eeb0 0a68 	vmov.f32	s0, s17
 8007978:	f000 fb10 	bl	8007f9c <finitef>
 800797c:	b300      	cbz	r0, 80079c0 <powf+0xe8>
 800797e:	eeb4 8a48 	vcmp.f32	s16, s16
 8007982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007986:	d706      	bvc.n	8007996 <powf+0xbe>
 8007988:	f7fd f9c4 	bl	8004d14 <__errno>
 800798c:	2321      	movs	r3, #33	; 0x21
 800798e:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8007992:	6003      	str	r3, [r0, #0]
 8007994:	e7c3      	b.n	800791e <powf+0x46>
 8007996:	f7fd f9bd 	bl	8004d14 <__errno>
 800799a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800799e:	2322      	movs	r3, #34	; 0x22
 80079a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a4:	6003      	str	r3, [r0, #0]
 80079a6:	d508      	bpl.n	80079ba <powf+0xe2>
 80079a8:	eeb0 0a68 	vmov.f32	s0, s17
 80079ac:	f000 fb0a 	bl	8007fc4 <rintf>
 80079b0:	eeb4 0a68 	vcmp.f32	s0, s17
 80079b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b8:	d1d1      	bne.n	800795e <powf+0x86>
 80079ba:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8007a04 <powf+0x12c>
 80079be:	e7ae      	b.n	800791e <powf+0x46>
 80079c0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80079c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c8:	d1a9      	bne.n	800791e <powf+0x46>
 80079ca:	eeb0 0a49 	vmov.f32	s0, s18
 80079ce:	f000 fae5 	bl	8007f9c <finitef>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	d0a3      	beq.n	800791e <powf+0x46>
 80079d6:	eeb0 0a68 	vmov.f32	s0, s17
 80079da:	f000 fadf 	bl	8007f9c <finitef>
 80079de:	2800      	cmp	r0, #0
 80079e0:	d09d      	beq.n	800791e <powf+0x46>
 80079e2:	f7fd f997 	bl	8004d14 <__errno>
 80079e6:	2322      	movs	r3, #34	; 0x22
 80079e8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80079fc <powf+0x124>
 80079ec:	6003      	str	r3, [r0, #0]
 80079ee:	e796      	b.n	800791e <powf+0x46>
 80079f0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80079f4:	e793      	b.n	800791e <powf+0x46>
 80079f6:	bf00      	nop
 80079f8:	2000006c 	.word	0x2000006c
 80079fc:	00000000 	.word	0x00000000
 8007a00:	ff800000 	.word	0xff800000
 8007a04:	7f800000 	.word	0x7f800000

08007a08 <__ieee754_powf>:
 8007a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a0c:	ee10 5a90 	vmov	r5, s1
 8007a10:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8007a14:	ed2d 8b02 	vpush	{d8}
 8007a18:	eeb0 8a40 	vmov.f32	s16, s0
 8007a1c:	eef0 8a60 	vmov.f32	s17, s1
 8007a20:	f000 8291 	beq.w	8007f46 <__ieee754_powf+0x53e>
 8007a24:	ee10 8a10 	vmov	r8, s0
 8007a28:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8007a2c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007a30:	dc06      	bgt.n	8007a40 <__ieee754_powf+0x38>
 8007a32:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007a36:	dd0a      	ble.n	8007a4e <__ieee754_powf+0x46>
 8007a38:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007a3c:	f000 8283 	beq.w	8007f46 <__ieee754_powf+0x53e>
 8007a40:	ecbd 8b02 	vpop	{d8}
 8007a44:	48d8      	ldr	r0, [pc, #864]	; (8007da8 <__ieee754_powf+0x3a0>)
 8007a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a4a:	f000 bab5 	b.w	8007fb8 <nanf>
 8007a4e:	f1b8 0f00 	cmp.w	r8, #0
 8007a52:	da1f      	bge.n	8007a94 <__ieee754_powf+0x8c>
 8007a54:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8007a58:	da2e      	bge.n	8007ab8 <__ieee754_powf+0xb0>
 8007a5a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007a5e:	f2c0 827b 	blt.w	8007f58 <__ieee754_powf+0x550>
 8007a62:	15fb      	asrs	r3, r7, #23
 8007a64:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007a68:	fa47 f603 	asr.w	r6, r7, r3
 8007a6c:	fa06 f303 	lsl.w	r3, r6, r3
 8007a70:	42bb      	cmp	r3, r7
 8007a72:	f040 8271 	bne.w	8007f58 <__ieee754_powf+0x550>
 8007a76:	f006 0601 	and.w	r6, r6, #1
 8007a7a:	f1c6 0602 	rsb	r6, r6, #2
 8007a7e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007a82:	d120      	bne.n	8007ac6 <__ieee754_powf+0xbe>
 8007a84:	2d00      	cmp	r5, #0
 8007a86:	f280 8264 	bge.w	8007f52 <__ieee754_powf+0x54a>
 8007a8a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007a8e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007a92:	e00d      	b.n	8007ab0 <__ieee754_powf+0xa8>
 8007a94:	2600      	movs	r6, #0
 8007a96:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007a9a:	d1f0      	bne.n	8007a7e <__ieee754_powf+0x76>
 8007a9c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007aa0:	f000 8251 	beq.w	8007f46 <__ieee754_powf+0x53e>
 8007aa4:	dd0a      	ble.n	8007abc <__ieee754_powf+0xb4>
 8007aa6:	2d00      	cmp	r5, #0
 8007aa8:	f280 8250 	bge.w	8007f4c <__ieee754_powf+0x544>
 8007aac:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8007dac <__ieee754_powf+0x3a4>
 8007ab0:	ecbd 8b02 	vpop	{d8}
 8007ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab8:	2602      	movs	r6, #2
 8007aba:	e7ec      	b.n	8007a96 <__ieee754_powf+0x8e>
 8007abc:	2d00      	cmp	r5, #0
 8007abe:	daf5      	bge.n	8007aac <__ieee754_powf+0xa4>
 8007ac0:	eeb1 0a68 	vneg.f32	s0, s17
 8007ac4:	e7f4      	b.n	8007ab0 <__ieee754_powf+0xa8>
 8007ac6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8007aca:	d102      	bne.n	8007ad2 <__ieee754_powf+0xca>
 8007acc:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007ad0:	e7ee      	b.n	8007ab0 <__ieee754_powf+0xa8>
 8007ad2:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8007ad6:	eeb0 0a48 	vmov.f32	s0, s16
 8007ada:	d108      	bne.n	8007aee <__ieee754_powf+0xe6>
 8007adc:	f1b8 0f00 	cmp.w	r8, #0
 8007ae0:	db05      	blt.n	8007aee <__ieee754_powf+0xe6>
 8007ae2:	ecbd 8b02 	vpop	{d8}
 8007ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007aea:	f000 ba4d 	b.w	8007f88 <__ieee754_sqrtf>
 8007aee:	f000 fa4e 	bl	8007f8e <fabsf>
 8007af2:	b124      	cbz	r4, 8007afe <__ieee754_powf+0xf6>
 8007af4:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8007af8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007afc:	d117      	bne.n	8007b2e <__ieee754_powf+0x126>
 8007afe:	2d00      	cmp	r5, #0
 8007b00:	bfbc      	itt	lt
 8007b02:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8007b06:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007b0a:	f1b8 0f00 	cmp.w	r8, #0
 8007b0e:	dacf      	bge.n	8007ab0 <__ieee754_powf+0xa8>
 8007b10:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8007b14:	ea54 0306 	orrs.w	r3, r4, r6
 8007b18:	d104      	bne.n	8007b24 <__ieee754_powf+0x11c>
 8007b1a:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007b1e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007b22:	e7c5      	b.n	8007ab0 <__ieee754_powf+0xa8>
 8007b24:	2e01      	cmp	r6, #1
 8007b26:	d1c3      	bne.n	8007ab0 <__ieee754_powf+0xa8>
 8007b28:	eeb1 0a40 	vneg.f32	s0, s0
 8007b2c:	e7c0      	b.n	8007ab0 <__ieee754_powf+0xa8>
 8007b2e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8007b32:	3801      	subs	r0, #1
 8007b34:	ea56 0300 	orrs.w	r3, r6, r0
 8007b38:	d104      	bne.n	8007b44 <__ieee754_powf+0x13c>
 8007b3a:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007b3e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007b42:	e7b5      	b.n	8007ab0 <__ieee754_powf+0xa8>
 8007b44:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8007b48:	dd6b      	ble.n	8007c22 <__ieee754_powf+0x21a>
 8007b4a:	4b99      	ldr	r3, [pc, #612]	; (8007db0 <__ieee754_powf+0x3a8>)
 8007b4c:	429c      	cmp	r4, r3
 8007b4e:	dc06      	bgt.n	8007b5e <__ieee754_powf+0x156>
 8007b50:	2d00      	cmp	r5, #0
 8007b52:	daab      	bge.n	8007aac <__ieee754_powf+0xa4>
 8007b54:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8007db4 <__ieee754_powf+0x3ac>
 8007b58:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007b5c:	e7a8      	b.n	8007ab0 <__ieee754_powf+0xa8>
 8007b5e:	4b96      	ldr	r3, [pc, #600]	; (8007db8 <__ieee754_powf+0x3b0>)
 8007b60:	429c      	cmp	r4, r3
 8007b62:	dd02      	ble.n	8007b6a <__ieee754_powf+0x162>
 8007b64:	2d00      	cmp	r5, #0
 8007b66:	dcf5      	bgt.n	8007b54 <__ieee754_powf+0x14c>
 8007b68:	e7a0      	b.n	8007aac <__ieee754_powf+0xa4>
 8007b6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007b6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007b72:	eddf 6a92 	vldr	s13, [pc, #584]	; 8007dbc <__ieee754_powf+0x3b4>
 8007b76:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8007b7a:	eee0 6a67 	vfms.f32	s13, s0, s15
 8007b7e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007b82:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8007b86:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b8e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8007dc0 <__ieee754_powf+0x3b8>
 8007b92:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8007b96:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8007dc4 <__ieee754_powf+0x3bc>
 8007b9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007b9e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8007dc8 <__ieee754_powf+0x3c0>
 8007ba2:	eef0 6a67 	vmov.f32	s13, s15
 8007ba6:	eee0 6a07 	vfma.f32	s13, s0, s14
 8007baa:	ee16 3a90 	vmov	r3, s13
 8007bae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007bb2:	f023 030f 	bic.w	r3, r3, #15
 8007bb6:	ee00 3a90 	vmov	s1, r3
 8007bba:	eee0 0a47 	vfms.f32	s1, s0, s14
 8007bbe:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007bc2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8007bc6:	f025 050f 	bic.w	r5, r5, #15
 8007bca:	ee07 5a10 	vmov	s14, r5
 8007bce:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8007bd2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8007bd6:	ee07 3a90 	vmov	s15, r3
 8007bda:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007bde:	3e01      	subs	r6, #1
 8007be0:	ea56 0200 	orrs.w	r2, r6, r0
 8007be4:	ee07 5a10 	vmov	s14, r5
 8007be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007bec:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007bf0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007bf4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007bf8:	ee17 4a10 	vmov	r4, s14
 8007bfc:	bf08      	it	eq
 8007bfe:	eeb0 8a40 	vmoveq.f32	s16, s0
 8007c02:	2c00      	cmp	r4, #0
 8007c04:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007c08:	f340 8184 	ble.w	8007f14 <__ieee754_powf+0x50c>
 8007c0c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007c10:	f340 80fc 	ble.w	8007e0c <__ieee754_powf+0x404>
 8007c14:	eddf 7a67 	vldr	s15, [pc, #412]	; 8007db4 <__ieee754_powf+0x3ac>
 8007c18:	ee28 0a27 	vmul.f32	s0, s16, s15
 8007c1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007c20:	e746      	b.n	8007ab0 <__ieee754_powf+0xa8>
 8007c22:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8007c26:	bf01      	itttt	eq
 8007c28:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8007dcc <__ieee754_powf+0x3c4>
 8007c2c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8007c30:	f06f 0217 	mvneq.w	r2, #23
 8007c34:	ee17 4a90 	vmoveq	r4, s15
 8007c38:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8007c3c:	bf18      	it	ne
 8007c3e:	2200      	movne	r2, #0
 8007c40:	3b7f      	subs	r3, #127	; 0x7f
 8007c42:	4413      	add	r3, r2
 8007c44:	4a62      	ldr	r2, [pc, #392]	; (8007dd0 <__ieee754_powf+0x3c8>)
 8007c46:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8007c4a:	4294      	cmp	r4, r2
 8007c4c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8007c50:	dd06      	ble.n	8007c60 <__ieee754_powf+0x258>
 8007c52:	4a60      	ldr	r2, [pc, #384]	; (8007dd4 <__ieee754_powf+0x3cc>)
 8007c54:	4294      	cmp	r4, r2
 8007c56:	f340 80a4 	ble.w	8007da2 <__ieee754_powf+0x39a>
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8007c60:	2400      	movs	r4, #0
 8007c62:	4a5d      	ldr	r2, [pc, #372]	; (8007dd8 <__ieee754_powf+0x3d0>)
 8007c64:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007c68:	ee07 1a90 	vmov	s15, r1
 8007c6c:	ed92 7a00 	vldr	s14, [r2]
 8007c70:	4a5a      	ldr	r2, [pc, #360]	; (8007ddc <__ieee754_powf+0x3d4>)
 8007c72:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007c76:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007c7a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8007c7e:	1049      	asrs	r1, r1, #1
 8007c80:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007c84:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007c88:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8007c8c:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8007c90:	ee06 1a10 	vmov	s12, r1
 8007c94:	ee65 4a26 	vmul.f32	s9, s10, s13
 8007c98:	ee36 7a47 	vsub.f32	s14, s12, s14
 8007c9c:	ee14 7a90 	vmov	r7, s9
 8007ca0:	4017      	ands	r7, r2
 8007ca2:	ee05 7a90 	vmov	s11, r7
 8007ca6:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8007caa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007cae:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007de0 <__ieee754_powf+0x3d8>
 8007cb2:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8007cb6:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8007cba:	ee25 6a26 	vmul.f32	s12, s10, s13
 8007cbe:	eddf 6a49 	vldr	s13, [pc, #292]	; 8007de4 <__ieee754_powf+0x3dc>
 8007cc2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007cc6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007de8 <__ieee754_powf+0x3e0>
 8007cca:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007cce:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007dbc <__ieee754_powf+0x3b4>
 8007cd2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007cd6:	eddf 6a45 	vldr	s13, [pc, #276]	; 8007dec <__ieee754_powf+0x3e4>
 8007cda:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007cde:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007df0 <__ieee754_powf+0x3e8>
 8007ce2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ce6:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8007cea:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8007cee:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007cf2:	eee5 6a07 	vfma.f32	s13, s10, s14
 8007cf6:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8007cfa:	eef0 7a45 	vmov.f32	s15, s10
 8007cfe:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8007d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d06:	ee17 1a90 	vmov	r1, s15
 8007d0a:	4011      	ands	r1, r2
 8007d0c:	ee07 1a90 	vmov	s15, r1
 8007d10:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8007d14:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8007d18:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007d1c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8007d20:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007d24:	eeb0 6a47 	vmov.f32	s12, s14
 8007d28:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8007d2c:	ee16 1a10 	vmov	r1, s12
 8007d30:	4011      	ands	r1, r2
 8007d32:	ee06 1a90 	vmov	s13, r1
 8007d36:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8007d3a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8007df4 <__ieee754_powf+0x3ec>
 8007d3e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007df8 <__ieee754_powf+0x3f0>
 8007d42:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007d46:	ee06 1a10 	vmov	s12, r1
 8007d4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d4e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007dfc <__ieee754_powf+0x3f4>
 8007d52:	492b      	ldr	r1, [pc, #172]	; (8007e00 <__ieee754_powf+0x3f8>)
 8007d54:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007d58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007d5c:	edd1 7a00 	vldr	s15, [r1]
 8007d60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d64:	ee07 3a90 	vmov	s15, r3
 8007d68:	4b26      	ldr	r3, [pc, #152]	; (8007e04 <__ieee754_powf+0x3fc>)
 8007d6a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007d6e:	eef0 7a47 	vmov.f32	s15, s14
 8007d72:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007d76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007d7a:	edd4 0a00 	vldr	s1, [r4]
 8007d7e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d86:	ee17 3a90 	vmov	r3, s15
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	ee07 3a90 	vmov	s15, r3
 8007d90:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8007d94:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8007d98:	eee6 6a65 	vfms.f32	s13, s12, s11
 8007d9c:	ee77 7a66 	vsub.f32	s15, s14, s13
 8007da0:	e70f      	b.n	8007bc2 <__ieee754_powf+0x1ba>
 8007da2:	2401      	movs	r4, #1
 8007da4:	e75d      	b.n	8007c62 <__ieee754_powf+0x25a>
 8007da6:	bf00      	nop
 8007da8:	080083d2 	.word	0x080083d2
 8007dac:	00000000 	.word	0x00000000
 8007db0:	3f7ffff7 	.word	0x3f7ffff7
 8007db4:	7149f2ca 	.word	0x7149f2ca
 8007db8:	3f800007 	.word	0x3f800007
 8007dbc:	3eaaaaab 	.word	0x3eaaaaab
 8007dc0:	3fb8aa3b 	.word	0x3fb8aa3b
 8007dc4:	36eca570 	.word	0x36eca570
 8007dc8:	3fb8aa00 	.word	0x3fb8aa00
 8007dcc:	4b800000 	.word	0x4b800000
 8007dd0:	001cc471 	.word	0x001cc471
 8007dd4:	005db3d6 	.word	0x005db3d6
 8007dd8:	080084a4 	.word	0x080084a4
 8007ddc:	fffff000 	.word	0xfffff000
 8007de0:	3e6c3255 	.word	0x3e6c3255
 8007de4:	3e53f142 	.word	0x3e53f142
 8007de8:	3e8ba305 	.word	0x3e8ba305
 8007dec:	3edb6db7 	.word	0x3edb6db7
 8007df0:	3f19999a 	.word	0x3f19999a
 8007df4:	3f76384f 	.word	0x3f76384f
 8007df8:	3f763800 	.word	0x3f763800
 8007dfc:	369dc3a0 	.word	0x369dc3a0
 8007e00:	080084b4 	.word	0x080084b4
 8007e04:	080084ac 	.word	0x080084ac
 8007e08:	3338aa3c 	.word	0x3338aa3c
 8007e0c:	f040 8092 	bne.w	8007f34 <__ieee754_powf+0x52c>
 8007e10:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8007e08 <__ieee754_powf+0x400>
 8007e14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007e18:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8007e1c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e24:	f73f aef6 	bgt.w	8007c14 <__ieee754_powf+0x20c>
 8007e28:	15db      	asrs	r3, r3, #23
 8007e2a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8007e2e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007e32:	4103      	asrs	r3, r0
 8007e34:	4423      	add	r3, r4
 8007e36:	4949      	ldr	r1, [pc, #292]	; (8007f5c <__ieee754_powf+0x554>)
 8007e38:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007e3c:	3a7f      	subs	r2, #127	; 0x7f
 8007e3e:	4111      	asrs	r1, r2
 8007e40:	ea23 0101 	bic.w	r1, r3, r1
 8007e44:	ee07 1a10 	vmov	s14, r1
 8007e48:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007e50:	f1c2 0217 	rsb	r2, r2, #23
 8007e54:	4110      	asrs	r0, r2
 8007e56:	2c00      	cmp	r4, #0
 8007e58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e5c:	bfb8      	it	lt
 8007e5e:	4240      	neglt	r0, r0
 8007e60:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8007e64:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8007f60 <__ieee754_powf+0x558>
 8007e68:	ee17 3a10 	vmov	r3, s14
 8007e6c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007e70:	f023 030f 	bic.w	r3, r3, #15
 8007e74:	ee07 3a10 	vmov	s14, r3
 8007e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e7c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007e80:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007f64 <__ieee754_powf+0x55c>
 8007e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e88:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8007e8c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8007f68 <__ieee754_powf+0x560>
 8007e90:	eeb0 0a67 	vmov.f32	s0, s15
 8007e94:	eea7 0a26 	vfma.f32	s0, s14, s13
 8007e98:	eeb0 6a40 	vmov.f32	s12, s0
 8007e9c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8007ea0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007ea4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007ea8:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007f6c <__ieee754_powf+0x564>
 8007eac:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8007f70 <__ieee754_powf+0x568>
 8007eb0:	eea7 6a26 	vfma.f32	s12, s14, s13
 8007eb4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8007f74 <__ieee754_powf+0x56c>
 8007eb8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007ebc:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8007f78 <__ieee754_powf+0x570>
 8007ec0:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007ec4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8007f7c <__ieee754_powf+0x574>
 8007ec8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007ecc:	eeb0 6a40 	vmov.f32	s12, s0
 8007ed0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8007ed4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007ed8:	eeb0 7a46 	vmov.f32	s14, s12
 8007edc:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007ee0:	ee20 6a06 	vmul.f32	s12, s0, s12
 8007ee4:	eee0 7a27 	vfma.f32	s15, s0, s15
 8007ee8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ef0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007ef4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007ef8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007efc:	ee10 3a10 	vmov	r3, s0
 8007f00:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007f04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f08:	da1a      	bge.n	8007f40 <__ieee754_powf+0x538>
 8007f0a:	f000 f8b7 	bl	800807c <scalbnf>
 8007f0e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007f12:	e5cd      	b.n	8007ab0 <__ieee754_powf+0xa8>
 8007f14:	4a1a      	ldr	r2, [pc, #104]	; (8007f80 <__ieee754_powf+0x578>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	dd02      	ble.n	8007f20 <__ieee754_powf+0x518>
 8007f1a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8007f84 <__ieee754_powf+0x57c>
 8007f1e:	e67b      	b.n	8007c18 <__ieee754_powf+0x210>
 8007f20:	d108      	bne.n	8007f34 <__ieee754_powf+0x52c>
 8007f22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007f26:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f2e:	f6ff af7b 	blt.w	8007e28 <__ieee754_powf+0x420>
 8007f32:	e7f2      	b.n	8007f1a <__ieee754_powf+0x512>
 8007f34:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8007f38:	f73f af76 	bgt.w	8007e28 <__ieee754_powf+0x420>
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	e78f      	b.n	8007e60 <__ieee754_powf+0x458>
 8007f40:	ee00 3a10 	vmov	s0, r3
 8007f44:	e7e3      	b.n	8007f0e <__ieee754_powf+0x506>
 8007f46:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007f4a:	e5b1      	b.n	8007ab0 <__ieee754_powf+0xa8>
 8007f4c:	eeb0 0a68 	vmov.f32	s0, s17
 8007f50:	e5ae      	b.n	8007ab0 <__ieee754_powf+0xa8>
 8007f52:	eeb0 0a48 	vmov.f32	s0, s16
 8007f56:	e5ab      	b.n	8007ab0 <__ieee754_powf+0xa8>
 8007f58:	2600      	movs	r6, #0
 8007f5a:	e590      	b.n	8007a7e <__ieee754_powf+0x76>
 8007f5c:	007fffff 	.word	0x007fffff
 8007f60:	3f317218 	.word	0x3f317218
 8007f64:	35bfbe8c 	.word	0x35bfbe8c
 8007f68:	3f317200 	.word	0x3f317200
 8007f6c:	3331bb4c 	.word	0x3331bb4c
 8007f70:	b5ddea0e 	.word	0xb5ddea0e
 8007f74:	388ab355 	.word	0x388ab355
 8007f78:	bb360b61 	.word	0xbb360b61
 8007f7c:	3e2aaaab 	.word	0x3e2aaaab
 8007f80:	43160000 	.word	0x43160000
 8007f84:	0da24260 	.word	0x0da24260

08007f88 <__ieee754_sqrtf>:
 8007f88:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007f8c:	4770      	bx	lr

08007f8e <fabsf>:
 8007f8e:	ee10 3a10 	vmov	r3, s0
 8007f92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f96:	ee00 3a10 	vmov	s0, r3
 8007f9a:	4770      	bx	lr

08007f9c <finitef>:
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007fa2:	9801      	ldr	r0, [sp, #4]
 8007fa4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007fa8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007fac:	bfac      	ite	ge
 8007fae:	2000      	movge	r0, #0
 8007fb0:	2001      	movlt	r0, #1
 8007fb2:	b002      	add	sp, #8
 8007fb4:	4770      	bx	lr
	...

08007fb8 <nanf>:
 8007fb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007fc0 <nanf+0x8>
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	7fc00000 	.word	0x7fc00000

08007fc4 <rintf>:
 8007fc4:	ee10 2a10 	vmov	r2, s0
 8007fc8:	b513      	push	{r0, r1, r4, lr}
 8007fca:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007fce:	397f      	subs	r1, #127	; 0x7f
 8007fd0:	2916      	cmp	r1, #22
 8007fd2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8007fd6:	dc47      	bgt.n	8008068 <rintf+0xa4>
 8007fd8:	b32b      	cbz	r3, 8008026 <rintf+0x62>
 8007fda:	2900      	cmp	r1, #0
 8007fdc:	ee10 3a10 	vmov	r3, s0
 8007fe0:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8007fe4:	da21      	bge.n	800802a <rintf+0x66>
 8007fe6:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8007fea:	425b      	negs	r3, r3
 8007fec:	4921      	ldr	r1, [pc, #132]	; (8008074 <rintf+0xb0>)
 8007fee:	0a5b      	lsrs	r3, r3, #9
 8007ff0:	0d12      	lsrs	r2, r2, #20
 8007ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ff6:	0512      	lsls	r2, r2, #20
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8007ffe:	ee07 3a90 	vmov	s15, r3
 8008002:	edd1 6a00 	vldr	s13, [r1]
 8008006:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800800a:	ed8d 7a01 	vstr	s14, [sp, #4]
 800800e:	eddd 7a01 	vldr	s15, [sp, #4]
 8008012:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008016:	ee17 3a90 	vmov	r3, s15
 800801a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800801e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8008022:	ee00 3a10 	vmov	s0, r3
 8008026:	b002      	add	sp, #8
 8008028:	bd10      	pop	{r4, pc}
 800802a:	4a13      	ldr	r2, [pc, #76]	; (8008078 <rintf+0xb4>)
 800802c:	410a      	asrs	r2, r1
 800802e:	4213      	tst	r3, r2
 8008030:	d0f9      	beq.n	8008026 <rintf+0x62>
 8008032:	0854      	lsrs	r4, r2, #1
 8008034:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8008038:	d006      	beq.n	8008048 <rintf+0x84>
 800803a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800803e:	ea23 0304 	bic.w	r3, r3, r4
 8008042:	fa42 f101 	asr.w	r1, r2, r1
 8008046:	430b      	orrs	r3, r1
 8008048:	4a0a      	ldr	r2, [pc, #40]	; (8008074 <rintf+0xb0>)
 800804a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800804e:	ed90 7a00 	vldr	s14, [r0]
 8008052:	ee07 3a90 	vmov	s15, r3
 8008056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800805a:	edcd 7a01 	vstr	s15, [sp, #4]
 800805e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8008062:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008066:	e7de      	b.n	8008026 <rintf+0x62>
 8008068:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800806c:	d3db      	bcc.n	8008026 <rintf+0x62>
 800806e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008072:	e7d8      	b.n	8008026 <rintf+0x62>
 8008074:	080084bc 	.word	0x080084bc
 8008078:	007fffff 	.word	0x007fffff

0800807c <scalbnf>:
 800807c:	ee10 3a10 	vmov	r3, s0
 8008080:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008084:	d025      	beq.n	80080d2 <scalbnf+0x56>
 8008086:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800808a:	d302      	bcc.n	8008092 <scalbnf+0x16>
 800808c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008090:	4770      	bx	lr
 8008092:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008096:	d122      	bne.n	80080de <scalbnf+0x62>
 8008098:	4b2a      	ldr	r3, [pc, #168]	; (8008144 <scalbnf+0xc8>)
 800809a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008148 <scalbnf+0xcc>
 800809e:	4298      	cmp	r0, r3
 80080a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80080a4:	db16      	blt.n	80080d4 <scalbnf+0x58>
 80080a6:	ee10 3a10 	vmov	r3, s0
 80080aa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80080ae:	3a19      	subs	r2, #25
 80080b0:	4402      	add	r2, r0
 80080b2:	2afe      	cmp	r2, #254	; 0xfe
 80080b4:	dd15      	ble.n	80080e2 <scalbnf+0x66>
 80080b6:	ee10 3a10 	vmov	r3, s0
 80080ba:	eddf 7a24 	vldr	s15, [pc, #144]	; 800814c <scalbnf+0xd0>
 80080be:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008150 <scalbnf+0xd4>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	eeb0 7a67 	vmov.f32	s14, s15
 80080c8:	bfb8      	it	lt
 80080ca:	eef0 7a66 	vmovlt.f32	s15, s13
 80080ce:	ee27 0a27 	vmul.f32	s0, s14, s15
 80080d2:	4770      	bx	lr
 80080d4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008154 <scalbnf+0xd8>
 80080d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80080dc:	4770      	bx	lr
 80080de:	0dd2      	lsrs	r2, r2, #23
 80080e0:	e7e6      	b.n	80080b0 <scalbnf+0x34>
 80080e2:	2a00      	cmp	r2, #0
 80080e4:	dd06      	ble.n	80080f4 <scalbnf+0x78>
 80080e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80080ea:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80080ee:	ee00 3a10 	vmov	s0, r3
 80080f2:	4770      	bx	lr
 80080f4:	f112 0f16 	cmn.w	r2, #22
 80080f8:	da1a      	bge.n	8008130 <scalbnf+0xb4>
 80080fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80080fe:	4298      	cmp	r0, r3
 8008100:	ee10 3a10 	vmov	r3, s0
 8008104:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008108:	dd0a      	ble.n	8008120 <scalbnf+0xa4>
 800810a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800814c <scalbnf+0xd0>
 800810e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008150 <scalbnf+0xd4>
 8008112:	eef0 7a40 	vmov.f32	s15, s0
 8008116:	2b00      	cmp	r3, #0
 8008118:	bf18      	it	ne
 800811a:	eeb0 0a47 	vmovne.f32	s0, s14
 800811e:	e7db      	b.n	80080d8 <scalbnf+0x5c>
 8008120:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008154 <scalbnf+0xd8>
 8008124:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008158 <scalbnf+0xdc>
 8008128:	eef0 7a40 	vmov.f32	s15, s0
 800812c:	2b00      	cmp	r3, #0
 800812e:	e7f3      	b.n	8008118 <scalbnf+0x9c>
 8008130:	3219      	adds	r2, #25
 8008132:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008136:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800813a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800815c <scalbnf+0xe0>
 800813e:	ee07 3a10 	vmov	s14, r3
 8008142:	e7c4      	b.n	80080ce <scalbnf+0x52>
 8008144:	ffff3cb0 	.word	0xffff3cb0
 8008148:	4c000000 	.word	0x4c000000
 800814c:	7149f2ca 	.word	0x7149f2ca
 8008150:	f149f2ca 	.word	0xf149f2ca
 8008154:	0da24260 	.word	0x0da24260
 8008158:	8da24260 	.word	0x8da24260
 800815c:	33000000 	.word	0x33000000

08008160 <_init>:
 8008160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008162:	bf00      	nop
 8008164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008166:	bc08      	pop	{r3}
 8008168:	469e      	mov	lr, r3
 800816a:	4770      	bx	lr

0800816c <_fini>:
 800816c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816e:	bf00      	nop
 8008170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008172:	bc08      	pop	{r3}
 8008174:	469e      	mov	lr, r3
 8008176:	4770      	bx	lr
