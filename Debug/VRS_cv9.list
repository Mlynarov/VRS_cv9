
VRS_cv9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000329c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003424  08003424  00013424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003450  08003450  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08003450  08003450  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003450  08003450  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003450  08003450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003454  08003454  00013454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08003458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          0000003c  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000044  20000044  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007415  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017c6  00000000  00000000  0002744d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000838  00000000  00000000  00028c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000770  00000000  00000000  00029450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c7e  00000000  00000000  00029bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000065f6  00000000  00000000  0004083e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007974f  00000000  00000000  00046e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c0583  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001fc0  00000000  00000000  000c05d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800340c 	.word	0x0800340c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	0800340c 	.word	0x0800340c

080001c8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	619a      	str	r2, [r3, #24]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	683a      	ldr	r2, [r7, #0]
 80001f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <updateDisplay>:
#include "display.h"
uint8_t updateDigit = 1;
uint8_t displayTextPos = 0;
uint8_t direction = 0;

void updateDisplay(){
 8000200:	b5b0      	push	{r4, r5, r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
	char displayString[] = "MICHAL_MOLnAr_98352";
 8000206:	4b41      	ldr	r3, [pc, #260]	; (800030c <updateDisplay+0x10c>)
 8000208:	463c      	mov	r4, r7
 800020a:	461d      	mov	r5, r3
 800020c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800020e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000210:	682b      	ldr	r3, [r5, #0]
 8000212:	6023      	str	r3, [r4, #0]
	for(int i = 1; i<5; i++){
 8000214:	2301      	movs	r3, #1
 8000216:	617b      	str	r3, [r7, #20]
 8000218:	e06f      	b.n	80002fa <updateDisplay+0xfa>
		switch(updateDigit){
 800021a:	4b3d      	ldr	r3, [pc, #244]	; (8000310 <updateDisplay+0x110>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3b01      	subs	r3, #1
 8000220:	2b03      	cmp	r3, #3
 8000222:	d856      	bhi.n	80002d2 <updateDisplay+0xd2>
 8000224:	a201      	add	r2, pc, #4	; (adr r2, 800022c <updateDisplay+0x2c>)
 8000226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800022a:	bf00      	nop
 800022c:	0800023d 	.word	0x0800023d
 8000230:	0800025f 	.word	0x0800025f
 8000234:	08000285 	.word	0x08000285
 8000238:	080002ad 	.word	0x080002ad
				case 1:
					DIGIT_1_ON;
 800023c:	2101      	movs	r1, #1
 800023e:	4835      	ldr	r0, [pc, #212]	; (8000314 <updateDisplay+0x114>)
 8000240:	f7ff ffc2 	bl	80001c8 <LL_GPIO_SetOutputPin>
					resetAllSegments();
 8000244:	f000 fa02 	bl	800064c <resetAllSegments>
					displayLetter(displayString[displayTextPos]);
 8000248:	4b33      	ldr	r3, [pc, #204]	; (8000318 <updateDisplay+0x118>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	f107 0218 	add.w	r2, r7, #24
 8000250:	4413      	add	r3, r2
 8000252:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000256:	4618      	mov	r0, r3
 8000258:	f000 f8ae 	bl	80003b8 <displayLetter>
					break;
 800025c:	e039      	b.n	80002d2 <updateDisplay+0xd2>
				case 2:
					DIGIT_2_ON;
 800025e:	2110      	movs	r1, #16
 8000260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000264:	f7ff ffb0 	bl	80001c8 <LL_GPIO_SetOutputPin>
					resetAllSegments();
 8000268:	f000 f9f0 	bl	800064c <resetAllSegments>
					displayLetter(displayString[displayTextPos+1]);
 800026c:	4b2a      	ldr	r3, [pc, #168]	; (8000318 <updateDisplay+0x118>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	3301      	adds	r3, #1
 8000272:	f107 0218 	add.w	r2, r7, #24
 8000276:	4413      	add	r3, r2
 8000278:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f89b 	bl	80003b8 <displayLetter>
					break;
 8000282:	e026      	b.n	80002d2 <updateDisplay+0xd2>
				case 3:
					DIGIT_3_ON;
 8000284:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028c:	f7ff ff9c 	bl	80001c8 <LL_GPIO_SetOutputPin>
					resetAllSegments();
 8000290:	f000 f9dc 	bl	800064c <resetAllSegments>
					displayLetter(displayString[displayTextPos+2]);
 8000294:	4b20      	ldr	r3, [pc, #128]	; (8000318 <updateDisplay+0x118>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	3302      	adds	r3, #2
 800029a:	f107 0218 	add.w	r2, r7, #24
 800029e:	4413      	add	r3, r2
 80002a0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f887 	bl	80003b8 <displayLetter>
					break;
 80002aa:	e012      	b.n	80002d2 <updateDisplay+0xd2>
				case 4:
					DIGIT_4_ON;
 80002ac:	2104      	movs	r1, #4
 80002ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b2:	f7ff ff89 	bl	80001c8 <LL_GPIO_SetOutputPin>
					resetAllSegments();
 80002b6:	f000 f9c9 	bl	800064c <resetAllSegments>
					displayLetter(displayString[displayTextPos+3]);
 80002ba:	4b17      	ldr	r3, [pc, #92]	; (8000318 <updateDisplay+0x118>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	3303      	adds	r3, #3
 80002c0:	f107 0218 	add.w	r2, r7, #24
 80002c4:	4413      	add	r3, r2
 80002c6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f874 	bl	80003b8 <displayLetter>
					break;
 80002d0:	bf00      	nop
			}
			updateDigit = (updateDigit < 4) ? updateDigit+1 : 1;
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <updateDisplay+0x110>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b03      	cmp	r3, #3
 80002d8:	d804      	bhi.n	80002e4 <updateDisplay+0xe4>
 80002da:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <updateDisplay+0x110>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	3301      	adds	r3, #1
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	e000      	b.n	80002e6 <updateDisplay+0xe6>
 80002e4:	2301      	movs	r3, #1
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <updateDisplay+0x110>)
 80002e8:	7013      	strb	r3, [r2, #0]
			LL_mDelay(2);
 80002ea:	2002      	movs	r0, #2
 80002ec:	f003 f82c 	bl	8003348 <LL_mDelay>
			resetAllDigits();
 80002f0:	f000 f9da 	bl	80006a8 <resetAllDigits>
	for(int i = 1; i<5; i++){
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	3301      	adds	r3, #1
 80002f8:	617b      	str	r3, [r7, #20]
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	2b04      	cmp	r3, #4
 80002fe:	dd8c      	ble.n	800021a <updateDisplay+0x1a>
	}

}
 8000300:	bf00      	nop
 8000302:	bf00      	nop
 8000304:	3718      	adds	r7, #24
 8000306:	46bd      	mov	sp, r7
 8000308:	bdb0      	pop	{r4, r5, r7, pc}
 800030a:	bf00      	nop
 800030c:	08003424 	.word	0x08003424
 8000310:	20000000 	.word	0x20000000
 8000314:	48000400 	.word	0x48000400
 8000318:	20000024 	.word	0x20000024

0800031c <shiftDisplayText>:

void shiftDisplayText(){
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	if(displayTextPos < (20-4-1) && direction == 0){
 8000320:	4b23      	ldr	r3, [pc, #140]	; (80003b0 <shiftDisplayText+0x94>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b0e      	cmp	r3, #14
 8000326:	d80a      	bhi.n	800033e <shiftDisplayText+0x22>
 8000328:	4b22      	ldr	r3, [pc, #136]	; (80003b4 <shiftDisplayText+0x98>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d106      	bne.n	800033e <shiftDisplayText+0x22>
		displayTextPos = displayTextPos+1;
 8000330:	4b1f      	ldr	r3, [pc, #124]	; (80003b0 <shiftDisplayText+0x94>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	3301      	adds	r3, #1
 8000336:	b2da      	uxtb	r2, r3
 8000338:	4b1d      	ldr	r3, [pc, #116]	; (80003b0 <shiftDisplayText+0x94>)
 800033a:	701a      	strb	r2, [r3, #0]
 800033c:	e032      	b.n	80003a4 <shiftDisplayText+0x88>
	}
	else if(displayTextPos >= (20-4-1) && direction == 0){
 800033e:	4b1c      	ldr	r3, [pc, #112]	; (80003b0 <shiftDisplayText+0x94>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b0e      	cmp	r3, #14
 8000344:	d90d      	bls.n	8000362 <shiftDisplayText+0x46>
 8000346:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <shiftDisplayText+0x98>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d109      	bne.n	8000362 <shiftDisplayText+0x46>
		direction = 1;
 800034e:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <shiftDisplayText+0x98>)
 8000350:	2201      	movs	r2, #1
 8000352:	701a      	strb	r2, [r3, #0]
		displayTextPos = displayTextPos-1;
 8000354:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <shiftDisplayText+0x94>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	3b01      	subs	r3, #1
 800035a:	b2da      	uxtb	r2, r3
 800035c:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <shiftDisplayText+0x94>)
 800035e:	701a      	strb	r2, [r3, #0]
 8000360:	e020      	b.n	80003a4 <shiftDisplayText+0x88>
	}
	else if(displayTextPos <= 0 && direction == 1){
 8000362:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <shiftDisplayText+0x94>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d10d      	bne.n	8000386 <shiftDisplayText+0x6a>
 800036a:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <shiftDisplayText+0x98>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b01      	cmp	r3, #1
 8000370:	d109      	bne.n	8000386 <shiftDisplayText+0x6a>
		direction = 0;
 8000372:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <shiftDisplayText+0x98>)
 8000374:	2200      	movs	r2, #0
 8000376:	701a      	strb	r2, [r3, #0]
		displayTextPos = displayTextPos+1;
 8000378:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <shiftDisplayText+0x94>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	3301      	adds	r3, #1
 800037e:	b2da      	uxtb	r2, r3
 8000380:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <shiftDisplayText+0x94>)
 8000382:	701a      	strb	r2, [r3, #0]
 8000384:	e00e      	b.n	80003a4 <shiftDisplayText+0x88>
	}
	else if(displayTextPos > 0 && direction == 1){
 8000386:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <shiftDisplayText+0x94>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00a      	beq.n	80003a4 <shiftDisplayText+0x88>
 800038e:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <shiftDisplayText+0x98>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d106      	bne.n	80003a4 <shiftDisplayText+0x88>
		displayTextPos = displayTextPos-1;
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <shiftDisplayText+0x94>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	3b01      	subs	r3, #1
 800039c:	b2da      	uxtb	r2, r3
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <shiftDisplayText+0x94>)
 80003a0:	701a      	strb	r2, [r3, #0]
	}
}
 80003a2:	e7ff      	b.n	80003a4 <shiftDisplayText+0x88>
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	20000024 	.word	0x20000024
 80003b4:	20000025 	.word	0x20000025

080003b8 <displayLetter>:

void displayLetter(char letter){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]
	switch(letter){
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	3b20      	subs	r3, #32
 80003c6:	2b59      	cmp	r3, #89	; 0x59
 80003c8:	f200 8139 	bhi.w	800063e <displayLetter+0x286>
 80003cc:	a201      	add	r2, pc, #4	; (adr r2, 80003d4 <displayLetter+0x1c>)
 80003ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d2:	bf00      	nop
 80003d4:	080005f7 	.word	0x080005f7
 80003d8:	0800063f 	.word	0x0800063f
 80003dc:	0800063f 	.word	0x0800063f
 80003e0:	0800063f 	.word	0x0800063f
 80003e4:	0800063f 	.word	0x0800063f
 80003e8:	0800063f 	.word	0x0800063f
 80003ec:	0800063f 	.word	0x0800063f
 80003f0:	0800063f 	.word	0x0800063f
 80003f4:	0800063f 	.word	0x0800063f
 80003f8:	0800063f 	.word	0x0800063f
 80003fc:	0800063f 	.word	0x0800063f
 8000400:	0800063f 	.word	0x0800063f
 8000404:	0800063f 	.word	0x0800063f
 8000408:	0800063f 	.word	0x0800063f
 800040c:	0800063f 	.word	0x0800063f
 8000410:	0800063f 	.word	0x0800063f
 8000414:	08000639 	.word	0x08000639
 8000418:	08000603 	.word	0x08000603
 800041c:	08000609 	.word	0x08000609
 8000420:	0800060f 	.word	0x0800060f
 8000424:	08000615 	.word	0x08000615
 8000428:	0800061b 	.word	0x0800061b
 800042c:	08000621 	.word	0x08000621
 8000430:	08000627 	.word	0x08000627
 8000434:	0800062d 	.word	0x0800062d
 8000438:	08000633 	.word	0x08000633
 800043c:	0800063f 	.word	0x0800063f
 8000440:	0800063f 	.word	0x0800063f
 8000444:	0800063f 	.word	0x0800063f
 8000448:	0800063f 	.word	0x0800063f
 800044c:	0800063f 	.word	0x0800063f
 8000450:	0800063f 	.word	0x0800063f
 8000454:	0800063f 	.word	0x0800063f
 8000458:	0800053d 	.word	0x0800053d
 800045c:	0800063f 	.word	0x0800063f
 8000460:	0800054f 	.word	0x0800054f
 8000464:	0800063f 	.word	0x0800063f
 8000468:	08000561 	.word	0x08000561
 800046c:	08000567 	.word	0x08000567
 8000470:	0800056d 	.word	0x0800056d
 8000474:	08000573 	.word	0x08000573
 8000478:	0800057f 	.word	0x0800057f
 800047c:	08000585 	.word	0x08000585
 8000480:	0800058b 	.word	0x0800058b
 8000484:	08000591 	.word	0x08000591
 8000488:	08000597 	.word	0x08000597
 800048c:	0800063f 	.word	0x0800063f
 8000490:	080005a3 	.word	0x080005a3
 8000494:	080005af 	.word	0x080005af
 8000498:	0800063f 	.word	0x0800063f
 800049c:	0800063f 	.word	0x0800063f
 80004a0:	080005c1 	.word	0x080005c1
 80004a4:	0800063f 	.word	0x0800063f
 80004a8:	080005cd 	.word	0x080005cd
 80004ac:	080005d9 	.word	0x080005d9
 80004b0:	080005df 	.word	0x080005df
 80004b4:	080005e5 	.word	0x080005e5
 80004b8:	0800063f 	.word	0x0800063f
 80004bc:	080005f1 	.word	0x080005f1
 80004c0:	0800063f 	.word	0x0800063f
 80004c4:	0800063f 	.word	0x0800063f
 80004c8:	0800063f 	.word	0x0800063f
 80004cc:	0800063f 	.word	0x0800063f
 80004d0:	080005fd 	.word	0x080005fd
 80004d4:	0800063f 	.word	0x0800063f
 80004d8:	08000543 	.word	0x08000543
 80004dc:	08000549 	.word	0x08000549
 80004e0:	08000555 	.word	0x08000555
 80004e4:	0800055b 	.word	0x0800055b
 80004e8:	0800063f 	.word	0x0800063f
 80004ec:	0800063f 	.word	0x0800063f
 80004f0:	0800063f 	.word	0x0800063f
 80004f4:	08000579 	.word	0x08000579
 80004f8:	0800063f 	.word	0x0800063f
 80004fc:	0800063f 	.word	0x0800063f
 8000500:	0800063f 	.word	0x0800063f
 8000504:	0800063f 	.word	0x0800063f
 8000508:	0800063f 	.word	0x0800063f
 800050c:	0800059d 	.word	0x0800059d
 8000510:	080005a9 	.word	0x080005a9
 8000514:	0800063f 	.word	0x0800063f
 8000518:	080005b5 	.word	0x080005b5
 800051c:	080005bb 	.word	0x080005bb
 8000520:	0800063f 	.word	0x0800063f
 8000524:	080005c7 	.word	0x080005c7
 8000528:	080005d3 	.word	0x080005d3
 800052c:	0800063f 	.word	0x0800063f
 8000530:	0800063f 	.word	0x0800063f
 8000534:	0800063f 	.word	0x0800063f
 8000538:	080005eb 	.word	0x080005eb
		case 'A':
			setA();
 800053c:	f000 f8d2 	bl	80006e4 <setA>
			break;
 8000540:	e080      	b.n	8000644 <displayLetter+0x28c>
		case 'a':
			seta();
 8000542:	f000 f8f9 	bl	8000738 <seta>
			break;
 8000546:	e07d      	b.n	8000644 <displayLetter+0x28c>
		case 'b':
			setb();
 8000548:	f000 f920 	bl	800078c <setb>
			break;
 800054c:	e07a      	b.n	8000644 <displayLetter+0x28c>
		case 'C':
			setC();
 800054e:	f000 f947 	bl	80007e0 <setC>
			break;
 8000552:	e077      	b.n	8000644 <displayLetter+0x28c>
		case 'c':
			setc();
 8000554:	f000 f96e 	bl	8000834 <setc>
			break;
 8000558:	e074      	b.n	8000644 <displayLetter+0x28c>
		case 'd':
			setd();
 800055a:	f000 f995 	bl	8000888 <setd>
			break;
 800055e:	e071      	b.n	8000644 <displayLetter+0x28c>
		case 'E':
			setE();
 8000560:	f000 f9bc 	bl	80008dc <setE>
			break;
 8000564:	e06e      	b.n	8000644 <displayLetter+0x28c>
		case 'F':
			setF();
 8000566:	f000 f9e3 	bl	8000930 <setF>
			break;
 800056a:	e06b      	b.n	8000644 <displayLetter+0x28c>
		case 'G':
			setG();
 800056c:	f000 fa0a 	bl	8000984 <setG>
			break;
 8000570:	e068      	b.n	8000644 <displayLetter+0x28c>
		case 'H':
			setH();
 8000572:	f000 fa31 	bl	80009d8 <setH>
			break;
 8000576:	e065      	b.n	8000644 <displayLetter+0x28c>
		case 'h':
			seth();
 8000578:	f000 fa58 	bl	8000a2c <seth>
			break;
 800057c:	e062      	b.n	8000644 <displayLetter+0x28c>
		case 'I':
			setI();
 800057e:	f000 fa7f 	bl	8000a80 <setI>
			break;
 8000582:	e05f      	b.n	8000644 <displayLetter+0x28c>
		case 'J':
			setJ();
 8000584:	f000 faa6 	bl	8000ad4 <setJ>
			break;
 8000588:	e05c      	b.n	8000644 <displayLetter+0x28c>
		case 'K':
			setK();
 800058a:	f000 fcc5 	bl	8000f18 <setK>
			break;
 800058e:	e059      	b.n	8000644 <displayLetter+0x28c>
		case 'L':
			setL();
 8000590:	f000 faca 	bl	8000b28 <setL>
			break;
 8000594:	e056      	b.n	8000644 <displayLetter+0x28c>
		case 'M':
			setM();
 8000596:	f000 fce9 	bl	8000f6c <setM>
			break;
 800059a:	e053      	b.n	8000644 <displayLetter+0x28c>
		case 'n':
			setn();
 800059c:	f000 faee 	bl	8000b7c <setn>
			break;
 80005a0:	e050      	b.n	8000644 <displayLetter+0x28c>
		case 'O':
			setO();
 80005a2:	f000 fb15 	bl	8000bd0 <setO>
			break;
 80005a6:	e04d      	b.n	8000644 <displayLetter+0x28c>
		case 'o':
			seto();
 80005a8:	f000 fb3c 	bl	8000c24 <seto>
			break;
 80005ac:	e04a      	b.n	8000644 <displayLetter+0x28c>
		case 'P':
			setP();
 80005ae:	f000 fb63 	bl	8000c78 <setP>
			break;
 80005b2:	e047      	b.n	8000644 <displayLetter+0x28c>
		case 'q':
			setq();
 80005b4:	f000 fb8a 	bl	8000ccc <setq>
			break;
 80005b8:	e044      	b.n	8000644 <displayLetter+0x28c>
		case 'r':
			setr();
 80005ba:	f000 fbb1 	bl	8000d20 <setr>
			break;
 80005be:	e041      	b.n	8000644 <displayLetter+0x28c>
		case 'S':
			setS();
 80005c0:	f000 fbd8 	bl	8000d74 <setS>
			break;
 80005c4:	e03e      	b.n	8000644 <displayLetter+0x28c>
		case 't':
			sett();
 80005c6:	f000 fbff 	bl	8000dc8 <sett>
			break;
 80005ca:	e03b      	b.n	8000644 <displayLetter+0x28c>
		case 'U':
			setU();
 80005cc:	f000 fc26 	bl	8000e1c <setU>
			break;
 80005d0:	e038      	b.n	8000644 <displayLetter+0x28c>
		case 'u':
			setu();
 80005d2:	f000 fc4d 	bl	8000e70 <setu>
			break;
 80005d6:	e035      	b.n	8000644 <displayLetter+0x28c>
		case 'V':
			setV();
 80005d8:	f000 fcee 	bl	8000fb8 <setV>
			break;
 80005dc:	e032      	b.n	8000644 <displayLetter+0x28c>
		case 'W':
			setW();
 80005de:	f000 fd15 	bl	800100c <setW>
			break;
 80005e2:	e02f      	b.n	8000644 <displayLetter+0x28c>
		case 'X':
			setX();
 80005e4:	f000 fd3c 	bl	8001060 <setX>
			break;
 80005e8:	e02c      	b.n	8000644 <displayLetter+0x28c>
		case 'y':
			sety();
 80005ea:	f000 fc6b 	bl	8000ec4 <sety>
			break;
 80005ee:	e029      	b.n	8000644 <displayLetter+0x28c>
		case 'Z':
			setZ();
 80005f0:	f000 fd60 	bl	80010b4 <setZ>
			break;
 80005f4:	e026      	b.n	8000644 <displayLetter+0x28c>
		case ' ':
			resetAllSegments();
 80005f6:	f000 f829 	bl	800064c <resetAllSegments>
			break;
 80005fa:	e023      	b.n	8000644 <displayLetter+0x28c>
		case '_':
			setLine();
 80005fc:	f000 ff28 	bl	8001450 <setLine>
			break;
 8000600:	e020      	b.n	8000644 <displayLetter+0x28c>


		case '1':
			setOne();
 8000602:	f000 fd81 	bl	8001108 <setOne>
			break;
 8000606:	e01d      	b.n	8000644 <displayLetter+0x28c>
		case '2':
			setTwo();
 8000608:	f000 fda8 	bl	800115c <setTwo>
			break;
 800060c:	e01a      	b.n	8000644 <displayLetter+0x28c>
		case '3':
			setThree();
 800060e:	f000 fdcf 	bl	80011b0 <setThree>
			break;
 8000612:	e017      	b.n	8000644 <displayLetter+0x28c>
		case '4':
			setFour();
 8000614:	f000 fdf6 	bl	8001204 <setFour>
			break;
 8000618:	e014      	b.n	8000644 <displayLetter+0x28c>
		case '5':
			setFive();
 800061a:	f000 fe1d 	bl	8001258 <setFive>
			break;
 800061e:	e011      	b.n	8000644 <displayLetter+0x28c>
		case '6':
			setSix();
 8000620:	f000 fe44 	bl	80012ac <setSix>
			break;
 8000624:	e00e      	b.n	8000644 <displayLetter+0x28c>
		case '7':
			setSeven();
 8000626:	f000 fe6b 	bl	8001300 <setSeven>
			break;
 800062a:	e00b      	b.n	8000644 <displayLetter+0x28c>
		case '8':
			setEight();
 800062c:	f000 fe92 	bl	8001354 <setEight>
			break;
 8000630:	e008      	b.n	8000644 <displayLetter+0x28c>
		case '9':
			setNine();
 8000632:	f000 feb9 	bl	80013a8 <setNine>
			break;
 8000636:	e005      	b.n	8000644 <displayLetter+0x28c>
		case '0':
			setZero();
 8000638:	f000 fee0 	bl	80013fc <setZero>
			break;
 800063c:	e002      	b.n	8000644 <displayLetter+0x28c>
		default:
			setDot();
 800063e:	f000 ff35 	bl	80014ac <setDot>
			break;
 8000642:	bf00      	nop
	}
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <resetAllSegments>:
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
}

void resetAllSegments(void){
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000650:	2102      	movs	r1, #2
 8000652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000656:	f7ff fdb7 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800065a:	2101      	movs	r1, #1
 800065c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000660:	f7ff fdb2 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000664:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066c:	f7ff fdac 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000670:	2120      	movs	r1, #32
 8000672:	480c      	ldr	r0, [pc, #48]	; (80006a4 <resetAllSegments+0x58>)
 8000674:	f7ff fda8 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000678:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800067c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000680:	f7ff fda2 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000684:	2108      	movs	r1, #8
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f7ff fd9d 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800068e:	2110      	movs	r1, #16
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <resetAllSegments+0x58>)
 8000692:	f7ff fd99 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentDP_Pin);
 8000696:	2102      	movs	r1, #2
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <resetAllSegments+0x58>)
 800069a:	f7ff fd95 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	48000400 	.word	0x48000400

080006a8 <resetAllDigits>:

void resetAllDigits(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 80006ac:	2104      	movs	r1, #4
 80006ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b2:	f7ff fd97 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 80006b6:	2120      	movs	r1, #32
 80006b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006bc:	f7ff fd92 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80006c0:	2110      	movs	r1, #16
 80006c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c6:	f7ff fd8d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 80006ca:	2140      	movs	r1, #64	; 0x40
 80006cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d0:	f7ff fd88 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006da:	f7ff fd83 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <setA>:

void setA(void){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80006e8:	2102      	movs	r1, #2
 80006ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ee:	f7ff fd79 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80006f2:	2101      	movs	r1, #1
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f8:	f7ff fd74 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80006fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000704:	f7ff fd6e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000708:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800070c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000710:	f7ff fd68 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000714:	2108      	movs	r1, #8
 8000716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071a:	f7ff fd63 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800071e:	2110      	movs	r1, #16
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <setA+0x50>)
 8000722:	f7ff fd5f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	// reset D
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000726:	2120      	movs	r1, #32
 8000728:	4802      	ldr	r0, [pc, #8]	; (8000734 <setA+0x50>)
 800072a:	f7ff fd4d 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	48000400 	.word	0x48000400

08000738 <seta>:
void seta(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800073c:	2102      	movs	r1, #2
 800073e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000742:	f7ff fd4f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000746:	2101      	movs	r1, #1
 8000748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074c:	f7ff fd4a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000750:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000758:	f7ff fd44 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800075c:	2120      	movs	r1, #32
 800075e:	480a      	ldr	r0, [pc, #40]	; (8000788 <seta+0x50>)
 8000760:	f7ff fd40 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000764:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076c:	f7ff fd3a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000770:	2110      	movs	r1, #16
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <seta+0x50>)
 8000774:	f7ff fd36 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	// reset f
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000778:	2108      	movs	r1, #8
 800077a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077e:	f7ff fd23 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	48000400 	.word	0x48000400

0800078c <setb>:
void setb(void){
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000790:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000798:	f7ff fd24 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800079c:	2120      	movs	r1, #32
 800079e:	480f      	ldr	r0, [pc, #60]	; (80007dc <setb+0x50>)
 80007a0:	f7ff fd20 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80007a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f7ff fd1a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80007b0:	2108      	movs	r1, #8
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b6:	f7ff fd15 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80007ba:	2110      	movs	r1, #16
 80007bc:	4807      	ldr	r0, [pc, #28]	; (80007dc <setb+0x50>)
 80007be:	f7ff fd11 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	// reset a,b
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80007c2:	2102      	movs	r1, #2
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c8:	f7ff fcfe 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80007cc:	2101      	movs	r1, #1
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d2:	f7ff fcf9 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	48000400 	.word	0x48000400

080007e0 <setC>:
void setC(void){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80007e4:	2102      	movs	r1, #2
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ea:	f7ff fcfb 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80007ee:	2120      	movs	r1, #32
 80007f0:	480f      	ldr	r0, [pc, #60]	; (8000830 <setC+0x50>)
 80007f2:	f7ff fcf7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80007f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fe:	f7ff fcf1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000802:	2108      	movs	r1, #8
 8000804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000808:	f7ff fcec 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	// reset B,C,G
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800080c:	2101      	movs	r1, #1
 800080e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000812:	f7ff fcd9 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081e:	f7ff fcd3 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000822:	2110      	movs	r1, #16
 8000824:	4802      	ldr	r0, [pc, #8]	; (8000830 <setC+0x50>)
 8000826:	f7ff fccf 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	48000400 	.word	0x48000400

08000834 <setc>:
void setc(void){
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000838:	2120      	movs	r1, #32
 800083a:	4812      	ldr	r0, [pc, #72]	; (8000884 <setc+0x50>)
 800083c:	f7ff fcd2 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000840:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000848:	f7ff fccc 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800084c:	2110      	movs	r1, #16
 800084e:	480d      	ldr	r0, [pc, #52]	; (8000884 <setc+0x50>)
 8000850:	f7ff fcc8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000854:	2102      	movs	r1, #2
 8000856:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085a:	f7ff fcb5 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800085e:	2101      	movs	r1, #1
 8000860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000864:	f7ff fcb0 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000868:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000870:	f7ff fcaa 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000874:	2108      	movs	r1, #8
 8000876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087a:	f7ff fca5 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	48000400 	.word	0x48000400

08000888 <setd>:
void setd(void){
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800088c:	2101      	movs	r1, #1
 800088e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000892:	f7ff fca7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000896:	f44f 7180 	mov.w	r1, #256	; 0x100
 800089a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089e:	f7ff fca1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80008a2:	2120      	movs	r1, #32
 80008a4:	480c      	ldr	r0, [pc, #48]	; (80008d8 <setd+0x50>)
 80008a6:	f7ff fc9d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80008aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b2:	f7ff fc97 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80008b6:	2110      	movs	r1, #16
 80008b8:	4807      	ldr	r0, [pc, #28]	; (80008d8 <setd+0x50>)
 80008ba:	f7ff fc93 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80008be:	2102      	movs	r1, #2
 80008c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c4:	f7ff fc80 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80008c8:	2108      	movs	r1, #8
 80008ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ce:	f7ff fc7b 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	48000400 	.word	0x48000400

080008dc <setE>:
void setE(void){
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80008e0:	2102      	movs	r1, #2
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e6:	f7ff fc7d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80008ea:	2120      	movs	r1, #32
 80008ec:	480f      	ldr	r0, [pc, #60]	; (800092c <setE+0x50>)
 80008ee:	f7ff fc79 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80008f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fa:	f7ff fc73 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80008fe:	2108      	movs	r1, #8
 8000900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000904:	f7ff fc6e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000908:	2110      	movs	r1, #16
 800090a:	4808      	ldr	r0, [pc, #32]	; (800092c <setE+0x50>)
 800090c:	f7ff fc6a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000910:	2101      	movs	r1, #1
 8000912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000916:	f7ff fc57 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800091a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800091e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000922:	f7ff fc51 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	48000400 	.word	0x48000400

08000930 <setF>:
void setF(void){
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000934:	2102      	movs	r1, #2
 8000936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093a:	f7ff fc53 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800093e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000946:	f7ff fc4d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800094a:	2108      	movs	r1, #8
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f7ff fc48 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000954:	2110      	movs	r1, #16
 8000956:	480a      	ldr	r0, [pc, #40]	; (8000980 <setF+0x50>)
 8000958:	f7ff fc44 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800095c:	2101      	movs	r1, #1
 800095e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000962:	f7ff fc31 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000966:	f44f 7180 	mov.w	r1, #256	; 0x100
 800096a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096e:	f7ff fc2b 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000972:	2120      	movs	r1, #32
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <setF+0x50>)
 8000976:	f7ff fc27 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	48000400 	.word	0x48000400

08000984 <setG>:
void setG(void){
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000988:	2102      	movs	r1, #2
 800098a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098e:	f7ff fc29 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f7ff fc23 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800099e:	2120      	movs	r1, #32
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <setG+0x50>)
 80009a2:	f7ff fc1f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80009a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ae:	f7ff fc19 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80009b2:	2108      	movs	r1, #8
 80009b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b8:	f7ff fc14 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80009bc:	2101      	movs	r1, #1
 80009be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c2:	f7ff fc01 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 80009c6:	2110      	movs	r1, #16
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <setG+0x50>)
 80009ca:	f7ff fbfd 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	48000400 	.word	0x48000400

080009d8 <setH>:
void setH(void){
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80009dc:	2101      	movs	r1, #1
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f7ff fbff 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80009e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ee:	f7ff fbf9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80009f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fa:	f7ff fbf3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80009fe:	2108      	movs	r1, #8
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a04:	f7ff fbee 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000a08:	2110      	movs	r1, #16
 8000a0a:	4807      	ldr	r0, [pc, #28]	; (8000a28 <setH+0x50>)
 8000a0c:	f7ff fbea 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000a10:	2102      	movs	r1, #2
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a16:	f7ff fbd7 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000a1a:	2120      	movs	r1, #32
 8000a1c:	4802      	ldr	r0, [pc, #8]	; (8000a28 <setH+0x50>)
 8000a1e:	f7ff fbd3 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	48000400 	.word	0x48000400

08000a2c <seth>:
void seth(void){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000a30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a38:	f7ff fbd4 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000a3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a44:	f7ff fbce 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000a48:	2108      	movs	r1, #8
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4e:	f7ff fbc9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000a52:	2110      	movs	r1, #16
 8000a54:	4809      	ldr	r0, [pc, #36]	; (8000a7c <seth+0x50>)
 8000a56:	f7ff fbc5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a60:	f7ff fbb2 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000a64:	2101      	movs	r1, #1
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f7ff fbad 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000a6e:	2120      	movs	r1, #32
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <seth+0x50>)
 8000a72:	f7ff fba9 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	48000400 	.word	0x48000400

08000a80 <setI>:
void setI(void){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000a84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8c:	f7ff fbaa 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000a90:	2108      	movs	r1, #8
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a96:	f7ff fba5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa0:	f7ff fb92 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aaa:	f7ff fb8d 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab6:	f7ff fb87 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000aba:	2120      	movs	r1, #32
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <setI+0x50>)
 8000abe:	f7ff fb83 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000ac2:	2110      	movs	r1, #16
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <setI+0x50>)
 8000ac6:	f7ff fb7f 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	48000400 	.word	0x48000400

08000ad4 <setJ>:
void setJ(void){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000ad8:	2101      	movs	r1, #1
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ade:	f7ff fb81 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000ae2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aea:	f7ff fb7b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000aee:	2120      	movs	r1, #32
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <setJ+0x50>)
 8000af2:	f7ff fb77 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000af6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afe:	f7ff fb71 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000b02:	2102      	movs	r1, #2
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b08:	f7ff fb5e 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000b0c:	2108      	movs	r1, #8
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b12:	f7ff fb59 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000b16:	2110      	movs	r1, #16
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <setJ+0x50>)
 8000b1a:	f7ff fb55 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	48000400 	.word	0x48000400

08000b28 <setL>:
void setL(void){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000b2c:	2120      	movs	r1, #32
 8000b2e:	4812      	ldr	r0, [pc, #72]	; (8000b78 <setL+0x50>)
 8000b30:	f7ff fb58 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000b34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3c:	f7ff fb52 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000b40:	2108      	movs	r1, #8
 8000b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b46:	f7ff fb4d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000b4a:	2102      	movs	r1, #2
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b50:	f7ff fb3a 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000b54:	2101      	movs	r1, #1
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5a:	f7ff fb35 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000b5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b66:	f7ff fb2f 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000b6a:	2110      	movs	r1, #16
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <setL+0x50>)
 8000b6e:	f7ff fb2b 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	48000400 	.word	0x48000400

08000b7c <setn>:
void setn(void){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000b80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f7ff fb2c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000b8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b94:	f7ff fb26 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000b98:	2110      	movs	r1, #16
 8000b9a:	480c      	ldr	r0, [pc, #48]	; (8000bcc <setn+0x50>)
 8000b9c:	f7ff fb22 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba6:	f7ff fb0f 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000baa:	2101      	movs	r1, #1
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb0:	f7ff fb0a 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000bb4:	2120      	movs	r1, #32
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <setn+0x50>)
 8000bb8:	f7ff fb06 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000bbc:	2108      	movs	r1, #8
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc2:	f7ff fb01 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	48000400 	.word	0x48000400

08000bd0 <setO>:
void setO(void){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bda:	f7ff fb03 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000bde:	2101      	movs	r1, #1
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be4:	f7ff fafe 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f7ff faf8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000bf4:	2120      	movs	r1, #32
 8000bf6:	480a      	ldr	r0, [pc, #40]	; (8000c20 <setO+0x50>)
 8000bf8:	f7ff faf4 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000bfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f7ff faee 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000c08:	2108      	movs	r1, #8
 8000c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0e:	f7ff fae9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000c12:	2110      	movs	r1, #16
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <setO+0x50>)
 8000c16:	f7ff fad7 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	48000400 	.word	0x48000400

08000c24 <seto>:
void seto(void){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c30:	f7ff fad8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000c34:	2120      	movs	r1, #32
 8000c36:	480f      	ldr	r0, [pc, #60]	; (8000c74 <seto+0x50>)
 8000c38:	f7ff fad4 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000c3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c44:	f7ff face 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000c48:	2110      	movs	r1, #16
 8000c4a:	480a      	ldr	r0, [pc, #40]	; (8000c74 <seto+0x50>)
 8000c4c:	f7ff faca 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000c50:	2102      	movs	r1, #2
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c56:	f7ff fab7 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c60:	f7ff fab2 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000c64:	2108      	movs	r1, #8
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6a:	f7ff faad 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	48000400 	.word	0x48000400

08000c78 <setP>:
void setP(void){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c82:	f7ff faaf 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000c86:	2101      	movs	r1, #1
 8000c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8c:	f7ff faaa 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000c90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c98:	f7ff faa4 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000c9c:	2108      	movs	r1, #8
 8000c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca2:	f7ff fa9f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000ca6:	2110      	movs	r1, #16
 8000ca8:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <setP+0x50>)
 8000caa:	f7ff fa9b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000cae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb6:	f7ff fa87 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000cba:	2120      	movs	r1, #32
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <setP+0x50>)
 8000cbe:	f7ff fa83 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	48000400 	.word	0x48000400

08000ccc <setq>:
void setq(void){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd6:	f7ff fa85 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000cda:	2101      	movs	r1, #1
 8000cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce0:	f7ff fa80 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000ce4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cec:	f7ff fa7a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf6:	f7ff fa75 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000cfa:	2110      	movs	r1, #16
 8000cfc:	4807      	ldr	r0, [pc, #28]	; (8000d1c <setq+0x50>)
 8000cfe:	f7ff fa71 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000d02:	2120      	movs	r1, #32
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <setq+0x50>)
 8000d06:	f7ff fa5f 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000d0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d12:	f7ff fa59 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	48000400 	.word	0x48000400

08000d20 <setr>:
void setr(void){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000d24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2c:	f7ff fa5a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000d30:	2110      	movs	r1, #16
 8000d32:	480f      	ldr	r0, [pc, #60]	; (8000d70 <setr+0x50>)
 8000d34:	f7ff fa56 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000d38:	2102      	movs	r1, #2
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3e:	f7ff fa43 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000d42:	2101      	movs	r1, #1
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d48:	f7ff fa3e 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d54:	f7ff fa38 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000d58:	2120      	movs	r1, #32
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <setr+0x50>)
 8000d5c:	f7ff fa34 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000d60:	2108      	movs	r1, #8
 8000d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d66:	f7ff fa2f 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	48000400 	.word	0x48000400

08000d74 <setS>:
void setS(void){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000d78:	2102      	movs	r1, #2
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7e:	f7ff fa31 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000d82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8a:	f7ff fa2b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000d8e:	2120      	movs	r1, #32
 8000d90:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <setS+0x50>)
 8000d92:	f7ff fa27 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000d96:	2108      	movs	r1, #8
 8000d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9c:	f7ff fa22 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000da0:	2110      	movs	r1, #16
 8000da2:	4808      	ldr	r0, [pc, #32]	; (8000dc4 <setS+0x50>)
 8000da4:	f7ff fa1e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000da8:	2101      	movs	r1, #1
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dae:	f7ff fa0b 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000db2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dba:	f7ff fa05 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	48000400 	.word	0x48000400

08000dc8 <sett>:
void sett(void){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000dcc:	2120      	movs	r1, #32
 8000dce:	4812      	ldr	r0, [pc, #72]	; (8000e18 <sett+0x50>)
 8000dd0:	f7ff fa08 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000dd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ddc:	f7ff fa02 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000de0:	2108      	movs	r1, #8
 8000de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de6:	f7ff f9fd 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000dea:	2110      	movs	r1, #16
 8000dec:	480a      	ldr	r0, [pc, #40]	; (8000e18 <sett+0x50>)
 8000dee:	f7ff f9f9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000df2:	2102      	movs	r1, #2
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df8:	f7ff f9e6 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e02:	f7ff f9e1 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000e06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0e:	f7ff f9db 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	48000400 	.word	0x48000400

08000e1c <setU>:
void setU(void){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000e20:	2101      	movs	r1, #1
 8000e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e26:	f7ff f9dd 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000e2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e32:	f7ff f9d7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000e36:	2120      	movs	r1, #32
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <setU+0x50>)
 8000e3a:	f7ff f9d3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000e3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e46:	f7ff f9cd 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000e4a:	2108      	movs	r1, #8
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f7ff f9c8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000e54:	2102      	movs	r1, #2
 8000e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5a:	f7ff f9b5 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000e5e:	2110      	movs	r1, #16
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <setU+0x50>)
 8000e62:	f7ff f9b1 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	48000400 	.word	0x48000400

08000e70 <setu>:
void setu(void){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000e74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7c:	f7ff f9b2 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000e80:	2120      	movs	r1, #32
 8000e82:	480f      	ldr	r0, [pc, #60]	; (8000ec0 <setu+0x50>)
 8000e84:	f7ff f9ae 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000e88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e90:	f7ff f9a8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000e94:	2102      	movs	r1, #2
 8000e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9a:	f7ff f995 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea4:	f7ff f990 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000ea8:	2108      	movs	r1, #8
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eae:	f7ff f98b 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000eb2:	2110      	movs	r1, #16
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <setu+0x50>)
 8000eb6:	f7ff f987 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	48000400 	.word	0x48000400

08000ec4 <sety>:
void sety(void){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000ec8:	2101      	movs	r1, #1
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ece:	f7ff f989 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000ed2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eda:	f7ff f983 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000ede:	2120      	movs	r1, #32
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <sety+0x50>)
 8000ee2:	f7ff f97f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000ee6:	2108      	movs	r1, #8
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eec:	f7ff f97a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	4808      	ldr	r0, [pc, #32]	; (8000f14 <sety+0x50>)
 8000ef4:	f7ff f976 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000ef8:	2102      	movs	r1, #2
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efe:	f7ff f963 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000f02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f7ff f95d 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	48000400 	.word	0x48000400

08000f18 <setK>:


// Disgusting letters :D
void setK(void){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f22:	f7ff f95f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000f26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2e:	f7ff f959 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000f32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3a:	f7ff f953 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000f3e:	2108      	movs	r1, #8
 8000f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f44:	f7ff f94e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000f48:	2110      	movs	r1, #16
 8000f4a:	4807      	ldr	r0, [pc, #28]	; (8000f68 <setK+0x50>)
 8000f4c:	f7ff f94a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000f50:	2101      	movs	r1, #1
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f7ff f937 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000f5a:	2120      	movs	r1, #32
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <setK+0x50>)
 8000f5e:	f7ff f933 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	48000400 	.word	0x48000400

08000f6c <setM>:
void setM(void){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000f70:	2102      	movs	r1, #2
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f76:	f7ff f935 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f80:	f7ff f930 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000f84:	2120      	movs	r1, #32
 8000f86:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <setM+0x48>)
 8000f88:	f7ff f92c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000f8c:	2108      	movs	r1, #8
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f92:	f7ff f927 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000f96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9e:	f7ff f913 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000fa2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000faa:	f7ff f90d 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	48000400 	.word	0x48000400

08000fb8 <setV>:
void setV(void){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc2:	f7ff f90f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000fc6:	2120      	movs	r1, #32
 8000fc8:	480f      	ldr	r0, [pc, #60]	; (8001008 <setV+0x50>)
 8000fca:	f7ff f90b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000fce:	2108      	movs	r1, #8
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd4:	f7ff f906 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000fd8:	2102      	movs	r1, #2
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fde:	f7ff f8f3 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000fe2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fea:	f7ff f8ed 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000fee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff6:	f7ff f8e7 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000ffa:	2110      	movs	r1, #16
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <setV+0x50>)
 8000ffe:	f7ff f8e3 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	48000400 	.word	0x48000400

0800100c <setW>:
void setW(void){
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001010:	2101      	movs	r1, #1
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f7ff f8e5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800101a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800101e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001022:	f7ff f8df 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001026:	2120      	movs	r1, #32
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <setW+0x50>)
 800102a:	f7ff f8db 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800102e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001036:	f7ff f8d5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800103a:	2108      	movs	r1, #8
 800103c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001040:	f7ff f8d0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001044:	2110      	movs	r1, #16
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <setW+0x50>)
 8001048:	f7ff f8cc 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800104c:	2102      	movs	r1, #2
 800104e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001052:	f7ff f8b9 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	48000400 	.word	0x48000400

08001060 <setX>:
void setX(void){
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001064:	2102      	movs	r1, #2
 8001066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106a:	f7ff f8bb 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800106e:	2120      	movs	r1, #32
 8001070:	480f      	ldr	r0, [pc, #60]	; (80010b0 <setX+0x50>)
 8001072:	f7ff f8b7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001076:	2110      	movs	r1, #16
 8001078:	480d      	ldr	r0, [pc, #52]	; (80010b0 <setX+0x50>)
 800107a:	f7ff f8b3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800107e:	2101      	movs	r1, #1
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f7ff f8a0 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001088:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001090:	f7ff f89a 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001094:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109c:	f7ff f894 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80010a0:	2108      	movs	r1, #8
 80010a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a6:	f7ff f88f 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	48000400 	.word	0x48000400

080010b4 <setZ>:
void setZ(void){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80010b8:	2102      	movs	r1, #2
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010be:	f7ff f891 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80010c2:	2101      	movs	r1, #1
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c8:	f7ff f88c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80010cc:	2120      	movs	r1, #32
 80010ce:	480d      	ldr	r0, [pc, #52]	; (8001104 <setZ+0x50>)
 80010d0:	f7ff f888 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80010d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f7ff f882 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80010e0:	2110      	movs	r1, #16
 80010e2:	4808      	ldr	r0, [pc, #32]	; (8001104 <setZ+0x50>)
 80010e4:	f7ff f87e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80010e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f0:	f7ff f86a 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80010f4:	2108      	movs	r1, #8
 80010f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fa:	f7ff f865 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	48000400 	.word	0x48000400

08001108 <setOne>:

// numbers
void setOne(void){
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800110c:	2101      	movs	r1, #1
 800110e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001112:	f7ff f867 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001116:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111e:	f7ff f861 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001122:	2102      	movs	r1, #2
 8001124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001128:	f7ff f84e 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800112c:	2120      	movs	r1, #32
 800112e:	480a      	ldr	r0, [pc, #40]	; (8001158 <setOne+0x50>)
 8001130:	f7ff f84a 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001134:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113c:	f7ff f844 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001140:	2108      	movs	r1, #8
 8001142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001146:	f7ff f83f 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800114a:	2110      	movs	r1, #16
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <setOne+0x50>)
 800114e:	f7ff f83b 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	48000400 	.word	0x48000400

0800115c <setTwo>:
void setTwo(void){
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001160:	2102      	movs	r1, #2
 8001162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001166:	f7ff f83d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800116a:	2101      	movs	r1, #1
 800116c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001170:	f7ff f838 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001174:	2120      	movs	r1, #32
 8001176:	480d      	ldr	r0, [pc, #52]	; (80011ac <setTwo+0x50>)
 8001178:	f7ff f834 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800117c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001184:	f7ff f82e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001188:	2110      	movs	r1, #16
 800118a:	4808      	ldr	r0, [pc, #32]	; (80011ac <setTwo+0x50>)
 800118c:	f7ff f82a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001190:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001198:	f7ff f816 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 800119c:	2108      	movs	r1, #8
 800119e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a2:	f7ff f811 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	48000400 	.word	0x48000400

080011b0 <setThree>:
void setThree(void){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80011b4:	2102      	movs	r1, #2
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ba:	f7ff f813 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80011be:	2101      	movs	r1, #1
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c4:	f7ff f80e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80011c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d0:	f7ff f808 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80011d4:	2120      	movs	r1, #32
 80011d6:	480a      	ldr	r0, [pc, #40]	; (8001200 <setThree+0x50>)
 80011d8:	f7ff f804 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80011dc:	2110      	movs	r1, #16
 80011de:	4808      	ldr	r0, [pc, #32]	; (8001200 <setThree+0x50>)
 80011e0:	f7ff f800 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80011e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ec:	f7fe ffec 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80011f0:	2108      	movs	r1, #8
 80011f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f6:	f7fe ffe7 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	48000400 	.word	0x48000400

08001204 <setFour>:
void setFour(void){
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001208:	2101      	movs	r1, #1
 800120a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120e:	f7fe ffe9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121a:	f7fe ffe3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800121e:	2108      	movs	r1, #8
 8001220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001224:	f7fe ffde 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001228:	2110      	movs	r1, #16
 800122a:	480a      	ldr	r0, [pc, #40]	; (8001254 <setFour+0x50>)
 800122c:	f7fe ffda 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001230:	2102      	movs	r1, #2
 8001232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001236:	f7fe ffc7 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800123a:	2120      	movs	r1, #32
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <setFour+0x50>)
 800123e:	f7fe ffc3 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001242:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124a:	f7fe ffbd 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	48000400 	.word	0x48000400

08001258 <setFive>:
void setFive(void){
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800125c:	2102      	movs	r1, #2
 800125e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001262:	f7fe ffbf 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001266:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126e:	f7fe ffb9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001272:	2120      	movs	r1, #32
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <setFive+0x50>)
 8001276:	f7fe ffb5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800127a:	2108      	movs	r1, #8
 800127c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001280:	f7fe ffb0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001284:	2110      	movs	r1, #16
 8001286:	4808      	ldr	r0, [pc, #32]	; (80012a8 <setFive+0x50>)
 8001288:	f7fe ffac 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800128c:	2101      	movs	r1, #1
 800128e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001292:	f7fe ff99 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001296:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800129a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129e:	f7fe ff93 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	48000400 	.word	0x48000400

080012ac <setSix>:
void setSix(void){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80012b0:	2102      	movs	r1, #2
 80012b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b6:	f7fe ff95 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80012ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c2:	f7fe ff8f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80012c6:	2120      	movs	r1, #32
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <setSix+0x50>)
 80012ca:	f7fe ff8b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80012ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d6:	f7fe ff85 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80012da:	2108      	movs	r1, #8
 80012dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e0:	f7fe ff80 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80012e4:	2110      	movs	r1, #16
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <setSix+0x50>)
 80012e8:	f7fe ff7c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80012ec:	2101      	movs	r1, #1
 80012ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f2:	f7fe ff69 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	48000400 	.word	0x48000400

08001300 <setSeven>:
void setSeven(void){
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001304:	2102      	movs	r1, #2
 8001306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130a:	f7fe ff6b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800130e:	2101      	movs	r1, #1
 8001310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001314:	f7fe ff66 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800131c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001320:	f7fe ff60 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001324:	2120      	movs	r1, #32
 8001326:	480a      	ldr	r0, [pc, #40]	; (8001350 <setSeven+0x50>)
 8001328:	f7fe ff4e 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800132c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001334:	f7fe ff48 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001338:	2108      	movs	r1, #8
 800133a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133e:	f7fe ff43 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001342:	2110      	movs	r1, #16
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <setSeven+0x50>)
 8001346:	f7fe ff3f 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	48000400 	.word	0x48000400

08001354 <setEight>:
void setEight(void){
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001358:	2102      	movs	r1, #2
 800135a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135e:	f7fe ff41 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001362:	2101      	movs	r1, #1
 8001364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001368:	f7fe ff3c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800136c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001374:	f7fe ff36 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001378:	2120      	movs	r1, #32
 800137a:	480a      	ldr	r0, [pc, #40]	; (80013a4 <setEight+0x50>)
 800137c:	f7fe ff32 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001380:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001388:	f7fe ff2c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800138c:	2108      	movs	r1, #8
 800138e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001392:	f7fe ff27 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001396:	2110      	movs	r1, #16
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <setEight+0x50>)
 800139a:	f7fe ff23 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	48000400 	.word	0x48000400

080013a8 <setNine>:
void setNine(void){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80013ac:	2102      	movs	r1, #2
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b2:	f7fe ff17 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80013b6:	2101      	movs	r1, #1
 80013b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013bc:	f7fe ff12 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80013c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c8:	f7fe ff0c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80013cc:	2120      	movs	r1, #32
 80013ce:	480a      	ldr	r0, [pc, #40]	; (80013f8 <setNine+0x50>)
 80013d0:	f7fe ff08 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80013d4:	2108      	movs	r1, #8
 80013d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013da:	f7fe ff03 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80013de:	2110      	movs	r1, #16
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <setNine+0x50>)
 80013e2:	f7fe feff 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80013e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ee:	f7fe feeb 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	48000400 	.word	0x48000400

080013fc <setZero>:
void setZero(void){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001400:	2102      	movs	r1, #2
 8001402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001406:	f7fe feed 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800140a:	2101      	movs	r1, #1
 800140c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001410:	f7fe fee8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141c:	f7fe fee2 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001420:	2120      	movs	r1, #32
 8001422:	480a      	ldr	r0, [pc, #40]	; (800144c <setZero+0x50>)
 8001424:	f7fe fede 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001428:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800142c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001430:	f7fe fed8 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001434:	2108      	movs	r1, #8
 8001436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143a:	f7fe fed3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800143e:	2110      	movs	r1, #16
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <setZero+0x50>)
 8001442:	f7fe fec1 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	48000400 	.word	0x48000400

08001450 <setLine>:

void setLine(void){
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001454:	2120      	movs	r1, #32
 8001456:	4814      	ldr	r0, [pc, #80]	; (80014a8 <setLine+0x58>)
 8001458:	f7fe fec4 	bl	80001e4 <LL_GPIO_ResetOutputPin>

	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800145c:	2102      	movs	r1, #2
 800145e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001462:	f7fe feb1 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001466:	2101      	movs	r1, #1
 8001468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146c:	f7fe feac 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001470:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001478:	f7fe fea6 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800147c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001484:	f7fe fea0 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001488:	2108      	movs	r1, #8
 800148a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148e:	f7fe fe9b 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001492:	2110      	movs	r1, #16
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <setLine+0x58>)
 8001496:	f7fe fe97 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentDP_Pin);
 800149a:	2102      	movs	r1, #2
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <setLine+0x58>)
 800149e:	f7fe fe93 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	48000400 	.word	0x48000400

080014ac <setDot>:
// and dot to end
void setDot(void){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
 80014b0:	2102      	movs	r1, #2
 80014b2:	4802      	ldr	r0, [pc, #8]	; (80014bc <setDot+0x10>)
 80014b4:	f7fe fe96 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	48000400 	.word	0x48000400

080014c0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014ca:	695a      	ldr	r2, [r3, #20]
 80014cc:	4907      	ldr	r1, [pc, #28]	; (80014ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014d6:	695a      	ldr	r2, [r3, #20]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4013      	ands	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014de:	68fb      	ldr	r3, [r7, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	40021000 	.word	0x40021000

080014f0 <LL_GPIO_ResetOutputPin>:
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	463b      	mov	r3, r7
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
 8001520:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8001522:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001526:	f7ff ffcb 	bl	80014c0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800152a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800152e:	f7ff ffc7 	bl	80014c0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001532:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001536:	f7ff ffc3 	bl	80014c0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 800153a:	f641 119f 	movw	r1, #6559	; 0x199f
 800153e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001542:	f7ff ffd5 	bl	80014f0 <LL_GPIO_ResetOutputPin>
                          |digit2_Pin|digitTime_Pin|segmentC_Pin|segmentE_Pin
                          |digit3_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, digit1_Pin|segmentDP_Pin|segmentG_Pin|segmentD_Pin);
 8001546:	2133      	movs	r1, #51	; 0x33
 8001548:	4813      	ldr	r0, [pc, #76]	; (8001598 <MX_GPIO_Init+0x8c>)
 800154a:	f7ff ffd1 	bl	80014f0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 800154e:	f641 139f 	movw	r3, #6559	; 0x199f
 8001552:	603b      	str	r3, [r7, #0]
                          |digit2_Pin|digitTime_Pin|segmentC_Pin|segmentE_Pin
                          |digit3_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001554:	2301      	movs	r3, #1
 8001556:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	463b      	mov	r3, r7
 8001566:	4619      	mov	r1, r3
 8001568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156c:	f001 f97a 	bl	8002864 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = digit1_Pin|segmentDP_Pin|segmentG_Pin|segmentD_Pin;
 8001570:	2333      	movs	r3, #51	; 0x33
 8001572:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001574:	2301      	movs	r3, #1
 8001576:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	463b      	mov	r3, r7
 8001586:	4619      	mov	r1, r3
 8001588:	4803      	ldr	r0, [pc, #12]	; (8001598 <MX_GPIO_Init+0x8c>)
 800158a:	f001 f96b 	bl	8002864 <LL_GPIO_Init>

}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	48000400 	.word	0x48000400

0800159c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <__NVIC_GetPriorityGrouping+0x18>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	f003 0307 	and.w	r3, r3, #7
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	db0b      	blt.n	80015e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f003 021f 	and.w	r2, r3, #31
 80015d0:	4907      	ldr	r1, [pc, #28]	; (80015f0 <__NVIC_EnableIRQ+0x38>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	095b      	lsrs	r3, r3, #5
 80015d8:	2001      	movs	r0, #1
 80015da:	fa00 f202 	lsl.w	r2, r0, r2
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000e100 	.word	0xe000e100

080015f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	db0a      	blt.n	800161e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	490c      	ldr	r1, [pc, #48]	; (8001640 <__NVIC_SetPriority+0x4c>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	440b      	add	r3, r1
 8001618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800161c:	e00a      	b.n	8001634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4908      	ldr	r1, [pc, #32]	; (8001644 <__NVIC_SetPriority+0x50>)
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	3b04      	subs	r3, #4
 800162c:	0112      	lsls	r2, r2, #4
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	440b      	add	r3, r1
 8001632:	761a      	strb	r2, [r3, #24]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f1c3 0307 	rsb	r3, r3, #7
 8001662:	2b04      	cmp	r3, #4
 8001664:	bf28      	it	cs
 8001666:	2304      	movcs	r3, #4
 8001668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3304      	adds	r3, #4
 800166e:	2b06      	cmp	r3, #6
 8001670:	d902      	bls.n	8001678 <NVIC_EncodePriority+0x30>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3b03      	subs	r3, #3
 8001676:	e000      	b.n	800167a <NVIC_EncodePriority+0x32>
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	f04f 32ff 	mov.w	r2, #4294967295
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	401a      	ands	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	43d9      	mvns	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	4313      	orrs	r3, r2
         );
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3724      	adds	r7, #36	; 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f043 0201 	orr.w	r2, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	601a      	str	r2, [r3, #0]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	601a      	str	r2, [r3, #0]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	601a      	str	r2, [r3, #0]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 800170e:	b480      	push	{r7}
 8001710:	b085      	sub	sp, #20
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001722:	f023 0306 	bic.w	r3, r3, #6
 8001726:	68b9      	ldr	r1, [r7, #8]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	430a      	orrs	r2, r1
 800172c:	431a      	orrs	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	60da      	str	r2, [r3, #12]
}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60da      	str	r2, [r3, #12]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f043 0204 	orr.w	r2, r3, #4
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	601a      	str	r2, [r3, #0]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 0204 	bic.w	r2, r3, #4
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	601a      	str	r2, [r3, #0]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d101      	bne.n	80017b6 <LL_I2C_IsActiveFlag_TXIS+0x18>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d101      	bne.n	80017dc <LL_I2C_IsActiveFlag_RXNE+0x18>
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <LL_I2C_IsActiveFlag_RXNE+0x1a>
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	f003 0320 	and.w	r3, r3, #32
 80017fa:	2b20      	cmp	r3, #32
 80017fc:	d101      	bne.n	8001802 <LL_I2C_IsActiveFlag_STOP+0x18>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	f043 0220 	orr.w	r2, r3, #32
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	61da      	str	r2, [r3, #28]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	605a      	str	r2, [r3, #4]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	0d5b      	lsrs	r3, r3, #21
 8001866:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <LL_I2C_HandleTransfer+0x48>)
 800186c:	430b      	orrs	r3, r1
 800186e:	43db      	mvns	r3, r3
 8001870:	401a      	ands	r2, r3
 8001872:	68b9      	ldr	r1, [r7, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4319      	orrs	r1, r3
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	041b      	lsls	r3, r3, #16
 800187c:	4319      	orrs	r1, r3
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	4319      	orrs	r1, r3
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	430b      	orrs	r3, r1
 8001886:	431a      	orrs	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	03ff7bff 	.word	0x03ff7bff

0800189c <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	b2db      	uxtb	r3, r3
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	460b      	mov	r3, r1
 80018c0:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80018c2:	78fa      	ldrb	r2, [r7, #3]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_AHB1_GRP1_EnableClock>:
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	4907      	ldr	r1, [pc, #28]	; (8001900 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4013      	ands	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40021000 	.word	0x40021000

08001904 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <LL_APB1_GRP1_EnableClock+0x2c>)
 800190e:	69da      	ldr	r2, [r3, #28]
 8001910:	4907      	ldr	r1, [pc, #28]	; (8001930 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4313      	orrs	r3, r2
 8001916:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <LL_APB1_GRP1_EnableClock+0x2c>)
 800191a:	69da      	ldr	r2, [r3, #28]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4013      	ands	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001922:	68fb      	ldr	r3, [r7, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	40021000 	.word	0x40021000

08001934 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08e      	sub	sp, #56	; 0x38
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800193a:	f107 031c 	add.w	r3, r7, #28
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
 8001948:	611a      	str	r2, [r3, #16]
 800194a:	615a      	str	r2, [r3, #20]
 800194c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
 800195c:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800195e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001962:	f7ff ffb7 	bl	80018d4 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001966:	23c0      	movs	r3, #192	; 0xc0
 8001968:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800196a:	2302      	movs	r3, #2
 800196c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001972:	2301      	movs	r3, #1
 8001974:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001976:	2301      	movs	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800197a:	2304      	movs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	4619      	mov	r1, r3
 8001982:	4821      	ldr	r0, [pc, #132]	; (8001a08 <MX_I2C1_Init+0xd4>)
 8001984:	f000 ff6e 	bl	8002864 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001988:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800198c:	f7ff ffba 	bl	8001904 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001990:	f7ff fe04 	bl	800159c <__NVIC_GetPriorityGrouping>
 8001994:	4603      	mov	r3, r0
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fe54 	bl	8001648 <NVIC_EncodePriority>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4619      	mov	r1, r3
 80019a4:	201f      	movs	r0, #31
 80019a6:	f7ff fe25 	bl	80015f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80019aa:	201f      	movs	r0, #31
 80019ac:	f7ff fe04 	bl	80015b8 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80019b0:	4816      	ldr	r0, [pc, #88]	; (8001a0c <MX_I2C1_Init+0xd8>)
 80019b2:	f7ff ff3d 	bl	8001830 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80019b6:	4815      	ldr	r0, [pc, #84]	; (8001a0c <MX_I2C1_Init+0xd8>)
 80019b8:	f7ff fec1 	bl	800173e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80019bc:	4813      	ldr	r0, [pc, #76]	; (8001a0c <MX_I2C1_Init+0xd8>)
 80019be:	f7ff fe96 	bl	80016ee <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80019c2:	4812      	ldr	r0, [pc, #72]	; (8001a0c <MX_I2C1_Init+0xd8>)
 80019c4:	f7ff fe83 	bl	80016ce <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <MX_I2C1_Init+0xdc>)
 80019ce:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 80019d8:	2302      	movs	r3, #2
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80019dc:	2300      	movs	r3, #0
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80019e0:	2300      	movs	r3, #0
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	4619      	mov	r1, r3
 80019ea:	4808      	ldr	r0, [pc, #32]	; (8001a0c <MX_I2C1_Init+0xd8>)
 80019ec:	f001 f84d 	bl	8002a8a <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_I2C1_Init+0xd8>)
 80019f6:	f7ff fe8a 	bl	800170e <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 80019fa:	4804      	ldr	r0, [pc, #16]	; (8001a0c <MX_I2C1_Init+0xd8>)
 80019fc:	f7ff fe57 	bl	80016ae <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	3738      	adds	r7, #56	; 0x38
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	48000400 	.word	0x48000400
 8001a0c:	40005400 	.word	0x40005400
 8001a10:	2000090e 	.word	0x2000090e

08001a14 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af02      	add	r7, sp, #8
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	4608      	mov	r0, r1
 8001a1e:	4611      	mov	r1, r2
 8001a20:	461a      	mov	r2, r3
 8001a22:	4623      	mov	r3, r4
 8001a24:	71fb      	strb	r3, [r7, #7]
 8001a26:	4603      	mov	r3, r0
 8001a28:	71bb      	strb	r3, [r7, #6]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	717b      	strb	r3, [r7, #5]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8001a32:	793b      	ldrb	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8001a38:	79bb      	ldrb	r3, [r7, #6]
 8001a3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a3e:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001a40:	7979      	ldrb	r1, [r7, #5]
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <i2c_master_write+0x80>)
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	2200      	movs	r2, #0
 8001a50:	4811      	ldr	r0, [pc, #68]	; (8001a98 <i2c_master_write+0x84>)
 8001a52:	f7ff fefd 	bl	8001850 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8001a56:	79bb      	ldrb	r3, [r7, #6]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	480f      	ldr	r0, [pc, #60]	; (8001a98 <i2c_master_write+0x84>)
 8001a5c:	f7ff ff2b 	bl	80018b6 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001a60:	e00a      	b.n	8001a78 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001a62:	480d      	ldr	r0, [pc, #52]	; (8001a98 <i2c_master_write+0x84>)
 8001a64:	f7ff fe9b 	bl	800179e <LL_I2C_IsActiveFlag_TXIS>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d004      	beq.n	8001a78 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	4619      	mov	r1, r3
 8001a72:	4809      	ldr	r0, [pc, #36]	; (8001a98 <i2c_master_write+0x84>)
 8001a74:	f7ff ff1f 	bl	80018b6 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001a78:	4807      	ldr	r0, [pc, #28]	; (8001a98 <i2c_master_write+0x84>)
 8001a7a:	f7ff feb6 	bl	80017ea <LL_I2C_IsActiveFlag_STOP>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0ee      	beq.n	8001a62 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <i2c_master_write+0x84>)
 8001a86:	f7ff fec3 	bl	8001810 <LL_I2C_ClearFlag_STOP>
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd90      	pop	{r4, r7, pc}
 8001a92:	bf00      	nop
 8001a94:	80002000 	.word	0x80002000
 8001a98:	40005400 	.word	0x40005400

08001a9c <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	4608      	mov	r0, r1
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4603      	mov	r3, r0
 8001aac:	70fb      	strb	r3, [r7, #3]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	70bb      	strb	r3, [r7, #2]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8001ab6:	4a30      	ldr	r2, [pc, #192]	; (8001b78 <i2c_master_read+0xdc>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8001abc:	7c3b      	ldrb	r3, [r7, #16]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8001ac2:	78bb      	ldrb	r3, [r7, #2]
 8001ac4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ac8:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8001aca:	4b2c      	ldr	r3, [pc, #176]	; (8001b7c <i2c_master_read+0xe0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001ad0:	482b      	ldr	r0, [pc, #172]	; (8001b80 <i2c_master_read+0xe4>)
 8001ad2:	f7ff fe44 	bl	800175e <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001ad6:	7879      	ldrb	r1, [r7, #1]
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <i2c_master_read+0xe8>)
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4826      	ldr	r0, [pc, #152]	; (8001b80 <i2c_master_read+0xe4>)
 8001ae8:	f7ff feb2 	bl	8001850 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001aec:	e00a      	b.n	8001b04 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001aee:	4824      	ldr	r0, [pc, #144]	; (8001b80 <i2c_master_read+0xe4>)
 8001af0:	f7ff fe55 	bl	800179e <LL_I2C_IsActiveFlag_TXIS>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d004      	beq.n	8001b04 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8001afa:	78bb      	ldrb	r3, [r7, #2]
 8001afc:	4619      	mov	r1, r3
 8001afe:	4820      	ldr	r0, [pc, #128]	; (8001b80 <i2c_master_read+0xe4>)
 8001b00:	f7ff fed9 	bl	80018b6 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001b04:	481e      	ldr	r0, [pc, #120]	; (8001b80 <i2c_master_read+0xe4>)
 8001b06:	f7ff fe70 	bl	80017ea <LL_I2C_IsActiveFlag_STOP>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0ee      	beq.n	8001aee <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001b10:	481b      	ldr	r0, [pc, #108]	; (8001b80 <i2c_master_read+0xe4>)
 8001b12:	f7ff fe7d 	bl	8001810 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8001b16:	bf00      	nop
 8001b18:	4819      	ldr	r0, [pc, #100]	; (8001b80 <i2c_master_read+0xe4>)
 8001b1a:	f7ff fe66 	bl	80017ea <LL_I2C_IsActiveFlag_STOP>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f9      	bne.n	8001b18 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001b24:	7879      	ldrb	r1, [r7, #1]
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <i2c_master_read+0xec>)
 8001b2a:	9201      	str	r2, [sp, #4]
 8001b2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b30:	9200      	str	r2, [sp, #0]
 8001b32:	2200      	movs	r2, #0
 8001b34:	4812      	ldr	r0, [pc, #72]	; (8001b80 <i2c_master_read+0xe4>)
 8001b36:	f7ff fe8b 	bl	8001850 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001b3a:	bf00      	nop
 8001b3c:	4810      	ldr	r0, [pc, #64]	; (8001b80 <i2c_master_read+0xe4>)
 8001b3e:	f7ff fe54 	bl	80017ea <LL_I2C_IsActiveFlag_STOP>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f9      	beq.n	8001b3c <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8001b48:	480d      	ldr	r0, [pc, #52]	; (8001b80 <i2c_master_read+0xe4>)
 8001b4a:	f7ff fe61 	bl	8001810 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8001b4e:	480c      	ldr	r0, [pc, #48]	; (8001b80 <i2c_master_read+0xe4>)
 8001b50:	f7ff fe15 	bl	800177e <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001b54:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <i2c_master_read+0xe4>)
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <i2c_master_read+0xe4>)
 8001b5a:	f043 0310 	orr.w	r3, r3, #16
 8001b5e:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001b60:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <i2c_master_read+0xf0>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <i2c_master_read+0xe0>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8001b6c:	4b02      	ldr	r3, [pc, #8]	; (8001b78 <i2c_master_read+0xdc>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000028 	.word	0x20000028
 8001b7c:	20000026 	.word	0x20000026
 8001b80:	40005400 	.word	0x40005400
 8001b84:	80002000 	.word	0x80002000
 8001b88:	80002400 	.word	0x80002400
 8001b8c:	20000027 	.word	0x20000027

08001b90 <I2C1_EV_IRQHandler>:
	(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
	end_of_read_flag = 0;
}

void I2C1_EV_IRQHandler(void)
{
 8001b90:	b598      	push	{r3, r4, r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
  /* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001b94:	4812      	ldr	r0, [pc, #72]	; (8001be0 <I2C1_EV_IRQHandler+0x50>)
 8001b96:	f7ff fe15 	bl	80017c4 <LL_I2C_IsActiveFlag_RXNE>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d01c      	beq.n	8001bda <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001ba0:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <I2C1_EV_IRQHandler+0x54>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <I2C1_EV_IRQHandler+0x58>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	1c59      	adds	r1, r3, #1
 8001bac:	b2c8      	uxtb	r0, r1
 8001bae:	490e      	ldr	r1, [pc, #56]	; (8001be8 <I2C1_EV_IRQHandler+0x58>)
 8001bb0:	7008      	strb	r0, [r1, #0]
 8001bb2:	18d4      	adds	r4, r2, r3
 8001bb4:	480a      	ldr	r0, [pc, #40]	; (8001be0 <I2C1_EV_IRQHandler+0x50>)
 8001bb6:	f7ff fe71 	bl	800189c <LL_I2C_ReceiveData8>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <I2C1_EV_IRQHandler+0x58>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b13      	cmp	r3, #19
 8001bc6:	d903      	bls.n	8001bd0 <I2C1_EV_IRQHandler+0x40>
 8001bc8:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <I2C1_EV_IRQHandler+0x58>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
 8001bce:	e001      	b.n	8001bd4 <I2C1_EV_IRQHandler+0x44>
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <I2C1_EV_IRQHandler+0x58>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <I2C1_EV_IRQHandler+0x5c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd98      	pop	{r3, r4, r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40005400 	.word	0x40005400
 8001be4:	20000028 	.word	0x20000028
 8001be8:	20000027 	.word	0x20000027
 8001bec:	20000026 	.word	0x20000026

08001bf0 <lsm6ds0_read_byte>:
#include "lps25hb.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <lsm6ds0_read_byte+0x30>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	79fa      	ldrb	r2, [r7, #7]
 8001c04:	f107 000f 	add.w	r0, r7, #15
 8001c08:	2100      	movs	r1, #0
 8001c0a:	9100      	str	r1, [sp, #0]
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	f7ff ff45 	bl	8001a9c <i2c_master_read>
 8001c12:	4603      	mov	r3, r0
 8001c14:	781b      	ldrb	r3, [r3, #0]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000001 	.word	0x20000001

08001c24 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	460a      	mov	r2, r1
 8001c2e:	71fb      	strb	r3, [r7, #7]
 8001c30:	4613      	mov	r3, r2
 8001c32:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <lsm6ds0_write_byte+0x28>)
 8001c36:	781a      	ldrb	r2, [r3, #0]
 8001c38:	79f9      	ldrb	r1, [r7, #7]
 8001c3a:	79b8      	ldrb	r0, [r7, #6]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f7ff fee9 	bl	8001a14 <i2c_master_write>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000001 	.word	0x20000001

08001c50 <lsm6ds0_readArray>:


void lsm6ds0_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	70fb      	strb	r3, [r7, #3]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres, 1);
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <lsm6ds0_readArray+0x2c>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	78fa      	ldrb	r2, [r7, #3]
 8001c66:	78b9      	ldrb	r1, [r7, #2]
 8001c68:	2001      	movs	r0, #1
 8001c6a:	9000      	str	r0, [sp, #0]
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff15 	bl	8001a9c <i2c_master_read>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000001 	.word	0x20000001

08001c80 <lsm6ds0_get_acc>:
	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
}


void lsm6ds0_get_acc(float* x, float* y, float* z)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
	int16_t xx, yy, zz;

	uint8_t temp;

	//get current scale and use it for final calculation
    temp = lsm6ds0_read_byte(LSM6DS0_ADDRESS_CTRL1);
 8001c8c:	2010      	movs	r0, #16
 8001c8e:	f7ff ffaf 	bl	8001bf0 <lsm6ds0_read_byte>
 8001c92:	4603      	mov	r3, r0
 8001c94:	77fb      	strb	r3, [r7, #31]

	temp = temp >> 2;
 8001c96:	7ffb      	ldrb	r3, [r7, #31]
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	77fb      	strb	r3, [r7, #31]
    temp &= 0x03;			//full scale bits exctracted
 8001c9c:	7ffb      	ldrb	r3, [r7, #31]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	77fb      	strb	r3, [r7, #31]

	lsm6ds0_readArray(data, LSM6DS0_ADDRESS_ACCX, 6);
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	2206      	movs	r2, #6
 8001caa:	2128      	movs	r1, #40	; 0x28
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ffcf 	bl	8001c50 <lsm6ds0_readArray>

	xx = ((uint16_t)data[1]) << 8 | data[0];
 8001cb2:	7c7b      	ldrb	r3, [r7, #17]
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	b21a      	sxth	r2, r3
 8001cb8:	7c3b      	ldrb	r3, [r7, #16]
 8001cba:	b21b      	sxth	r3, r3
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	83bb      	strh	r3, [r7, #28]
	yy = ((uint16_t)data[3]) << 8 | data[2];
 8001cc0:	7cfb      	ldrb	r3, [r7, #19]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	b21a      	sxth	r2, r3
 8001cc6:	7cbb      	ldrb	r3, [r7, #18]
 8001cc8:	b21b      	sxth	r3, r3
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	837b      	strh	r3, [r7, #26]
	zz = ((uint16_t)data[5]) << 8 | data[4];
 8001cce:	7d7b      	ldrb	r3, [r7, #21]
 8001cd0:	021b      	lsls	r3, r3, #8
 8001cd2:	b21a      	sxth	r2, r3
 8001cd4:	7d3b      	ldrb	r3, [r7, #20]
 8001cd6:	b21b      	sxth	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	833b      	strh	r3, [r7, #24]

	*x = (xx >> 4) / 1000.0f;
 8001cdc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ce0:	111b      	asrs	r3, r3, #4
 8001ce2:	b21b      	sxth	r3, r3
 8001ce4:	ee07 3a90 	vmov	s15, r3
 8001ce8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cec:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001d40 <lsm6ds0_get_acc+0xc0>
 8001cf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	edc3 7a00 	vstr	s15, [r3]
	*y = (yy >> 4) / 1000.0f;
 8001cfa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001cfe:	111b      	asrs	r3, r3, #4
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	ee07 3a90 	vmov	s15, r3
 8001d06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d0a:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001d40 <lsm6ds0_get_acc+0xc0>
 8001d0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	edc3 7a00 	vstr	s15, [r3]
	*z = (zz >> 4) / 1000.0f;
 8001d18:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001d1c:	111b      	asrs	r3, r3, #4
 8001d1e:	b21b      	sxth	r3, r3
 8001d20:	ee07 3a90 	vmov	s15, r3
 8001d24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d28:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001d40 <lsm6ds0_get_acc+0xc0>
 8001d2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	edc3 7a00 	vstr	s15, [r3]
}
 8001d36:	bf00      	nop
 8001d38:	3720      	adds	r7, #32
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	447a0000 	.word	0x447a0000

08001d44 <lsm6ds0_init>:


uint8_t lsm6ds0_init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8001d4e:	2064      	movs	r0, #100	; 0x64
 8001d50:	f001 fafa 	bl	8003348 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8001d54:	200f      	movs	r0, #15
 8001d56:	f7ff ff4b 	bl	8001bf0 <lsm6ds0_read_byte>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 8001d5e:	79bb      	ldrb	r3, [r7, #6]
 8001d60:	2b68      	cmp	r3, #104	; 0x68
 8001d62:	d102      	bne.n	8001d6a <lsm6ds0_init+0x26>
	{
		status = 1;
 8001d64:	2301      	movs	r3, #1
 8001d66:	71fb      	strb	r3, [r7, #7]
 8001d68:	e00f      	b.n	8001d8a <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <lsm6ds0_init+0x60>)
 8001d6c:	22d6      	movs	r2, #214	; 0xd6
 8001d6e:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8001d70:	200f      	movs	r0, #15
 8001d72:	f7ff ff3d 	bl	8001bf0 <lsm6ds0_read_byte>
 8001d76:	4603      	mov	r3, r0
 8001d78:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 8001d7a:	79bb      	ldrb	r3, [r7, #6]
 8001d7c:	2b68      	cmp	r3, #104	; 0x68
 8001d7e:	d102      	bne.n	8001d86 <lsm6ds0_init+0x42>
		{
			status = 1;
 8001d80:	2301      	movs	r3, #1
 8001d82:	71fb      	strb	r3, [r7, #7]
 8001d84:	e001      	b.n	8001d8a <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8001d8e:	797b      	ldrb	r3, [r7, #5]
 8001d90:	4619      	mov	r1, r3
 8001d92:	2010      	movs	r0, #16
 8001d94:	f7ff ff46 	bl	8001c24 <lsm6ds0_write_byte>

	return status;
 8001d98:	79fb      	ldrb	r3, [r7, #7]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000001 	.word	0x20000001

08001da8 <__NVIC_SetPriorityGrouping>:
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dda:	4a04      	ldr	r2, [pc, #16]	; (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	60d3      	str	r3, [r2, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <LL_RCC_HSI_Enable+0x1c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <LL_RCC_HSI_Enable+0x1c>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000

08001e10 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <LL_RCC_HSI_IsReady+0x20>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40021000 	.word	0x40021000

08001e34 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4904      	ldr	r1, [pc, #16]	; (8001e5c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000

08001e60 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <LL_RCC_SetSysClkSource+0x24>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f023 0203 	bic.w	r2, r3, #3
 8001e70:	4904      	ldr	r1, [pc, #16]	; (8001e84 <LL_RCC_SetSysClkSource+0x24>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40021000 	.word	0x40021000

08001e88 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <LL_RCC_GetSysClkSource+0x18>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 030c 	and.w	r3, r3, #12
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <LL_RCC_SetAHBPrescaler+0x24>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb4:	4904      	ldr	r1, [pc, #16]	; (8001ec8 <LL_RCC_SetAHBPrescaler+0x24>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	40021000 	.word	0x40021000

08001ecc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001edc:	4904      	ldr	r1, [pc, #16]	; (8001ef0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	40021000 	.word	0x40021000

08001ef4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f04:	4904      	ldr	r1, [pc, #16]	; (8001f18 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	40021000 	.word	0x40021000

08001f1c <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <LL_RCC_SetI2CClockSource+0x2c>)
 8001f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	0e1b      	lsrs	r3, r3, #24
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	401a      	ands	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001f36:	4904      	ldr	r1, [pc, #16]	; (8001f48 <LL_RCC_SetI2CClockSource+0x2c>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	40021000 	.word	0x40021000

08001f4c <LL_APB1_GRP1_EnableClock>:
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f56:	69da      	ldr	r2, [r3, #28]
 8001f58:	4907      	ldr	r1, [pc, #28]	; (8001f78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f62:	69da      	ldr	r2, [r3, #28]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4013      	ands	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	40021000 	.word	0x40021000

08001f7c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f86:	699a      	ldr	r2, [r3, #24]
 8001f88:	4907      	ldr	r1, [pc, #28]	; (8001fa8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f92:	699a      	ldr	r2, [r3, #24]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4013      	ands	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	40021000 	.word	0x40021000

08001fac <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <LL_FLASH_SetLatency+0x24>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 0207 	bic.w	r2, r3, #7
 8001fbc:	4904      	ldr	r1, [pc, #16]	; (8001fd0 <LL_FLASH_SetLatency+0x24>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	600b      	str	r3, [r1, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	40022000 	.word	0x40022000

08001fd4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <LL_FLASH_GetLatency+0x18>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40022000 	.word	0x40022000

08001ff0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f043 0201 	orr.w	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	601a      	str	r2, [r3, #0]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_TIM_EnableIT_CC2>:
  * @rmtoll DIER         CC2IE         LL_TIM_EnableIT_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2IE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f043 0204 	orr.w	r2, r3, #4
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	60da      	str	r2, [r3, #12]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002034:	2001      	movs	r0, #1
 8002036:	f7ff ffa1 	bl	8001f7c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800203a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800203e:	f7ff ff85 	bl	8001f4c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002042:	2003      	movs	r0, #3
 8002044:	f7ff feb0 	bl	8001da8 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002048:	f000 f82c 	bl	80020a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800204c:	f7ff fa5e 	bl	800150c <MX_GPIO_Init>
  MX_TIM2_Init();
 8002050:	f000 fa1c 	bl	800248c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002054:	f000 fa7c 	bl	8002550 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002058:	f7ff fc6c 	bl	8001934 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableIT_CC2(TIM2);
 800205c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002060:	f7ff ffd6 	bl	8002010 <LL_TIM_EnableIT_CC2>
  LL_TIM_EnableCounter(TIM2);
 8002064:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002068:	f7ff ffc2 	bl	8001ff0 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_CC2(TIM3);
 800206c:	4809      	ldr	r0, [pc, #36]	; (8002094 <main+0x64>)
 800206e:	f7ff ffcf 	bl	8002010 <LL_TIM_EnableIT_CC2>
  LL_TIM_EnableCounter(TIM3);
 8002072:	4808      	ldr	r0, [pc, #32]	; (8002094 <main+0x64>)
 8002074:	f7ff ffbc 	bl	8001ff0 <LL_TIM_EnableCounter>

  resetAllDigits();
 8002078:	f7fe fb16 	bl	80006a8 <resetAllDigits>

  lsm6ds0_init();
 800207c:	f7ff fe62 	bl	8001d44 <lsm6ds0_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //DIGIT_2_ON;
	  //setAllSegments();
	  lsm6ds0_get_acc(acc, (acc+1), (acc+2));
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <main+0x68>)
 8002082:	4a06      	ldr	r2, [pc, #24]	; (800209c <main+0x6c>)
 8002084:	4619      	mov	r1, r3
 8002086:	4806      	ldr	r0, [pc, #24]	; (80020a0 <main+0x70>)
 8002088:	f7ff fdfa 	bl	8001c80 <lsm6ds0_get_acc>
	  LL_mDelay(50);
 800208c:	2032      	movs	r0, #50	; 0x32
 800208e:	f001 f95b 	bl	8003348 <LL_mDelay>
	  lsm6ds0_get_acc(acc, (acc+1), (acc+2));
 8002092:	e7f5      	b.n	8002080 <main+0x50>
 8002094:	40000400 	.word	0x40000400
 8002098:	20000030 	.word	0x20000030
 800209c:	20000034 	.word	0x20000034
 80020a0:	2000002c 	.word	0x2000002c

080020a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80020a8:	2000      	movs	r0, #0
 80020aa:	f7ff ff7f 	bl	8001fac <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80020ae:	bf00      	nop
 80020b0:	f7ff ff90 	bl	8001fd4 <LL_FLASH_GetLatency>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1fa      	bne.n	80020b0 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80020ba:	f7ff fe99 	bl	8001df0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80020be:	bf00      	nop
 80020c0:	f7ff fea6 	bl	8001e10 <LL_RCC_HSI_IsReady>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d1fa      	bne.n	80020c0 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80020ca:	2010      	movs	r0, #16
 80020cc:	f7ff feb2 	bl	8001e34 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80020d0:	2000      	movs	r0, #0
 80020d2:	f7ff fee7 	bl	8001ea4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80020d6:	2000      	movs	r0, #0
 80020d8:	f7ff fef8 	bl	8001ecc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80020dc:	2000      	movs	r0, #0
 80020de:	f7ff ff09 	bl	8001ef4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7ff febc 	bl	8001e60 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80020e8:	bf00      	nop
 80020ea:	f7ff fecd 	bl	8001e88 <LL_RCC_GetSysClkSource>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1fa      	bne.n	80020ea <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80020f4:	4805      	ldr	r0, [pc, #20]	; (800210c <SystemClock_Config+0x68>)
 80020f6:	f001 f919 	bl	800332c <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80020fa:	4804      	ldr	r0, [pc, #16]	; (800210c <SystemClock_Config+0x68>)
 80020fc:	f001 f94a 	bl	8003394 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8002100:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002104:	f7ff ff0a 	bl	8001f1c <LL_RCC_SetI2CClockSource>
}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}
 800210c:	007a1200 	.word	0x007a1200

08002110 <LL_TIM_ClearFlag_UPDATE>:
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f06f 0201 	mvn.w	r2, #1
 800211e:	611a      	str	r2, [r3, #16]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_TIM_IsActiveFlag_UPDATE>:
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002156:	e7fe      	b.n	8002156 <NMI_Handler+0x4>

08002158 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215c:	e7fe      	b.n	800215c <HardFault_Handler+0x4>

0800215e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002162:	e7fe      	b.n	8002162 <MemManage_Handler+0x4>

08002164 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002168:	e7fe      	b.n	8002168 <BusFault_Handler+0x4>

0800216a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800216e:	e7fe      	b.n	800216e <UsageFault_Handler+0x4>

08002170 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 80021ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80021b0:	f7ff ffbc 	bl	800212c <LL_TIM_IsActiveFlag_UPDATE>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <TIM2_IRQHandler+0x16>
		shiftDisplayText();
 80021ba:	f7fe f8af 	bl	800031c <shiftDisplayText>
	}

	LL_TIM_ClearFlag_UPDATE(TIM2);
 80021be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80021c2:	f7ff ffa5 	bl	8002110 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3)){
 80021d0:	4806      	ldr	r0, [pc, #24]	; (80021ec <TIM3_IRQHandler+0x20>)
 80021d2:	f7ff ffab 	bl	800212c <LL_TIM_IsActiveFlag_UPDATE>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <TIM3_IRQHandler+0x14>
		updateDisplay();
 80021dc:	f7fe f810 	bl	8000200 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 80021e0:	4802      	ldr	r0, [pc, #8]	; (80021ec <TIM3_IRQHandler+0x20>)
 80021e2:	f7ff ff95 	bl	8002110 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40000400 	.word	0x40000400

080021f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <SystemInit+0x20>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	4a05      	ldr	r2, [pc, #20]	; (8002210 <SystemInit+0x20>)
 80021fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <__NVIC_GetPriorityGrouping>:
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <__NVIC_GetPriorityGrouping+0x18>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	0a1b      	lsrs	r3, r3, #8
 800221e:	f003 0307 	and.w	r3, r3, #7
}
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <__NVIC_EnableIRQ>:
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	2b00      	cmp	r3, #0
 8002240:	db0b      	blt.n	800225a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	f003 021f 	and.w	r2, r3, #31
 8002248:	4907      	ldr	r1, [pc, #28]	; (8002268 <__NVIC_EnableIRQ+0x38>)
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	2001      	movs	r0, #1
 8002252:	fa00 f202 	lsl.w	r2, r0, r2
 8002256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000e100 	.word	0xe000e100

0800226c <__NVIC_SetPriority>:
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	6039      	str	r1, [r7, #0]
 8002276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	2b00      	cmp	r3, #0
 800227e:	db0a      	blt.n	8002296 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	490c      	ldr	r1, [pc, #48]	; (80022b8 <__NVIC_SetPriority+0x4c>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	0112      	lsls	r2, r2, #4
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	440b      	add	r3, r1
 8002290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002294:	e00a      	b.n	80022ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4908      	ldr	r1, [pc, #32]	; (80022bc <__NVIC_SetPriority+0x50>)
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	3b04      	subs	r3, #4
 80022a4:	0112      	lsls	r2, r2, #4
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	440b      	add	r3, r1
 80022aa:	761a      	strb	r2, [r3, #24]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000e100 	.word	0xe000e100
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <NVIC_EncodePriority>:
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f1c3 0307 	rsb	r3, r3, #7
 80022da:	2b04      	cmp	r3, #4
 80022dc:	bf28      	it	cs
 80022de:	2304      	movcs	r3, #4
 80022e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3304      	adds	r3, #4
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d902      	bls.n	80022f0 <NVIC_EncodePriority+0x30>
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3b03      	subs	r3, #3
 80022ee:	e000      	b.n	80022f2 <NVIC_EncodePriority+0x32>
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43da      	mvns	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	401a      	ands	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002308:	f04f 31ff 	mov.w	r1, #4294967295
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	43d9      	mvns	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	4313      	orrs	r3, r2
}
 800231a:	4618      	mov	r0, r3
 800231c:	3724      	adds	r7, #36	; 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <LL_APB1_GRP1_EnableClock>:
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	4907      	ldr	r1, [pc, #28]	; (8002354 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4313      	orrs	r3, r2
 800233a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <LL_APB1_GRP1_EnableClock+0x2c>)
 800233e:	69da      	ldr	r2, [r3, #28]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4013      	ands	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40021000 	.word	0x40021000

08002358 <LL_TIM_DisableARRPreload>:
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	601a      	str	r2, [r3, #0]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <LL_TIM_OC_DisableFast>:
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d028      	beq.n	80023da <LL_TIM_OC_DisableFast+0x62>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b04      	cmp	r3, #4
 800238c:	d023      	beq.n	80023d6 <LL_TIM_OC_DisableFast+0x5e>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b10      	cmp	r3, #16
 8002392:	d01e      	beq.n	80023d2 <LL_TIM_OC_DisableFast+0x5a>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2b40      	cmp	r3, #64	; 0x40
 8002398:	d019      	beq.n	80023ce <LL_TIM_OC_DisableFast+0x56>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a0:	d013      	beq.n	80023ca <LL_TIM_OC_DisableFast+0x52>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a8:	d00d      	beq.n	80023c6 <LL_TIM_OC_DisableFast+0x4e>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b0:	d007      	beq.n	80023c2 <LL_TIM_OC_DisableFast+0x4a>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b8:	d101      	bne.n	80023be <LL_TIM_OC_DisableFast+0x46>
 80023ba:	2307      	movs	r3, #7
 80023bc:	e00e      	b.n	80023dc <LL_TIM_OC_DisableFast+0x64>
 80023be:	2308      	movs	r3, #8
 80023c0:	e00c      	b.n	80023dc <LL_TIM_OC_DisableFast+0x64>
 80023c2:	2306      	movs	r3, #6
 80023c4:	e00a      	b.n	80023dc <LL_TIM_OC_DisableFast+0x64>
 80023c6:	2305      	movs	r3, #5
 80023c8:	e008      	b.n	80023dc <LL_TIM_OC_DisableFast+0x64>
 80023ca:	2304      	movs	r3, #4
 80023cc:	e006      	b.n	80023dc <LL_TIM_OC_DisableFast+0x64>
 80023ce:	2303      	movs	r3, #3
 80023d0:	e004      	b.n	80023dc <LL_TIM_OC_DisableFast+0x64>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e002      	b.n	80023dc <LL_TIM_OC_DisableFast+0x64>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <LL_TIM_OC_DisableFast+0x64>
 80023da:	2300      	movs	r3, #0
 80023dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3318      	adds	r3, #24
 80023e2:	4619      	mov	r1, r3
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <LL_TIM_OC_DisableFast+0x9c>)
 80023e8:	5cd3      	ldrb	r3, [r2, r3]
 80023ea:	440b      	add	r3, r1
 80023ec:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	4908      	ldr	r1, [pc, #32]	; (8002418 <LL_TIM_OC_DisableFast+0xa0>)
 80023f6:	5ccb      	ldrb	r3, [r1, r3]
 80023f8:	4619      	mov	r1, r3
 80023fa:	2304      	movs	r3, #4
 80023fc:	408b      	lsls	r3, r1
 80023fe:	43db      	mvns	r3, r3
 8002400:	401a      	ands	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	601a      	str	r2, [r3, #0]
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	08003438 	.word	0x08003438
 8002418:	08003444 	.word	0x08003444

0800241c <LL_TIM_SetClockSource>:
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800242e:	f023 0307 	bic.w	r3, r3, #7
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	609a      	str	r2, [r3, #8]
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <LL_TIM_SetTriggerOutput>:
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	605a      	str	r2, [r3, #4]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_TIM_DisableMasterSlaveMode>:
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	609a      	str	r2, [r3, #8]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08e      	sub	sp, #56	; 0x38
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	60da      	str	r2, [r3, #12]
 80024a0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	2220      	movs	r2, #32
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 ffa7 	bl	80033fc <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80024ae:	2001      	movs	r0, #1
 80024b0:	f7ff ff3a 	bl	8002328 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80024b4:	f7ff feae 	bl	8002214 <__NVIC_GetPriorityGrouping>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2200      	movs	r2, #0
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fefe 	bl	80022c0 <NVIC_EncodePriority>
 80024c4:	4603      	mov	r3, r0
 80024c6:	4619      	mov	r1, r3
 80024c8:	201c      	movs	r0, #28
 80024ca:	f7ff fecf 	bl	800226c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80024ce:	201c      	movs	r0, #28
 80024d0:	f7ff feae 	bl	8002230 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 80024d4:	f240 331f 	movw	r3, #799	; 0x31f
 80024d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80024da:	2300      	movs	r3, #0
 80024dc:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 4999;
 80024de:	f241 3387 	movw	r3, #4999	; 0x1387
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80024e4:	2300      	movs	r3, #0
 80024e6:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80024e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ec:	4619      	mov	r1, r3
 80024ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024f2:	f000 fb97 	bl	8002c24 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80024f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024fa:	f7ff ff2d 	bl	8002358 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80024fe:	2100      	movs	r1, #0
 8002500:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002504:	f7ff ff8a 	bl	800241c <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8002508:	2300      	movs	r3, #0
 800250a:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	461a      	mov	r2, r3
 8002520:	2101      	movs	r1, #1
 8002522:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002526:	f000 fbef 	bl	8002d08 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 800252a:	2101      	movs	r1, #1
 800252c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002530:	f7ff ff22 	bl	8002378 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002534:	2100      	movs	r1, #0
 8002536:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800253a:	f7ff ff84 	bl	8002446 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800253e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002542:	f7ff ff93 	bl	800246c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002546:	bf00      	nop
 8002548:	3738      	adds	r7, #56	; 0x38
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08e      	sub	sp, #56	; 0x38
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
 8002564:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002566:	1d3b      	adds	r3, r7, #4
 8002568:	2220      	movs	r2, #32
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f000 ff45 	bl	80033fc <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002572:	2002      	movs	r0, #2
 8002574:	f7ff fed8 	bl	8002328 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002578:	f7ff fe4c 	bl	8002214 <__NVIC_GetPriorityGrouping>
 800257c:	4603      	mov	r3, r0
 800257e:	2200      	movs	r2, #0
 8002580:	2100      	movs	r1, #0
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fe9c 	bl	80022c0 <NVIC_EncodePriority>
 8002588:	4603      	mov	r3, r0
 800258a:	4619      	mov	r1, r3
 800258c:	201d      	movs	r0, #29
 800258e:	f7ff fe6d 	bl	800226c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002592:	201d      	movs	r0, #29
 8002594:	f7ff fe4c 	bl	8002230 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8002598:	f240 331f 	movw	r3, #799	; 0x31f
 800259c:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800259e:	2300      	movs	r3, #0
 80025a0:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 99;
 80025a2:	2363      	movs	r3, #99	; 0x63
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80025a6:	2300      	movs	r3, #0
 80025a8:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80025aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ae:	4619      	mov	r1, r3
 80025b0:	4814      	ldr	r0, [pc, #80]	; (8002604 <MX_TIM3_Init+0xb4>)
 80025b2:	f000 fb37 	bl	8002c24 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80025b6:	4813      	ldr	r0, [pc, #76]	; (8002604 <MX_TIM3_Init+0xb4>)
 80025b8:	f7ff fece 	bl	8002358 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80025bc:	2100      	movs	r1, #0
 80025be:	4811      	ldr	r0, [pc, #68]	; (8002604 <MX_TIM3_Init+0xb4>)
 80025c0:	f7ff ff2c 	bl	800241c <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 80025c4:	2300      	movs	r3, #0
 80025c6:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80025d8:	1d3b      	adds	r3, r7, #4
 80025da:	461a      	mov	r2, r3
 80025dc:	2101      	movs	r1, #1
 80025de:	4809      	ldr	r0, [pc, #36]	; (8002604 <MX_TIM3_Init+0xb4>)
 80025e0:	f000 fb92 	bl	8002d08 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80025e4:	2101      	movs	r1, #1
 80025e6:	4807      	ldr	r0, [pc, #28]	; (8002604 <MX_TIM3_Init+0xb4>)
 80025e8:	f7ff fec6 	bl	8002378 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80025ec:	2100      	movs	r1, #0
 80025ee:	4805      	ldr	r0, [pc, #20]	; (8002604 <MX_TIM3_Init+0xb4>)
 80025f0:	f7ff ff29 	bl	8002446 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80025f4:	4803      	ldr	r0, [pc, #12]	; (8002604 <MX_TIM3_Init+0xb4>)
 80025f6:	f7ff ff39 	bl	800246c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025fa:	bf00      	nop
 80025fc:	3738      	adds	r7, #56	; 0x38
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40000400 	.word	0x40000400

08002608 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002640 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800260c:	480d      	ldr	r0, [pc, #52]	; (8002644 <LoopForever+0x6>)
  ldr r1, =_edata
 800260e:	490e      	ldr	r1, [pc, #56]	; (8002648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002610:	4a0e      	ldr	r2, [pc, #56]	; (800264c <LoopForever+0xe>)
  movs r3, #0
 8002612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002614:	e002      	b.n	800261c <LoopCopyDataInit>

08002616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261a:	3304      	adds	r3, #4

0800261c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800261c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800261e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002620:	d3f9      	bcc.n	8002616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002622:	4a0b      	ldr	r2, [pc, #44]	; (8002650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002624:	4c0b      	ldr	r4, [pc, #44]	; (8002654 <LoopForever+0x16>)
  movs r3, #0
 8002626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002628:	e001      	b.n	800262e <LoopFillZerobss>

0800262a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800262c:	3204      	adds	r2, #4

0800262e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800262e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002630:	d3fb      	bcc.n	800262a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002632:	f7ff fddd 	bl	80021f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002636:	f000 febd 	bl	80033b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800263a:	f7ff fcf9 	bl	8002030 <main>

0800263e <LoopForever>:

LoopForever:
    b LoopForever
 800263e:	e7fe      	b.n	800263e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002640:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002648:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 800264c:	08003458 	.word	0x08003458
  ldr r2, =_sbss
 8002650:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8002654:	20000044 	.word	0x20000044

08002658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002658:	e7fe      	b.n	8002658 <ADC1_2_IRQHandler>

0800265a <LL_GPIO_SetPinMode>:
{
 800265a:	b480      	push	{r7}
 800265c:	b089      	sub	sp, #36	; 0x24
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	fab3 f383 	clz	r3, r3
 800267c:	b2db      	uxtb	r3, r3
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	2103      	movs	r1, #3
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	401a      	ands	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	61bb      	str	r3, [r7, #24]
  return result;
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	431a      	orrs	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	601a      	str	r2, [r3, #0]
}
 80026ac:	bf00      	nop
 80026ae:	3724      	adds	r7, #36	; 0x24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <LL_GPIO_SetPinOutputType>:
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	401a      	ands	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	fb01 f303 	mul.w	r3, r1, r3
 80026d6:	431a      	orrs	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	605a      	str	r2, [r3, #4]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_GPIO_SetPinSpeed>:
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	; 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	613b      	str	r3, [r7, #16]
  return result;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	2103      	movs	r1, #3
 8002710:	fa01 f303 	lsl.w	r3, r1, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	401a      	ands	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	61bb      	str	r3, [r7, #24]
  return result;
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	fa01 f303 	lsl.w	r3, r1, r3
 8002734:	431a      	orrs	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	609a      	str	r2, [r3, #8]
}
 800273a:	bf00      	nop
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <LL_GPIO_SetPinPull>:
{
 8002746:	b480      	push	{r7}
 8002748:	b089      	sub	sp, #36	; 0x24
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	613b      	str	r3, [r7, #16]
  return result;
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	fab3 f383 	clz	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	2103      	movs	r1, #3
 800276e:	fa01 f303 	lsl.w	r3, r1, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	401a      	ands	r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	61bb      	str	r3, [r7, #24]
  return result;
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	fab3 f383 	clz	r3, r3
 8002788:	b2db      	uxtb	r3, r3
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	431a      	orrs	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	60da      	str	r2, [r3, #12]
}
 8002798:	bf00      	nop
 800279a:	3724      	adds	r7, #36	; 0x24
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_GPIO_SetAFPin_0_7>:
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	; 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a1a      	ldr	r2, [r3, #32]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	613b      	str	r3, [r7, #16]
  return result;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	210f      	movs	r1, #15
 80027cc:	fa01 f303 	lsl.w	r3, r1, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	401a      	ands	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	61bb      	str	r3, [r7, #24]
  return result;
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	431a      	orrs	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	621a      	str	r2, [r3, #32]
}
 80027f6:	bf00      	nop
 80027f8:	3724      	adds	r7, #36	; 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <LL_GPIO_SetAFPin_8_15>:
{
 8002802:	b480      	push	{r7}
 8002804:	b089      	sub	sp, #36	; 0x24
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	613b      	str	r3, [r7, #16]
  return result;
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	210f      	movs	r1, #15
 800282c:	fa01 f303 	lsl.w	r3, r1, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	401a      	ands	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa93 f3a3 	rbit	r3, r3
 8002840:	61bb      	str	r3, [r7, #24]
  return result;
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	431a      	orrs	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002858:	bf00      	nop
 800285a:	3724      	adds	r7, #36	; 0x24
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa93 f3a3 	rbit	r3, r3
 800287a:	613b      	str	r3, [r7, #16]
  return result;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002886:	e051      	b.n	800292c <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	2101      	movs	r1, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d043      	beq.n	8002926 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d003      	beq.n	80028ae <LL_GPIO_Init+0x4a>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d10e      	bne.n	80028cc <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	461a      	mov	r2, r3
 80028b4:	69b9      	ldr	r1, [r7, #24]
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ff16 	bl	80026e8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	6819      	ldr	r1, [r3, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	461a      	mov	r2, r3
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff fef6 	bl	80026b8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	461a      	mov	r2, r3
 80028d2:	69b9      	ldr	r1, [r7, #24]
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff36 	bl	8002746 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d11a      	bne.n	8002918 <LL_GPIO_Init+0xb4>
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	fa93 f3a3 	rbit	r3, r3
 80028ec:	60bb      	str	r3, [r7, #8]
  return result;
 80028ee:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b07      	cmp	r3, #7
 80028f8:	d807      	bhi.n	800290a <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	461a      	mov	r2, r3
 8002900:	69b9      	ldr	r1, [r7, #24]
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff ff4e 	bl	80027a4 <LL_GPIO_SetAFPin_0_7>
 8002908:	e006      	b.n	8002918 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	461a      	mov	r2, r3
 8002910:	69b9      	ldr	r1, [r7, #24]
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff ff75 	bl	8002802 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	461a      	mov	r2, r3
 800291e:	69b9      	ldr	r1, [r7, #24]
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff fe9a 	bl	800265a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3301      	adds	r3, #1
 800292a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	fa22 f303 	lsr.w	r3, r2, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1a6      	bne.n	8002888 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3720      	adds	r7, #32
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <LL_I2C_Enable>:
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f043 0201 	orr.w	r2, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	601a      	str	r2, [r3, #0]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <LL_I2C_Disable>:
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f023 0201 	bic.w	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	601a      	str	r2, [r3, #0]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_I2C_ConfigFilters>:
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	0219      	lsls	r1, r3, #8
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	430b      	orrs	r3, r1
 80029a0:	431a      	orrs	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	601a      	str	r2, [r3, #0]
}
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <LL_I2C_SetOwnAddress1>:
{
 80029b2:	b480      	push	{r7}
 80029b4:	b085      	sub	sp, #20
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80029c6:	f023 0307 	bic.w	r3, r3, #7
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	431a      	orrs	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	609a      	str	r2, [r3, #8]
}
 80029d6:	bf00      	nop
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <LL_I2C_EnableOwnAddress1>:
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	609a      	str	r2, [r3, #8]
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <LL_I2C_DisableOwnAddress1>:
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	609a      	str	r2, [r3, #8]
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <LL_I2C_SetTiming>:
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	611a      	str	r2, [r3, #16]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <LL_I2C_SetMode>:
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	601a      	str	r2, [r3, #0]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <LL_I2C_AcknowledgeNextData>:
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	605a      	str	r2, [r3, #4]
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff ff65 	bl	8002964 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6899      	ldr	r1, [r3, #8]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff ff6d 	bl	8002984 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4619      	mov	r1, r3
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff ffb6 	bl	8002a22 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ff44 	bl	8002944 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ffa0 	bl	8002a02 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	6919      	ldr	r1, [r3, #16]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	461a      	mov	r2, r3
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff ff70 	bl	80029b2 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ff81 	bl	80029e2 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff ffa9 	bl	8002a3e <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	4619      	mov	r1, r3
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff ffb6 	bl	8002a64 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <LL_TIM_SetPrescaler>:
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_TIM_SetAutoReload>:
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <LL_TIM_SetRepetitionCounter>:
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <LL_TIM_OC_SetCompareCH1>:
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <LL_TIM_OC_SetCompareCH2>:
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <LL_TIM_OC_SetCompareCH3>:
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <LL_TIM_OC_SetCompareCH4>:
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <LL_TIM_OC_SetCompareCH5>:
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_TIM_OC_SetCompareCH6>:
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f043 0201 	orr.w	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	615a      	str	r2, [r3, #20]
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a2f      	ldr	r2, [pc, #188]	; (8002cf4 <LL_TIM_Init+0xd0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d007      	beq.n	8002c4c <LL_TIM_Init+0x28>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c42:	d003      	beq.n	8002c4c <LL_TIM_Init+0x28>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a2c      	ldr	r2, [pc, #176]	; (8002cf8 <LL_TIM_Init+0xd4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d106      	bne.n	8002c5a <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a25      	ldr	r2, [pc, #148]	; (8002cf4 <LL_TIM_Init+0xd0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d013      	beq.n	8002c8a <LL_TIM_Init+0x66>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c68:	d00f      	beq.n	8002c8a <LL_TIM_Init+0x66>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a22      	ldr	r2, [pc, #136]	; (8002cf8 <LL_TIM_Init+0xd4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d00b      	beq.n	8002c8a <LL_TIM_Init+0x66>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a21      	ldr	r2, [pc, #132]	; (8002cfc <LL_TIM_Init+0xd8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d007      	beq.n	8002c8a <LL_TIM_Init+0x66>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a20      	ldr	r2, [pc, #128]	; (8002d00 <LL_TIM_Init+0xdc>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d003      	beq.n	8002c8a <LL_TIM_Init+0x66>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a1f      	ldr	r2, [pc, #124]	; (8002d04 <LL_TIM_Init+0xe0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d106      	bne.n	8002c98 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff ff3a 	bl	8002b1e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	4619      	mov	r1, r3
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff ff26 	bl	8002b02 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a0e      	ldr	r2, [pc, #56]	; (8002cf4 <LL_TIM_Init+0xd0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00b      	beq.n	8002cd6 <LL_TIM_Init+0xb2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a0e      	ldr	r2, [pc, #56]	; (8002cfc <LL_TIM_Init+0xd8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d007      	beq.n	8002cd6 <LL_TIM_Init+0xb2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a0d      	ldr	r2, [pc, #52]	; (8002d00 <LL_TIM_Init+0xdc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d003      	beq.n	8002cd6 <LL_TIM_Init+0xb2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a0c      	ldr	r2, [pc, #48]	; (8002d04 <LL_TIM_Init+0xe0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d105      	bne.n	8002ce2 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff ff2c 	bl	8002b3a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7ff ff8d 	bl	8002c02 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	40014000 	.word	0x40014000
 8002d00:	40014400 	.word	0x40014400
 8002d04:	40014800 	.word	0x40014800

08002d08 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d1e:	d045      	beq.n	8002dac <LL_TIM_OC_Init+0xa4>
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d26:	d848      	bhi.n	8002dba <LL_TIM_OC_Init+0xb2>
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2e:	d036      	beq.n	8002d9e <LL_TIM_OC_Init+0x96>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d36:	d840      	bhi.n	8002dba <LL_TIM_OC_Init+0xb2>
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3e:	d027      	beq.n	8002d90 <LL_TIM_OC_Init+0x88>
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d46:	d838      	bhi.n	8002dba <LL_TIM_OC_Init+0xb2>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d4e:	d018      	beq.n	8002d82 <LL_TIM_OC_Init+0x7a>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d56:	d830      	bhi.n	8002dba <LL_TIM_OC_Init+0xb2>
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d003      	beq.n	8002d66 <LL_TIM_OC_Init+0x5e>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d007      	beq.n	8002d74 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8002d64:	e029      	b.n	8002dba <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f82d 	bl	8002dc8 <OC1Config>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	75fb      	strb	r3, [r7, #23]
      break;
 8002d72:	e023      	b.n	8002dbc <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f8a0 	bl	8002ebc <OC2Config>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d80:	e01c      	b.n	8002dbc <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f917 	bl	8002fb8 <OC3Config>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d8e:	e015      	b.n	8002dbc <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f98e 	bl	80030b4 <OC4Config>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d9c:	e00e      	b.n	8002dbc <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f9ed 	bl	8003180 <OC5Config>
 8002da6:	4603      	mov	r3, r0
 8002da8:	75fb      	strb	r3, [r7, #23]
      break;
 8002daa:	e007      	b.n	8002dbc <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fa44 	bl	800323c <OC6Config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	75fb      	strb	r3, [r7, #23]
      break;
 8002db8:	e000      	b.n	8002dbc <LL_TIM_OC_Init+0xb4>
      break;
 8002dba:	bf00      	nop
  }

  return result;
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	f023 0201 	bic.w	r2, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f023 0303 	bic.w	r3, r3, #3
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f023 0202 	bic.w	r2, r3, #2
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f023 0201 	bic.w	r2, r3, #1
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a20      	ldr	r2, [pc, #128]	; (8002eac <OC1Config+0xe4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00b      	beq.n	8002e46 <OC1Config+0x7e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a1f      	ldr	r2, [pc, #124]	; (8002eb0 <OC1Config+0xe8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d007      	beq.n	8002e46 <OC1Config+0x7e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a1e      	ldr	r2, [pc, #120]	; (8002eb4 <OC1Config+0xec>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d003      	beq.n	8002e46 <OC1Config+0x7e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a1d      	ldr	r2, [pc, #116]	; (8002eb8 <OC1Config+0xf0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d11e      	bne.n	8002e84 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f023 0208 	bic.w	r2, r3, #8
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4313      	orrs	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f023 0204 	bic.w	r2, r3, #4
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4313      	orrs	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4619      	mov	r1, r3
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff fe5d 	bl	8002b56 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40012c00 	.word	0x40012c00
 8002eb0:	40014000 	.word	0x40014000
 8002eb4:	40014400 	.word	0x40014400
 8002eb8:	40014800 	.word	0x40014800

08002ebc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	f023 0210 	bic.w	r2, r3, #16
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	6812      	ldr	r2, [r2, #0]
 8002efa:	0212      	lsls	r2, r2, #8
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f023 0220 	bic.w	r2, r3, #32
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f023 0210 	bic.w	r2, r3, #16
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a21      	ldr	r2, [pc, #132]	; (8002fa8 <OC2Config+0xec>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00b      	beq.n	8002f40 <OC2Config+0x84>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a20      	ldr	r2, [pc, #128]	; (8002fac <OC2Config+0xf0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d007      	beq.n	8002f40 <OC2Config+0x84>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <OC2Config+0xf4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d003      	beq.n	8002f40 <OC2Config+0x84>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a1e      	ldr	r2, [pc, #120]	; (8002fb4 <OC2Config+0xf8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d11f      	bne.n	8002f80 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	019b      	lsls	r3, r3, #6
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	019b      	lsls	r3, r3, #6
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4619      	mov	r1, r3
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff fded 	bl	8002b72 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40012c00 	.word	0x40012c00
 8002fac:	40014000 	.word	0x40014000
 8002fb0:	40014400 	.word	0x40014400
 8002fb4:	40014800 	.word	0x40014800

08002fb8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0303 	bic.w	r3, r3, #3
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	021b      	lsls	r3, r3, #8
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	4313      	orrs	r3, r2
 8003018:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a21      	ldr	r2, [pc, #132]	; (80030a4 <OC3Config+0xec>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00b      	beq.n	800303a <OC3Config+0x82>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a20      	ldr	r2, [pc, #128]	; (80030a8 <OC3Config+0xf0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d007      	beq.n	800303a <OC3Config+0x82>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a1f      	ldr	r2, [pc, #124]	; (80030ac <OC3Config+0xf4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d003      	beq.n	800303a <OC3Config+0x82>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a1e      	ldr	r2, [pc, #120]	; (80030b0 <OC3Config+0xf8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d11f      	bne.n	800307a <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	029b      	lsls	r3, r3, #10
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	029b      	lsls	r3, r3, #10
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	015b      	lsls	r3, r3, #5
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	4619      	mov	r1, r3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff fd7e 	bl	8002b8e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40012c00 	.word	0x40012c00
 80030a8:	40014000 	.word	0x40014000
 80030ac:	40014400 	.word	0x40014400
 80030b0:	40014800 	.word	0x40014800

080030b4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	6812      	ldr	r2, [r2, #0]
 80030f2:	0212      	lsls	r2, r2, #8
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	031b      	lsls	r3, r3, #12
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	031b      	lsls	r3, r3, #12
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a15      	ldr	r2, [pc, #84]	; (8003170 <OC4Config+0xbc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00b      	beq.n	8003138 <OC4Config+0x84>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a14      	ldr	r2, [pc, #80]	; (8003174 <OC4Config+0xc0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d007      	beq.n	8003138 <OC4Config+0x84>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a13      	ldr	r2, [pc, #76]	; (8003178 <OC4Config+0xc4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d003      	beq.n	8003138 <OC4Config+0x84>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a12      	ldr	r2, [pc, #72]	; (800317c <OC4Config+0xc8>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d107      	bne.n	8003148 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	019b      	lsls	r3, r3, #6
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4619      	mov	r1, r3
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff fd25 	bl	8002baa <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40012c00 	.word	0x40012c00
 8003174:	40014000 	.word	0x40014000
 8003178:	40014400 	.word	0x40014400
 800317c:	40014800 	.word	0x40014800

08003180 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	041b      	lsls	r3, r3, #16
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	041b      	lsls	r3, r3, #16
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a15      	ldr	r2, [pc, #84]	; (800322c <OC5Config+0xac>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00b      	beq.n	80031f4 <OC5Config+0x74>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a14      	ldr	r2, [pc, #80]	; (8003230 <OC5Config+0xb0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d007      	beq.n	80031f4 <OC5Config+0x74>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a13      	ldr	r2, [pc, #76]	; (8003234 <OC5Config+0xb4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d003      	beq.n	80031f4 <OC5Config+0x74>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a12      	ldr	r2, [pc, #72]	; (8003238 <OC5Config+0xb8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d109      	bne.n	8003208 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	4619      	mov	r1, r3
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fcd6 	bl	8002bc6 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40012c00 	.word	0x40012c00
 8003230:	40014000 	.word	0x40014000
 8003234:	40014400 	.word	0x40014400
 8003238:	40014800 	.word	0x40014800

0800323c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	0212      	lsls	r2, r2, #8
 800326e:	4313      	orrs	r3, r2
 8003270:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	051b      	lsls	r3, r3, #20
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	051b      	lsls	r3, r3, #20
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a14      	ldr	r2, [pc, #80]	; (80032e8 <OC6Config+0xac>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00b      	beq.n	80032b2 <OC6Config+0x76>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a13      	ldr	r2, [pc, #76]	; (80032ec <OC6Config+0xb0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d007      	beq.n	80032b2 <OC6Config+0x76>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a12      	ldr	r2, [pc, #72]	; (80032f0 <OC6Config+0xb4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d003      	beq.n	80032b2 <OC6Config+0x76>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a11      	ldr	r2, [pc, #68]	; (80032f4 <OC6Config+0xb8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d109      	bne.n	80032c6 <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	029b      	lsls	r3, r3, #10
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4619      	mov	r1, r3
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff fc87 	bl	8002be6 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40012c00 	.word	0x40012c00
 80032ec:	40014000 	.word	0x40014000
 80032f0:	40014400 	.word	0x40014400
 80032f4:	40014800 	.word	0x40014800

080032f8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	fbb2 f3f3 	udiv	r3, r2, r3
 800330a:	4a07      	ldr	r2, [pc, #28]	; (8003328 <LL_InitTick+0x30>)
 800330c:	3b01      	subs	r3, #1
 800330e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <LL_InitTick+0x30>)
 8003312:	2200      	movs	r2, #0
 8003314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003316:	4b04      	ldr	r3, [pc, #16]	; (8003328 <LL_InitTick+0x30>)
 8003318:	2205      	movs	r2, #5
 800331a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	e000e010 	.word	0xe000e010

0800332c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003334:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ffdd 	bl	80032f8 <LL_InitTick>
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003350:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <LL_mDelay+0x48>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003356:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335e:	d00c      	beq.n	800337a <LL_mDelay+0x32>
  {
    Delay++;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3301      	adds	r3, #1
 8003364:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003366:	e008      	b.n	800337a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <LL_mDelay+0x48>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <LL_mDelay+0x32>
    {
      Delay--;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3b01      	subs	r3, #1
 8003378:	607b      	str	r3, [r7, #4]
  while (Delay)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1f3      	bne.n	8003368 <LL_mDelay+0x20>
    }
  }
}
 8003380:	bf00      	nop
 8003382:	bf00      	nop
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	e000e010 	.word	0xe000e010

08003394 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800339c:	4a04      	ldr	r2, [pc, #16]	; (80033b0 <LL_SetSystemCoreClock+0x1c>)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6013      	str	r3, [r2, #0]
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	20000004 	.word	0x20000004

080033b4 <__libc_init_array>:
 80033b4:	b570      	push	{r4, r5, r6, lr}
 80033b6:	4d0d      	ldr	r5, [pc, #52]	; (80033ec <__libc_init_array+0x38>)
 80033b8:	4c0d      	ldr	r4, [pc, #52]	; (80033f0 <__libc_init_array+0x3c>)
 80033ba:	1b64      	subs	r4, r4, r5
 80033bc:	10a4      	asrs	r4, r4, #2
 80033be:	2600      	movs	r6, #0
 80033c0:	42a6      	cmp	r6, r4
 80033c2:	d109      	bne.n	80033d8 <__libc_init_array+0x24>
 80033c4:	4d0b      	ldr	r5, [pc, #44]	; (80033f4 <__libc_init_array+0x40>)
 80033c6:	4c0c      	ldr	r4, [pc, #48]	; (80033f8 <__libc_init_array+0x44>)
 80033c8:	f000 f820 	bl	800340c <_init>
 80033cc:	1b64      	subs	r4, r4, r5
 80033ce:	10a4      	asrs	r4, r4, #2
 80033d0:	2600      	movs	r6, #0
 80033d2:	42a6      	cmp	r6, r4
 80033d4:	d105      	bne.n	80033e2 <__libc_init_array+0x2e>
 80033d6:	bd70      	pop	{r4, r5, r6, pc}
 80033d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033dc:	4798      	blx	r3
 80033de:	3601      	adds	r6, #1
 80033e0:	e7ee      	b.n	80033c0 <__libc_init_array+0xc>
 80033e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e6:	4798      	blx	r3
 80033e8:	3601      	adds	r6, #1
 80033ea:	e7f2      	b.n	80033d2 <__libc_init_array+0x1e>
 80033ec:	08003450 	.word	0x08003450
 80033f0:	08003450 	.word	0x08003450
 80033f4:	08003450 	.word	0x08003450
 80033f8:	08003454 	.word	0x08003454

080033fc <memset>:
 80033fc:	4402      	add	r2, r0
 80033fe:	4603      	mov	r3, r0
 8003400:	4293      	cmp	r3, r2
 8003402:	d100      	bne.n	8003406 <memset+0xa>
 8003404:	4770      	bx	lr
 8003406:	f803 1b01 	strb.w	r1, [r3], #1
 800340a:	e7f9      	b.n	8003400 <memset+0x4>

0800340c <_init>:
 800340c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340e:	bf00      	nop
 8003410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003412:	bc08      	pop	{r3}
 8003414:	469e      	mov	lr, r3
 8003416:	4770      	bx	lr

08003418 <_fini>:
 8003418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341a:	bf00      	nop
 800341c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341e:	bc08      	pop	{r3}
 8003420:	469e      	mov	lr, r3
 8003422:	4770      	bx	lr
