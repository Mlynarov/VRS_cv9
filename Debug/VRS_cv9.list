
VRS_cv9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003240  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080033c8  080033c8  000133c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033f4  080033f4  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080033f4  080033f4  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033f4  080033f4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033f4  080033f4  000133f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033f8  080033f8  000133f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080033fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          0000003c  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000044  20000044  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007332  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017c8  00000000  00000000  0002736a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000828  00000000  00000000  00028b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000760  00000000  00000000  00029360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c7e  00000000  00000000  00029ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000659a  00000000  00000000  0004073e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079725  00000000  00000000  00046cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c03fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f6c  00000000  00000000  000c0450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080033b0 	.word	0x080033b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	080033b0 	.word	0x080033b0

080001c8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	619a      	str	r2, [r3, #24]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	683a      	ldr	r2, [r7, #0]
 80001f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <updateDisplay>:
#include "display.h"
uint8_t updateDigit = 1;
uint8_t displayTextPos = 0;
uint8_t direction = 0;

void updateDisplay(){
 8000200:	b5b0      	push	{r4, r5, r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
	char displayString[] = "MICHAL_MOLnAr_98352";
 8000206:	4b41      	ldr	r3, [pc, #260]	; (800030c <updateDisplay+0x10c>)
 8000208:	463c      	mov	r4, r7
 800020a:	461d      	mov	r5, r3
 800020c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800020e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000210:	682b      	ldr	r3, [r5, #0]
 8000212:	6023      	str	r3, [r4, #0]
	for(int i = 1; i<5; i++){
 8000214:	2301      	movs	r3, #1
 8000216:	617b      	str	r3, [r7, #20]
 8000218:	e06f      	b.n	80002fa <updateDisplay+0xfa>
		switch(updateDigit){
 800021a:	4b3d      	ldr	r3, [pc, #244]	; (8000310 <updateDisplay+0x110>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3b01      	subs	r3, #1
 8000220:	2b03      	cmp	r3, #3
 8000222:	d856      	bhi.n	80002d2 <updateDisplay+0xd2>
 8000224:	a201      	add	r2, pc, #4	; (adr r2, 800022c <updateDisplay+0x2c>)
 8000226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800022a:	bf00      	nop
 800022c:	0800023d 	.word	0x0800023d
 8000230:	08000261 	.word	0x08000261
 8000234:	08000287 	.word	0x08000287
 8000238:	080002ad 	.word	0x080002ad
				case 1:
					DIGIT_1_ON;
 800023c:	2120      	movs	r1, #32
 800023e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000242:	f7ff ffc1 	bl	80001c8 <LL_GPIO_SetOutputPin>
					resetAllSegments();
 8000246:	f000 f9ff 	bl	8000648 <resetAllSegments>
					displayLetter(displayString[displayTextPos]);
 800024a:	4b32      	ldr	r3, [pc, #200]	; (8000314 <updateDisplay+0x114>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	f107 0218 	add.w	r2, r7, #24
 8000252:	4413      	add	r3, r2
 8000254:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000258:	4618      	mov	r0, r3
 800025a:	f000 f8ab 	bl	80003b4 <displayLetter>
					break;
 800025e:	e038      	b.n	80002d2 <updateDisplay+0xd2>
				case 2:
					DIGIT_2_ON;
 8000260:	2110      	movs	r1, #16
 8000262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000266:	f7ff ffaf 	bl	80001c8 <LL_GPIO_SetOutputPin>
					resetAllSegments();
 800026a:	f000 f9ed 	bl	8000648 <resetAllSegments>
					displayLetter(displayString[displayTextPos+1]);
 800026e:	4b29      	ldr	r3, [pc, #164]	; (8000314 <updateDisplay+0x114>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	3301      	adds	r3, #1
 8000274:	f107 0218 	add.w	r2, r7, #24
 8000278:	4413      	add	r3, r2
 800027a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800027e:	4618      	mov	r0, r3
 8000280:	f000 f898 	bl	80003b4 <displayLetter>
					break;
 8000284:	e025      	b.n	80002d2 <updateDisplay+0xd2>
				case 3:
					DIGIT_3_ON;
 8000286:	2140      	movs	r1, #64	; 0x40
 8000288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028c:	f7ff ff9c 	bl	80001c8 <LL_GPIO_SetOutputPin>
					resetAllSegments();
 8000290:	f000 f9da 	bl	8000648 <resetAllSegments>
					displayLetter(displayString[displayTextPos+2]);
 8000294:	4b1f      	ldr	r3, [pc, #124]	; (8000314 <updateDisplay+0x114>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	3302      	adds	r3, #2
 800029a:	f107 0218 	add.w	r2, r7, #24
 800029e:	4413      	add	r3, r2
 80002a0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f885 	bl	80003b4 <displayLetter>
					break;
 80002aa:	e012      	b.n	80002d2 <updateDisplay+0xd2>
				case 4:
					DIGIT_4_ON;
 80002ac:	2104      	movs	r1, #4
 80002ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b2:	f7ff ff89 	bl	80001c8 <LL_GPIO_SetOutputPin>
					resetAllSegments();
 80002b6:	f000 f9c7 	bl	8000648 <resetAllSegments>
					displayLetter(displayString[displayTextPos+3]);
 80002ba:	4b16      	ldr	r3, [pc, #88]	; (8000314 <updateDisplay+0x114>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	3303      	adds	r3, #3
 80002c0:	f107 0218 	add.w	r2, r7, #24
 80002c4:	4413      	add	r3, r2
 80002c6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f872 	bl	80003b4 <displayLetter>
					break;
 80002d0:	bf00      	nop
			}
			updateDigit = (updateDigit < 4) ? updateDigit+1 : 1;
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <updateDisplay+0x110>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b03      	cmp	r3, #3
 80002d8:	d804      	bhi.n	80002e4 <updateDisplay+0xe4>
 80002da:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <updateDisplay+0x110>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	3301      	adds	r3, #1
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	e000      	b.n	80002e6 <updateDisplay+0xe6>
 80002e4:	2301      	movs	r3, #1
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <updateDisplay+0x110>)
 80002e8:	7013      	strb	r3, [r2, #0]
			LL_mDelay(2);
 80002ea:	2002      	movs	r0, #2
 80002ec:	f002 fffe 	bl	80032ec <LL_mDelay>
			resetAllDigits();
 80002f0:	f000 f9d8 	bl	80006a4 <resetAllDigits>
	for(int i = 1; i<5; i++){
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	3301      	adds	r3, #1
 80002f8:	617b      	str	r3, [r7, #20]
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	2b04      	cmp	r3, #4
 80002fe:	dd8c      	ble.n	800021a <updateDisplay+0x1a>
	}

}
 8000300:	bf00      	nop
 8000302:	bf00      	nop
 8000304:	3718      	adds	r7, #24
 8000306:	46bd      	mov	sp, r7
 8000308:	bdb0      	pop	{r4, r5, r7, pc}
 800030a:	bf00      	nop
 800030c:	080033c8 	.word	0x080033c8
 8000310:	20000000 	.word	0x20000000
 8000314:	20000024 	.word	0x20000024

08000318 <shiftDisplayText>:

void shiftDisplayText(){
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	if(displayTextPos < (20-4-1) && direction == 0){
 800031c:	4b23      	ldr	r3, [pc, #140]	; (80003ac <shiftDisplayText+0x94>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2b0e      	cmp	r3, #14
 8000322:	d80a      	bhi.n	800033a <shiftDisplayText+0x22>
 8000324:	4b22      	ldr	r3, [pc, #136]	; (80003b0 <shiftDisplayText+0x98>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d106      	bne.n	800033a <shiftDisplayText+0x22>
		displayTextPos = displayTextPos+1;
 800032c:	4b1f      	ldr	r3, [pc, #124]	; (80003ac <shiftDisplayText+0x94>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	3301      	adds	r3, #1
 8000332:	b2da      	uxtb	r2, r3
 8000334:	4b1d      	ldr	r3, [pc, #116]	; (80003ac <shiftDisplayText+0x94>)
 8000336:	701a      	strb	r2, [r3, #0]
 8000338:	e032      	b.n	80003a0 <shiftDisplayText+0x88>
	}
	else if(displayTextPos >= (20-4-1) && direction == 0){
 800033a:	4b1c      	ldr	r3, [pc, #112]	; (80003ac <shiftDisplayText+0x94>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b0e      	cmp	r3, #14
 8000340:	d90d      	bls.n	800035e <shiftDisplayText+0x46>
 8000342:	4b1b      	ldr	r3, [pc, #108]	; (80003b0 <shiftDisplayText+0x98>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d109      	bne.n	800035e <shiftDisplayText+0x46>
		direction = 1;
 800034a:	4b19      	ldr	r3, [pc, #100]	; (80003b0 <shiftDisplayText+0x98>)
 800034c:	2201      	movs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		displayTextPos = displayTextPos-1;
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <shiftDisplayText+0x94>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	3b01      	subs	r3, #1
 8000356:	b2da      	uxtb	r2, r3
 8000358:	4b14      	ldr	r3, [pc, #80]	; (80003ac <shiftDisplayText+0x94>)
 800035a:	701a      	strb	r2, [r3, #0]
 800035c:	e020      	b.n	80003a0 <shiftDisplayText+0x88>
	}
	else if(displayTextPos <= 0 && direction == 1){
 800035e:	4b13      	ldr	r3, [pc, #76]	; (80003ac <shiftDisplayText+0x94>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d10d      	bne.n	8000382 <shiftDisplayText+0x6a>
 8000366:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <shiftDisplayText+0x98>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	2b01      	cmp	r3, #1
 800036c:	d109      	bne.n	8000382 <shiftDisplayText+0x6a>
		direction = 0;
 800036e:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <shiftDisplayText+0x98>)
 8000370:	2200      	movs	r2, #0
 8000372:	701a      	strb	r2, [r3, #0]
		displayTextPos = displayTextPos+1;
 8000374:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <shiftDisplayText+0x94>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	3301      	adds	r3, #1
 800037a:	b2da      	uxtb	r2, r3
 800037c:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <shiftDisplayText+0x94>)
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e00e      	b.n	80003a0 <shiftDisplayText+0x88>
	}
	else if(displayTextPos > 0 && direction == 1){
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <shiftDisplayText+0x94>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d00a      	beq.n	80003a0 <shiftDisplayText+0x88>
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <shiftDisplayText+0x98>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d106      	bne.n	80003a0 <shiftDisplayText+0x88>
		displayTextPos = displayTextPos-1;
 8000392:	4b06      	ldr	r3, [pc, #24]	; (80003ac <shiftDisplayText+0x94>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	3b01      	subs	r3, #1
 8000398:	b2da      	uxtb	r2, r3
 800039a:	4b04      	ldr	r3, [pc, #16]	; (80003ac <shiftDisplayText+0x94>)
 800039c:	701a      	strb	r2, [r3, #0]
	}
}
 800039e:	e7ff      	b.n	80003a0 <shiftDisplayText+0x88>
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	20000024 	.word	0x20000024
 80003b0:	20000025 	.word	0x20000025

080003b4 <displayLetter>:

void displayLetter(char letter){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]
	switch(letter){
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	3b20      	subs	r3, #32
 80003c2:	2b59      	cmp	r3, #89	; 0x59
 80003c4:	f200 8139 	bhi.w	800063a <displayLetter+0x286>
 80003c8:	a201      	add	r2, pc, #4	; (adr r2, 80003d0 <displayLetter+0x1c>)
 80003ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ce:	bf00      	nop
 80003d0:	080005f3 	.word	0x080005f3
 80003d4:	0800063b 	.word	0x0800063b
 80003d8:	0800063b 	.word	0x0800063b
 80003dc:	0800063b 	.word	0x0800063b
 80003e0:	0800063b 	.word	0x0800063b
 80003e4:	0800063b 	.word	0x0800063b
 80003e8:	0800063b 	.word	0x0800063b
 80003ec:	0800063b 	.word	0x0800063b
 80003f0:	0800063b 	.word	0x0800063b
 80003f4:	0800063b 	.word	0x0800063b
 80003f8:	0800063b 	.word	0x0800063b
 80003fc:	0800063b 	.word	0x0800063b
 8000400:	0800063b 	.word	0x0800063b
 8000404:	0800063b 	.word	0x0800063b
 8000408:	0800063b 	.word	0x0800063b
 800040c:	0800063b 	.word	0x0800063b
 8000410:	08000635 	.word	0x08000635
 8000414:	080005ff 	.word	0x080005ff
 8000418:	08000605 	.word	0x08000605
 800041c:	0800060b 	.word	0x0800060b
 8000420:	08000611 	.word	0x08000611
 8000424:	08000617 	.word	0x08000617
 8000428:	0800061d 	.word	0x0800061d
 800042c:	08000623 	.word	0x08000623
 8000430:	08000629 	.word	0x08000629
 8000434:	0800062f 	.word	0x0800062f
 8000438:	0800063b 	.word	0x0800063b
 800043c:	0800063b 	.word	0x0800063b
 8000440:	0800063b 	.word	0x0800063b
 8000444:	0800063b 	.word	0x0800063b
 8000448:	0800063b 	.word	0x0800063b
 800044c:	0800063b 	.word	0x0800063b
 8000450:	0800063b 	.word	0x0800063b
 8000454:	08000539 	.word	0x08000539
 8000458:	0800063b 	.word	0x0800063b
 800045c:	0800054b 	.word	0x0800054b
 8000460:	0800063b 	.word	0x0800063b
 8000464:	0800055d 	.word	0x0800055d
 8000468:	08000563 	.word	0x08000563
 800046c:	08000569 	.word	0x08000569
 8000470:	0800056f 	.word	0x0800056f
 8000474:	0800057b 	.word	0x0800057b
 8000478:	08000581 	.word	0x08000581
 800047c:	08000587 	.word	0x08000587
 8000480:	0800058d 	.word	0x0800058d
 8000484:	08000593 	.word	0x08000593
 8000488:	0800063b 	.word	0x0800063b
 800048c:	0800059f 	.word	0x0800059f
 8000490:	080005ab 	.word	0x080005ab
 8000494:	0800063b 	.word	0x0800063b
 8000498:	0800063b 	.word	0x0800063b
 800049c:	080005bd 	.word	0x080005bd
 80004a0:	0800063b 	.word	0x0800063b
 80004a4:	080005c9 	.word	0x080005c9
 80004a8:	080005d5 	.word	0x080005d5
 80004ac:	080005db 	.word	0x080005db
 80004b0:	080005e1 	.word	0x080005e1
 80004b4:	0800063b 	.word	0x0800063b
 80004b8:	080005ed 	.word	0x080005ed
 80004bc:	0800063b 	.word	0x0800063b
 80004c0:	0800063b 	.word	0x0800063b
 80004c4:	0800063b 	.word	0x0800063b
 80004c8:	0800063b 	.word	0x0800063b
 80004cc:	080005f9 	.word	0x080005f9
 80004d0:	0800063b 	.word	0x0800063b
 80004d4:	0800053f 	.word	0x0800053f
 80004d8:	08000545 	.word	0x08000545
 80004dc:	08000551 	.word	0x08000551
 80004e0:	08000557 	.word	0x08000557
 80004e4:	0800063b 	.word	0x0800063b
 80004e8:	0800063b 	.word	0x0800063b
 80004ec:	0800063b 	.word	0x0800063b
 80004f0:	08000575 	.word	0x08000575
 80004f4:	0800063b 	.word	0x0800063b
 80004f8:	0800063b 	.word	0x0800063b
 80004fc:	0800063b 	.word	0x0800063b
 8000500:	0800063b 	.word	0x0800063b
 8000504:	0800063b 	.word	0x0800063b
 8000508:	08000599 	.word	0x08000599
 800050c:	080005a5 	.word	0x080005a5
 8000510:	0800063b 	.word	0x0800063b
 8000514:	080005b1 	.word	0x080005b1
 8000518:	080005b7 	.word	0x080005b7
 800051c:	0800063b 	.word	0x0800063b
 8000520:	080005c3 	.word	0x080005c3
 8000524:	080005cf 	.word	0x080005cf
 8000528:	0800063b 	.word	0x0800063b
 800052c:	0800063b 	.word	0x0800063b
 8000530:	0800063b 	.word	0x0800063b
 8000534:	080005e7 	.word	0x080005e7
		case 'A':
			setA();
 8000538:	f000 f8d2 	bl	80006e0 <setA>
			break;
 800053c:	e080      	b.n	8000640 <displayLetter+0x28c>
		case 'a':
			seta();
 800053e:	f000 f8f9 	bl	8000734 <seta>
			break;
 8000542:	e07d      	b.n	8000640 <displayLetter+0x28c>
		case 'b':
			setb();
 8000544:	f000 f920 	bl	8000788 <setb>
			break;
 8000548:	e07a      	b.n	8000640 <displayLetter+0x28c>
		case 'C':
			setC();
 800054a:	f000 f947 	bl	80007dc <setC>
			break;
 800054e:	e077      	b.n	8000640 <displayLetter+0x28c>
		case 'c':
			setc();
 8000550:	f000 f96e 	bl	8000830 <setc>
			break;
 8000554:	e074      	b.n	8000640 <displayLetter+0x28c>
		case 'd':
			setd();
 8000556:	f000 f995 	bl	8000884 <setd>
			break;
 800055a:	e071      	b.n	8000640 <displayLetter+0x28c>
		case 'E':
			setE();
 800055c:	f000 f9bc 	bl	80008d8 <setE>
			break;
 8000560:	e06e      	b.n	8000640 <displayLetter+0x28c>
		case 'F':
			setF();
 8000562:	f000 f9e3 	bl	800092c <setF>
			break;
 8000566:	e06b      	b.n	8000640 <displayLetter+0x28c>
		case 'G':
			setG();
 8000568:	f000 fa0a 	bl	8000980 <setG>
			break;
 800056c:	e068      	b.n	8000640 <displayLetter+0x28c>
		case 'H':
			setH();
 800056e:	f000 fa31 	bl	80009d4 <setH>
			break;
 8000572:	e065      	b.n	8000640 <displayLetter+0x28c>
		case 'h':
			seth();
 8000574:	f000 fa58 	bl	8000a28 <seth>
			break;
 8000578:	e062      	b.n	8000640 <displayLetter+0x28c>
		case 'I':
			setI();
 800057a:	f000 fa7f 	bl	8000a7c <setI>
			break;
 800057e:	e05f      	b.n	8000640 <displayLetter+0x28c>
		case 'J':
			setJ();
 8000580:	f000 faa6 	bl	8000ad0 <setJ>
			break;
 8000584:	e05c      	b.n	8000640 <displayLetter+0x28c>
		case 'K':
			setK();
 8000586:	f000 fcc5 	bl	8000f14 <setK>
			break;
 800058a:	e059      	b.n	8000640 <displayLetter+0x28c>
		case 'L':
			setL();
 800058c:	f000 faca 	bl	8000b24 <setL>
			break;
 8000590:	e056      	b.n	8000640 <displayLetter+0x28c>
		case 'M':
			setM();
 8000592:	f000 fce9 	bl	8000f68 <setM>
			break;
 8000596:	e053      	b.n	8000640 <displayLetter+0x28c>
		case 'n':
			setn();
 8000598:	f000 faee 	bl	8000b78 <setn>
			break;
 800059c:	e050      	b.n	8000640 <displayLetter+0x28c>
		case 'O':
			setO();
 800059e:	f000 fb15 	bl	8000bcc <setO>
			break;
 80005a2:	e04d      	b.n	8000640 <displayLetter+0x28c>
		case 'o':
			seto();
 80005a4:	f000 fb3c 	bl	8000c20 <seto>
			break;
 80005a8:	e04a      	b.n	8000640 <displayLetter+0x28c>
		case 'P':
			setP();
 80005aa:	f000 fb63 	bl	8000c74 <setP>
			break;
 80005ae:	e047      	b.n	8000640 <displayLetter+0x28c>
		case 'q':
			setq();
 80005b0:	f000 fb8a 	bl	8000cc8 <setq>
			break;
 80005b4:	e044      	b.n	8000640 <displayLetter+0x28c>
		case 'r':
			setr();
 80005b6:	f000 fbb1 	bl	8000d1c <setr>
			break;
 80005ba:	e041      	b.n	8000640 <displayLetter+0x28c>
		case 'S':
			setS();
 80005bc:	f000 fbd8 	bl	8000d70 <setS>
			break;
 80005c0:	e03e      	b.n	8000640 <displayLetter+0x28c>
		case 't':
			sett();
 80005c2:	f000 fbff 	bl	8000dc4 <sett>
			break;
 80005c6:	e03b      	b.n	8000640 <displayLetter+0x28c>
		case 'U':
			setU();
 80005c8:	f000 fc26 	bl	8000e18 <setU>
			break;
 80005cc:	e038      	b.n	8000640 <displayLetter+0x28c>
		case 'u':
			setu();
 80005ce:	f000 fc4d 	bl	8000e6c <setu>
			break;
 80005d2:	e035      	b.n	8000640 <displayLetter+0x28c>
		case 'V':
			setV();
 80005d4:	f000 fcee 	bl	8000fb4 <setV>
			break;
 80005d8:	e032      	b.n	8000640 <displayLetter+0x28c>
		case 'W':
			setW();
 80005da:	f000 fd15 	bl	8001008 <setW>
			break;
 80005de:	e02f      	b.n	8000640 <displayLetter+0x28c>
		case 'X':
			setX();
 80005e0:	f000 fd3c 	bl	800105c <setX>
			break;
 80005e4:	e02c      	b.n	8000640 <displayLetter+0x28c>
		case 'y':
			sety();
 80005e6:	f000 fc6b 	bl	8000ec0 <sety>
			break;
 80005ea:	e029      	b.n	8000640 <displayLetter+0x28c>
		case 'Z':
			setZ();
 80005ec:	f000 fd60 	bl	80010b0 <setZ>
			break;
 80005f0:	e026      	b.n	8000640 <displayLetter+0x28c>
		case ' ':
			resetAllSegments();
 80005f2:	f000 f829 	bl	8000648 <resetAllSegments>
			break;
 80005f6:	e023      	b.n	8000640 <displayLetter+0x28c>
		case '_':
			setLine();
 80005f8:	f000 ff28 	bl	800144c <setLine>
			break;
 80005fc:	e020      	b.n	8000640 <displayLetter+0x28c>


		case '1':
			setOne();
 80005fe:	f000 fd81 	bl	8001104 <setOne>
			break;
 8000602:	e01d      	b.n	8000640 <displayLetter+0x28c>
		case '2':
			setTwo();
 8000604:	f000 fda8 	bl	8001158 <setTwo>
			break;
 8000608:	e01a      	b.n	8000640 <displayLetter+0x28c>
		case '3':
			setThree();
 800060a:	f000 fdcf 	bl	80011ac <setThree>
			break;
 800060e:	e017      	b.n	8000640 <displayLetter+0x28c>
		case '4':
			setFour();
 8000610:	f000 fdf6 	bl	8001200 <setFour>
			break;
 8000614:	e014      	b.n	8000640 <displayLetter+0x28c>
		case '5':
			setFive();
 8000616:	f000 fe1d 	bl	8001254 <setFive>
			break;
 800061a:	e011      	b.n	8000640 <displayLetter+0x28c>
		case '6':
			setSix();
 800061c:	f000 fe44 	bl	80012a8 <setSix>
			break;
 8000620:	e00e      	b.n	8000640 <displayLetter+0x28c>
		case '7':
			setSeven();
 8000622:	f000 fe6b 	bl	80012fc <setSeven>
			break;
 8000626:	e00b      	b.n	8000640 <displayLetter+0x28c>
		case '8':
			setEight();
 8000628:	f000 fe92 	bl	8001350 <setEight>
			break;
 800062c:	e008      	b.n	8000640 <displayLetter+0x28c>
		case '9':
			setNine();
 800062e:	f000 feb9 	bl	80013a4 <setNine>
			break;
 8000632:	e005      	b.n	8000640 <displayLetter+0x28c>
		case '0':
			setZero();
 8000634:	f000 fee0 	bl	80013f8 <setZero>
			break;
 8000638:	e002      	b.n	8000640 <displayLetter+0x28c>
		default:
			setDot();
 800063a:	f000 ff35 	bl	80014a8 <setDot>
			break;
 800063e:	bf00      	nop
	}
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <resetAllSegments>:
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
}

void resetAllSegments(void){
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800064c:	2102      	movs	r1, #2
 800064e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000652:	f7ff fdb9 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000656:	2101      	movs	r1, #1
 8000658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065c:	f7ff fdb4 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000668:	f7ff fdae 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800066c:	2120      	movs	r1, #32
 800066e:	480c      	ldr	r0, [pc, #48]	; (80006a0 <resetAllSegments+0x58>)
 8000670:	f7ff fdaa 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000674:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067c:	f7ff fda4 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000680:	2108      	movs	r1, #8
 8000682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000686:	f7ff fd9f 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800068a:	2110      	movs	r1, #16
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <resetAllSegments+0x58>)
 800068e:	f7ff fd9b 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentDP_Pin);
 8000692:	2102      	movs	r1, #2
 8000694:	4802      	ldr	r0, [pc, #8]	; (80006a0 <resetAllSegments+0x58>)
 8000696:	f7ff fd97 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	48000400 	.word	0x48000400

080006a4 <resetAllDigits>:

void resetAllDigits(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 80006a8:	2104      	movs	r1, #4
 80006aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ae:	f7ff fd99 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 80006b2:	2120      	movs	r1, #32
 80006b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b8:	f7ff fd94 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80006bc:	2110      	movs	r1, #16
 80006be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c2:	f7ff fd8f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 80006c6:	2140      	movs	r1, #64	; 0x40
 80006c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006cc:	f7ff fd8a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 80006d0:	2180      	movs	r1, #128	; 0x80
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d6:	f7ff fd85 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <setA>:

void setA(void){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80006e4:	2102      	movs	r1, #2
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ea:	f7ff fd7b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80006ee:	2101      	movs	r1, #1
 80006f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f4:	f7ff fd76 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80006f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000700:	f7ff fd70 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000704:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070c:	f7ff fd6a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000710:	2108      	movs	r1, #8
 8000712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000716:	f7ff fd65 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800071a:	2110      	movs	r1, #16
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <setA+0x50>)
 800071e:	f7ff fd61 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	// reset D
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000722:	2120      	movs	r1, #32
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <setA+0x50>)
 8000726:	f7ff fd4f 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	48000400 	.word	0x48000400

08000734 <seta>:
void seta(void){
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000738:	2102      	movs	r1, #2
 800073a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073e:	f7ff fd51 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000742:	2101      	movs	r1, #1
 8000744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000748:	f7ff fd4c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800074c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000754:	f7ff fd46 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000758:	2120      	movs	r1, #32
 800075a:	480a      	ldr	r0, [pc, #40]	; (8000784 <seta+0x50>)
 800075c:	f7ff fd42 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000760:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000768:	f7ff fd3c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800076c:	2110      	movs	r1, #16
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <seta+0x50>)
 8000770:	f7ff fd38 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	// reset f
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000774:	2108      	movs	r1, #8
 8000776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077a:	f7ff fd25 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	48000400 	.word	0x48000400

08000788 <setb>:
void setb(void){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800078c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000794:	f7ff fd26 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000798:	2120      	movs	r1, #32
 800079a:	480f      	ldr	r0, [pc, #60]	; (80007d8 <setb+0x50>)
 800079c:	f7ff fd22 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80007a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a8:	f7ff fd1c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80007ac:	2108      	movs	r1, #8
 80007ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b2:	f7ff fd17 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80007b6:	2110      	movs	r1, #16
 80007b8:	4807      	ldr	r0, [pc, #28]	; (80007d8 <setb+0x50>)
 80007ba:	f7ff fd13 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	// reset a,b
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80007be:	2102      	movs	r1, #2
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c4:	f7ff fd00 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80007c8:	2101      	movs	r1, #1
 80007ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ce:	f7ff fcfb 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	48000400 	.word	0x48000400

080007dc <setC>:
void setC(void){
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80007e0:	2102      	movs	r1, #2
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f7ff fcfd 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80007ea:	2120      	movs	r1, #32
 80007ec:	480f      	ldr	r0, [pc, #60]	; (800082c <setC+0x50>)
 80007ee:	f7ff fcf9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80007f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fa:	f7ff fcf3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80007fe:	2108      	movs	r1, #8
 8000800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000804:	f7ff fcee 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	// reset B,C,G
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000808:	2101      	movs	r1, #1
 800080a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080e:	f7ff fcdb 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000812:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081a:	f7ff fcd5 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800081e:	2110      	movs	r1, #16
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <setC+0x50>)
 8000822:	f7ff fcd1 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	48000400 	.word	0x48000400

08000830 <setc>:
void setc(void){
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000834:	2120      	movs	r1, #32
 8000836:	4812      	ldr	r0, [pc, #72]	; (8000880 <setc+0x50>)
 8000838:	f7ff fcd4 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800083c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000844:	f7ff fcce 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000848:	2110      	movs	r1, #16
 800084a:	480d      	ldr	r0, [pc, #52]	; (8000880 <setc+0x50>)
 800084c:	f7ff fcca 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000850:	2102      	movs	r1, #2
 8000852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000856:	f7ff fcb7 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800085a:	2101      	movs	r1, #1
 800085c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000860:	f7ff fcb2 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000864:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086c:	f7ff fcac 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000870:	2108      	movs	r1, #8
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f7ff fca7 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	48000400 	.word	0x48000400

08000884 <setd>:
void setd(void){
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000888:	2101      	movs	r1, #1
 800088a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088e:	f7ff fca9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000892:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089a:	f7ff fca3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800089e:	2120      	movs	r1, #32
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <setd+0x50>)
 80008a2:	f7ff fc9f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80008a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ae:	f7ff fc99 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80008b2:	2110      	movs	r1, #16
 80008b4:	4807      	ldr	r0, [pc, #28]	; (80008d4 <setd+0x50>)
 80008b6:	f7ff fc95 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80008ba:	2102      	movs	r1, #2
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c0:	f7ff fc82 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80008c4:	2108      	movs	r1, #8
 80008c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ca:	f7ff fc7d 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	48000400 	.word	0x48000400

080008d8 <setE>:
void setE(void){
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80008dc:	2102      	movs	r1, #2
 80008de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e2:	f7ff fc7f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80008e6:	2120      	movs	r1, #32
 80008e8:	480f      	ldr	r0, [pc, #60]	; (8000928 <setE+0x50>)
 80008ea:	f7ff fc7b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80008ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f6:	f7ff fc75 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80008fa:	2108      	movs	r1, #8
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000900:	f7ff fc70 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000904:	2110      	movs	r1, #16
 8000906:	4808      	ldr	r0, [pc, #32]	; (8000928 <setE+0x50>)
 8000908:	f7ff fc6c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800090c:	2101      	movs	r1, #1
 800090e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000912:	f7ff fc59 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000916:	f44f 7180 	mov.w	r1, #256	; 0x100
 800091a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091e:	f7ff fc53 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	48000400 	.word	0x48000400

0800092c <setF>:
void setF(void){
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000930:	2102      	movs	r1, #2
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f7ff fc55 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800093a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800093e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000942:	f7ff fc4f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000946:	2108      	movs	r1, #8
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f7ff fc4a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000950:	2110      	movs	r1, #16
 8000952:	480a      	ldr	r0, [pc, #40]	; (800097c <setF+0x50>)
 8000954:	f7ff fc46 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000958:	2101      	movs	r1, #1
 800095a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095e:	f7ff fc33 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000962:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096a:	f7ff fc2d 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800096e:	2120      	movs	r1, #32
 8000970:	4802      	ldr	r0, [pc, #8]	; (800097c <setF+0x50>)
 8000972:	f7ff fc29 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	48000400 	.word	0x48000400

08000980 <setG>:
void setG(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000984:	2102      	movs	r1, #2
 8000986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098a:	f7ff fc2b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800098e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000996:	f7ff fc25 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800099a:	2120      	movs	r1, #32
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <setG+0x50>)
 800099e:	f7ff fc21 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80009a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009aa:	f7ff fc1b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80009ae:	2108      	movs	r1, #8
 80009b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b4:	f7ff fc16 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80009b8:	2101      	movs	r1, #1
 80009ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009be:	f7ff fc03 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 80009c2:	2110      	movs	r1, #16
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <setG+0x50>)
 80009c6:	f7ff fbff 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	48000400 	.word	0x48000400

080009d4 <setH>:
void setH(void){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80009d8:	2101      	movs	r1, #1
 80009da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009de:	f7ff fc01 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80009e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ea:	f7ff fbfb 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80009ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f6:	f7ff fbf5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80009fa:	2108      	movs	r1, #8
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a00:	f7ff fbf0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000a04:	2110      	movs	r1, #16
 8000a06:	4807      	ldr	r0, [pc, #28]	; (8000a24 <setH+0x50>)
 8000a08:	f7ff fbec 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a12:	f7ff fbd9 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000a16:	2120      	movs	r1, #32
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <setH+0x50>)
 8000a1a:	f7ff fbd5 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	48000400 	.word	0x48000400

08000a28 <seth>:
void seth(void){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000a2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a34:	f7ff fbd6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000a38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a40:	f7ff fbd0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000a44:	2108      	movs	r1, #8
 8000a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4a:	f7ff fbcb 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000a4e:	2110      	movs	r1, #16
 8000a50:	4809      	ldr	r0, [pc, #36]	; (8000a78 <seth+0x50>)
 8000a52:	f7ff fbc7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000a56:	2102      	movs	r1, #2
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f7ff fbb4 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000a60:	2101      	movs	r1, #1
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a66:	f7ff fbaf 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000a6a:	2120      	movs	r1, #32
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <seth+0x50>)
 8000a6e:	f7ff fbab 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	48000400 	.word	0x48000400

08000a7c <setI>:
void setI(void){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000a80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a88:	f7ff fbac 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000a8c:	2108      	movs	r1, #8
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a92:	f7ff fba7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000a96:	2102      	movs	r1, #2
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f7ff fb94 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa6:	f7ff fb8f 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000aaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab2:	f7ff fb89 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000ab6:	2120      	movs	r1, #32
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <setI+0x50>)
 8000aba:	f7ff fb85 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000abe:	2110      	movs	r1, #16
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <setI+0x50>)
 8000ac2:	f7ff fb81 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	48000400 	.word	0x48000400

08000ad0 <setJ>:
void setJ(void){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ada:	f7ff fb83 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000ade:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae6:	f7ff fb7d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000aea:	2120      	movs	r1, #32
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <setJ+0x50>)
 8000aee:	f7ff fb79 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000af2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afa:	f7ff fb73 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000afe:	2102      	movs	r1, #2
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b04:	f7ff fb60 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000b08:	2108      	movs	r1, #8
 8000b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0e:	f7ff fb5b 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000b12:	2110      	movs	r1, #16
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <setJ+0x50>)
 8000b16:	f7ff fb57 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	48000400 	.word	0x48000400

08000b24 <setL>:
void setL(void){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000b28:	2120      	movs	r1, #32
 8000b2a:	4812      	ldr	r0, [pc, #72]	; (8000b74 <setL+0x50>)
 8000b2c:	f7ff fb5a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000b30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b38:	f7ff fb54 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000b3c:	2108      	movs	r1, #8
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b42:	f7ff fb4f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000b46:	2102      	movs	r1, #2
 8000b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4c:	f7ff fb3c 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000b50:	2101      	movs	r1, #1
 8000b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b56:	f7ff fb37 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000b5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f7ff fb31 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000b66:	2110      	movs	r1, #16
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <setL+0x50>)
 8000b6a:	f7ff fb2d 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	48000400 	.word	0x48000400

08000b78 <setn>:
void setn(void){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000b7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b84:	f7ff fb2e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000b88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b90:	f7ff fb28 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000b94:	2110      	movs	r1, #16
 8000b96:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <setn+0x50>)
 8000b98:	f7ff fb24 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba2:	f7ff fb11 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bac:	f7ff fb0c 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000bb0:	2120      	movs	r1, #32
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <setn+0x50>)
 8000bb4:	f7ff fb08 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000bb8:	2108      	movs	r1, #8
 8000bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbe:	f7ff fb03 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	48000400 	.word	0x48000400

08000bcc <setO>:
void setO(void){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd6:	f7ff fb05 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000bda:	2101      	movs	r1, #1
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be0:	f7ff fb00 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bec:	f7ff fafa 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000bf0:	2120      	movs	r1, #32
 8000bf2:	480a      	ldr	r0, [pc, #40]	; (8000c1c <setO+0x50>)
 8000bf4:	f7ff faf6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000bf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c00:	f7ff faf0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000c04:	2108      	movs	r1, #8
 8000c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0a:	f7ff faeb 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000c0e:	2110      	movs	r1, #16
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <setO+0x50>)
 8000c12:	f7ff fad9 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	48000400 	.word	0x48000400

08000c20 <seto>:
void seto(void){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000c24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2c:	f7ff fada 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000c30:	2120      	movs	r1, #32
 8000c32:	480f      	ldr	r0, [pc, #60]	; (8000c70 <seto+0x50>)
 8000c34:	f7ff fad6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000c38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c40:	f7ff fad0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000c44:	2110      	movs	r1, #16
 8000c46:	480a      	ldr	r0, [pc, #40]	; (8000c70 <seto+0x50>)
 8000c48:	f7ff facc 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c52:	f7ff fab9 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000c56:	2101      	movs	r1, #1
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f7ff fab4 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000c60:	2108      	movs	r1, #8
 8000c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c66:	f7ff faaf 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	48000400 	.word	0x48000400

08000c74 <setP>:
void setP(void){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000c78:	2102      	movs	r1, #2
 8000c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7e:	f7ff fab1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000c82:	2101      	movs	r1, #1
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c88:	f7ff faac 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000c8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c94:	f7ff faa6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000c98:	2108      	movs	r1, #8
 8000c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9e:	f7ff faa1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000ca2:	2110      	movs	r1, #16
 8000ca4:	4807      	ldr	r0, [pc, #28]	; (8000cc4 <setP+0x50>)
 8000ca6:	f7ff fa9d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000caa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb2:	f7ff fa89 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000cb6:	2120      	movs	r1, #32
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <setP+0x50>)
 8000cba:	f7ff fa85 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	48000400 	.word	0x48000400

08000cc8 <setq>:
void setq(void){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000ccc:	2102      	movs	r1, #2
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f7ff fa87 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cdc:	f7ff fa82 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000ce0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f7ff fa7c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000cec:	2108      	movs	r1, #8
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf2:	f7ff fa77 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000cf6:	2110      	movs	r1, #16
 8000cf8:	4807      	ldr	r0, [pc, #28]	; (8000d18 <setq+0x50>)
 8000cfa:	f7ff fa73 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000cfe:	2120      	movs	r1, #32
 8000d00:	4805      	ldr	r0, [pc, #20]	; (8000d18 <setq+0x50>)
 8000d02:	f7ff fa61 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000d06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0e:	f7ff fa5b 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	48000400 	.word	0x48000400

08000d1c <setr>:
void setr(void){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000d20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d28:	f7ff fa5c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000d2c:	2110      	movs	r1, #16
 8000d2e:	480f      	ldr	r0, [pc, #60]	; (8000d6c <setr+0x50>)
 8000d30:	f7ff fa58 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000d34:	2102      	movs	r1, #2
 8000d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3a:	f7ff fa45 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000d3e:	2101      	movs	r1, #1
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f7ff fa40 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000d48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d50:	f7ff fa3a 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000d54:	2120      	movs	r1, #32
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <setr+0x50>)
 8000d58:	f7ff fa36 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000d5c:	2108      	movs	r1, #8
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d62:	f7ff fa31 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	48000400 	.word	0x48000400

08000d70 <setS>:
void setS(void){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000d74:	2102      	movs	r1, #2
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7a:	f7ff fa33 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000d7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d86:	f7ff fa2d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000d8a:	2120      	movs	r1, #32
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <setS+0x50>)
 8000d8e:	f7ff fa29 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000d92:	2108      	movs	r1, #8
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d98:	f7ff fa24 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000d9c:	2110      	movs	r1, #16
 8000d9e:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <setS+0x50>)
 8000da0:	f7ff fa20 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000da4:	2101      	movs	r1, #1
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f7ff fa0d 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000dae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db6:	f7ff fa07 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	48000400 	.word	0x48000400

08000dc4 <sett>:
void sett(void){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000dc8:	2120      	movs	r1, #32
 8000dca:	4812      	ldr	r0, [pc, #72]	; (8000e14 <sett+0x50>)
 8000dcc:	f7ff fa0a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000dd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd8:	f7ff fa04 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000ddc:	2108      	movs	r1, #8
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de2:	f7ff f9ff 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000de6:	2110      	movs	r1, #16
 8000de8:	480a      	ldr	r0, [pc, #40]	; (8000e14 <sett+0x50>)
 8000dea:	f7ff f9fb 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000dee:	2102      	movs	r1, #2
 8000df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df4:	f7ff f9e8 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000df8:	2101      	movs	r1, #1
 8000dfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfe:	f7ff f9e3 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000e02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0a:	f7ff f9dd 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	48000400 	.word	0x48000400

08000e18 <setU>:
void setU(void){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e22:	f7ff f9df 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000e26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2e:	f7ff f9d9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000e32:	2120      	movs	r1, #32
 8000e34:	480c      	ldr	r0, [pc, #48]	; (8000e68 <setU+0x50>)
 8000e36:	f7ff f9d5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000e3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e42:	f7ff f9cf 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000e46:	2108      	movs	r1, #8
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4c:	f7ff f9ca 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000e50:	2102      	movs	r1, #2
 8000e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e56:	f7ff f9b7 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <setU+0x50>)
 8000e5e:	f7ff f9b3 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	48000400 	.word	0x48000400

08000e6c <setu>:
void setu(void){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000e70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e78:	f7ff f9b4 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	480f      	ldr	r0, [pc, #60]	; (8000ebc <setu+0x50>)
 8000e80:	f7ff f9b0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000e84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8c:	f7ff f9aa 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000e90:	2102      	movs	r1, #2
 8000e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e96:	f7ff f997 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea0:	f7ff f992 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000ea4:	2108      	movs	r1, #8
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eaa:	f7ff f98d 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000eae:	2110      	movs	r1, #16
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <setu+0x50>)
 8000eb2:	f7ff f989 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	48000400 	.word	0x48000400

08000ec0 <sety>:
void sety(void){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eca:	f7ff f98b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000ece:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed6:	f7ff f985 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000eda:	2120      	movs	r1, #32
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <sety+0x50>)
 8000ede:	f7ff f981 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee8:	f7ff f97c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000eec:	2110      	movs	r1, #16
 8000eee:	4808      	ldr	r0, [pc, #32]	; (8000f10 <sety+0x50>)
 8000ef0:	f7ff f978 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000ef4:	2102      	movs	r1, #2
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efa:	f7ff f965 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000efe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f06:	f7ff f95f 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	48000400 	.word	0x48000400

08000f14 <setK>:


// Disgusting letters :D
void setK(void){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000f18:	2102      	movs	r1, #2
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1e:	f7ff f961 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2a:	f7ff f95b 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000f2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f7ff f955 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f40:	f7ff f950 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000f44:	2110      	movs	r1, #16
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <setK+0x50>)
 8000f48:	f7ff f94c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f52:	f7ff f939 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000f56:	2120      	movs	r1, #32
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <setK+0x50>)
 8000f5a:	f7ff f935 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	48000400 	.word	0x48000400

08000f68 <setM>:
void setM(void){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f72:	f7ff f937 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000f76:	2101      	movs	r1, #1
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f7ff f932 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000f80:	2120      	movs	r1, #32
 8000f82:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <setM+0x48>)
 8000f84:	f7ff f92e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000f88:	2108      	movs	r1, #8
 8000f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8e:	f7ff f929 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000f92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9a:	f7ff f915 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000f9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa6:	f7ff f90f 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	48000400 	.word	0x48000400

08000fb4 <setV>:
void setV(void){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000fb8:	2101      	movs	r1, #1
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbe:	f7ff f911 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000fc2:	2120      	movs	r1, #32
 8000fc4:	480f      	ldr	r0, [pc, #60]	; (8001004 <setV+0x50>)
 8000fc6:	f7ff f90d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000fca:	2108      	movs	r1, #8
 8000fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd0:	f7ff f908 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fda:	f7ff f8f5 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe6:	f7ff f8ef 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000fea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff2:	f7ff f8e9 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <setV+0x50>)
 8000ffa:	f7ff f8e5 	bl	80001c8 <LL_GPIO_SetOutputPin>

}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	48000400 	.word	0x48000400

08001008 <setW>:
void setW(void){
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800100c:	2101      	movs	r1, #1
 800100e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001012:	f7ff f8e7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001016:	f44f 7180 	mov.w	r1, #256	; 0x100
 800101a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101e:	f7ff f8e1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001022:	2120      	movs	r1, #32
 8001024:	480c      	ldr	r0, [pc, #48]	; (8001058 <setW+0x50>)
 8001026:	f7ff f8dd 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800102a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800102e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001032:	f7ff f8d7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001036:	2108      	movs	r1, #8
 8001038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103c:	f7ff f8d2 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001040:	2110      	movs	r1, #16
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <setW+0x50>)
 8001044:	f7ff f8ce 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001048:	2102      	movs	r1, #2
 800104a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104e:	f7ff f8bb 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	48000400 	.word	0x48000400

0800105c <setX>:
void setX(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001060:	2102      	movs	r1, #2
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f7ff f8bd 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800106a:	2120      	movs	r1, #32
 800106c:	480f      	ldr	r0, [pc, #60]	; (80010ac <setX+0x50>)
 800106e:	f7ff f8b9 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001072:	2110      	movs	r1, #16
 8001074:	480d      	ldr	r0, [pc, #52]	; (80010ac <setX+0x50>)
 8001076:	f7ff f8b5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800107a:	2101      	movs	r1, #1
 800107c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001080:	f7ff f8a2 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001084:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108c:	f7ff f89c 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001090:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001098:	f7ff f896 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 800109c:	2108      	movs	r1, #8
 800109e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a2:	f7ff f891 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	48000400 	.word	0x48000400

080010b0 <setZ>:
void setZ(void){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80010b4:	2102      	movs	r1, #2
 80010b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ba:	f7ff f893 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80010be:	2101      	movs	r1, #1
 80010c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c4:	f7ff f88e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80010c8:	2120      	movs	r1, #32
 80010ca:	480d      	ldr	r0, [pc, #52]	; (8001100 <setZ+0x50>)
 80010cc:	f7ff f88a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80010d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d8:	f7ff f884 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80010dc:	2110      	movs	r1, #16
 80010de:	4808      	ldr	r0, [pc, #32]	; (8001100 <setZ+0x50>)
 80010e0:	f7ff f880 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80010e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f7ff f86c 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80010f0:	2108      	movs	r1, #8
 80010f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f6:	f7ff f867 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	48000400 	.word	0x48000400

08001104 <setOne>:

// numbers
void setOne(void){
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001108:	2101      	movs	r1, #1
 800110a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110e:	f7ff f869 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001112:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111a:	f7ff f863 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800111e:	2102      	movs	r1, #2
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f7ff f850 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001128:	2120      	movs	r1, #32
 800112a:	480a      	ldr	r0, [pc, #40]	; (8001154 <setOne+0x50>)
 800112c:	f7ff f84c 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001130:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001138:	f7ff f846 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 800113c:	2108      	movs	r1, #8
 800113e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001142:	f7ff f841 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001146:	2110      	movs	r1, #16
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <setOne+0x50>)
 800114a:	f7ff f83d 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	48000400 	.word	0x48000400

08001158 <setTwo>:
void setTwo(void){
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800115c:	2102      	movs	r1, #2
 800115e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001162:	f7ff f83f 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001166:	2101      	movs	r1, #1
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f7ff f83a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001170:	2120      	movs	r1, #32
 8001172:	480d      	ldr	r0, [pc, #52]	; (80011a8 <setTwo+0x50>)
 8001174:	f7ff f836 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001178:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800117c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001180:	f7ff f830 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001184:	2110      	movs	r1, #16
 8001186:	4808      	ldr	r0, [pc, #32]	; (80011a8 <setTwo+0x50>)
 8001188:	f7ff f82c 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800118c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f7ff f818 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001198:	2108      	movs	r1, #8
 800119a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119e:	f7ff f813 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	48000400 	.word	0x48000400

080011ac <setThree>:
void setThree(void){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80011b0:	2102      	movs	r1, #2
 80011b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b6:	f7ff f815 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80011ba:	2101      	movs	r1, #1
 80011bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c0:	f7ff f810 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80011c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011cc:	f7ff f80a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80011d0:	2120      	movs	r1, #32
 80011d2:	480a      	ldr	r0, [pc, #40]	; (80011fc <setThree+0x50>)
 80011d4:	f7ff f806 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80011d8:	2110      	movs	r1, #16
 80011da:	4808      	ldr	r0, [pc, #32]	; (80011fc <setThree+0x50>)
 80011dc:	f7ff f802 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80011e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e8:	f7fe ffee 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80011ec:	2108      	movs	r1, #8
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f7fe ffe9 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	48000400 	.word	0x48000400

08001200 <setFour>:
void setFour(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001204:	2101      	movs	r1, #1
 8001206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120a:	f7fe ffeb 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800120e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001216:	f7fe ffe5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800121a:	2108      	movs	r1, #8
 800121c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001220:	f7fe ffe0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001224:	2110      	movs	r1, #16
 8001226:	480a      	ldr	r0, [pc, #40]	; (8001250 <setFour+0x50>)
 8001228:	f7fe ffdc 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800122c:	2102      	movs	r1, #2
 800122e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001232:	f7fe ffc9 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001236:	2120      	movs	r1, #32
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <setFour+0x50>)
 800123a:	f7fe ffc5 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800123e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001246:	f7fe ffbf 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	48000400 	.word	0x48000400

08001254 <setFive>:
void setFive(void){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001258:	2102      	movs	r1, #2
 800125a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125e:	f7fe ffc1 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001262:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126a:	f7fe ffbb 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800126e:	2120      	movs	r1, #32
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <setFive+0x50>)
 8001272:	f7fe ffb7 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001276:	2108      	movs	r1, #8
 8001278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127c:	f7fe ffb2 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001280:	2110      	movs	r1, #16
 8001282:	4808      	ldr	r0, [pc, #32]	; (80012a4 <setFive+0x50>)
 8001284:	f7fe ffae 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001288:	2101      	movs	r1, #1
 800128a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128e:	f7fe ff9b 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001292:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129a:	f7fe ff95 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	48000400 	.word	0x48000400

080012a8 <setSix>:
void setSix(void){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80012ac:	2102      	movs	r1, #2
 80012ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b2:	f7fe ff97 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80012b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012be:	f7fe ff91 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80012c2:	2120      	movs	r1, #32
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <setSix+0x50>)
 80012c6:	f7fe ff8d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80012ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d2:	f7fe ff87 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80012d6:	2108      	movs	r1, #8
 80012d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012dc:	f7fe ff82 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80012e0:	2110      	movs	r1, #16
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <setSix+0x50>)
 80012e4:	f7fe ff7e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80012e8:	2101      	movs	r1, #1
 80012ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ee:	f7fe ff6b 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	48000400 	.word	0x48000400

080012fc <setSeven>:
void setSeven(void){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001300:	2102      	movs	r1, #2
 8001302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001306:	f7fe ff6d 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800130a:	2101      	movs	r1, #1
 800130c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001310:	f7fe ff68 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001314:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131c:	f7fe ff62 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001320:	2120      	movs	r1, #32
 8001322:	480a      	ldr	r0, [pc, #40]	; (800134c <setSeven+0x50>)
 8001324:	f7fe ff50 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001328:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800132c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001330:	f7fe ff4a 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001334:	2108      	movs	r1, #8
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	f7fe ff45 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800133e:	2110      	movs	r1, #16
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <setSeven+0x50>)
 8001342:	f7fe ff41 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	48000400 	.word	0x48000400

08001350 <setEight>:
void setEight(void){
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001354:	2102      	movs	r1, #2
 8001356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135a:	f7fe ff43 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800135e:	2101      	movs	r1, #1
 8001360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001364:	f7fe ff3e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001370:	f7fe ff38 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001374:	2120      	movs	r1, #32
 8001376:	480a      	ldr	r0, [pc, #40]	; (80013a0 <setEight+0x50>)
 8001378:	f7fe ff34 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800137c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001384:	f7fe ff2e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001388:	2108      	movs	r1, #8
 800138a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138e:	f7fe ff29 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001392:	2110      	movs	r1, #16
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <setEight+0x50>)
 8001396:	f7fe ff25 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	48000400 	.word	0x48000400

080013a4 <setNine>:
void setNine(void){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80013a8:	2102      	movs	r1, #2
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ae:	f7fe ff19 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80013b2:	2101      	movs	r1, #1
 80013b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b8:	f7fe ff14 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80013bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c4:	f7fe ff0e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80013c8:	2120      	movs	r1, #32
 80013ca:	480a      	ldr	r0, [pc, #40]	; (80013f4 <setNine+0x50>)
 80013cc:	f7fe ff0a 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80013d0:	2108      	movs	r1, #8
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d6:	f7fe ff05 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80013da:	2110      	movs	r1, #16
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <setNine+0x50>)
 80013de:	f7fe ff01 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80013e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ea:	f7fe feed 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	48000400 	.word	0x48000400

080013f8 <setZero>:
void setZero(void){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80013fc:	2102      	movs	r1, #2
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001402:	f7fe feef 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001406:	2101      	movs	r1, #1
 8001408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140c:	f7fe feea 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001410:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001418:	f7fe fee4 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800141c:	2120      	movs	r1, #32
 800141e:	480a      	ldr	r0, [pc, #40]	; (8001448 <setZero+0x50>)
 8001420:	f7fe fee0 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001424:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142c:	f7fe feda 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001430:	2108      	movs	r1, #8
 8001432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001436:	f7fe fed5 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800143a:	2110      	movs	r1, #16
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <setZero+0x50>)
 800143e:	f7fe fec3 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	48000400 	.word	0x48000400

0800144c <setLine>:

void setLine(void){
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001450:	2120      	movs	r1, #32
 8001452:	4814      	ldr	r0, [pc, #80]	; (80014a4 <setLine+0x58>)
 8001454:	f7fe fec6 	bl	80001e4 <LL_GPIO_ResetOutputPin>

	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001458:	2102      	movs	r1, #2
 800145a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145e:	f7fe feb3 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001462:	2101      	movs	r1, #1
 8001464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001468:	f7fe feae 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800146c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001474:	f7fe fea8 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001478:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800147c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001480:	f7fe fea2 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001484:	2108      	movs	r1, #8
 8001486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148a:	f7fe fe9d 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800148e:	2110      	movs	r1, #16
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <setLine+0x58>)
 8001492:	f7fe fe99 	bl	80001c8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentDP_Pin);
 8001496:	2102      	movs	r1, #2
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <setLine+0x58>)
 800149a:	f7fe fe95 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	48000400 	.word	0x48000400

080014a8 <setDot>:
// and dot to end
void setDot(void){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
 80014ac:	2102      	movs	r1, #2
 80014ae:	4802      	ldr	r0, [pc, #8]	; (80014b8 <setDot+0x10>)
 80014b0:	f7fe fe98 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	48000400 	.word	0x48000400

080014bc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	4907      	ldr	r1, [pc, #28]	; (80014e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014d2:	695a      	ldr	r2, [r3, #20]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4013      	ands	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	40021000 	.word	0x40021000

080014ec <LL_GPIO_ResetOutputPin>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	463b      	mov	r3, r7
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
 800151c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800151e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001522:	f7ff ffcb 	bl	80014bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001526:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800152a:	f7ff ffc7 	bl	80014bc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 800152e:	f640 11ff 	movw	r1, #2559	; 0x9ff
 8001532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001536:	f7ff ffd9 	bl	80014ec <LL_GPIO_ResetOutputPin>
                          |digit2_Pin|digit1_Pin|digit3_Pin|digitTime_Pin
                          |segmentC_Pin|segmentE_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin|segmentG_Pin|segmentD_Pin);
 800153a:	2132      	movs	r1, #50	; 0x32
 800153c:	4813      	ldr	r0, [pc, #76]	; (800158c <MX_GPIO_Init+0x84>)
 800153e:	f7ff ffd5 	bl	80014ec <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 8001542:	f640 13ff 	movw	r3, #2559	; 0x9ff
 8001546:	603b      	str	r3, [r7, #0]
                          |digit2_Pin|digit1_Pin|digit3_Pin|digitTime_Pin
                          |segmentC_Pin|segmentE_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001548:	2301      	movs	r3, #1
 800154a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	463b      	mov	r3, r7
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001560:	f001 f952 	bl	8002808 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = segmentDP_Pin|segmentG_Pin|segmentD_Pin;
 8001564:	2332      	movs	r3, #50	; 0x32
 8001566:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001568:	2301      	movs	r3, #1
 800156a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001574:	2300      	movs	r3, #0
 8001576:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001578:	463b      	mov	r3, r7
 800157a:	4619      	mov	r1, r3
 800157c:	4803      	ldr	r0, [pc, #12]	; (800158c <MX_GPIO_Init+0x84>)
 800157e:	f001 f943 	bl	8002808 <LL_GPIO_Init>

}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	48000400 	.word	0x48000400

08001590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	0a1b      	lsrs	r3, r3, #8
 800159a:	f003 0307 	and.w	r3, r3, #7
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	db0b      	blt.n	80015d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	f003 021f 	and.w	r2, r3, #31
 80015c4:	4907      	ldr	r1, [pc, #28]	; (80015e4 <__NVIC_EnableIRQ+0x38>)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	095b      	lsrs	r3, r3, #5
 80015cc:	2001      	movs	r0, #1
 80015ce:	fa00 f202 	lsl.w	r2, r0, r2
 80015d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	; (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	; (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f043 0201 	orr.w	r2, r3, #1
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	601a      	str	r2, [r3, #0]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	601a      	str	r2, [r3, #0]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	601a      	str	r2, [r3, #0]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001702:	b480      	push	{r7}
 8001704:	b085      	sub	sp, #20
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001716:	f023 0306 	bic.w	r3, r3, #6
 800171a:	68b9      	ldr	r1, [r7, #8]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	430a      	orrs	r2, r1
 8001720:	431a      	orrs	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	60da      	str	r2, [r3, #12]
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	60da      	str	r2, [r3, #12]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f043 0204 	orr.w	r2, r3, #4
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	601a      	str	r2, [r3, #0]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 0204 	bic.w	r2, r3, #4
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	601a      	str	r2, [r3, #0]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d101      	bne.n	80017aa <LL_I2C_IsActiveFlag_TXIS+0x18>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f003 0320 	and.w	r3, r3, #32
 80017c8:	2b20      	cmp	r3, #32
 80017ca:	d101      	bne.n	80017d0 <LL_I2C_IsActiveFlag_STOP+0x18>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <LL_I2C_IsActiveFlag_STOP+0x1a>
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f043 0220 	orr.w	r2, r3, #32
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	61da      	str	r2, [r3, #28]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	605a      	str	r2, [r3, #4]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	0d5b      	lsrs	r3, r3, #21
 8001836:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <LL_I2C_HandleTransfer+0x48>)
 800183c:	430b      	orrs	r3, r1
 800183e:	43db      	mvns	r3, r3
 8001840:	401a      	ands	r2, r3
 8001842:	68b9      	ldr	r1, [r7, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4319      	orrs	r1, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	041b      	lsls	r3, r3, #16
 800184c:	4319      	orrs	r1, r3
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	4319      	orrs	r1, r3
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	430b      	orrs	r3, r1
 8001856:	431a      	orrs	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	03ff7bff 	.word	0x03ff7bff

0800186c <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	b2db      	uxtb	r3, r3
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	460b      	mov	r3, r1
 8001890:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001892:	78fa      	ldrb	r2, [r7, #3]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_AHB1_GRP1_EnableClock>:
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018ae:	695a      	ldr	r2, [r3, #20]
 80018b0:	4907      	ldr	r1, [pc, #28]	; (80018d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018ba:	695a      	ldr	r2, [r3, #20]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4013      	ands	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	40021000 	.word	0x40021000

080018d4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018de:	69da      	ldr	r2, [r3, #28]
 80018e0:	4907      	ldr	r1, [pc, #28]	; (8001900 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018ea:	69da      	ldr	r2, [r3, #28]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4013      	ands	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40021000 	.word	0x40021000

08001904 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08e      	sub	sp, #56	; 0x38
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]
 800191a:	615a      	str	r2, [r3, #20]
 800191c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
 800192c:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800192e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001932:	f7ff ffb7 	bl	80018a4 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001936:	23c0      	movs	r3, #192	; 0xc0
 8001938:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800193a:	2302      	movs	r3, #2
 800193c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800193e:	2303      	movs	r3, #3
 8001940:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001942:	2301      	movs	r3, #1
 8001944:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001946:	2301      	movs	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800194a:	2304      	movs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	4619      	mov	r1, r3
 8001952:	4821      	ldr	r0, [pc, #132]	; (80019d8 <MX_I2C1_Init+0xd4>)
 8001954:	f000 ff58 	bl	8002808 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001958:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800195c:	f7ff ffba 	bl	80018d4 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001960:	f7ff fe16 	bl	8001590 <__NVIC_GetPriorityGrouping>
 8001964:	4603      	mov	r3, r0
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fe66 	bl	800163c <NVIC_EncodePriority>
 8001970:	4603      	mov	r3, r0
 8001972:	4619      	mov	r1, r3
 8001974:	201f      	movs	r0, #31
 8001976:	f7ff fe37 	bl	80015e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800197a:	201f      	movs	r0, #31
 800197c:	f7ff fe16 	bl	80015ac <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001980:	4816      	ldr	r0, [pc, #88]	; (80019dc <MX_I2C1_Init+0xd8>)
 8001982:	f7ff ff3c 	bl	80017fe <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001986:	4815      	ldr	r0, [pc, #84]	; (80019dc <MX_I2C1_Init+0xd8>)
 8001988:	f7ff fed3 	bl	8001732 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800198c:	4813      	ldr	r0, [pc, #76]	; (80019dc <MX_I2C1_Init+0xd8>)
 800198e:	f7ff fea8 	bl	80016e2 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001992:	4812      	ldr	r0, [pc, #72]	; (80019dc <MX_I2C1_Init+0xd8>)
 8001994:	f7ff fe95 	bl	80016c2 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 800199c:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <MX_I2C1_Init+0xdc>)
 800199e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 80019a8:	2302      	movs	r3, #2
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80019b0:	2300      	movs	r3, #0
 80019b2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	4619      	mov	r1, r3
 80019ba:	4808      	ldr	r0, [pc, #32]	; (80019dc <MX_I2C1_Init+0xd8>)
 80019bc:	f001 f837 	bl	8002a2e <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2100      	movs	r1, #0
 80019c4:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_I2C1_Init+0xd8>)
 80019c6:	f7ff fe9c 	bl	8001702 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 80019ca:	4804      	ldr	r0, [pc, #16]	; (80019dc <MX_I2C1_Init+0xd8>)
 80019cc:	f7ff fe69 	bl	80016a2 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	3738      	adds	r7, #56	; 0x38
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	48000400 	.word	0x48000400
 80019dc:	40005400 	.word	0x40005400
 80019e0:	2000090e 	.word	0x2000090e

080019e4 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	4604      	mov	r4, r0
 80019ec:	4608      	mov	r0, r1
 80019ee:	4611      	mov	r1, r2
 80019f0:	461a      	mov	r2, r3
 80019f2:	4623      	mov	r3, r4
 80019f4:	71fb      	strb	r3, [r7, #7]
 80019f6:	4603      	mov	r3, r0
 80019f8:	71bb      	strb	r3, [r7, #6]
 80019fa:	460b      	mov	r3, r1
 80019fc:	717b      	strb	r3, [r7, #5]
 80019fe:	4613      	mov	r3, r2
 8001a00:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8001a02:	793b      	ldrb	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8001a08:	79bb      	ldrb	r3, [r7, #6]
 8001a0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a0e:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001a10:	7979      	ldrb	r1, [r7, #5]
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <i2c_master_write+0x80>)
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	2200      	movs	r2, #0
 8001a20:	4811      	ldr	r0, [pc, #68]	; (8001a68 <i2c_master_write+0x84>)
 8001a22:	f7ff fefd 	bl	8001820 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480f      	ldr	r0, [pc, #60]	; (8001a68 <i2c_master_write+0x84>)
 8001a2c:	f7ff ff2b 	bl	8001886 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001a30:	e00a      	b.n	8001a48 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001a32:	480d      	ldr	r0, [pc, #52]	; (8001a68 <i2c_master_write+0x84>)
 8001a34:	f7ff fead 	bl	8001792 <LL_I2C_IsActiveFlag_TXIS>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d004      	beq.n	8001a48 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	4619      	mov	r1, r3
 8001a42:	4809      	ldr	r0, [pc, #36]	; (8001a68 <i2c_master_write+0x84>)
 8001a44:	f7ff ff1f 	bl	8001886 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001a48:	4807      	ldr	r0, [pc, #28]	; (8001a68 <i2c_master_write+0x84>)
 8001a4a:	f7ff feb5 	bl	80017b8 <LL_I2C_IsActiveFlag_STOP>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0ee      	beq.n	8001a32 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <i2c_master_write+0x84>)
 8001a56:	f7ff fec2 	bl	80017de <LL_I2C_ClearFlag_STOP>
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd90      	pop	{r4, r7, pc}
 8001a62:	bf00      	nop
 8001a64:	80002000 	.word	0x80002000
 8001a68:	40005400 	.word	0x40005400

08001a6c <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	4608      	mov	r0, r1
 8001a76:	4611      	mov	r1, r2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	70fb      	strb	r3, [r7, #3]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	70bb      	strb	r3, [r7, #2]
 8001a82:	4613      	mov	r3, r2
 8001a84:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8001a86:	4a30      	ldr	r2, [pc, #192]	; (8001b48 <i2c_master_read+0xdc>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8001a8c:	7c3b      	ldrb	r3, [r7, #16]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8001a92:	78bb      	ldrb	r3, [r7, #2]
 8001a94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a98:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8001a9a:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <i2c_master_read+0xe0>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001aa0:	482b      	ldr	r0, [pc, #172]	; (8001b50 <i2c_master_read+0xe4>)
 8001aa2:	f7ff fe56 	bl	8001752 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001aa6:	7879      	ldrb	r1, [r7, #1]
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <i2c_master_read+0xe8>)
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4826      	ldr	r0, [pc, #152]	; (8001b50 <i2c_master_read+0xe4>)
 8001ab8:	f7ff feb2 	bl	8001820 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001abc:	e00a      	b.n	8001ad4 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001abe:	4824      	ldr	r0, [pc, #144]	; (8001b50 <i2c_master_read+0xe4>)
 8001ac0:	f7ff fe67 	bl	8001792 <LL_I2C_IsActiveFlag_TXIS>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d004      	beq.n	8001ad4 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8001aca:	78bb      	ldrb	r3, [r7, #2]
 8001acc:	4619      	mov	r1, r3
 8001ace:	4820      	ldr	r0, [pc, #128]	; (8001b50 <i2c_master_read+0xe4>)
 8001ad0:	f7ff fed9 	bl	8001886 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001ad4:	481e      	ldr	r0, [pc, #120]	; (8001b50 <i2c_master_read+0xe4>)
 8001ad6:	f7ff fe6f 	bl	80017b8 <LL_I2C_IsActiveFlag_STOP>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0ee      	beq.n	8001abe <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001ae0:	481b      	ldr	r0, [pc, #108]	; (8001b50 <i2c_master_read+0xe4>)
 8001ae2:	f7ff fe7c 	bl	80017de <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8001ae6:	bf00      	nop
 8001ae8:	4819      	ldr	r0, [pc, #100]	; (8001b50 <i2c_master_read+0xe4>)
 8001aea:	f7ff fe65 	bl	80017b8 <LL_I2C_IsActiveFlag_STOP>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f9      	bne.n	8001ae8 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001af4:	7879      	ldrb	r1, [r7, #1]
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	4a17      	ldr	r2, [pc, #92]	; (8001b58 <i2c_master_read+0xec>)
 8001afa:	9201      	str	r2, [sp, #4]
 8001afc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b00:	9200      	str	r2, [sp, #0]
 8001b02:	2200      	movs	r2, #0
 8001b04:	4812      	ldr	r0, [pc, #72]	; (8001b50 <i2c_master_read+0xe4>)
 8001b06:	f7ff fe8b 	bl	8001820 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001b0a:	bf00      	nop
 8001b0c:	4810      	ldr	r0, [pc, #64]	; (8001b50 <i2c_master_read+0xe4>)
 8001b0e:	f7ff fe53 	bl	80017b8 <LL_I2C_IsActiveFlag_STOP>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f9      	beq.n	8001b0c <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8001b18:	480d      	ldr	r0, [pc, #52]	; (8001b50 <i2c_master_read+0xe4>)
 8001b1a:	f7ff fe60 	bl	80017de <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8001b1e:	480c      	ldr	r0, [pc, #48]	; (8001b50 <i2c_master_read+0xe4>)
 8001b20:	f7ff fe27 	bl	8001772 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <i2c_master_read+0xe4>)
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <i2c_master_read+0xe4>)
 8001b2a:	f043 0310 	orr.w	r3, r3, #16
 8001b2e:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <i2c_master_read+0xf0>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <i2c_master_read+0xe0>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8001b3c:	4b02      	ldr	r3, [pc, #8]	; (8001b48 <i2c_master_read+0xdc>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000028 	.word	0x20000028
 8001b4c:	20000026 	.word	0x20000026
 8001b50:	40005400 	.word	0x40005400
 8001b54:	80002000 	.word	0x80002000
 8001b58:	80002400 	.word	0x80002400
 8001b5c:	20000027 	.word	0x20000027

08001b60 <i2cHandler>:

void i2cHandler(void){
 8001b60:	b598      	push	{r3, r4, r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <i2cHandler+0x44>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <i2cHandler+0x48>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	1c59      	adds	r1, r3, #1
 8001b70:	b2c8      	uxtb	r0, r1
 8001b72:	490d      	ldr	r1, [pc, #52]	; (8001ba8 <i2cHandler+0x48>)
 8001b74:	7008      	strb	r0, [r1, #0]
 8001b76:	18d4      	adds	r4, r2, r3
 8001b78:	480c      	ldr	r0, [pc, #48]	; (8001bac <i2cHandler+0x4c>)
 8001b7a:	f7ff fe77 	bl	800186c <LL_I2C_ReceiveData8>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	7023      	strb	r3, [r4, #0]
	(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <i2cHandler+0x48>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b13      	cmp	r3, #19
 8001b8a:	d903      	bls.n	8001b94 <i2cHandler+0x34>
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <i2cHandler+0x48>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
 8001b92:	e001      	b.n	8001b98 <i2cHandler+0x38>
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <i2cHandler+0x48>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
	end_of_read_flag = 0;
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <i2cHandler+0x50>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
}
 8001b9e:	bf00      	nop
 8001ba0:	bd98      	pop	{r3, r4, r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000028 	.word	0x20000028
 8001ba8:	20000027 	.word	0x20000027
 8001bac:	40005400 	.word	0x40005400
 8001bb0:	20000026 	.word	0x20000026

08001bb4 <lsm6ds0_read_byte>:
#include "lps25hb.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af02      	add	r7, sp, #8
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <lsm6ds0_read_byte+0x30>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	79fa      	ldrb	r2, [r7, #7]
 8001bc8:	f107 000f 	add.w	r0, r7, #15
 8001bcc:	2100      	movs	r1, #0
 8001bce:	9100      	str	r1, [sp, #0]
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	f7ff ff4b 	bl	8001a6c <i2c_master_read>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	781b      	ldrb	r3, [r3, #0]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000001 	.word	0x20000001

08001be8 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	460a      	mov	r2, r1
 8001bf2:	71fb      	strb	r3, [r7, #7]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <lsm6ds0_write_byte+0x28>)
 8001bfa:	781a      	ldrb	r2, [r3, #0]
 8001bfc:	79f9      	ldrb	r1, [r7, #7]
 8001bfe:	79b8      	ldrb	r0, [r7, #6]
 8001c00:	2300      	movs	r3, #0
 8001c02:	f7ff feef 	bl	80019e4 <i2c_master_write>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000001 	.word	0x20000001

08001c14 <lsm6ds0_readArray>:


void lsm6ds0_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	70fb      	strb	r3, [r7, #3]
 8001c20:	4613      	mov	r3, r2
 8001c22:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres, 1);
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <lsm6ds0_readArray+0x2c>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	78fa      	ldrb	r2, [r7, #3]
 8001c2a:	78b9      	ldrb	r1, [r7, #2]
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	9000      	str	r0, [sp, #0]
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff1b 	bl	8001a6c <i2c_master_read>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000001 	.word	0x20000001

08001c44 <lsm6ds0_get_acc>:
	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
}


void lsm6ds0_get_acc(float* x, float* y, float* z)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
	int16_t xx, yy, zz;

	uint8_t temp;

	//get current scale and use it for final calculation
    temp = lsm6ds0_read_byte(LSM6DS0_ADDRESS_CTRL1);
 8001c50:	2010      	movs	r0, #16
 8001c52:	f7ff ffaf 	bl	8001bb4 <lsm6ds0_read_byte>
 8001c56:	4603      	mov	r3, r0
 8001c58:	77fb      	strb	r3, [r7, #31]

	temp = temp >> 2;
 8001c5a:	7ffb      	ldrb	r3, [r7, #31]
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	77fb      	strb	r3, [r7, #31]
    temp &= 0x03;			//full scale bits exctracted
 8001c60:	7ffb      	ldrb	r3, [r7, #31]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	77fb      	strb	r3, [r7, #31]

	lsm6ds0_readArray(data, LSM6DS0_ADDRESS_ACCX, 6);
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	2206      	movs	r2, #6
 8001c6e:	2128      	movs	r1, #40	; 0x28
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ffcf 	bl	8001c14 <lsm6ds0_readArray>

	xx = ((uint16_t)data[1]) << 8 | data[0];
 8001c76:	7c7b      	ldrb	r3, [r7, #17]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	7c3b      	ldrb	r3, [r7, #16]
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	83bb      	strh	r3, [r7, #28]
	yy = ((uint16_t)data[3]) << 8 | data[2];
 8001c84:	7cfb      	ldrb	r3, [r7, #19]
 8001c86:	021b      	lsls	r3, r3, #8
 8001c88:	b21a      	sxth	r2, r3
 8001c8a:	7cbb      	ldrb	r3, [r7, #18]
 8001c8c:	b21b      	sxth	r3, r3
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	837b      	strh	r3, [r7, #26]
	zz = ((uint16_t)data[5]) << 8 | data[4];
 8001c92:	7d7b      	ldrb	r3, [r7, #21]
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	b21a      	sxth	r2, r3
 8001c98:	7d3b      	ldrb	r3, [r7, #20]
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	833b      	strh	r3, [r7, #24]

	*x = (xx >> 4) / 1000.0f;
 8001ca0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ca4:	111b      	asrs	r3, r3, #4
 8001ca6:	b21b      	sxth	r3, r3
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001d04 <lsm6ds0_get_acc+0xc0>
 8001cb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	edc3 7a00 	vstr	s15, [r3]
	*y = (yy >> 4) / 1000.0f;
 8001cbe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001cc2:	111b      	asrs	r3, r3, #4
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cce:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001d04 <lsm6ds0_get_acc+0xc0>
 8001cd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	edc3 7a00 	vstr	s15, [r3]
	*z = (zz >> 4) / 1000.0f;
 8001cdc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ce0:	111b      	asrs	r3, r3, #4
 8001ce2:	b21b      	sxth	r3, r3
 8001ce4:	ee07 3a90 	vmov	s15, r3
 8001ce8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cec:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001d04 <lsm6ds0_get_acc+0xc0>
 8001cf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	edc3 7a00 	vstr	s15, [r3]
}
 8001cfa:	bf00      	nop
 8001cfc:	3720      	adds	r7, #32
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	447a0000 	.word	0x447a0000

08001d08 <lsm6ds0_init>:


uint8_t lsm6ds0_init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8001d12:	2064      	movs	r0, #100	; 0x64
 8001d14:	f001 faea 	bl	80032ec <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8001d18:	200f      	movs	r0, #15
 8001d1a:	f7ff ff4b 	bl	8001bb4 <lsm6ds0_read_byte>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 8001d22:	79bb      	ldrb	r3, [r7, #6]
 8001d24:	2b68      	cmp	r3, #104	; 0x68
 8001d26:	d102      	bne.n	8001d2e <lsm6ds0_init+0x26>
	{
		status = 1;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	71fb      	strb	r3, [r7, #7]
 8001d2c:	e00f      	b.n	8001d4e <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <lsm6ds0_init+0x60>)
 8001d30:	22d6      	movs	r2, #214	; 0xd6
 8001d32:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8001d34:	200f      	movs	r0, #15
 8001d36:	f7ff ff3d 	bl	8001bb4 <lsm6ds0_read_byte>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 8001d3e:	79bb      	ldrb	r3, [r7, #6]
 8001d40:	2b68      	cmp	r3, #104	; 0x68
 8001d42:	d102      	bne.n	8001d4a <lsm6ds0_init+0x42>
		{
			status = 1;
 8001d44:	2301      	movs	r3, #1
 8001d46:	71fb      	strb	r3, [r7, #7]
 8001d48:	e001      	b.n	8001d4e <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8001d52:	797b      	ldrb	r3, [r7, #5]
 8001d54:	4619      	mov	r1, r3
 8001d56:	2010      	movs	r0, #16
 8001d58:	f7ff ff46 	bl	8001be8 <lsm6ds0_write_byte>

	return status;
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000001 	.word	0x20000001

08001d6c <__NVIC_SetPriorityGrouping>:
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9e:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	60d3      	str	r3, [r2, #12]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <LL_RCC_HSI_Enable+0x1c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <LL_RCC_HSI_Enable+0x1c>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <LL_RCC_HSI_IsReady+0x20>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	bf0c      	ite	eq
 8001de4:	2301      	moveq	r3, #1
 8001de6:	2300      	movne	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	40021000 	.word	0x40021000

08001df8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4904      	ldr	r1, [pc, #16]	; (8001e20 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000

08001e24 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <LL_RCC_SetSysClkSource+0x24>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f023 0203 	bic.w	r2, r3, #3
 8001e34:	4904      	ldr	r1, [pc, #16]	; (8001e48 <LL_RCC_SetSysClkSource+0x24>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	40021000 	.word	0x40021000

08001e4c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <LL_RCC_GetSysClkSource+0x18>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 030c 	and.w	r3, r3, #12
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000

08001e68 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <LL_RCC_SetAHBPrescaler+0x24>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e78:	4904      	ldr	r1, [pc, #16]	; (8001e8c <LL_RCC_SetAHBPrescaler+0x24>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	40021000 	.word	0x40021000

08001e90 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ea0:	4904      	ldr	r1, [pc, #16]	; (8001eb4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <LL_RCC_SetAPB2Prescaler+0x24>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ec8:	4904      	ldr	r1, [pc, #16]	; (8001edc <LL_RCC_SetAPB2Prescaler+0x24>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	40021000 	.word	0x40021000

08001ee0 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <LL_RCC_SetI2CClockSource+0x2c>)
 8001eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	0e1b      	lsrs	r3, r3, #24
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001efa:	4904      	ldr	r1, [pc, #16]	; (8001f0c <LL_RCC_SetI2CClockSource+0x2c>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	40021000 	.word	0x40021000

08001f10 <LL_APB1_GRP1_EnableClock>:
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f1a:	69da      	ldr	r2, [r3, #28]
 8001f1c:	4907      	ldr	r1, [pc, #28]	; (8001f3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f26:	69da      	ldr	r2, [r3, #28]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	40021000 	.word	0x40021000

08001f40 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f4a:	699a      	ldr	r2, [r3, #24]
 8001f4c:	4907      	ldr	r1, [pc, #28]	; (8001f6c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f56:	699a      	ldr	r2, [r3, #24]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	40021000 	.word	0x40021000

08001f70 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <LL_FLASH_SetLatency+0x24>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 0207 	bic.w	r2, r3, #7
 8001f80:	4904      	ldr	r1, [pc, #16]	; (8001f94 <LL_FLASH_SetLatency+0x24>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	40022000 	.word	0x40022000

08001f98 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <LL_FLASH_GetLatency+0x18>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40022000 	.word	0x40022000

08001fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001fb8:	2001      	movs	r0, #1
 8001fba:	f7ff ffc1 	bl	8001f40 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001fbe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001fc2:	f7ff ffa5 	bl	8001f10 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc6:	2003      	movs	r0, #3
 8001fc8:	f7ff fed0 	bl	8001d6c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fcc:	f000 f81c 	bl	8002008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fd0:	f7ff fa9a 	bl	8001508 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001fd4:	f000 fa2c 	bl	8002430 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001fd8:	f000 fa8c 	bl	80024f4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001fdc:	f7ff fc92 	bl	8001904 <MX_I2C1_Init>
  //LL_TIM_EnableIT_CC2(TIM2);
  //LL_TIM_EnableCounter(TIM2);
  //LL_TIM_EnableIT_CC2(TIM3);
  //LL_TIM_EnableCounter(TIM3);

  resetAllDigits();
 8001fe0:	f7fe fb60 	bl	80006a4 <resetAllDigits>

  lsm6ds0_init();
 8001fe4:	f7ff fe90 	bl	8001d08 <lsm6ds0_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lsm6ds0_get_acc(acc, (acc+1), (acc+2));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <main+0x48>)
 8001fea:	4a05      	ldr	r2, [pc, #20]	; (8002000 <main+0x4c>)
 8001fec:	4619      	mov	r1, r3
 8001fee:	4805      	ldr	r0, [pc, #20]	; (8002004 <main+0x50>)
 8001ff0:	f7ff fe28 	bl	8001c44 <lsm6ds0_get_acc>
	  LL_mDelay(50);
 8001ff4:	2032      	movs	r0, #50	; 0x32
 8001ff6:	f001 f979 	bl	80032ec <LL_mDelay>
	  lsm6ds0_get_acc(acc, (acc+1), (acc+2));
 8001ffa:	e7f5      	b.n	8001fe8 <main+0x34>
 8001ffc:	20000030 	.word	0x20000030
 8002000:	20000034 	.word	0x20000034
 8002004:	2000002c 	.word	0x2000002c

08002008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800200c:	2000      	movs	r0, #0
 800200e:	f7ff ffaf 	bl	8001f70 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8002012:	bf00      	nop
 8002014:	f7ff ffc0 	bl	8001f98 <LL_FLASH_GetLatency>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1fa      	bne.n	8002014 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800201e:	f7ff fec9 	bl	8001db4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8002022:	bf00      	nop
 8002024:	f7ff fed6 	bl	8001dd4 <LL_RCC_HSI_IsReady>
 8002028:	4603      	mov	r3, r0
 800202a:	2b01      	cmp	r3, #1
 800202c:	d1fa      	bne.n	8002024 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800202e:	2010      	movs	r0, #16
 8002030:	f7ff fee2 	bl	8001df8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002034:	2000      	movs	r0, #0
 8002036:	f7ff ff17 	bl	8001e68 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800203a:	2000      	movs	r0, #0
 800203c:	f7ff ff28 	bl	8001e90 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff ff39 	bl	8001eb8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002046:	2000      	movs	r0, #0
 8002048:	f7ff feec 	bl	8001e24 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800204c:	bf00      	nop
 800204e:	f7ff fefd 	bl	8001e4c <LL_RCC_GetSysClkSource>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1fa      	bne.n	800204e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8002058:	4805      	ldr	r0, [pc, #20]	; (8002070 <SystemClock_Config+0x68>)
 800205a:	f001 f939 	bl	80032d0 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800205e:	4804      	ldr	r0, [pc, #16]	; (8002070 <SystemClock_Config+0x68>)
 8002060:	f001 f96a 	bl	8003338 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8002064:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002068:	f7ff ff3a 	bl	8001ee0 <LL_RCC_SetI2CClockSource>
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	007a1200 	.word	0x007a1200

08002074 <LL_I2C_IsActiveFlag_RXNE>:
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b04      	cmp	r3, #4
 8002086:	d101      	bne.n	800208c <LL_I2C_IsActiveFlag_RXNE+0x18>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f06f 0201 	mvn.w	r2, #1
 80020a8:	611a      	str	r2, [r3, #16]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <NMI_Handler+0x4>

080020e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e6:	e7fe      	b.n	80020e6 <HardFault_Handler+0x4>

080020e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <MemManage_Handler+0x4>

080020ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f2:	e7fe      	b.n	80020f2 <BusFault_Handler+0x4>

080020f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <UsageFault_Handler+0x4>

080020fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 8002136:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800213a:	f7ff ffbc 	bl	80020b6 <LL_TIM_IsActiveFlag_UPDATE>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <TIM2_IRQHandler+0x16>
		shiftDisplayText();
 8002144:	f7fe f8e8 	bl	8000318 <shiftDisplayText>
	}

	LL_TIM_ClearFlag_UPDATE(TIM2);
 8002148:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800214c:	f7ff ffa5 	bl	800209a <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}

08002154 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3)){
 8002158:	4806      	ldr	r0, [pc, #24]	; (8002174 <TIM3_IRQHandler+0x20>)
 800215a:	f7ff ffac 	bl	80020b6 <LL_TIM_IsActiveFlag_UPDATE>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <TIM3_IRQHandler+0x14>
		updateDisplay();
 8002164:	f7fe f84c 	bl	8000200 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8002168:	4802      	ldr	r0, [pc, #8]	; (8002174 <TIM3_IRQHandler+0x20>)
 800216a:	f7ff ff96 	bl	800209a <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40000400 	.word	0x40000400

08002178 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
  /* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 800217c:	4804      	ldr	r0, [pc, #16]	; (8002190 <I2C1_EV_IRQHandler+0x18>)
 800217e:	f7ff ff79 	bl	8002074 <LL_I2C_IsActiveFlag_RXNE>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <I2C1_EV_IRQHandler+0x14>
	{
		/* Call function Master Reception Callback */
		i2cHandler();
 8002188:	f7ff fcea 	bl	8001b60 <i2cHandler>
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40005400 	.word	0x40005400

08002194 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <SystemInit+0x20>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	4a05      	ldr	r2, [pc, #20]	; (80021b4 <SystemInit+0x20>)
 80021a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_GetPriorityGrouping>:
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <__NVIC_GetPriorityGrouping+0x18>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	f003 0307 	and.w	r3, r3, #7
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_EnableIRQ>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	db0b      	blt.n	80021fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	f003 021f 	and.w	r2, r3, #31
 80021ec:	4907      	ldr	r1, [pc, #28]	; (800220c <__NVIC_EnableIRQ+0x38>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	2001      	movs	r0, #1
 80021f6:	fa00 f202 	lsl.w	r2, r0, r2
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000e100 	.word	0xe000e100

08002210 <__NVIC_SetPriority>:
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	6039      	str	r1, [r7, #0]
 800221a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	2b00      	cmp	r3, #0
 8002222:	db0a      	blt.n	800223a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	b2da      	uxtb	r2, r3
 8002228:	490c      	ldr	r1, [pc, #48]	; (800225c <__NVIC_SetPriority+0x4c>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	0112      	lsls	r2, r2, #4
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	440b      	add	r3, r1
 8002234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002238:	e00a      	b.n	8002250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4908      	ldr	r1, [pc, #32]	; (8002260 <__NVIC_SetPriority+0x50>)
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	3b04      	subs	r3, #4
 8002248:	0112      	lsls	r2, r2, #4
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	440b      	add	r3, r1
 800224e:	761a      	strb	r2, [r3, #24]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000e100 	.word	0xe000e100
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <NVIC_EncodePriority>:
{
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	; 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f1c3 0307 	rsb	r3, r3, #7
 800227e:	2b04      	cmp	r3, #4
 8002280:	bf28      	it	cs
 8002282:	2304      	movcs	r3, #4
 8002284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3304      	adds	r3, #4
 800228a:	2b06      	cmp	r3, #6
 800228c:	d902      	bls.n	8002294 <NVIC_EncodePriority+0x30>
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3b03      	subs	r3, #3
 8002292:	e000      	b.n	8002296 <NVIC_EncodePriority+0x32>
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	f04f 32ff 	mov.w	r2, #4294967295
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43da      	mvns	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	401a      	ands	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ac:	f04f 31ff 	mov.w	r1, #4294967295
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa01 f303 	lsl.w	r3, r1, r3
 80022b6:	43d9      	mvns	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	4313      	orrs	r3, r2
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3724      	adds	r7, #36	; 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <LL_APB1_GRP1_EnableClock>:
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80022d6:	69da      	ldr	r2, [r3, #28]
 80022d8:	4907      	ldr	r1, [pc, #28]	; (80022f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80022e2:	69da      	ldr	r2, [r3, #28]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4013      	ands	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022ea:	68fb      	ldr	r3, [r7, #12]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	40021000 	.word	0x40021000

080022fc <LL_TIM_DisableARRPreload>:
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	601a      	str	r2, [r3, #0]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_TIM_OC_DisableFast>:
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d028      	beq.n	800237e <LL_TIM_OC_DisableFast+0x62>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2b04      	cmp	r3, #4
 8002330:	d023      	beq.n	800237a <LL_TIM_OC_DisableFast+0x5e>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b10      	cmp	r3, #16
 8002336:	d01e      	beq.n	8002376 <LL_TIM_OC_DisableFast+0x5a>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b40      	cmp	r3, #64	; 0x40
 800233c:	d019      	beq.n	8002372 <LL_TIM_OC_DisableFast+0x56>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002344:	d013      	beq.n	800236e <LL_TIM_OC_DisableFast+0x52>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800234c:	d00d      	beq.n	800236a <LL_TIM_OC_DisableFast+0x4e>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002354:	d007      	beq.n	8002366 <LL_TIM_OC_DisableFast+0x4a>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235c:	d101      	bne.n	8002362 <LL_TIM_OC_DisableFast+0x46>
 800235e:	2307      	movs	r3, #7
 8002360:	e00e      	b.n	8002380 <LL_TIM_OC_DisableFast+0x64>
 8002362:	2308      	movs	r3, #8
 8002364:	e00c      	b.n	8002380 <LL_TIM_OC_DisableFast+0x64>
 8002366:	2306      	movs	r3, #6
 8002368:	e00a      	b.n	8002380 <LL_TIM_OC_DisableFast+0x64>
 800236a:	2305      	movs	r3, #5
 800236c:	e008      	b.n	8002380 <LL_TIM_OC_DisableFast+0x64>
 800236e:	2304      	movs	r3, #4
 8002370:	e006      	b.n	8002380 <LL_TIM_OC_DisableFast+0x64>
 8002372:	2303      	movs	r3, #3
 8002374:	e004      	b.n	8002380 <LL_TIM_OC_DisableFast+0x64>
 8002376:	2302      	movs	r3, #2
 8002378:	e002      	b.n	8002380 <LL_TIM_OC_DisableFast+0x64>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <LL_TIM_OC_DisableFast+0x64>
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3318      	adds	r3, #24
 8002386:	4619      	mov	r1, r3
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	4a0b      	ldr	r2, [pc, #44]	; (80023b8 <LL_TIM_OC_DisableFast+0x9c>)
 800238c:	5cd3      	ldrb	r3, [r2, r3]
 800238e:	440b      	add	r3, r1
 8002390:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	4908      	ldr	r1, [pc, #32]	; (80023bc <LL_TIM_OC_DisableFast+0xa0>)
 800239a:	5ccb      	ldrb	r3, [r1, r3]
 800239c:	4619      	mov	r1, r3
 800239e:	2304      	movs	r3, #4
 80023a0:	408b      	lsls	r3, r1
 80023a2:	43db      	mvns	r3, r3
 80023a4:	401a      	ands	r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	601a      	str	r2, [r3, #0]
}
 80023aa:	bf00      	nop
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	080033dc 	.word	0x080033dc
 80023bc:	080033e8 	.word	0x080033e8

080023c0 <LL_TIM_SetClockSource>:
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80023d2:	f023 0307 	bic.w	r3, r3, #7
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	609a      	str	r2, [r3, #8]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <LL_TIM_SetTriggerOutput>:
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	605a      	str	r2, [r3, #4]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <LL_TIM_DisableMasterSlaveMode>:
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	609a      	str	r2, [r3, #8]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08e      	sub	sp, #56	; 0x38
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	60da      	str	r2, [r3, #12]
 8002444:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	2220      	movs	r2, #32
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f000 ffa7 	bl	80033a0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002452:	2001      	movs	r0, #1
 8002454:	f7ff ff3a 	bl	80022cc <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002458:	f7ff feae 	bl	80021b8 <__NVIC_GetPriorityGrouping>
 800245c:	4603      	mov	r3, r0
 800245e:	2200      	movs	r2, #0
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fefe 	bl	8002264 <NVIC_EncodePriority>
 8002468:	4603      	mov	r3, r0
 800246a:	4619      	mov	r1, r3
 800246c:	201c      	movs	r0, #28
 800246e:	f7ff fecf 	bl	8002210 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002472:	201c      	movs	r0, #28
 8002474:	f7ff feae 	bl	80021d4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8002478:	f240 331f 	movw	r3, #799	; 0x31f
 800247c:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800247e:	2300      	movs	r3, #0
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 4999;
 8002482:	f241 3387 	movw	r3, #4999	; 0x1387
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002488:	2300      	movs	r3, #0
 800248a:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800248c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002490:	4619      	mov	r1, r3
 8002492:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002496:	f000 fb97 	bl	8002bc8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800249a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800249e:	f7ff ff2d 	bl	80022fc <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80024a2:	2100      	movs	r1, #0
 80024a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024a8:	f7ff ff8a 	bl	80023c0 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 80024ac:	2300      	movs	r3, #0
 80024ae:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	461a      	mov	r2, r3
 80024c4:	2101      	movs	r1, #1
 80024c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024ca:	f000 fbef 	bl	8002cac <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80024ce:	2101      	movs	r1, #1
 80024d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024d4:	f7ff ff22 	bl	800231c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80024d8:	2100      	movs	r1, #0
 80024da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024de:	f7ff ff84 	bl	80023ea <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80024e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024e6:	f7ff ff93 	bl	8002410 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024ea:	bf00      	nop
 80024ec:	3738      	adds	r7, #56	; 0x38
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08e      	sub	sp, #56	; 0x38
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80024fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]
 8002508:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	2220      	movs	r2, #32
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f000 ff45 	bl	80033a0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002516:	2002      	movs	r0, #2
 8002518:	f7ff fed8 	bl	80022cc <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800251c:	f7ff fe4c 	bl	80021b8 <__NVIC_GetPriorityGrouping>
 8002520:	4603      	mov	r3, r0
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fe9c 	bl	8002264 <NVIC_EncodePriority>
 800252c:	4603      	mov	r3, r0
 800252e:	4619      	mov	r1, r3
 8002530:	201d      	movs	r0, #29
 8002532:	f7ff fe6d 	bl	8002210 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002536:	201d      	movs	r0, #29
 8002538:	f7ff fe4c 	bl	80021d4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 800253c:	f240 331f 	movw	r3, #799	; 0x31f
 8002540:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002542:	2300      	movs	r3, #0
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 99;
 8002546:	2363      	movs	r3, #99	; 0x63
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800254a:	2300      	movs	r3, #0
 800254c:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800254e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002552:	4619      	mov	r1, r3
 8002554:	4814      	ldr	r0, [pc, #80]	; (80025a8 <MX_TIM3_Init+0xb4>)
 8002556:	f000 fb37 	bl	8002bc8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800255a:	4813      	ldr	r0, [pc, #76]	; (80025a8 <MX_TIM3_Init+0xb4>)
 800255c:	f7ff fece 	bl	80022fc <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002560:	2100      	movs	r1, #0
 8002562:	4811      	ldr	r0, [pc, #68]	; (80025a8 <MX_TIM3_Init+0xb4>)
 8002564:	f7ff ff2c 	bl	80023c0 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8002568:	2300      	movs	r3, #0
 800256a:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800256c:	2300      	movs	r3, #0
 800256e:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800257c:	1d3b      	adds	r3, r7, #4
 800257e:	461a      	mov	r2, r3
 8002580:	2101      	movs	r1, #1
 8002582:	4809      	ldr	r0, [pc, #36]	; (80025a8 <MX_TIM3_Init+0xb4>)
 8002584:	f000 fb92 	bl	8002cac <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002588:	2101      	movs	r1, #1
 800258a:	4807      	ldr	r0, [pc, #28]	; (80025a8 <MX_TIM3_Init+0xb4>)
 800258c:	f7ff fec6 	bl	800231c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002590:	2100      	movs	r1, #0
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <MX_TIM3_Init+0xb4>)
 8002594:	f7ff ff29 	bl	80023ea <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002598:	4803      	ldr	r0, [pc, #12]	; (80025a8 <MX_TIM3_Init+0xb4>)
 800259a:	f7ff ff39 	bl	8002410 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800259e:	bf00      	nop
 80025a0:	3738      	adds	r7, #56	; 0x38
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40000400 	.word	0x40000400

080025ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025b0:	480d      	ldr	r0, [pc, #52]	; (80025e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80025b2:	490e      	ldr	r1, [pc, #56]	; (80025ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80025b4:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <LoopForever+0xe>)
  movs r3, #0
 80025b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b8:	e002      	b.n	80025c0 <LoopCopyDataInit>

080025ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025be:	3304      	adds	r3, #4

080025c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c4:	d3f9      	bcc.n	80025ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c6:	4a0b      	ldr	r2, [pc, #44]	; (80025f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025c8:	4c0b      	ldr	r4, [pc, #44]	; (80025f8 <LoopForever+0x16>)
  movs r3, #0
 80025ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025cc:	e001      	b.n	80025d2 <LoopFillZerobss>

080025ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d0:	3204      	adds	r2, #4

080025d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d4:	d3fb      	bcc.n	80025ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025d6:	f7ff fddd 	bl	8002194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025da:	f000 febd 	bl	8003358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025de:	f7ff fce9 	bl	8001fb4 <main>

080025e2 <LoopForever>:

LoopForever:
    b LoopForever
 80025e2:	e7fe      	b.n	80025e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025e4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80025e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025ec:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80025f0:	080033fc 	.word	0x080033fc
  ldr r2, =_sbss
 80025f4:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80025f8:	20000044 	.word	0x20000044

080025fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025fc:	e7fe      	b.n	80025fc <ADC1_2_IRQHandler>

080025fe <LL_GPIO_SetPinMode>:
{
 80025fe:	b480      	push	{r7}
 8002600:	b089      	sub	sp, #36	; 0x24
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	2103      	movs	r1, #3
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	401a      	ands	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	61bb      	str	r3, [r7, #24]
  return result;
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	431a      	orrs	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	601a      	str	r2, [r3, #0]
}
 8002650:	bf00      	nop
 8002652:	3724      	adds	r7, #36	; 0x24
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <LL_GPIO_SetPinOutputType>:
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	43db      	mvns	r3, r3
 8002670:	401a      	ands	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	431a      	orrs	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	605a      	str	r2, [r3, #4]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_GPIO_SetPinSpeed>:
{
 800268c:	b480      	push	{r7}
 800268e:	b089      	sub	sp, #36	; 0x24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	613b      	str	r3, [r7, #16]
  return result;
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	2103      	movs	r1, #3
 80026b4:	fa01 f303 	lsl.w	r3, r1, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	401a      	ands	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	61bb      	str	r3, [r7, #24]
  return result;
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	fab3 f383 	clz	r3, r3
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	fa01 f303 	lsl.w	r3, r1, r3
 80026d8:	431a      	orrs	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	609a      	str	r2, [r3, #8]
}
 80026de:	bf00      	nop
 80026e0:	3724      	adds	r7, #36	; 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <LL_GPIO_SetPinPull>:
{
 80026ea:	b480      	push	{r7}
 80026ec:	b089      	sub	sp, #36	; 0x24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	fa93 f3a3 	rbit	r3, r3
 8002704:	613b      	str	r3, [r7, #16]
  return result;
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	2103      	movs	r1, #3
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	401a      	ands	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	61bb      	str	r3, [r7, #24]
  return result;
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	431a      	orrs	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	60da      	str	r2, [r3, #12]
}
 800273c:	bf00      	nop
 800273e:	3724      	adds	r7, #36	; 0x24
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_GPIO_SetAFPin_0_7>:
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a1a      	ldr	r2, [r3, #32]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	613b      	str	r3, [r7, #16]
  return result;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	210f      	movs	r1, #15
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	401a      	ands	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	fa93 f3a3 	rbit	r3, r3
 8002782:	61bb      	str	r3, [r7, #24]
  return result;
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	fab3 f383 	clz	r3, r3
 800278a:	b2db      	uxtb	r3, r3
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	fa01 f303 	lsl.w	r3, r1, r3
 8002794:	431a      	orrs	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	621a      	str	r2, [r3, #32]
}
 800279a:	bf00      	nop
 800279c:	3724      	adds	r7, #36	; 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <LL_GPIO_SetAFPin_8_15>:
{
 80027a6:	b480      	push	{r7}
 80027a8:	b089      	sub	sp, #36	; 0x24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	613b      	str	r3, [r7, #16]
  return result;
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	210f      	movs	r1, #15
 80027d0:	fa01 f303 	lsl.w	r3, r1, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	401a      	ands	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	61bb      	str	r3, [r7, #24]
  return result;
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	fab3 f383 	clz	r3, r3
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	431a      	orrs	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80027fc:	bf00      	nop
 80027fe:	3724      	adds	r7, #36	; 0x24
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	613b      	str	r3, [r7, #16]
  return result;
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800282a:	e051      	b.n	80028d0 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	2101      	movs	r1, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d043      	beq.n	80028ca <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d003      	beq.n	8002852 <LL_GPIO_Init+0x4a>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d10e      	bne.n	8002870 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	461a      	mov	r2, r3
 8002858:	69b9      	ldr	r1, [r7, #24]
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff ff16 	bl	800268c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	6819      	ldr	r1, [r3, #0]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	461a      	mov	r2, r3
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff fef6 	bl	800265c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	461a      	mov	r2, r3
 8002876:	69b9      	ldr	r1, [r7, #24]
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff ff36 	bl	80026ea <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d11a      	bne.n	80028bc <LL_GPIO_Init+0xb4>
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	fa93 f3a3 	rbit	r3, r3
 8002890:	60bb      	str	r3, [r7, #8]
  return result;
 8002892:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b07      	cmp	r3, #7
 800289c:	d807      	bhi.n	80028ae <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	461a      	mov	r2, r3
 80028a4:	69b9      	ldr	r1, [r7, #24]
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff ff4e 	bl	8002748 <LL_GPIO_SetAFPin_0_7>
 80028ac:	e006      	b.n	80028bc <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	461a      	mov	r2, r3
 80028b4:	69b9      	ldr	r1, [r7, #24]
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ff75 	bl	80027a6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	461a      	mov	r2, r3
 80028c2:	69b9      	ldr	r1, [r7, #24]
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff fe9a 	bl	80025fe <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3301      	adds	r3, #1
 80028ce:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	fa22 f303 	lsr.w	r3, r2, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1a6      	bne.n	800282c <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3720      	adds	r7, #32
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <LL_I2C_Enable>:
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f043 0201 	orr.w	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	601a      	str	r2, [r3, #0]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_I2C_Disable>:
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f023 0201 	bic.w	r2, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	601a      	str	r2, [r3, #0]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <LL_I2C_ConfigFilters>:
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	0219      	lsls	r1, r3, #8
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	430b      	orrs	r3, r1
 8002944:	431a      	orrs	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	601a      	str	r2, [r3, #0]
}
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_I2C_SetOwnAddress1>:
{
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800296a:	f023 0307 	bic.w	r3, r3, #7
 800296e:	68b9      	ldr	r1, [r7, #8]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	430a      	orrs	r2, r1
 8002974:	431a      	orrs	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	609a      	str	r2, [r3, #8]
}
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <LL_I2C_EnableOwnAddress1>:
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	609a      	str	r2, [r3, #8]
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_I2C_DisableOwnAddress1>:
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	609a      	str	r2, [r3, #8]
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <LL_I2C_SetTiming>:
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
 80029ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	611a      	str	r2, [r3, #16]
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <LL_I2C_SetMode>:
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	601a      	str	r2, [r3, #0]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_I2C_AcknowledgeNextData>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	605a      	str	r2, [r3, #4]
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff ff65 	bl	8002908 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	6899      	ldr	r1, [r3, #8]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	461a      	mov	r2, r3
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ff6d 	bl	8002928 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	4619      	mov	r1, r3
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ffb6 	bl	80029c6 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ff44 	bl	80028e8 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ffa0 	bl	80029a6 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6919      	ldr	r1, [r3, #16]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ff70 	bl	8002956 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff ff81 	bl	8002986 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ffa9 	bl	80029e2 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	4619      	mov	r1, r3
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff ffb6 	bl	8002a08 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <LL_TIM_SetPrescaler>:
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_TIM_SetAutoReload>:
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <LL_TIM_SetRepetitionCounter>:
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <LL_TIM_OC_SetCompareCH1>:
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <LL_TIM_OC_SetCompareCH2>:
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <LL_TIM_OC_SetCompareCH3>:
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <LL_TIM_OC_SetCompareCH4>:
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <LL_TIM_OC_SetCompareCH5>:
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_TIM_OC_SetCompareCH6>:
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f043 0201 	orr.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	615a      	str	r2, [r3, #20]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a2f      	ldr	r2, [pc, #188]	; (8002c98 <LL_TIM_Init+0xd0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d007      	beq.n	8002bf0 <LL_TIM_Init+0x28>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be6:	d003      	beq.n	8002bf0 <LL_TIM_Init+0x28>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a2c      	ldr	r2, [pc, #176]	; (8002c9c <LL_TIM_Init+0xd4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d106      	bne.n	8002bfe <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a25      	ldr	r2, [pc, #148]	; (8002c98 <LL_TIM_Init+0xd0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d013      	beq.n	8002c2e <LL_TIM_Init+0x66>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0c:	d00f      	beq.n	8002c2e <LL_TIM_Init+0x66>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a22      	ldr	r2, [pc, #136]	; (8002c9c <LL_TIM_Init+0xd4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00b      	beq.n	8002c2e <LL_TIM_Init+0x66>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a21      	ldr	r2, [pc, #132]	; (8002ca0 <LL_TIM_Init+0xd8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d007      	beq.n	8002c2e <LL_TIM_Init+0x66>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a20      	ldr	r2, [pc, #128]	; (8002ca4 <LL_TIM_Init+0xdc>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d003      	beq.n	8002c2e <LL_TIM_Init+0x66>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a1f      	ldr	r2, [pc, #124]	; (8002ca8 <LL_TIM_Init+0xe0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d106      	bne.n	8002c3c <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	4619      	mov	r1, r3
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff ff3a 	bl	8002ac2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	4619      	mov	r1, r3
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff26 	bl	8002aa6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a0e      	ldr	r2, [pc, #56]	; (8002c98 <LL_TIM_Init+0xd0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00b      	beq.n	8002c7a <LL_TIM_Init+0xb2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a0e      	ldr	r2, [pc, #56]	; (8002ca0 <LL_TIM_Init+0xd8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <LL_TIM_Init+0xb2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ca4 <LL_TIM_Init+0xdc>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d003      	beq.n	8002c7a <LL_TIM_Init+0xb2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a0c      	ldr	r2, [pc, #48]	; (8002ca8 <LL_TIM_Init+0xe0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d105      	bne.n	8002c86 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff2c 	bl	8002ade <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff ff8d 	bl	8002ba6 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	40000400 	.word	0x40000400
 8002ca0:	40014000 	.word	0x40014000
 8002ca4:	40014400 	.word	0x40014400
 8002ca8:	40014800 	.word	0x40014800

08002cac <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cc2:	d045      	beq.n	8002d50 <LL_TIM_OC_Init+0xa4>
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cca:	d848      	bhi.n	8002d5e <LL_TIM_OC_Init+0xb2>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd2:	d036      	beq.n	8002d42 <LL_TIM_OC_Init+0x96>
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cda:	d840      	bhi.n	8002d5e <LL_TIM_OC_Init+0xb2>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce2:	d027      	beq.n	8002d34 <LL_TIM_OC_Init+0x88>
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cea:	d838      	bhi.n	8002d5e <LL_TIM_OC_Init+0xb2>
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf2:	d018      	beq.n	8002d26 <LL_TIM_OC_Init+0x7a>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cfa:	d830      	bhi.n	8002d5e <LL_TIM_OC_Init+0xb2>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d003      	beq.n	8002d0a <LL_TIM_OC_Init+0x5e>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b10      	cmp	r3, #16
 8002d06:	d007      	beq.n	8002d18 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8002d08:	e029      	b.n	8002d5e <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f82d 	bl	8002d6c <OC1Config>
 8002d12:	4603      	mov	r3, r0
 8002d14:	75fb      	strb	r3, [r7, #23]
      break;
 8002d16:	e023      	b.n	8002d60 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f8a0 	bl	8002e60 <OC2Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	75fb      	strb	r3, [r7, #23]
      break;
 8002d24:	e01c      	b.n	8002d60 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 f917 	bl	8002f5c <OC3Config>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	75fb      	strb	r3, [r7, #23]
      break;
 8002d32:	e015      	b.n	8002d60 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f98e 	bl	8003058 <OC4Config>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d40:	e00e      	b.n	8002d60 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f9ed 	bl	8003124 <OC5Config>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d4e:	e007      	b.n	8002d60 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 fa44 	bl	80031e0 <OC6Config>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d5c:	e000      	b.n	8002d60 <LL_TIM_OC_Init+0xb4>
      break;
 8002d5e:	bf00      	nop
  }

  return result;
 8002d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	f023 0201 	bic.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 0303 	bic.w	r3, r3, #3
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f023 0202 	bic.w	r2, r3, #2
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f023 0201 	bic.w	r2, r3, #1
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a20      	ldr	r2, [pc, #128]	; (8002e50 <OC1Config+0xe4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00b      	beq.n	8002dea <OC1Config+0x7e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a1f      	ldr	r2, [pc, #124]	; (8002e54 <OC1Config+0xe8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d007      	beq.n	8002dea <OC1Config+0x7e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a1e      	ldr	r2, [pc, #120]	; (8002e58 <OC1Config+0xec>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d003      	beq.n	8002dea <OC1Config+0x7e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a1d      	ldr	r2, [pc, #116]	; (8002e5c <OC1Config+0xf0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d11e      	bne.n	8002e28 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f023 0208 	bic.w	r2, r3, #8
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f023 0204 	bic.w	r2, r3, #4
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4619      	mov	r1, r3
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff fe5d 	bl	8002afa <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40012c00 	.word	0x40012c00
 8002e54:	40014000 	.word	0x40014000
 8002e58:	40014400 	.word	0x40014400
 8002e5c:	40014800 	.word	0x40014800

08002e60 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	f023 0210 	bic.w	r2, r3, #16
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	0212      	lsls	r2, r2, #8
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f023 0220 	bic.w	r2, r3, #32
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f023 0210 	bic.w	r2, r3, #16
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a21      	ldr	r2, [pc, #132]	; (8002f4c <OC2Config+0xec>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00b      	beq.n	8002ee4 <OC2Config+0x84>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a20      	ldr	r2, [pc, #128]	; (8002f50 <OC2Config+0xf0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d007      	beq.n	8002ee4 <OC2Config+0x84>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a1f      	ldr	r2, [pc, #124]	; (8002f54 <OC2Config+0xf4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d003      	beq.n	8002ee4 <OC2Config+0x84>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a1e      	ldr	r2, [pc, #120]	; (8002f58 <OC2Config+0xf8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d11f      	bne.n	8002f24 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	019b      	lsls	r3, r3, #6
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	019b      	lsls	r3, r3, #6
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4619      	mov	r1, r3
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff fded 	bl	8002b16 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40012c00 	.word	0x40012c00
 8002f50:	40014000 	.word	0x40014000
 8002f54:	40014400 	.word	0x40014400
 8002f58:	40014800 	.word	0x40014800

08002f5c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0303 	bic.w	r3, r3, #3
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a21      	ldr	r2, [pc, #132]	; (8003048 <OC3Config+0xec>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00b      	beq.n	8002fde <OC3Config+0x82>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a20      	ldr	r2, [pc, #128]	; (800304c <OC3Config+0xf0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d007      	beq.n	8002fde <OC3Config+0x82>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a1f      	ldr	r2, [pc, #124]	; (8003050 <OC3Config+0xf4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d003      	beq.n	8002fde <OC3Config+0x82>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a1e      	ldr	r2, [pc, #120]	; (8003054 <OC3Config+0xf8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d11f      	bne.n	800301e <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	029b      	lsls	r3, r3, #10
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	029b      	lsls	r3, r3, #10
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	015b      	lsls	r3, r3, #5
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	4619      	mov	r1, r3
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff fd7e 	bl	8002b32 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40012c00 	.word	0x40012c00
 800304c:	40014000 	.word	0x40014000
 8003050:	40014400 	.word	0x40014400
 8003054:	40014800 	.word	0x40014800

08003058 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800308e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	0212      	lsls	r2, r2, #8
 8003098:	4313      	orrs	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	031b      	lsls	r3, r3, #12
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	031b      	lsls	r3, r3, #12
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a15      	ldr	r2, [pc, #84]	; (8003114 <OC4Config+0xbc>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00b      	beq.n	80030dc <OC4Config+0x84>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a14      	ldr	r2, [pc, #80]	; (8003118 <OC4Config+0xc0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d007      	beq.n	80030dc <OC4Config+0x84>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a13      	ldr	r2, [pc, #76]	; (800311c <OC4Config+0xc4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d003      	beq.n	80030dc <OC4Config+0x84>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a12      	ldr	r2, [pc, #72]	; (8003120 <OC4Config+0xc8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d107      	bne.n	80030ec <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	019b      	lsls	r3, r3, #6
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4619      	mov	r1, r3
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff fd25 	bl	8002b4e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40012c00 	.word	0x40012c00
 8003118:	40014000 	.word	0x40014000
 800311c:	40014400 	.word	0x40014400
 8003120:	40014800 	.word	0x40014800

08003124 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003144:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800314c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	4313      	orrs	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	041b      	lsls	r3, r3, #16
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	041b      	lsls	r3, r3, #16
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a15      	ldr	r2, [pc, #84]	; (80031d0 <OC5Config+0xac>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d00b      	beq.n	8003198 <OC5Config+0x74>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <OC5Config+0xb0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d007      	beq.n	8003198 <OC5Config+0x74>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a13      	ldr	r2, [pc, #76]	; (80031d8 <OC5Config+0xb4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d003      	beq.n	8003198 <OC5Config+0x74>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a12      	ldr	r2, [pc, #72]	; (80031dc <OC5Config+0xb8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d109      	bne.n	80031ac <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	4619      	mov	r1, r3
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff fcd6 	bl	8002b6a <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40012c00 	.word	0x40012c00
 80031d4:	40014000 	.word	0x40014000
 80031d8:	40014400 	.word	0x40014400
 80031dc:	40014800 	.word	0x40014800

080031e0 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003200:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	0212      	lsls	r2, r2, #8
 8003212:	4313      	orrs	r3, r2
 8003214:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	051b      	lsls	r3, r3, #20
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	051b      	lsls	r3, r3, #20
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a14      	ldr	r2, [pc, #80]	; (800328c <OC6Config+0xac>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00b      	beq.n	8003256 <OC6Config+0x76>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a13      	ldr	r2, [pc, #76]	; (8003290 <OC6Config+0xb0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d007      	beq.n	8003256 <OC6Config+0x76>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a12      	ldr	r2, [pc, #72]	; (8003294 <OC6Config+0xb4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d003      	beq.n	8003256 <OC6Config+0x76>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a11      	ldr	r2, [pc, #68]	; (8003298 <OC6Config+0xb8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d109      	bne.n	800326a <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	029b      	lsls	r3, r3, #10
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4619      	mov	r1, r3
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff fc87 	bl	8002b8a <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40012c00 	.word	0x40012c00
 8003290:	40014000 	.word	0x40014000
 8003294:	40014400 	.word	0x40014400
 8003298:	40014800 	.word	0x40014800

0800329c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	4a07      	ldr	r2, [pc, #28]	; (80032cc <LL_InitTick+0x30>)
 80032b0:	3b01      	subs	r3, #1
 80032b2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <LL_InitTick+0x30>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ba:	4b04      	ldr	r3, [pc, #16]	; (80032cc <LL_InitTick+0x30>)
 80032bc:	2205      	movs	r2, #5
 80032be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	e000e010 	.word	0xe000e010

080032d0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80032d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ffdd 	bl	800329c <LL_InitTick>
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80032f4:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <LL_mDelay+0x48>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80032fa:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d00c      	beq.n	800331e <LL_mDelay+0x32>
  {
    Delay++;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3301      	adds	r3, #1
 8003308:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800330a:	e008      	b.n	800331e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800330c:	4b09      	ldr	r3, [pc, #36]	; (8003334 <LL_mDelay+0x48>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <LL_mDelay+0x32>
    {
      Delay--;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3b01      	subs	r3, #1
 800331c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f3      	bne.n	800330c <LL_mDelay+0x20>
    }
  }
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	e000e010 	.word	0xe000e010

08003338 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003340:	4a04      	ldr	r2, [pc, #16]	; (8003354 <LL_SetSystemCoreClock+0x1c>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6013      	str	r3, [r2, #0]
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	20000004 	.word	0x20000004

08003358 <__libc_init_array>:
 8003358:	b570      	push	{r4, r5, r6, lr}
 800335a:	4d0d      	ldr	r5, [pc, #52]	; (8003390 <__libc_init_array+0x38>)
 800335c:	4c0d      	ldr	r4, [pc, #52]	; (8003394 <__libc_init_array+0x3c>)
 800335e:	1b64      	subs	r4, r4, r5
 8003360:	10a4      	asrs	r4, r4, #2
 8003362:	2600      	movs	r6, #0
 8003364:	42a6      	cmp	r6, r4
 8003366:	d109      	bne.n	800337c <__libc_init_array+0x24>
 8003368:	4d0b      	ldr	r5, [pc, #44]	; (8003398 <__libc_init_array+0x40>)
 800336a:	4c0c      	ldr	r4, [pc, #48]	; (800339c <__libc_init_array+0x44>)
 800336c:	f000 f820 	bl	80033b0 <_init>
 8003370:	1b64      	subs	r4, r4, r5
 8003372:	10a4      	asrs	r4, r4, #2
 8003374:	2600      	movs	r6, #0
 8003376:	42a6      	cmp	r6, r4
 8003378:	d105      	bne.n	8003386 <__libc_init_array+0x2e>
 800337a:	bd70      	pop	{r4, r5, r6, pc}
 800337c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003380:	4798      	blx	r3
 8003382:	3601      	adds	r6, #1
 8003384:	e7ee      	b.n	8003364 <__libc_init_array+0xc>
 8003386:	f855 3b04 	ldr.w	r3, [r5], #4
 800338a:	4798      	blx	r3
 800338c:	3601      	adds	r6, #1
 800338e:	e7f2      	b.n	8003376 <__libc_init_array+0x1e>
 8003390:	080033f4 	.word	0x080033f4
 8003394:	080033f4 	.word	0x080033f4
 8003398:	080033f4 	.word	0x080033f4
 800339c:	080033f8 	.word	0x080033f8

080033a0 <memset>:
 80033a0:	4402      	add	r2, r0
 80033a2:	4603      	mov	r3, r0
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d100      	bne.n	80033aa <memset+0xa>
 80033a8:	4770      	bx	lr
 80033aa:	f803 1b01 	strb.w	r1, [r3], #1
 80033ae:	e7f9      	b.n	80033a4 <memset+0x4>

080033b0 <_init>:
 80033b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b2:	bf00      	nop
 80033b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b6:	bc08      	pop	{r3}
 80033b8:	469e      	mov	lr, r3
 80033ba:	4770      	bx	lr

080033bc <_fini>:
 80033bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033be:	bf00      	nop
 80033c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033c2:	bc08      	pop	{r3}
 80033c4:	469e      	mov	lr, r3
 80033c6:	4770      	bx	lr
