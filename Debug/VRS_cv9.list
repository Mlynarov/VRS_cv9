
VRS_cv9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008100  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  08008290  08008290  00018290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085dc  080085dc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080085dc  080085dc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085dc  080085dc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085dc  080085dc  000185dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085e0  080085e0  000185e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080085e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0000007c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b321  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002491  00000000  00000000  0002b3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae8  00000000  00000000  0002d860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009c0  00000000  00000000  0002e348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001881c  00000000  00000000  0002ed08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000091e0  00000000  00000000  00047524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007c1c0  00000000  00000000  00050704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000cc8c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e10  00000000  00000000  000cc918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008278 	.word	0x08008278

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008278 	.word	0x08008278

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <altPress_read_byte>:
#include <math.h>

uint8_t LPS_addres = LPS_DEVICE_ADDRESS	;

uint8_t altPress_read_byte(uint8_t reg_addr)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, LPS_addres, 0));
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <altPress_read_byte+0x30>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	79fa      	ldrb	r2, [r7, #7]
 8000c30:	f107 000f 	add.w	r0, r7, #15
 8000c34:	2100      	movs	r1, #0
 8000c36:	9100      	str	r1, [sp, #0]
 8000c38:	2101      	movs	r1, #1
 8000c3a:	f002 f80b 	bl	8002c54 <i2c_master_read>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	781b      	ldrb	r3, [r3, #0]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000000 	.word	0x20000000

08000c50 <altPress_write_byte>:
{
	i2c_master_read(data, length, reg, LPS_addres, 1);
}

void altPress_write_byte(uint8_t reg_addr, uint8_t value)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	460a      	mov	r2, r1
 8000c5a:	71fb      	strb	r3, [r7, #7]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, LPS_addres, 0);
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <altPress_write_byte+0x28>)
 8000c62:	781a      	ldrb	r2, [r3, #0]
 8000c64:	79f9      	ldrb	r1, [r7, #7]
 8000c66:	79b8      	ldrb	r0, [r7, #6]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f001 ffaf 	bl	8002bcc <i2c_master_write>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000000 	.word	0x20000000

08000c7c <pressure_init>:

uint8_t pressure_init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8000c82:	2301      	movs	r3, #1
 8000c84:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8000c86:	2064      	movs	r0, #100	; 0x64
 8000c88:	f004 f876 	bl	8004d78 <LL_mDelay>

	uint8_t val = altPress_read_byte(LPS_WHO_AM_I);
 8000c8c:	200f      	movs	r0, #15
 8000c8e:	f7ff ffc5 	bl	8000c1c <altPress_read_byte>
 8000c92:	4603      	mov	r3, r0
 8000c94:	71bb      	strb	r3, [r7, #6]

	if(val == LPS_WHO_AM_I_DEFAULT)
 8000c96:	79bb      	ldrb	r3, [r7, #6]
 8000c98:	2bbd      	cmp	r3, #189	; 0xbd
 8000c9a:	d102      	bne.n	8000ca2 <pressure_init+0x26>
	{
		status = 1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	71fb      	strb	r3, [r7, #7]
 8000ca0:	e001      	b.n	8000ca6 <pressure_init+0x2a>
	}
	else			//if the device is not found on one address, try another one
	{
			status = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	71fb      	strb	r3, [r7, #7]
			//return status;
	}

	//acc device init

	altPress_write_byte(LPS_CTRL_REG1, LPS_CTRL_REG1_SETUP);
 8000ca6:	2190      	movs	r1, #144	; 0x90
 8000ca8:	2020      	movs	r0, #32
 8000caa:	f7ff ffd1 	bl	8000c50 <altPress_write_byte>

	return status;
 8000cae:	79fb      	ldrb	r3, [r7, #7]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <get_pressure>:

float get_pressure()
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 uint8_t pressure_low,pressure_mid,pressure_high;
 float pressure,tmp=0;
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]

 pressure_low = altPress_read_byte(LPS_PRESS_OUT_XL);
 8000cc4:	2028      	movs	r0, #40	; 0x28
 8000cc6:	f7ff ffa9 	bl	8000c1c <altPress_read_byte>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	72fb      	strb	r3, [r7, #11]
 pressure_mid = altPress_read_byte(LPS_PRESS_OUT_L);
 8000cce:	2029      	movs	r0, #41	; 0x29
 8000cd0:	f7ff ffa4 	bl	8000c1c <altPress_read_byte>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	72bb      	strb	r3, [r7, #10]
 pressure_high = altPress_read_byte(LPS_PRESS_OUT_H);
 8000cd8:	202a      	movs	r0, #42	; 0x2a
 8000cda:	f7ff ff9f 	bl	8000c1c <altPress_read_byte>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	727b      	strb	r3, [r7, #9]

 //vypocitanie tlaku strana 15 v datasheete uvedenom v altitudePressure.h
 tmp=pressure_high << 16|pressure_mid<<8|pressure_low;
 8000ce2:	7a7b      	ldrb	r3, [r7, #9]
 8000ce4:	041a      	lsls	r2, r3, #16
 8000ce6:	7abb      	ldrb	r3, [r7, #10]
 8000ce8:	021b      	lsls	r3, r3, #8
 8000cea:	431a      	orrs	r2, r3
 8000cec:	7afb      	ldrb	r3, [r7, #11]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	ee07 3a90 	vmov	s15, r3
 8000cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf8:	edc7 7a03 	vstr	s15, [r7, #12]
 pressure=tmp/4096;
 8000cfc:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d00:	eddf 6a06 	vldr	s13, [pc, #24]	; 8000d1c <get_pressure+0x64>
 8000d04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d08:	edc7 7a01 	vstr	s15, [r7, #4]

 return pressure;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	ee07 3a90 	vmov	s15, r3
}
 8000d12:	eeb0 0a67 	vmov.f32	s0, s15
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	45800000 	.word	0x45800000

08000d20 <humidity_read_byte>:
#include "hts.h"

humiditiS_addres=HTS_ADDRESS;

uint8_t humidity_read_byte(uint8_t reg_addr)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af02      	add	r7, sp, #8
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, humiditiS_addres, 0));
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <humidity_read_byte+0x30>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	79fa      	ldrb	r2, [r7, #7]
 8000d36:	f107 000f 	add.w	r0, r7, #15
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	9100      	str	r1, [sp, #0]
 8000d3e:	2101      	movs	r1, #1
 8000d40:	f001 ff88 	bl	8002c54 <i2c_master_read>
 8000d44:	4603      	mov	r3, r0
 8000d46:	781b      	ldrb	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000004 	.word	0x20000004

08000d54 <humidity_readArray>:


void humidity_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]
 8000d60:	4613      	mov	r3, r2
 8000d62:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, humiditiS_addres, 1);
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <humidity_readArray+0x2c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	78fa      	ldrb	r2, [r7, #3]
 8000d6c:	78b9      	ldrb	r1, [r7, #2]
 8000d6e:	2001      	movs	r0, #1
 8000d70:	9000      	str	r0, [sp, #0]
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f001 ff6e 	bl	8002c54 <i2c_master_read>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000004 	.word	0x20000004

08000d84 <humidity_write_byte>:

void humidity_write_byte(uint8_t reg_addr, uint8_t value)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	460a      	mov	r2, r1
 8000d8e:	71fb      	strb	r3, [r7, #7]
 8000d90:	4613      	mov	r3, r2
 8000d92:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, humiditiS_addres, 0);
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <humidity_write_byte+0x28>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	79f9      	ldrb	r1, [r7, #7]
 8000d9c:	79b8      	ldrb	r0, [r7, #6]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f001 ff14 	bl	8002bcc <i2c_master_write>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000004 	.word	0x20000004

08000db0 <humidity_init>:


uint8_t humidity_init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8000db6:	2301      	movs	r3, #1
 8000db8:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8000dba:	2064      	movs	r0, #100	; 0x64
 8000dbc:	f003 ffdc 	bl	8004d78 <LL_mDelay>

	uint8_t val = humidity_read_byte(HTS_WHO_AM_I	);
 8000dc0:	200f      	movs	r0, #15
 8000dc2:	f7ff ffad 	bl	8000d20 <humidity_read_byte>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71bb      	strb	r3, [r7, #6]

	if(val == HTS_WHO_AM_I_DEFAULT)
 8000dca:	79bb      	ldrb	r3, [r7, #6]
 8000dcc:	2bbc      	cmp	r3, #188	; 0xbc
 8000dce:	d102      	bne.n	8000dd6 <humidity_init+0x26>
	{
		status = 1;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	71fb      	strb	r3, [r7, #7]
 8000dd4:	e001      	b.n	8000dda <humidity_init+0x2a>
	}
	else			//if the device is not found on one address, try another one
	{
			status = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	71fb      	strb	r3, [r7, #7]
			//return status;
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	717b      	strb	r3, [r7, #5]
	humidity_write_byte(HTS_CTRL_REG1, ctrl1);
 8000dde:	797b      	ldrb	r3, [r7, #5]
 8000de0:	4619      	mov	r1, r3
 8000de2:	2020      	movs	r0, #32
 8000de4:	f7ff ffce 	bl	8000d84 <humidity_write_byte>

	return status;
 8000de8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HTS221_Get_Humidity>:

int16_t HTS221_Get_Humidity()
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
	uint8_t buffer[2];
	int32_t tmp;

/* 1. Read H0_rH and H1_rH coefficients*/

	humidity_readArray(buffer,HTS_H0_RH_X2,2);
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	2130      	movs	r1, #48	; 0x30
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ffa8 	bl	8000d54 <humidity_readArray>
	H0_rh = buffer[0]>>1;
 8000e04:	793b      	ldrb	r3, [r7, #4]
 8000e06:	085b      	lsrs	r3, r3, #1
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	82bb      	strh	r3, [r7, #20]
	H1_rh = buffer[1]>>1;
 8000e0c:	797b      	ldrb	r3, [r7, #5]
 8000e0e:	085b      	lsrs	r3, r3, #1
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	827b      	strh	r3, [r7, #18]
/*2. Read H0_T0_OUT */

	humidity_readArray(buffer,HTS_H0_T0_OUT_L,2);
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2202      	movs	r2, #2
 8000e18:	2136      	movs	r1, #54	; 0x36
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ff9a 	bl	8000d54 <humidity_readArray>
	H0_T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8000e20:	797b      	ldrb	r3, [r7, #5]
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	b21a      	sxth	r2, r3
 8000e26:	793b      	ldrb	r3, [r7, #4]
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	823b      	strh	r3, [r7, #16]

/*3. Read H1_T0_OUT */
	humidity_readArray(buffer,HTS_H1_T0_OUT_L,2);
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2202      	movs	r2, #2
 8000e32:	213a      	movs	r1, #58	; 0x3a
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff8d 	bl	8000d54 <humidity_readArray>
	H1_T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8000e3a:	797b      	ldrb	r3, [r7, #5]
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	b21a      	sxth	r2, r3
 8000e40:	793b      	ldrb	r3, [r7, #4]
 8000e42:	b21b      	sxth	r3, r3
 8000e44:	4313      	orrs	r3, r2
 8000e46:	81fb      	strh	r3, [r7, #14]

/*4. Read H_T_OUT */

	humidity_readArray(buffer,HTS_H_OUT,2);
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	2128      	movs	r1, #40	; 0x28
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff80 	bl	8000d54 <humidity_readArray>
	H_T_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8000e54:	797b      	ldrb	r3, [r7, #5]
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	793b      	ldrb	r3, [r7, #4]
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	81bb      	strh	r3, [r7, #12]

/*5. Compute the RH [%] value by linear interpolation */

	tmp = ((int32_t)(H_T_out - H0_T0_out)) * ((int32_t)(H1_rh - H0_rh)*10);
 8000e62:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000e66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000e70:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000e74:	1a8a      	subs	r2, r1, r2
 8000e76:	fb02 f203 	mul.w	r2, r2, r3
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
	value = (tmp/(H1_T0_out - H0_T0_out) + H0_rh*10);//delenie bacha nan :D
 8000e84:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000e88:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	8abb      	ldrh	r3, [r7, #20]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	0089      	lsls	r1, r1, #2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	82fb      	strh	r3, [r7, #22]


/* Saturation condition*/
	if(value>1000) {
 8000ea8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000eac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000eb0:	dd02      	ble.n	8000eb8 <HTS221_Get_Humidity+0xc6>
		value = 1000;
 8000eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb6:	82fb      	strh	r3, [r7, #22]
	}

	return value;
 8000eb8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <temperature_read_byte>:
#include "hts.h"

uint8_t hts221_addres = HTS_ADDRESS;

uint8_t temperature_read_byte(uint8_t reg_addr)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af02      	add	r7, sp, #8
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, hts221_addres, 0));
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <temperature_read_byte+0x30>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	79fa      	ldrb	r2, [r7, #7]
 8000ed8:	f107 000f 	add.w	r0, r7, #15
 8000edc:	2100      	movs	r1, #0
 8000ede:	9100      	str	r1, [sp, #0]
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	f001 feb7 	bl	8002c54 <i2c_master_read>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	781b      	ldrb	r3, [r3, #0]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008

08000ef8 <temperature_readArray>:


void temperature_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
 8000f04:	4613      	mov	r3, r2
 8000f06:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, hts221_addres, 1);
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <temperature_readArray+0x2c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	78fa      	ldrb	r2, [r7, #3]
 8000f0e:	78b9      	ldrb	r1, [r7, #2]
 8000f10:	2001      	movs	r0, #1
 8000f12:	9000      	str	r0, [sp, #0]
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f001 fe9d 	bl	8002c54 <i2c_master_read>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008

08000f28 <temperature_write_byte>:

void temperature_write_byte(uint8_t reg_addr, uint8_t value)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	460a      	mov	r2, r1
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	4613      	mov	r3, r2
 8000f36:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, hts221_addres, 0);
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <temperature_write_byte+0x28>)
 8000f3a:	781a      	ldrb	r2, [r3, #0]
 8000f3c:	79f9      	ldrb	r1, [r7, #7]
 8000f3e:	79b8      	ldrb	r0, [r7, #6]
 8000f40:	2300      	movs	r3, #0
 8000f42:	f001 fe43 	bl	8002bcc <i2c_master_write>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008

08000f54 <temperature_init>:

uint8_t temperature_init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8000f5e:	2064      	movs	r0, #100	; 0x64
 8000f60:	f003 ff0a 	bl	8004d78 <LL_mDelay>

	uint8_t val = temperature_read_byte(HTS_WHO_AM_I	);
 8000f64:	200f      	movs	r0, #15
 8000f66:	f7ff ffad 	bl	8000ec4 <temperature_read_byte>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71bb      	strb	r3, [r7, #6]

	if(val == HTS_WHO_AM_I_DEFAULT)
 8000f6e:	79bb      	ldrb	r3, [r7, #6]
 8000f70:	2bbc      	cmp	r3, #188	; 0xbc
 8000f72:	d102      	bne.n	8000f7a <temperature_init+0x26>
	{
		status = 1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	e001      	b.n	8000f7e <temperature_init+0x2a>
	}
	else			//if the device is not found on one address, try another one
	{
			status = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	71fb      	strb	r3, [r7, #7]
			//return status;
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	717b      	strb	r3, [r7, #5]
	temperature_write_byte(HTS_CTRL_REG1, ctrl1);
 8000f82:	797b      	ldrb	r3, [r7, #5]
 8000f84:	4619      	mov	r1, r3
 8000f86:	2020      	movs	r0, #32
 8000f88:	f7ff ffce 	bl	8000f28 <temperature_write_byte>

	return status;
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HTS221_Get_Temperature>:

int16_t HTS221_Get_Temperature()
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b088      	sub	sp, #32
 8000f9a:	af00      	add	r7, sp, #0
 int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
 int16_t T0_degC, T1_degC, value;
 uint8_t buffer[4], tmp,sign;
 int32_t tmp32;

 sign=0b10000000;
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	777b      	strb	r3, [r7, #29]

/*1. Read from 0x32 & 0x33 registers the value of coefficients T0_degC_x8 and T1_degC_x8*/
 temperature_readArray(buffer,HTS_TO_DEGC_REG,2);
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	2132      	movs	r1, #50	; 0x32
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ffa6 	bl	8000ef8 <temperature_readArray>

/*2. Read from 0x35 register the value of the MSB bits of T1_degC and T0_degC */
 tmp=temperature_read_byte(HTS_MSB_T1_T0);
 8000fac:	2035      	movs	r0, #53	; 0x35
 8000fae:	f7ff ff89 	bl	8000ec4 <temperature_read_byte>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	773b      	strb	r3, [r7, #28]


/*Calculate the T0_degC and T1_degC values*/
 T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8000fb6:	7f3b      	ldrb	r3, [r7, #28]
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	793b      	ldrb	r3, [r7, #4]
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	837b      	strh	r3, [r7, #26]
 T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000fca:	7f3b      	ldrb	r3, [r7, #28]
 8000fcc:	019b      	lsls	r3, r3, #6
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	797b      	ldrb	r3, [r7, #5]
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	833b      	strh	r3, [r7, #24]
 T0_degC = T0_degC_x8_u16>>3;
 8000fde:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fe2:	10db      	asrs	r3, r3, #3
 8000fe4:	82fb      	strh	r3, [r7, #22]
 T1_degC = T1_degC_x8_u16>>3;
 8000fe6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000fea:	10db      	asrs	r3, r3, #3
 8000fec:	82bb      	strh	r3, [r7, #20]

/*3. Read from 0x3C & 0x3D registers the value of T0_OUT*/
 temperature_readArray(buffer,HTS_T0_OUT,4 );
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	213c      	movs	r1, #60	; 0x3c
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff7f 	bl	8000ef8 <temperature_readArray>
 T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8000ffa:	797b      	ldrb	r3, [r7, #5]
 8000ffc:	021b      	lsls	r3, r3, #8
 8000ffe:	b21a      	sxth	r2, r3
 8001000:	793b      	ldrb	r3, [r7, #4]
 8001002:	b21b      	sxth	r3, r3
 8001004:	4313      	orrs	r3, r2
 8001006:	827b      	strh	r3, [r7, #18]

 /*4. Read from 0x3E & 0x3F registers the value of T1_OUT*/
 T1_out = (((uint16_t)buffer[3])<<8) | (uint16_t)buffer[2];
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	823b      	strh	r3, [r7, #16]

/* 5.Read from 0x2A & 0x2B registers the value T_OUT (ADC_OUT).*/
 temperature_readArray(buffer,HTS_T_OUT_Low,2 );
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2202      	movs	r2, #2
 800101a:	212a      	movs	r1, #42	; 0x2a
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff6b 	bl	8000ef8 <temperature_readArray>
 T_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8001022:	797b      	ldrb	r3, [r7, #5]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b21a      	sxth	r2, r3
 8001028:	793b      	ldrb	r3, [r7, #4]
 800102a:	b21b      	sxth	r3, r3
 800102c:	4313      	orrs	r3, r2
 800102e:	81fb      	strh	r3, [r7, #14]


/* 6. Compute the Temperature value by linear interpolation*/
 tmp32 = ((int32_t)(T_out - T0_out)) * ((int32_t)(T1_degC - T0_degC)*10);
 8001030:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001034:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800103e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001042:	1a8a      	subs	r2, r1, r2
 8001044:	fb02 f203 	mul.w	r2, r2, r3
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	60bb      	str	r3, [r7, #8]
 value = tmp32 /(T1_out - T0_out) + T0_degC*10;
 8001052:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001056:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001062:	b29a      	uxth	r2, r3
 8001064:	8afb      	ldrh	r3, [r7, #22]
 8001066:	4619      	mov	r1, r3
 8001068:	0089      	lsls	r1, r1, #2
 800106a:	440b      	add	r3, r1
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	b29b      	uxth	r3, r3
 8001070:	4413      	add	r3, r2
 8001072:	b29b      	uxth	r3, r3
 8001074:	83fb      	strh	r3, [r7, #30]

// temperature_write_byte(HTS221_CTRL_REG1,value);//neni som si isty reg_addresou

 //podmienka pre zistenie ci je teplota kladna alebo zaporna
 if(HTS_T_OUT_High==sign){
 8001076:	7f7b      	ldrb	r3, [r7, #29]
 8001078:	2b2b      	cmp	r3, #43	; 0x2b
 800107a:	d103      	bne.n	8001084 <HTS221_Get_Temperature+0xee>
	 value = value*(-1);
 800107c:	8bfb      	ldrh	r3, [r7, #30]
 800107e:	425b      	negs	r3, r3
 8001080:	b29b      	uxth	r3, r3
 8001082:	83fb      	strh	r3, [r7, #30]
 }


 return value;
 8001084:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	619a      	str	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <setDisplayText>:
uint8_t direction = 0;
uint16_t counter = 0;
uint8_t shorter = 0;
char displayString[15];

void setDisplayText(char text[15]){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	strncpy(displayString, &text[0],15);
 80010d0:	220f      	movs	r2, #15
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <setDisplayText+0x20>)
 80010d6:	f003 ff1d 	bl	8004f14 <strncpy>
	shorter = 0;
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <setDisplayText+0x24>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200000a8 	.word	0x200000a8
 80010ec:	20000098 	.word	0x20000098

080010f0 <updateDisplay>:

void updateDisplay(){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
	uint8_t shift = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	71fb      	strb	r3, [r7, #7]
	for(int i = 1; i<5; i++){
 80010fa:	2301      	movs	r3, #1
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	e062      	b.n	80011c6 <updateDisplay+0xd6>
		switch(updateDigit){
 8001100:	4b3c      	ldr	r3, [pc, #240]	; (80011f4 <updateDisplay+0x104>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	3b01      	subs	r3, #1
 8001106:	2b03      	cmp	r3, #3
 8001108:	d82a      	bhi.n	8001160 <updateDisplay+0x70>
 800110a:	a201      	add	r2, pc, #4	; (adr r2, 8001110 <updateDisplay+0x20>)
 800110c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001110:	08001121 	.word	0x08001121
 8001114:	0800112f 	.word	0x0800112f
 8001118:	0800113f 	.word	0x0800113f
 800111c:	08001151 	.word	0x08001151
			case 1:
				DIGIT_1_ON;
 8001120:	2101      	movs	r1, #1
 8001122:	4835      	ldr	r0, [pc, #212]	; (80011f8 <updateDisplay+0x108>)
 8001124:	f7ff ffb4 	bl	8001090 <LL_GPIO_SetOutputPin>
				resetAllSegments();
 8001128:	f000 fa14 	bl	8001554 <resetAllSegments>

				break;
 800112c:	e018      	b.n	8001160 <updateDisplay+0x70>
			case 2:
				DIGIT_2_ON;
 800112e:	2110      	movs	r1, #16
 8001130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001134:	f7ff ffac 	bl	8001090 <LL_GPIO_SetOutputPin>
				resetAllSegments();
 8001138:	f000 fa0c 	bl	8001554 <resetAllSegments>
				break;
 800113c:	e010      	b.n	8001160 <updateDisplay+0x70>
			case 3:
				DIGIT_3_ON;
 800113e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001146:	f7ff ffa3 	bl	8001090 <LL_GPIO_SetOutputPin>
				resetAllSegments();
 800114a:	f000 fa03 	bl	8001554 <resetAllSegments>
				break;
 800114e:	e007      	b.n	8001160 <updateDisplay+0x70>
			case 4:
				DIGIT_4_ON;
 8001150:	2104      	movs	r1, #4
 8001152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001156:	f7ff ff9b 	bl	8001090 <LL_GPIO_SetOutputPin>
				resetAllSegments();
 800115a:	f000 f9fb 	bl	8001554 <resetAllSegments>
				break;
 800115e:	bf00      	nop
		}
		displayLetter(displayString[displayTextPos+updateDigit-1+shift]);
 8001160:	4b26      	ldr	r3, [pc, #152]	; (80011fc <updateDisplay+0x10c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <updateDisplay+0x104>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	1e5a      	subs	r2, r3, #1
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	4413      	add	r3, r2
 8001172:	4a23      	ldr	r2, [pc, #140]	; (8001200 <updateDisplay+0x110>)
 8001174:	5cd3      	ldrb	r3, [r2, r3]
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f89e 	bl	80012b8 <displayLetter>
		if(displayString[displayTextPos+updateDigit] == '.'){
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <updateDisplay+0x10c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <updateDisplay+0x104>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a1d      	ldr	r2, [pc, #116]	; (8001200 <updateDisplay+0x110>)
 800118a:	5cd3      	ldrb	r3, [r2, r3]
 800118c:	2b2e      	cmp	r3, #46	; 0x2e
 800118e:	d106      	bne.n	800119e <updateDisplay+0xae>
			shift = 1;
 8001190:	2301      	movs	r3, #1
 8001192:	71fb      	strb	r3, [r7, #7]
			shorter = 1;
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <updateDisplay+0x114>)
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
			setDot();
 800119a:	f001 f90d 	bl	80023b8 <setDot>
		}
		updateDigit = (updateDigit < 4) ? updateDigit+1 : 1;
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <updateDisplay+0x104>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d804      	bhi.n	80011b0 <updateDisplay+0xc0>
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <updateDisplay+0x104>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	3301      	adds	r3, #1
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	e000      	b.n	80011b2 <updateDisplay+0xc2>
 80011b0:	2301      	movs	r3, #1
 80011b2:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <updateDisplay+0x104>)
 80011b4:	7013      	strb	r3, [r2, #0]
		LL_mDelay(2);
 80011b6:	2002      	movs	r0, #2
 80011b8:	f003 fdde 	bl	8004d78 <LL_mDelay>
		resetAllDigits();
 80011bc:	f000 f9f8 	bl	80015b0 <resetAllDigits>
	for(int i = 1; i<5; i++){
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	2b04      	cmp	r3, #4
 80011ca:	dd99      	ble.n	8001100 <updateDisplay+0x10>
	}
	counter +=1;
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <updateDisplay+0x118>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <updateDisplay+0x118>)
 80011d6:	801a      	strh	r2, [r3, #0]
	if(counter >= 50){
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <updateDisplay+0x118>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	2b31      	cmp	r3, #49	; 0x31
 80011de:	d904      	bls.n	80011ea <updateDisplay+0xfa>
		shiftDisplayText();
 80011e0:	f000 f814 	bl	800120c <shiftDisplayText>
		counter = 0;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <updateDisplay+0x118>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	801a      	strh	r2, [r3, #0]
	}

}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000009 	.word	0x20000009
 80011f8:	48000400 	.word	0x48000400
 80011fc:	20000094 	.word	0x20000094
 8001200:	200000a8 	.word	0x200000a8
 8001204:	20000098 	.word	0x20000098
 8001208:	20000096 	.word	0x20000096

0800120c <shiftDisplayText>:

void shiftDisplayText(){
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	if(displayString[0] != '\0'){
 8001210:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <shiftDisplayText+0x9c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d041      	beq.n	800129c <shiftDisplayText+0x90>
		if(direction == 0 && displayString[displayTextPos+4+shorter] != '\0'){
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <shiftDisplayText+0xa0>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d110      	bne.n	8001242 <shiftDisplayText+0x36>
 8001220:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <shiftDisplayText+0xa4>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	3304      	adds	r3, #4
 8001226:	4a23      	ldr	r2, [pc, #140]	; (80012b4 <shiftDisplayText+0xa8>)
 8001228:	7812      	ldrb	r2, [r2, #0]
 800122a:	4413      	add	r3, r2
 800122c:	4a1e      	ldr	r2, [pc, #120]	; (80012a8 <shiftDisplayText+0x9c>)
 800122e:	5cd3      	ldrb	r3, [r2, r3]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d006      	beq.n	8001242 <shiftDisplayText+0x36>
			displayTextPos = displayTextPos+1;
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <shiftDisplayText+0xa4>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	3301      	adds	r3, #1
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <shiftDisplayText+0xa4>)
 800123e:	701a      	strb	r2, [r3, #0]
 8001240:	e02c      	b.n	800129c <shiftDisplayText+0x90>
		}
		else if(direction == 0 && displayString[displayTextPos+4+shorter] == '\0'){
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <shiftDisplayText+0xa0>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10d      	bne.n	8001266 <shiftDisplayText+0x5a>
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <shiftDisplayText+0xa4>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	3304      	adds	r3, #4
 8001250:	4a18      	ldr	r2, [pc, #96]	; (80012b4 <shiftDisplayText+0xa8>)
 8001252:	7812      	ldrb	r2, [r2, #0]
 8001254:	4413      	add	r3, r2
 8001256:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <shiftDisplayText+0x9c>)
 8001258:	5cd3      	ldrb	r3, [r2, r3]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d103      	bne.n	8001266 <shiftDisplayText+0x5a>
			direction = 1;
 800125e:	4b13      	ldr	r3, [pc, #76]	; (80012ac <shiftDisplayText+0xa0>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	e01a      	b.n	800129c <shiftDisplayText+0x90>
		}
		else if(displayTextPos <= 0 && direction == 1){
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <shiftDisplayText+0xa4>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d107      	bne.n	800127e <shiftDisplayText+0x72>
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <shiftDisplayText+0xa0>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d103      	bne.n	800127e <shiftDisplayText+0x72>
			direction = 0;
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <shiftDisplayText+0xa0>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
 800127c:	e00e      	b.n	800129c <shiftDisplayText+0x90>
		}
		else if(displayTextPos > 0 && direction == 1){
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <shiftDisplayText+0xa4>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00a      	beq.n	800129c <shiftDisplayText+0x90>
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <shiftDisplayText+0xa0>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d106      	bne.n	800129c <shiftDisplayText+0x90>
			displayTextPos = displayTextPos-1;
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <shiftDisplayText+0xa4>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	3b01      	subs	r3, #1
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <shiftDisplayText+0xa4>)
 8001298:	701a      	strb	r2, [r3, #0]
		}
	}

}
 800129a:	e7ff      	b.n	800129c <shiftDisplayText+0x90>
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	200000a8 	.word	0x200000a8
 80012ac:	20000095 	.word	0x20000095
 80012b0:	20000094 	.word	0x20000094
 80012b4:	20000098 	.word	0x20000098

080012b8 <displayLetter>:

void displayLetter(char letter){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
	switch(letter){
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	3b20      	subs	r3, #32
 80012c6:	2b59      	cmp	r3, #89	; 0x59
 80012c8:	f200 813c 	bhi.w	8001544 <displayLetter+0x28c>
 80012cc:	a201      	add	r2, pc, #4	; (adr r2, 80012d4 <displayLetter+0x1c>)
 80012ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d2:	bf00      	nop
 80012d4:	080014f7 	.word	0x080014f7
 80012d8:	08001545 	.word	0x08001545
 80012dc:	08001545 	.word	0x08001545
 80012e0:	08001545 	.word	0x08001545
 80012e4:	08001545 	.word	0x08001545
 80012e8:	08001545 	.word	0x08001545
 80012ec:	08001545 	.word	0x08001545
 80012f0:	08001545 	.word	0x08001545
 80012f4:	08001545 	.word	0x08001545
 80012f8:	08001545 	.word	0x08001545
 80012fc:	08001545 	.word	0x08001545
 8001300:	08001545 	.word	0x08001545
 8001304:	08001545 	.word	0x08001545
 8001308:	08001503 	.word	0x08001503
 800130c:	08001545 	.word	0x08001545
 8001310:	08001545 	.word	0x08001545
 8001314:	0800153f 	.word	0x0800153f
 8001318:	08001509 	.word	0x08001509
 800131c:	0800150f 	.word	0x0800150f
 8001320:	08001515 	.word	0x08001515
 8001324:	0800151b 	.word	0x0800151b
 8001328:	08001521 	.word	0x08001521
 800132c:	08001527 	.word	0x08001527
 8001330:	0800152d 	.word	0x0800152d
 8001334:	08001533 	.word	0x08001533
 8001338:	08001539 	.word	0x08001539
 800133c:	08001545 	.word	0x08001545
 8001340:	08001545 	.word	0x08001545
 8001344:	08001545 	.word	0x08001545
 8001348:	08001545 	.word	0x08001545
 800134c:	08001545 	.word	0x08001545
 8001350:	08001545 	.word	0x08001545
 8001354:	08001545 	.word	0x08001545
 8001358:	0800143d 	.word	0x0800143d
 800135c:	08001545 	.word	0x08001545
 8001360:	0800144f 	.word	0x0800144f
 8001364:	08001545 	.word	0x08001545
 8001368:	08001461 	.word	0x08001461
 800136c:	08001467 	.word	0x08001467
 8001370:	0800146d 	.word	0x0800146d
 8001374:	08001473 	.word	0x08001473
 8001378:	0800147f 	.word	0x0800147f
 800137c:	08001485 	.word	0x08001485
 8001380:	0800148b 	.word	0x0800148b
 8001384:	08001491 	.word	0x08001491
 8001388:	08001497 	.word	0x08001497
 800138c:	08001545 	.word	0x08001545
 8001390:	080014a3 	.word	0x080014a3
 8001394:	080014af 	.word	0x080014af
 8001398:	08001545 	.word	0x08001545
 800139c:	08001545 	.word	0x08001545
 80013a0:	080014c1 	.word	0x080014c1
 80013a4:	08001545 	.word	0x08001545
 80013a8:	080014cd 	.word	0x080014cd
 80013ac:	080014d9 	.word	0x080014d9
 80013b0:	080014df 	.word	0x080014df
 80013b4:	080014e5 	.word	0x080014e5
 80013b8:	08001545 	.word	0x08001545
 80013bc:	080014f1 	.word	0x080014f1
 80013c0:	08001545 	.word	0x08001545
 80013c4:	08001545 	.word	0x08001545
 80013c8:	08001545 	.word	0x08001545
 80013cc:	08001545 	.word	0x08001545
 80013d0:	080014fd 	.word	0x080014fd
 80013d4:	08001545 	.word	0x08001545
 80013d8:	08001443 	.word	0x08001443
 80013dc:	08001449 	.word	0x08001449
 80013e0:	08001455 	.word	0x08001455
 80013e4:	0800145b 	.word	0x0800145b
 80013e8:	08001545 	.word	0x08001545
 80013ec:	08001545 	.word	0x08001545
 80013f0:	08001545 	.word	0x08001545
 80013f4:	08001479 	.word	0x08001479
 80013f8:	08001545 	.word	0x08001545
 80013fc:	08001545 	.word	0x08001545
 8001400:	08001545 	.word	0x08001545
 8001404:	08001545 	.word	0x08001545
 8001408:	08001545 	.word	0x08001545
 800140c:	0800149d 	.word	0x0800149d
 8001410:	080014a9 	.word	0x080014a9
 8001414:	08001545 	.word	0x08001545
 8001418:	080014b5 	.word	0x080014b5
 800141c:	080014bb 	.word	0x080014bb
 8001420:	08001545 	.word	0x08001545
 8001424:	080014c7 	.word	0x080014c7
 8001428:	080014d3 	.word	0x080014d3
 800142c:	08001545 	.word	0x08001545
 8001430:	08001545 	.word	0x08001545
 8001434:	08001545 	.word	0x08001545
 8001438:	080014eb 	.word	0x080014eb
		case 'A':
			setA();
 800143c:	f000 f8d8 	bl	80015f0 <setA>
			break;
 8001440:	e083      	b.n	800154a <displayLetter+0x292>
		case 'a':
			seta();
 8001442:	f000 f8ff 	bl	8001644 <seta>
			break;
 8001446:	e080      	b.n	800154a <displayLetter+0x292>
		case 'b':
			setb();
 8001448:	f000 f926 	bl	8001698 <setb>
			break;
 800144c:	e07d      	b.n	800154a <displayLetter+0x292>
		case 'C':
			setC();
 800144e:	f000 f94d 	bl	80016ec <setC>
			break;
 8001452:	e07a      	b.n	800154a <displayLetter+0x292>
		case 'c':
			setc();
 8001454:	f000 f974 	bl	8001740 <setc>
			break;
 8001458:	e077      	b.n	800154a <displayLetter+0x292>
		case 'd':
			setd();
 800145a:	f000 f99b 	bl	8001794 <setd>
			break;
 800145e:	e074      	b.n	800154a <displayLetter+0x292>
		case 'E':
			setE();
 8001460:	f000 f9c2 	bl	80017e8 <setE>
			break;
 8001464:	e071      	b.n	800154a <displayLetter+0x292>
		case 'F':
			setF();
 8001466:	f000 f9e9 	bl	800183c <setF>
			break;
 800146a:	e06e      	b.n	800154a <displayLetter+0x292>
		case 'G':
			setG();
 800146c:	f000 fa10 	bl	8001890 <setG>
			break;
 8001470:	e06b      	b.n	800154a <displayLetter+0x292>
		case 'H':
			setH();
 8001472:	f000 fa37 	bl	80018e4 <setH>
			break;
 8001476:	e068      	b.n	800154a <displayLetter+0x292>
		case 'h':
			seth();
 8001478:	f000 fa5e 	bl	8001938 <seth>
			break;
 800147c:	e065      	b.n	800154a <displayLetter+0x292>
		case 'I':
			setI();
 800147e:	f000 fa85 	bl	800198c <setI>
			break;
 8001482:	e062      	b.n	800154a <displayLetter+0x292>
		case 'J':
			setJ();
 8001484:	f000 faac 	bl	80019e0 <setJ>
			break;
 8001488:	e05f      	b.n	800154a <displayLetter+0x292>
		case 'K':
			setK();
 800148a:	f000 fccb 	bl	8001e24 <setK>
			break;
 800148e:	e05c      	b.n	800154a <displayLetter+0x292>
		case 'L':
			setL();
 8001490:	f000 fad0 	bl	8001a34 <setL>
			break;
 8001494:	e059      	b.n	800154a <displayLetter+0x292>
		case 'M':
			setM();
 8001496:	f000 fcef 	bl	8001e78 <setM>
			break;
 800149a:	e056      	b.n	800154a <displayLetter+0x292>
		case 'n':
			setn();
 800149c:	f000 faf4 	bl	8001a88 <setn>
			break;
 80014a0:	e053      	b.n	800154a <displayLetter+0x292>
		case 'O':
			setO();
 80014a2:	f000 fb1b 	bl	8001adc <setO>
			break;
 80014a6:	e050      	b.n	800154a <displayLetter+0x292>
		case 'o':
			seto();
 80014a8:	f000 fb42 	bl	8001b30 <seto>
			break;
 80014ac:	e04d      	b.n	800154a <displayLetter+0x292>
		case 'P':
			setP();
 80014ae:	f000 fb69 	bl	8001b84 <setP>
			break;
 80014b2:	e04a      	b.n	800154a <displayLetter+0x292>
		case 'q':
			setq();
 80014b4:	f000 fb90 	bl	8001bd8 <setq>
			break;
 80014b8:	e047      	b.n	800154a <displayLetter+0x292>
		case 'r':
			setr();
 80014ba:	f000 fbb7 	bl	8001c2c <setr>
			break;
 80014be:	e044      	b.n	800154a <displayLetter+0x292>
		case 'S':
			setS();
 80014c0:	f000 fbde 	bl	8001c80 <setS>
			break;
 80014c4:	e041      	b.n	800154a <displayLetter+0x292>
		case 't':
			sett();
 80014c6:	f000 fc05 	bl	8001cd4 <sett>
			break;
 80014ca:	e03e      	b.n	800154a <displayLetter+0x292>
		case 'U':
			setU();
 80014cc:	f000 fc2c 	bl	8001d28 <setU>
			break;
 80014d0:	e03b      	b.n	800154a <displayLetter+0x292>
		case 'u':
			setu();
 80014d2:	f000 fc53 	bl	8001d7c <setu>
			break;
 80014d6:	e038      	b.n	800154a <displayLetter+0x292>
		case 'V':
			setV();
 80014d8:	f000 fcf4 	bl	8001ec4 <setV>
			break;
 80014dc:	e035      	b.n	800154a <displayLetter+0x292>
		case 'W':
			setW();
 80014de:	f000 fd1b 	bl	8001f18 <setW>
			break;
 80014e2:	e032      	b.n	800154a <displayLetter+0x292>
		case 'X':
			setX();
 80014e4:	f000 fd42 	bl	8001f6c <setX>
			break;
 80014e8:	e02f      	b.n	800154a <displayLetter+0x292>
		case 'y':
			sety();
 80014ea:	f000 fc71 	bl	8001dd0 <sety>
			break;
 80014ee:	e02c      	b.n	800154a <displayLetter+0x292>
		case 'Z':
			setZ();
 80014f0:	f000 fd66 	bl	8001fc0 <setZ>
			break;
 80014f4:	e029      	b.n	800154a <displayLetter+0x292>
		case ' ':
			resetAllSegments();
 80014f6:	f000 f82d 	bl	8001554 <resetAllSegments>
			break;
 80014fa:	e026      	b.n	800154a <displayLetter+0x292>
		case '_':
			setLine();
 80014fc:	f000 ff2e 	bl	800235c <setLine>
			break;
 8001500:	e023      	b.n	800154a <displayLetter+0x292>
		case '-':
			setDash();
 8001502:	f000 ff63 	bl	80023cc <setDash>
			break;
 8001506:	e020      	b.n	800154a <displayLetter+0x292>


		case '1':
			setOne();
 8001508:	f000 fd84 	bl	8002014 <setOne>
			break;
 800150c:	e01d      	b.n	800154a <displayLetter+0x292>
		case '2':
			setTwo();
 800150e:	f000 fdab 	bl	8002068 <setTwo>
			break;
 8001512:	e01a      	b.n	800154a <displayLetter+0x292>
		case '3':
			setThree();
 8001514:	f000 fdd2 	bl	80020bc <setThree>
			break;
 8001518:	e017      	b.n	800154a <displayLetter+0x292>
		case '4':
			setFour();
 800151a:	f000 fdf9 	bl	8002110 <setFour>
			break;
 800151e:	e014      	b.n	800154a <displayLetter+0x292>
		case '5':
			setFive();
 8001520:	f000 fe20 	bl	8002164 <setFive>
			break;
 8001524:	e011      	b.n	800154a <displayLetter+0x292>
		case '6':
			setSix();
 8001526:	f000 fe47 	bl	80021b8 <setSix>
			break;
 800152a:	e00e      	b.n	800154a <displayLetter+0x292>
		case '7':
			setSeven();
 800152c:	f000 fe6e 	bl	800220c <setSeven>
			break;
 8001530:	e00b      	b.n	800154a <displayLetter+0x292>
		case '8':
			setEight();
 8001532:	f000 fe95 	bl	8002260 <setEight>
			break;
 8001536:	e008      	b.n	800154a <displayLetter+0x292>
		case '9':
			setNine();
 8001538:	f000 febc 	bl	80022b4 <setNine>
			break;
 800153c:	e005      	b.n	800154a <displayLetter+0x292>
		case '0':
			setZero();
 800153e:	f000 fee3 	bl	8002308 <setZero>
			break;
 8001542:	e002      	b.n	800154a <displayLetter+0x292>
		default:
			setDot();
 8001544:	f000 ff38 	bl	80023b8 <setDot>
			break;
 8001548:	bf00      	nop
	}
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop

08001554 <resetAllSegments>:
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
}

void resetAllSegments(void){
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001558:	2102      	movs	r1, #2
 800155a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155e:	f7ff fd97 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001562:	2101      	movs	r1, #1
 8001564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001568:	f7ff fd92 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800156c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001574:	f7ff fd8c 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001578:	2120      	movs	r1, #32
 800157a:	480c      	ldr	r0, [pc, #48]	; (80015ac <resetAllSegments+0x58>)
 800157c:	f7ff fd88 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001588:	f7ff fd82 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 800158c:	2108      	movs	r1, #8
 800158e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001592:	f7ff fd7d 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001596:	2110      	movs	r1, #16
 8001598:	4804      	ldr	r0, [pc, #16]	; (80015ac <resetAllSegments+0x58>)
 800159a:	f7ff fd79 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentDP_Pin);
 800159e:	2102      	movs	r1, #2
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <resetAllSegments+0x58>)
 80015a2:	f7ff fd75 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	48000400 	.word	0x48000400

080015b0 <resetAllDigits>:

void resetAllDigits(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, digit1_Pin);
 80015b4:	2101      	movs	r1, #1
 80015b6:	480d      	ldr	r0, [pc, #52]	; (80015ec <resetAllDigits+0x3c>)
 80015b8:	f7ff fd78 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, digit2_Pin);
 80015bc:	2110      	movs	r1, #16
 80015be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c2:	f7ff fd73 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, digit3_Pin);
 80015c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ce:	f7ff fd6d 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, digit4_Pin);
 80015d2:	2104      	movs	r1, #4
 80015d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d8:	f7ff fd68 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, digitTime_Pin);
 80015dc:	2180      	movs	r1, #128	; 0x80
 80015de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e2:	f7ff fd63 	bl	80010ac <LL_GPIO_ResetOutputPin>
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	48000400 	.word	0x48000400

080015f0 <setA>:

void setA(void){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80015f4:	2102      	movs	r1, #2
 80015f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fa:	f7ff fd57 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80015fe:	2101      	movs	r1, #1
 8001600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001604:	f7ff fd52 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800160c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001610:	f7ff fd4c 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001614:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161c:	f7ff fd46 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001620:	2108      	movs	r1, #8
 8001622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001626:	f7ff fd41 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800162a:	2110      	movs	r1, #16
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <setA+0x50>)
 800162e:	f7ff fd3d 	bl	80010ac <LL_GPIO_ResetOutputPin>
	// reset D
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001632:	2120      	movs	r1, #32
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <setA+0x50>)
 8001636:	f7ff fd2b 	bl	8001090 <LL_GPIO_SetOutputPin>

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	48000400 	.word	0x48000400

08001644 <seta>:
void seta(void){
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001648:	2102      	movs	r1, #2
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f7ff fd2d 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001652:	2101      	movs	r1, #1
 8001654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001658:	f7ff fd28 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800165c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001664:	f7ff fd22 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001668:	2120      	movs	r1, #32
 800166a:	480a      	ldr	r0, [pc, #40]	; (8001694 <seta+0x50>)
 800166c:	f7ff fd1e 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001670:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001678:	f7ff fd18 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800167c:	2110      	movs	r1, #16
 800167e:	4805      	ldr	r0, [pc, #20]	; (8001694 <seta+0x50>)
 8001680:	f7ff fd14 	bl	80010ac <LL_GPIO_ResetOutputPin>
	// reset f
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001684:	2108      	movs	r1, #8
 8001686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168a:	f7ff fd01 	bl	8001090 <LL_GPIO_SetOutputPin>

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	48000400 	.word	0x48000400

08001698 <setb>:
void setb(void){
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a4:	f7ff fd02 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80016a8:	2120      	movs	r1, #32
 80016aa:	480f      	ldr	r0, [pc, #60]	; (80016e8 <setb+0x50>)
 80016ac:	f7ff fcfe 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80016b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b8:	f7ff fcf8 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80016bc:	2108      	movs	r1, #8
 80016be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c2:	f7ff fcf3 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80016c6:	2110      	movs	r1, #16
 80016c8:	4807      	ldr	r0, [pc, #28]	; (80016e8 <setb+0x50>)
 80016ca:	f7ff fcef 	bl	80010ac <LL_GPIO_ResetOutputPin>
	// reset a,b
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80016ce:	2102      	movs	r1, #2
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d4:	f7ff fcdc 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80016d8:	2101      	movs	r1, #1
 80016da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016de:	f7ff fcd7 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	48000400 	.word	0x48000400

080016ec <setC>:
void setC(void){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80016f0:	2102      	movs	r1, #2
 80016f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f6:	f7ff fcd9 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80016fa:	2120      	movs	r1, #32
 80016fc:	480f      	ldr	r0, [pc, #60]	; (800173c <setC+0x50>)
 80016fe:	f7ff fcd5 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001702:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170a:	f7ff fccf 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800170e:	2108      	movs	r1, #8
 8001710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001714:	f7ff fcca 	bl	80010ac <LL_GPIO_ResetOutputPin>
	// reset B,C,G
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001718:	2101      	movs	r1, #1
 800171a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171e:	f7ff fcb7 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001722:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172a:	f7ff fcb1 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800172e:	2110      	movs	r1, #16
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <setC+0x50>)
 8001732:	f7ff fcad 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	48000400 	.word	0x48000400

08001740 <setc>:
void setc(void){
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001744:	2120      	movs	r1, #32
 8001746:	4812      	ldr	r0, [pc, #72]	; (8001790 <setc+0x50>)
 8001748:	f7ff fcb0 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800174c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001754:	f7ff fcaa 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001758:	2110      	movs	r1, #16
 800175a:	480d      	ldr	r0, [pc, #52]	; (8001790 <setc+0x50>)
 800175c:	f7ff fca6 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001760:	2102      	movs	r1, #2
 8001762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001766:	f7ff fc93 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800176a:	2101      	movs	r1, #1
 800176c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001770:	f7ff fc8e 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177c:	f7ff fc88 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001780:	2108      	movs	r1, #8
 8001782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001786:	f7ff fc83 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	48000400 	.word	0x48000400

08001794 <setd>:
void setd(void){
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001798:	2101      	movs	r1, #1
 800179a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179e:	f7ff fc85 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80017a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017aa:	f7ff fc7f 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80017ae:	2120      	movs	r1, #32
 80017b0:	480c      	ldr	r0, [pc, #48]	; (80017e4 <setd+0x50>)
 80017b2:	f7ff fc7b 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80017b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017be:	f7ff fc75 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80017c2:	2110      	movs	r1, #16
 80017c4:	4807      	ldr	r0, [pc, #28]	; (80017e4 <setd+0x50>)
 80017c6:	f7ff fc71 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80017ca:	2102      	movs	r1, #2
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d0:	f7ff fc5e 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80017d4:	2108      	movs	r1, #8
 80017d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017da:	f7ff fc59 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	48000400 	.word	0x48000400

080017e8 <setE>:
void setE(void){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80017ec:	2102      	movs	r1, #2
 80017ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f2:	f7ff fc5b 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80017f6:	2120      	movs	r1, #32
 80017f8:	480f      	ldr	r0, [pc, #60]	; (8001838 <setE+0x50>)
 80017fa:	f7ff fc57 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80017fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001806:	f7ff fc51 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800180a:	2108      	movs	r1, #8
 800180c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001810:	f7ff fc4c 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001814:	2110      	movs	r1, #16
 8001816:	4808      	ldr	r0, [pc, #32]	; (8001838 <setE+0x50>)
 8001818:	f7ff fc48 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800181c:	2101      	movs	r1, #1
 800181e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001822:	f7ff fc35 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800182a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182e:	f7ff fc2f 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	48000400 	.word	0x48000400

0800183c <setF>:
void setF(void){
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001840:	2102      	movs	r1, #2
 8001842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001846:	f7ff fc31 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800184a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800184e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001852:	f7ff fc2b 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001856:	2108      	movs	r1, #8
 8001858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185c:	f7ff fc26 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001860:	2110      	movs	r1, #16
 8001862:	480a      	ldr	r0, [pc, #40]	; (800188c <setF+0x50>)
 8001864:	f7ff fc22 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001868:	2101      	movs	r1, #1
 800186a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186e:	f7ff fc0f 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001872:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187a:	f7ff fc09 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800187e:	2120      	movs	r1, #32
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <setF+0x50>)
 8001882:	f7ff fc05 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	48000400 	.word	0x48000400

08001890 <setG>:
void setG(void){
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001894:	2102      	movs	r1, #2
 8001896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189a:	f7ff fc07 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800189e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a6:	f7ff fc01 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80018aa:	2120      	movs	r1, #32
 80018ac:	480c      	ldr	r0, [pc, #48]	; (80018e0 <setG+0x50>)
 80018ae:	f7ff fbfd 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80018b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ba:	f7ff fbf7 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80018be:	2108      	movs	r1, #8
 80018c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c4:	f7ff fbf2 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80018c8:	2101      	movs	r1, #1
 80018ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ce:	f7ff fbdf 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 80018d2:	2110      	movs	r1, #16
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <setG+0x50>)
 80018d6:	f7ff fbdb 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	48000400 	.word	0x48000400

080018e4 <setH>:
void setH(void){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80018e8:	2101      	movs	r1, #1
 80018ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ee:	f7ff fbdd 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80018f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fa:	f7ff fbd7 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80018fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001906:	f7ff fbd1 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800190a:	2108      	movs	r1, #8
 800190c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001910:	f7ff fbcc 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001914:	2110      	movs	r1, #16
 8001916:	4807      	ldr	r0, [pc, #28]	; (8001934 <setH+0x50>)
 8001918:	f7ff fbc8 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800191c:	2102      	movs	r1, #2
 800191e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001922:	f7ff fbb5 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001926:	2120      	movs	r1, #32
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <setH+0x50>)
 800192a:	f7ff fbb1 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	48000400 	.word	0x48000400

08001938 <seth>:
void seth(void){
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800193c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001944:	f7ff fbb2 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001948:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800194c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001950:	f7ff fbac 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001954:	2108      	movs	r1, #8
 8001956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195a:	f7ff fba7 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800195e:	2110      	movs	r1, #16
 8001960:	4809      	ldr	r0, [pc, #36]	; (8001988 <seth+0x50>)
 8001962:	f7ff fba3 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001966:	2102      	movs	r1, #2
 8001968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196c:	f7ff fb90 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001970:	2101      	movs	r1, #1
 8001972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001976:	f7ff fb8b 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800197a:	2120      	movs	r1, #32
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <seth+0x50>)
 800197e:	f7ff fb87 	bl	8001090 <LL_GPIO_SetOutputPin>

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	48000400 	.word	0x48000400

0800198c <setI>:
void setI(void){
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001990:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001998:	f7ff fb88 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800199c:	2108      	movs	r1, #8
 800199e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a2:	f7ff fb83 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80019a6:	2102      	movs	r1, #2
 80019a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ac:	f7ff fb70 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80019b0:	2101      	movs	r1, #1
 80019b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b6:	f7ff fb6b 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80019ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c2:	f7ff fb65 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 80019c6:	2120      	movs	r1, #32
 80019c8:	4804      	ldr	r0, [pc, #16]	; (80019dc <setI+0x50>)
 80019ca:	f7ff fb61 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 80019ce:	2110      	movs	r1, #16
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <setI+0x50>)
 80019d2:	f7ff fb5d 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	48000400 	.word	0x48000400

080019e0 <setJ>:
void setJ(void){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80019e4:	2101      	movs	r1, #1
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ea:	f7ff fb5f 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80019ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f6:	f7ff fb59 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80019fa:	2120      	movs	r1, #32
 80019fc:	480c      	ldr	r0, [pc, #48]	; (8001a30 <setJ+0x50>)
 80019fe:	f7ff fb55 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001a02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0a:	f7ff fb4f 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001a0e:	2102      	movs	r1, #2
 8001a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a14:	f7ff fb3c 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001a18:	2108      	movs	r1, #8
 8001a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a1e:	f7ff fb37 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001a22:	2110      	movs	r1, #16
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <setJ+0x50>)
 8001a26:	f7ff fb33 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	48000400 	.word	0x48000400

08001a34 <setL>:
void setL(void){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001a38:	2120      	movs	r1, #32
 8001a3a:	4812      	ldr	r0, [pc, #72]	; (8001a84 <setL+0x50>)
 8001a3c:	f7ff fb36 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001a40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a48:	f7ff fb30 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001a4c:	2108      	movs	r1, #8
 8001a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a52:	f7ff fb2b 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001a56:	2102      	movs	r1, #2
 8001a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5c:	f7ff fb18 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001a60:	2101      	movs	r1, #1
 8001a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a66:	f7ff fb13 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001a6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a72:	f7ff fb0d 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001a76:	2110      	movs	r1, #16
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <setL+0x50>)
 8001a7a:	f7ff fb09 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	48000400 	.word	0x48000400

08001a88 <setn>:
void setn(void){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001a8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a94:	f7ff fb0a 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001a98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa0:	f7ff fb04 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001aa4:	2110      	movs	r1, #16
 8001aa6:	480c      	ldr	r0, [pc, #48]	; (8001ad8 <setn+0x50>)
 8001aa8:	f7ff fb00 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001aac:	2102      	movs	r1, #2
 8001aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab2:	f7ff faed 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001abc:	f7ff fae8 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001ac0:	2120      	movs	r1, #32
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <setn+0x50>)
 8001ac4:	f7ff fae4 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001ac8:	2108      	movs	r1, #8
 8001aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ace:	f7ff fadf 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	48000400 	.word	0x48000400

08001adc <setO>:
void setO(void){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae6:	f7ff fae1 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001aea:	2101      	movs	r1, #1
 8001aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af0:	f7ff fadc 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001af4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afc:	f7ff fad6 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001b00:	2120      	movs	r1, #32
 8001b02:	480a      	ldr	r0, [pc, #40]	; (8001b2c <setO+0x50>)
 8001b04:	f7ff fad2 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001b08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b10:	f7ff facc 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001b14:	2108      	movs	r1, #8
 8001b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1a:	f7ff fac7 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001b1e:	2110      	movs	r1, #16
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <setO+0x50>)
 8001b22:	f7ff fab5 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	48000400 	.word	0x48000400

08001b30 <seto>:
void seto(void){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001b34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3c:	f7ff fab6 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001b40:	2120      	movs	r1, #32
 8001b42:	480f      	ldr	r0, [pc, #60]	; (8001b80 <seto+0x50>)
 8001b44:	f7ff fab2 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001b48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b50:	f7ff faac 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001b54:	2110      	movs	r1, #16
 8001b56:	480a      	ldr	r0, [pc, #40]	; (8001b80 <seto+0x50>)
 8001b58:	f7ff faa8 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001b5c:	2102      	movs	r1, #2
 8001b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b62:	f7ff fa95 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001b66:	2101      	movs	r1, #1
 8001b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b6c:	f7ff fa90 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001b70:	2108      	movs	r1, #8
 8001b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b76:	f7ff fa8b 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	48000400 	.word	0x48000400

08001b84 <setP>:
void setP(void){
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001b88:	2102      	movs	r1, #2
 8001b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8e:	f7ff fa8d 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001b92:	2101      	movs	r1, #1
 8001b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b98:	f7ff fa88 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001b9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba4:	f7ff fa82 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001ba8:	2108      	movs	r1, #8
 8001baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bae:	f7ff fa7d 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001bb2:	2110      	movs	r1, #16
 8001bb4:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <setP+0x50>)
 8001bb6:	f7ff fa79 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001bba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc2:	f7ff fa65 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001bc6:	2120      	movs	r1, #32
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <setP+0x50>)
 8001bca:	f7ff fa61 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	48000400 	.word	0x48000400

08001bd8 <setq>:
void setq(void){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001bdc:	2102      	movs	r1, #2
 8001bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be2:	f7ff fa63 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001be6:	2101      	movs	r1, #1
 8001be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bec:	f7ff fa5e 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001bf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf8:	f7ff fa58 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001bfc:	2108      	movs	r1, #8
 8001bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c02:	f7ff fa53 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001c06:	2110      	movs	r1, #16
 8001c08:	4807      	ldr	r0, [pc, #28]	; (8001c28 <setq+0x50>)
 8001c0a:	f7ff fa4f 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001c0e:	2120      	movs	r1, #32
 8001c10:	4805      	ldr	r0, [pc, #20]	; (8001c28 <setq+0x50>)
 8001c12:	f7ff fa3d 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001c16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1e:	f7ff fa37 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	48000400 	.word	0x48000400

08001c2c <setr>:
void setr(void){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001c30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c38:	f7ff fa38 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001c3c:	2110      	movs	r1, #16
 8001c3e:	480f      	ldr	r0, [pc, #60]	; (8001c7c <setr+0x50>)
 8001c40:	f7ff fa34 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001c44:	2102      	movs	r1, #2
 8001c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4a:	f7ff fa21 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001c4e:	2101      	movs	r1, #1
 8001c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c54:	f7ff fa1c 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001c58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c60:	f7ff fa16 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001c64:	2120      	movs	r1, #32
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <setr+0x50>)
 8001c68:	f7ff fa12 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001c6c:	2108      	movs	r1, #8
 8001c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c72:	f7ff fa0d 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	48000400 	.word	0x48000400

08001c80 <setS>:
void setS(void){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001c84:	2102      	movs	r1, #2
 8001c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8a:	f7ff fa0f 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001c8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c96:	f7ff fa09 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001c9a:	2120      	movs	r1, #32
 8001c9c:	480c      	ldr	r0, [pc, #48]	; (8001cd0 <setS+0x50>)
 8001c9e:	f7ff fa05 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001ca2:	2108      	movs	r1, #8
 8001ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca8:	f7ff fa00 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001cac:	2110      	movs	r1, #16
 8001cae:	4808      	ldr	r0, [pc, #32]	; (8001cd0 <setS+0x50>)
 8001cb0:	f7ff f9fc 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cba:	f7ff f9e9 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001cbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc6:	f7ff f9e3 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	48000400 	.word	0x48000400

08001cd4 <sett>:
void sett(void){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001cd8:	2120      	movs	r1, #32
 8001cda:	4812      	ldr	r0, [pc, #72]	; (8001d24 <sett+0x50>)
 8001cdc:	f7ff f9e6 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001ce0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce8:	f7ff f9e0 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001cec:	2108      	movs	r1, #8
 8001cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf2:	f7ff f9db 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001cf6:	2110      	movs	r1, #16
 8001cf8:	480a      	ldr	r0, [pc, #40]	; (8001d24 <sett+0x50>)
 8001cfa:	f7ff f9d7 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001cfe:	2102      	movs	r1, #2
 8001d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d04:	f7ff f9c4 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001d08:	2101      	movs	r1, #1
 8001d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d0e:	f7ff f9bf 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001d12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1a:	f7ff f9b9 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	48000400 	.word	0x48000400

08001d28 <setU>:
void setU(void){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d32:	f7ff f9bb 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001d36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3e:	f7ff f9b5 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001d42:	2120      	movs	r1, #32
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <setU+0x50>)
 8001d46:	f7ff f9b1 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001d4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d52:	f7ff f9ab 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001d56:	2108      	movs	r1, #8
 8001d58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d5c:	f7ff f9a6 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001d60:	2102      	movs	r1, #2
 8001d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d66:	f7ff f993 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001d6a:	2110      	movs	r1, #16
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <setU+0x50>)
 8001d6e:	f7ff f98f 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	48000400 	.word	0x48000400

08001d7c <setu>:
void setu(void){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d88:	f7ff f990 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001d8c:	2120      	movs	r1, #32
 8001d8e:	480f      	ldr	r0, [pc, #60]	; (8001dcc <setu+0x50>)
 8001d90:	f7ff f98c 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001d94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d9c:	f7ff f986 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001da0:	2102      	movs	r1, #2
 8001da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da6:	f7ff f973 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001daa:	2101      	movs	r1, #1
 8001dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db0:	f7ff f96e 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001db4:	2108      	movs	r1, #8
 8001db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dba:	f7ff f969 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001dbe:	2110      	movs	r1, #16
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <setu+0x50>)
 8001dc2:	f7ff f965 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	48000400 	.word	0x48000400

08001dd0 <sety>:
void sety(void){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dda:	f7ff f967 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001dde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de6:	f7ff f961 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001dea:	2120      	movs	r1, #32
 8001dec:	480c      	ldr	r0, [pc, #48]	; (8001e20 <sety+0x50>)
 8001dee:	f7ff f95d 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001df2:	2108      	movs	r1, #8
 8001df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df8:	f7ff f958 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001dfc:	2110      	movs	r1, #16
 8001dfe:	4808      	ldr	r0, [pc, #32]	; (8001e20 <sety+0x50>)
 8001e00:	f7ff f954 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001e04:	2102      	movs	r1, #2
 8001e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0a:	f7ff f941 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001e0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e16:	f7ff f93b 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	48000400 	.word	0x48000400

08001e24 <setK>:


// Disgusting letters :D
void setK(void){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001e28:	2102      	movs	r1, #2
 8001e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e2e:	f7ff f93d 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3a:	f7ff f937 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001e3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e46:	f7ff f931 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001e4a:	2108      	movs	r1, #8
 8001e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e50:	f7ff f92c 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001e54:	2110      	movs	r1, #16
 8001e56:	4807      	ldr	r0, [pc, #28]	; (8001e74 <setK+0x50>)
 8001e58:	f7ff f928 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e62:	f7ff f915 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001e66:	2120      	movs	r1, #32
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <setK+0x50>)
 8001e6a:	f7ff f911 	bl	8001090 <LL_GPIO_SetOutputPin>

}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	48000400 	.word	0x48000400

08001e78 <setM>:
void setM(void){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e82:	f7ff f913 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001e86:	2101      	movs	r1, #1
 8001e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e8c:	f7ff f90e 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001e90:	2120      	movs	r1, #32
 8001e92:	480b      	ldr	r0, [pc, #44]	; (8001ec0 <setM+0x48>)
 8001e94:	f7ff f90a 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001e98:	2108      	movs	r1, #8
 8001e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9e:	f7ff f905 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001ea2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eaa:	f7ff f8f1 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001eae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb6:	f7ff f8eb 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	48000400 	.word	0x48000400

08001ec4 <setV>:
void setV(void){
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001ec8:	2101      	movs	r1, #1
 8001eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ece:	f7ff f8ed 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001ed2:	2120      	movs	r1, #32
 8001ed4:	480f      	ldr	r0, [pc, #60]	; (8001f14 <setV+0x50>)
 8001ed6:	f7ff f8e9 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001eda:	2108      	movs	r1, #8
 8001edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee0:	f7ff f8e4 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eea:	f7ff f8d1 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001eee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef6:	f7ff f8cb 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001efa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f02:	f7ff f8c5 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001f06:	2110      	movs	r1, #16
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <setV+0x50>)
 8001f0a:	f7ff f8c1 	bl	8001090 <LL_GPIO_SetOutputPin>

}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	48000400 	.word	0x48000400

08001f18 <setW>:
void setW(void){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f22:	f7ff f8c3 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001f26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f2e:	f7ff f8bd 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001f32:	2120      	movs	r1, #32
 8001f34:	480c      	ldr	r0, [pc, #48]	; (8001f68 <setW+0x50>)
 8001f36:	f7ff f8b9 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001f3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f42:	f7ff f8b3 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001f46:	2108      	movs	r1, #8
 8001f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f4c:	f7ff f8ae 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001f50:	2110      	movs	r1, #16
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <setW+0x50>)
 8001f54:	f7ff f8aa 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001f58:	2102      	movs	r1, #2
 8001f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f5e:	f7ff f897 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	48000400 	.word	0x48000400

08001f6c <setX>:
void setX(void){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001f70:	2102      	movs	r1, #2
 8001f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f76:	f7ff f899 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001f7a:	2120      	movs	r1, #32
 8001f7c:	480f      	ldr	r0, [pc, #60]	; (8001fbc <setX+0x50>)
 8001f7e:	f7ff f895 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001f82:	2110      	movs	r1, #16
 8001f84:	480d      	ldr	r0, [pc, #52]	; (8001fbc <setX+0x50>)
 8001f86:	f7ff f891 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f90:	f7ff f87e 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001f94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f9c:	f7ff f878 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa8:	f7ff f872 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001fac:	2108      	movs	r1, #8
 8001fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb2:	f7ff f86d 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	48000400 	.word	0x48000400

08001fc0 <setZ>:
void setZ(void){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001fc4:	2102      	movs	r1, #2
 8001fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fca:	f7ff f86f 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001fce:	2101      	movs	r1, #1
 8001fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd4:	f7ff f86a 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001fd8:	2120      	movs	r1, #32
 8001fda:	480d      	ldr	r0, [pc, #52]	; (8002010 <setZ+0x50>)
 8001fdc:	f7ff f866 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001fe0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe8:	f7ff f860 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001fec:	2110      	movs	r1, #16
 8001fee:	4808      	ldr	r0, [pc, #32]	; (8002010 <setZ+0x50>)
 8001ff0:	f7ff f85c 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ffc:	f7ff f848 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8002000:	2108      	movs	r1, #8
 8002002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002006:	f7ff f843 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	48000400 	.word	0x48000400

08002014 <setOne>:

// numbers
void setOne(void){
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8002018:	2101      	movs	r1, #1
 800201a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800201e:	f7ff f845 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8002022:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800202a:	f7ff f83f 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800202e:	2102      	movs	r1, #2
 8002030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002034:	f7ff f82c 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8002038:	2120      	movs	r1, #32
 800203a:	480a      	ldr	r0, [pc, #40]	; (8002064 <setOne+0x50>)
 800203c:	f7ff f828 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8002040:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002048:	f7ff f822 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 800204c:	2108      	movs	r1, #8
 800204e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002052:	f7ff f81d 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8002056:	2110      	movs	r1, #16
 8002058:	4802      	ldr	r0, [pc, #8]	; (8002064 <setOne+0x50>)
 800205a:	f7ff f819 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	48000400 	.word	0x48000400

08002068 <setTwo>:
void setTwo(void){
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800206c:	2102      	movs	r1, #2
 800206e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002072:	f7ff f81b 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8002076:	2101      	movs	r1, #1
 8002078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207c:	f7ff f816 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8002080:	2120      	movs	r1, #32
 8002082:	480d      	ldr	r0, [pc, #52]	; (80020b8 <setTwo+0x50>)
 8002084:	f7ff f812 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8002088:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800208c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002090:	f7ff f80c 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8002094:	2110      	movs	r1, #16
 8002096:	4808      	ldr	r0, [pc, #32]	; (80020b8 <setTwo+0x50>)
 8002098:	f7ff f808 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800209c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a4:	f7fe fff4 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80020a8:	2108      	movs	r1, #8
 80020aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ae:	f7fe ffef 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	48000400 	.word	0x48000400

080020bc <setThree>:
void setThree(void){
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80020c0:	2102      	movs	r1, #2
 80020c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c6:	f7fe fff1 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80020ca:	2101      	movs	r1, #1
 80020cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d0:	f7fe ffec 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80020d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020dc:	f7fe ffe6 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80020e0:	2120      	movs	r1, #32
 80020e2:	480a      	ldr	r0, [pc, #40]	; (800210c <setThree+0x50>)
 80020e4:	f7fe ffe2 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80020e8:	2110      	movs	r1, #16
 80020ea:	4808      	ldr	r0, [pc, #32]	; (800210c <setThree+0x50>)
 80020ec:	f7fe ffde 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80020f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f8:	f7fe ffca 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80020fc:	2108      	movs	r1, #8
 80020fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002102:	f7fe ffc5 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	48000400 	.word	0x48000400

08002110 <setFour>:
void setFour(void){
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8002114:	2101      	movs	r1, #1
 8002116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800211a:	f7fe ffc7 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800211e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002126:	f7fe ffc1 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800212a:	2108      	movs	r1, #8
 800212c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002130:	f7fe ffbc 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8002134:	2110      	movs	r1, #16
 8002136:	480a      	ldr	r0, [pc, #40]	; (8002160 <setFour+0x50>)
 8002138:	f7fe ffb8 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800213c:	2102      	movs	r1, #2
 800213e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002142:	f7fe ffa5 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8002146:	2120      	movs	r1, #32
 8002148:	4805      	ldr	r0, [pc, #20]	; (8002160 <setFour+0x50>)
 800214a:	f7fe ffa1 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800214e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002156:	f7fe ff9b 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	48000400 	.word	0x48000400

08002164 <setFive>:
void setFive(void){
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8002168:	2102      	movs	r1, #2
 800216a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216e:	f7fe ff9d 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8002172:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217a:	f7fe ff97 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800217e:	2120      	movs	r1, #32
 8002180:	480c      	ldr	r0, [pc, #48]	; (80021b4 <setFive+0x50>)
 8002182:	f7fe ff93 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8002186:	2108      	movs	r1, #8
 8002188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800218c:	f7fe ff8e 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8002190:	2110      	movs	r1, #16
 8002192:	4808      	ldr	r0, [pc, #32]	; (80021b4 <setFive+0x50>)
 8002194:	f7fe ff8a 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8002198:	2101      	movs	r1, #1
 800219a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219e:	f7fe ff77 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80021a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021aa:	f7fe ff71 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	48000400 	.word	0x48000400

080021b8 <setSix>:
void setSix(void){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80021bc:	2102      	movs	r1, #2
 80021be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c2:	f7fe ff73 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80021c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ce:	f7fe ff6d 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80021d2:	2120      	movs	r1, #32
 80021d4:	480c      	ldr	r0, [pc, #48]	; (8002208 <setSix+0x50>)
 80021d6:	f7fe ff69 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80021da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e2:	f7fe ff63 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80021e6:	2108      	movs	r1, #8
 80021e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ec:	f7fe ff5e 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80021f0:	2110      	movs	r1, #16
 80021f2:	4805      	ldr	r0, [pc, #20]	; (8002208 <setSix+0x50>)
 80021f4:	f7fe ff5a 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80021f8:	2101      	movs	r1, #1
 80021fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021fe:	f7fe ff47 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	48000400 	.word	0x48000400

0800220c <setSeven>:
void setSeven(void){
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8002210:	2102      	movs	r1, #2
 8002212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002216:	f7fe ff49 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800221a:	2101      	movs	r1, #1
 800221c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002220:	f7fe ff44 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8002224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800222c:	f7fe ff3e 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8002230:	2120      	movs	r1, #32
 8002232:	480a      	ldr	r0, [pc, #40]	; (800225c <setSeven+0x50>)
 8002234:	f7fe ff2c 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8002238:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800223c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002240:	f7fe ff26 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8002244:	2108      	movs	r1, #8
 8002246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224a:	f7fe ff21 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800224e:	2110      	movs	r1, #16
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <setSeven+0x50>)
 8002252:	f7fe ff1d 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	48000400 	.word	0x48000400

08002260 <setEight>:
void setEight(void){
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8002264:	2102      	movs	r1, #2
 8002266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800226a:	f7fe ff1f 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800226e:	2101      	movs	r1, #1
 8002270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002274:	f7fe ff1a 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8002278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800227c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002280:	f7fe ff14 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8002284:	2120      	movs	r1, #32
 8002286:	480a      	ldr	r0, [pc, #40]	; (80022b0 <setEight+0x50>)
 8002288:	f7fe ff10 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800228c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002294:	f7fe ff0a 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8002298:	2108      	movs	r1, #8
 800229a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800229e:	f7fe ff05 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80022a2:	2110      	movs	r1, #16
 80022a4:	4802      	ldr	r0, [pc, #8]	; (80022b0 <setEight+0x50>)
 80022a6:	f7fe ff01 	bl	80010ac <LL_GPIO_ResetOutputPin>
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	48000400 	.word	0x48000400

080022b4 <setNine>:
void setNine(void){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80022b8:	2102      	movs	r1, #2
 80022ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022be:	f7fe fef5 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80022c2:	2101      	movs	r1, #1
 80022c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c8:	f7fe fef0 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80022cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d4:	f7fe feea 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80022d8:	2120      	movs	r1, #32
 80022da:	480a      	ldr	r0, [pc, #40]	; (8002304 <setNine+0x50>)
 80022dc:	f7fe fee6 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80022e0:	2108      	movs	r1, #8
 80022e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e6:	f7fe fee1 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80022ea:	2110      	movs	r1, #16
 80022ec:	4805      	ldr	r0, [pc, #20]	; (8002304 <setNine+0x50>)
 80022ee:	f7fe fedd 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80022f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022fa:	f7fe fec9 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	48000400 	.word	0x48000400

08002308 <setZero>:
void setZero(void){
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800230c:	2102      	movs	r1, #2
 800230e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002312:	f7fe fecb 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8002316:	2101      	movs	r1, #1
 8002318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800231c:	f7fe fec6 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8002320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002328:	f7fe fec0 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800232c:	2120      	movs	r1, #32
 800232e:	480a      	ldr	r0, [pc, #40]	; (8002358 <setZero+0x50>)
 8002330:	f7fe febc 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8002334:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800233c:	f7fe feb6 	bl	80010ac <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8002340:	2108      	movs	r1, #8
 8002342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002346:	f7fe feb1 	bl	80010ac <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800234a:	2110      	movs	r1, #16
 800234c:	4802      	ldr	r0, [pc, #8]	; (8002358 <setZero+0x50>)
 800234e:	f7fe fe9f 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	48000400 	.word	0x48000400

0800235c <setLine>:

void setLine(void){
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8002360:	2120      	movs	r1, #32
 8002362:	4814      	ldr	r0, [pc, #80]	; (80023b4 <setLine+0x58>)
 8002364:	f7fe fea2 	bl	80010ac <LL_GPIO_ResetOutputPin>

	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8002368:	2102      	movs	r1, #2
 800236a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800236e:	f7fe fe8f 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8002372:	2101      	movs	r1, #1
 8002374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002378:	f7fe fe8a 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800237c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002384:	f7fe fe84 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8002388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800238c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002390:	f7fe fe7e 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8002394:	2108      	movs	r1, #8
 8002396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800239a:	f7fe fe79 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800239e:	2110      	movs	r1, #16
 80023a0:	4804      	ldr	r0, [pc, #16]	; (80023b4 <setLine+0x58>)
 80023a2:	f7fe fe75 	bl	8001090 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentDP_Pin);
 80023a6:	2102      	movs	r1, #2
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <setLine+0x58>)
 80023aa:	f7fe fe71 	bl	8001090 <LL_GPIO_SetOutputPin>
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	48000400 	.word	0x48000400

080023b8 <setDot>:
// and dot to end
void setDot(void){
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
 80023bc:	2102      	movs	r1, #2
 80023be:	4802      	ldr	r0, [pc, #8]	; (80023c8 <setDot+0x10>)
 80023c0:	f7fe fe74 	bl	80010ac <LL_GPIO_ResetOutputPin>
}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	48000400 	.word	0x48000400

080023cc <setDash>:

void setDash(void){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80023d0:	2110      	movs	r1, #16
 80023d2:	4802      	ldr	r0, [pc, #8]	; (80023dc <setDash+0x10>)
 80023d4:	f7fe fe6a 	bl	80010ac <LL_GPIO_ResetOutputPin>
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	48000400 	.word	0x48000400

080023e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <__NVIC_GetPriorityGrouping+0x18>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	f003 0307 	and.w	r3, r3, #7
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	2b00      	cmp	r3, #0
 800240c:	db0b      	blt.n	8002426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f003 021f 	and.w	r2, r3, #31
 8002414:	4907      	ldr	r1, [pc, #28]	; (8002434 <__NVIC_EnableIRQ+0x38>)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	2001      	movs	r0, #1
 800241e:	fa00 f202 	lsl.w	r2, r0, r2
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000e100 	.word	0xe000e100

08002438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	2b00      	cmp	r3, #0
 800244a:	db0a      	blt.n	8002462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	490c      	ldr	r1, [pc, #48]	; (8002484 <__NVIC_SetPriority+0x4c>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	0112      	lsls	r2, r2, #4
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	440b      	add	r3, r1
 800245c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002460:	e00a      	b.n	8002478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4908      	ldr	r1, [pc, #32]	; (8002488 <__NVIC_SetPriority+0x50>)
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	3b04      	subs	r3, #4
 8002470:	0112      	lsls	r2, r2, #4
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	440b      	add	r3, r1
 8002476:	761a      	strb	r2, [r3, #24]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000e100 	.word	0xe000e100
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800248c:	b480      	push	{r7}
 800248e:	b089      	sub	sp, #36	; 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f1c3 0307 	rsb	r3, r3, #7
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	bf28      	it	cs
 80024aa:	2304      	movcs	r3, #4
 80024ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3304      	adds	r3, #4
 80024b2:	2b06      	cmp	r3, #6
 80024b4:	d902      	bls.n	80024bc <NVIC_EncodePriority+0x30>
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3b03      	subs	r3, #3
 80024ba:	e000      	b.n	80024be <NVIC_EncodePriority+0x32>
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c0:	f04f 32ff 	mov.w	r2, #4294967295
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43da      	mvns	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	401a      	ands	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d4:	f04f 31ff 	mov.w	r1, #4294967295
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	43d9      	mvns	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	4313      	orrs	r3, r2
         );
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3724      	adds	r7, #36	; 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024fe:	695a      	ldr	r2, [r3, #20]
 8002500:	4907      	ldr	r1, [pc, #28]	; (8002520 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4313      	orrs	r3, r2
 8002506:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4013      	ands	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002512:	68fb      	ldr	r3, [r7, #12]
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	40021000 	.word	0x40021000

08002524 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800252e:	4a13      	ldr	r2, [pc, #76]	; (800257c <LL_SYSCFG_SetEXTISource+0x58>)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	3302      	adds	r3, #2
 8002536:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	0c1b      	lsrs	r3, r3, #16
 800253e:	43db      	mvns	r3, r3
 8002540:	ea02 0103 	and.w	r1, r2, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	0c1b      	lsrs	r3, r3, #16
 8002548:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	fa03 f202 	lsl.w	r2, r3, r2
 8002562:	4806      	ldr	r0, [pc, #24]	; (800257c <LL_SYSCFG_SetEXTISource+0x58>)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	430a      	orrs	r2, r1
 800256a:	3302      	adds	r3, #2
 800256c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	40010000 	.word	0x40010000

08002580 <LL_GPIO_SetPinMode>:
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	; 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	613b      	str	r3, [r7, #16]
  return result;
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2103      	movs	r1, #3
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	401a      	ands	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	61bb      	str	r3, [r7, #24]
  return result;
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	431a      	orrs	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	601a      	str	r2, [r3, #0]
}
 80025d2:	bf00      	nop
 80025d4:	3724      	adds	r7, #36	; 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_GPIO_SetPinPull>:
{
 80025de:	b480      	push	{r7}
 80025e0:	b089      	sub	sp, #36	; 0x24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	fa93 f3a3 	rbit	r3, r3
 80025f8:	613b      	str	r3, [r7, #16]
  return result;
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	fab3 f383 	clz	r3, r3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	2103      	movs	r1, #3
 8002606:	fa01 f303 	lsl.w	r3, r1, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	401a      	ands	r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	61bb      	str	r3, [r7, #24]
  return result;
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	431a      	orrs	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	60da      	str	r2, [r3, #12]
}
 8002630:	bf00      	nop
 8002632:	3724      	adds	r7, #36	; 0x24
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_GPIO_ResetOutputPin>:
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	; 0x28
 800265c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800265e:	f107 031c 	add.w	r3, r7, #28
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
 8002678:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800267a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800267e:	f7ff ff39 	bl	80024f4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002682:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002686:	f7ff ff35 	bl	80024f4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800268a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800268e:	f7ff ff31 	bl	80024f4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 8002692:	f641 119f 	movw	r1, #6559	; 0x199f
 8002696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800269a:	f7ff ffcf 	bl	800263c <LL_GPIO_ResetOutputPin>
                          |digit2_Pin|digitTime_Pin|segmentC_Pin|segmentE_Pin
                          |digit3_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, digit1_Pin|segmentDP_Pin|segmentG_Pin|segmentD_Pin);
 800269e:	2133      	movs	r1, #51	; 0x33
 80026a0:	482b      	ldr	r0, [pc, #172]	; (8002750 <MX_GPIO_Init+0xf8>)
 80026a2:	f7ff ffcb 	bl	800263c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 80026a6:	f641 139f 	movw	r3, #6559	; 0x199f
 80026aa:	607b      	str	r3, [r7, #4]
                          |digit2_Pin|digitTime_Pin|segmentC_Pin|segmentE_Pin
                          |digit3_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80026ac:	2301      	movs	r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	4619      	mov	r1, r3
 80026c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026c4:	f001 fde6 	bl	8004294 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = digit1_Pin|segmentDP_Pin|segmentG_Pin|segmentD_Pin;
 80026c8:	2333      	movs	r3, #51	; 0x33
 80026ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80026cc:	2301      	movs	r3, #1
 80026ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	4619      	mov	r1, r3
 80026e0:	481b      	ldr	r0, [pc, #108]	; (8002750 <MX_GPIO_Init+0xf8>)
 80026e2:	f001 fdd7 	bl	8004294 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 80026e6:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 80026ea:	2001      	movs	r0, #1
 80026ec:	f7ff ff1a 	bl	8002524 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(button_GPIO_Port, button_Pin, LL_GPIO_PULL_UP);
 80026f0:	2201      	movs	r2, #1
 80026f2:	2108      	movs	r1, #8
 80026f4:	4816      	ldr	r0, [pc, #88]	; (8002750 <MX_GPIO_Init+0xf8>)
 80026f6:	f7ff ff72 	bl	80025de <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(button_GPIO_Port, button_Pin, LL_GPIO_MODE_INPUT);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2108      	movs	r1, #8
 80026fe:	4814      	ldr	r0, [pc, #80]	; (8002750 <MX_GPIO_Init+0xf8>)
 8002700:	f7ff ff3e 	bl	8002580 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8002704:	2308      	movs	r3, #8
 8002706:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8002708:	2300      	movs	r3, #0
 800270a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800270c:	2301      	movs	r3, #1
 800270e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002712:	2300      	movs	r3, #0
 8002714:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8002718:	2301      	movs	r3, #1
 800271a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800271e:	f107 031c 	add.w	r3, r7, #28
 8002722:	4618      	mov	r0, r3
 8002724:	f001 fbbe 	bl	8003ea4 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002728:	f7ff fe5a 	bl	80023e0 <__NVIC_GetPriorityGrouping>
 800272c:	4603      	mov	r3, r0
 800272e:	2200      	movs	r2, #0
 8002730:	2100      	movs	r1, #0
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff feaa 	bl	800248c <NVIC_EncodePriority>
 8002738:	4603      	mov	r3, r0
 800273a:	4619      	mov	r1, r3
 800273c:	2009      	movs	r0, #9
 800273e:	f7ff fe7b 	bl	8002438 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8002742:	2009      	movs	r0, #9
 8002744:	f7ff fe5a 	bl	80023fc <__NVIC_EnableIRQ>

}
 8002748:	bf00      	nop
 800274a:	3728      	adds	r7, #40	; 0x28
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	48000400 	.word	0x48000400

08002754 <__NVIC_GetPriorityGrouping>:
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <__NVIC_GetPriorityGrouping+0x18>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	0a1b      	lsrs	r3, r3, #8
 800275e:	f003 0307 	and.w	r3, r3, #7
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <__NVIC_EnableIRQ>:
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	2b00      	cmp	r3, #0
 8002780:	db0b      	blt.n	800279a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	f003 021f 	and.w	r2, r3, #31
 8002788:	4907      	ldr	r1, [pc, #28]	; (80027a8 <__NVIC_EnableIRQ+0x38>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	2001      	movs	r0, #1
 8002792:	fa00 f202 	lsl.w	r2, r0, r2
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000e100 	.word	0xe000e100

080027ac <__NVIC_SetPriority>:
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	6039      	str	r1, [r7, #0]
 80027b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	db0a      	blt.n	80027d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	490c      	ldr	r1, [pc, #48]	; (80027f8 <__NVIC_SetPriority+0x4c>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	0112      	lsls	r2, r2, #4
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	440b      	add	r3, r1
 80027d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027d4:	e00a      	b.n	80027ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	4908      	ldr	r1, [pc, #32]	; (80027fc <__NVIC_SetPriority+0x50>)
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	3b04      	subs	r3, #4
 80027e4:	0112      	lsls	r2, r2, #4
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	440b      	add	r3, r1
 80027ea:	761a      	strb	r2, [r3, #24]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000e100 	.word	0xe000e100
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <NVIC_EncodePriority>:
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	; 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f1c3 0307 	rsb	r3, r3, #7
 800281a:	2b04      	cmp	r3, #4
 800281c:	bf28      	it	cs
 800281e:	2304      	movcs	r3, #4
 8002820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3304      	adds	r3, #4
 8002826:	2b06      	cmp	r3, #6
 8002828:	d902      	bls.n	8002830 <NVIC_EncodePriority+0x30>
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3b03      	subs	r3, #3
 800282e:	e000      	b.n	8002832 <NVIC_EncodePriority+0x32>
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	f04f 32ff 	mov.w	r2, #4294967295
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43da      	mvns	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	401a      	ands	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002848:	f04f 31ff 	mov.w	r1, #4294967295
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	43d9      	mvns	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002858:	4313      	orrs	r3, r2
}
 800285a:	4618      	mov	r0, r3
 800285c:	3724      	adds	r7, #36	; 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f043 0201 	orr.w	r2, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	601a      	str	r2, [r3, #0]
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	601a      	str	r2, [r3, #0]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	601a      	str	r2, [r3, #0]
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b085      	sub	sp, #20
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80028da:	f023 0306 	bic.w	r3, r3, #6
 80028de:	68b9      	ldr	r1, [r7, #8]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	431a      	orrs	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	60da      	str	r2, [r3, #12]
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	60da      	str	r2, [r3, #12]
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f043 0204 	orr.w	r2, r3, #4
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	601a      	str	r2, [r3, #0]
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 0204 	bic.w	r2, r3, #4
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	601a      	str	r2, [r3, #0]
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b02      	cmp	r3, #2
 8002968:	d101      	bne.n	800296e <LL_I2C_IsActiveFlag_TXIS+0x18>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b04      	cmp	r3, #4
 800298e:	d101      	bne.n	8002994 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	d101      	bne.n	80029ba <LL_I2C_IsActiveFlag_STOP+0x18>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <LL_I2C_IsActiveFlag_STOP+0x1a>
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f043 0220 	orr.w	r2, r3, #32
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	61da      	str	r2, [r3, #28]
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	605a      	str	r2, [r3, #4]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	0d5b      	lsrs	r3, r3, #21
 8002a1e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <LL_I2C_HandleTransfer+0x48>)
 8002a24:	430b      	orrs	r3, r1
 8002a26:	43db      	mvns	r3, r3
 8002a28:	401a      	ands	r2, r3
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4319      	orrs	r1, r3
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	4319      	orrs	r1, r3
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	4319      	orrs	r1, r3
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	03ff7bff 	.word	0x03ff7bff

08002a54 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	b2db      	uxtb	r3, r3
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	460b      	mov	r3, r1
 8002a78:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_AHB1_GRP1_EnableClock>:
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	4907      	ldr	r1, [pc, #28]	; (8002ab8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	40021000 	.word	0x40021000

08002abc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002ac4:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ac6:	69da      	ldr	r2, [r3, #28]
 8002ac8:	4907      	ldr	r1, [pc, #28]	; (8002ae8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ad2:	69da      	ldr	r2, [r3, #28]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ada:	68fb      	ldr	r3, [r7, #12]
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	40021000 	.word	0x40021000

08002aec <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08e      	sub	sp, #56	; 0x38
 8002af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002af2:	f107 031c 	add.w	r3, r7, #28
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	605a      	str	r2, [r3, #4]
 8002afc:	609a      	str	r2, [r3, #8]
 8002afe:	60da      	str	r2, [r3, #12]
 8002b00:	611a      	str	r2, [r3, #16]
 8002b02:	615a      	str	r2, [r3, #20]
 8002b04:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]
 8002b14:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002b16:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002b1a:	f7ff ffb7 	bl	8002a8c <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002b1e:	23c0      	movs	r3, #192	; 0xc0
 8002b20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b22:	2302      	movs	r3, #2
 8002b24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002b26:	2303      	movs	r3, #3
 8002b28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002b32:	2304      	movs	r3, #4
 8002b34:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4821      	ldr	r0, [pc, #132]	; (8002bc0 <MX_I2C1_Init+0xd4>)
 8002b3c:	f001 fbaa 	bl	8004294 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002b40:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002b44:	f7ff ffba 	bl	8002abc <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8002b48:	f7ff fe04 	bl	8002754 <__NVIC_GetPriorityGrouping>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2102      	movs	r1, #2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fe54 	bl	8002800 <NVIC_EncodePriority>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	201f      	movs	r0, #31
 8002b5e:	f7ff fe25 	bl	80027ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002b62:	201f      	movs	r0, #31
 8002b64:	f7ff fe04 	bl	8002770 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8002b68:	4816      	ldr	r0, [pc, #88]	; (8002bc4 <MX_I2C1_Init+0xd8>)
 8002b6a:	f7ff ff3d 	bl	80029e8 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8002b6e:	4815      	ldr	r0, [pc, #84]	; (8002bc4 <MX_I2C1_Init+0xd8>)
 8002b70:	f7ff fec1 	bl	80028f6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002b74:	4813      	ldr	r0, [pc, #76]	; (8002bc4 <MX_I2C1_Init+0xd8>)
 8002b76:	f7ff fe96 	bl	80028a6 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8002b7a:	4812      	ldr	r0, [pc, #72]	; (8002bc4 <MX_I2C1_Init+0xd8>)
 8002b7c:	f7ff fe83 	bl	8002886 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8002b84:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <MX_I2C1_Init+0xdc>)
 8002b86:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8002b90:	2302      	movs	r3, #2
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002b9c:	f107 031c 	add.w	r3, r7, #28
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4808      	ldr	r0, [pc, #32]	; (8002bc4 <MX_I2C1_Init+0xd8>)
 8002ba4:	f001 fc89 	bl	80044ba <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2100      	movs	r1, #0
 8002bac:	4805      	ldr	r0, [pc, #20]	; (8002bc4 <MX_I2C1_Init+0xd8>)
 8002bae:	f7ff fe8a 	bl	80028c6 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8002bb2:	4804      	ldr	r0, [pc, #16]	; (8002bc4 <MX_I2C1_Init+0xd8>)
 8002bb4:	f7ff fe57 	bl	8002866 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8002bb8:	bf00      	nop
 8002bba:	3738      	adds	r7, #56	; 0x38
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	48000400 	.word	0x48000400
 8002bc4:	40005400 	.word	0x40005400
 8002bc8:	2000090e 	.word	0x2000090e

08002bcc <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	4608      	mov	r0, r1
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4623      	mov	r3, r4
 8002bdc:	71fb      	strb	r3, [r7, #7]
 8002bde:	4603      	mov	r3, r0
 8002be0:	71bb      	strb	r3, [r7, #6]
 8002be2:	460b      	mov	r3, r1
 8002be4:	717b      	strb	r3, [r7, #5]
 8002be6:	4613      	mov	r3, r2
 8002be8:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8002bea:	793b      	ldrb	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8002bf0:	79bb      	ldrb	r3, [r7, #6]
 8002bf2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bf6:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002bf8:	7979      	ldrb	r1, [r7, #5]
 8002bfa:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <i2c_master_write+0x80>)
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	2302      	movs	r3, #2
 8002c06:	2200      	movs	r2, #0
 8002c08:	4811      	ldr	r0, [pc, #68]	; (8002c50 <i2c_master_write+0x84>)
 8002c0a:	f7ff fefd 	bl	8002a08 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8002c0e:	79bb      	ldrb	r3, [r7, #6]
 8002c10:	4619      	mov	r1, r3
 8002c12:	480f      	ldr	r0, [pc, #60]	; (8002c50 <i2c_master_write+0x84>)
 8002c14:	f7ff ff2b 	bl	8002a6e <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002c18:	e00a      	b.n	8002c30 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8002c1a:	480d      	ldr	r0, [pc, #52]	; (8002c50 <i2c_master_write+0x84>)
 8002c1c:	f7ff fe9b 	bl	8002956 <LL_I2C_IsActiveFlag_TXIS>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d004      	beq.n	8002c30 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4809      	ldr	r0, [pc, #36]	; (8002c50 <i2c_master_write+0x84>)
 8002c2c:	f7ff ff1f 	bl	8002a6e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002c30:	4807      	ldr	r0, [pc, #28]	; (8002c50 <i2c_master_write+0x84>)
 8002c32:	f7ff feb6 	bl	80029a2 <LL_I2C_IsActiveFlag_STOP>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0ee      	beq.n	8002c1a <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8002c3c:	4804      	ldr	r0, [pc, #16]	; (8002c50 <i2c_master_write+0x84>)
 8002c3e:	f7ff fec3 	bl	80029c8 <LL_I2C_ClearFlag_STOP>
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd90      	pop	{r4, r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	80002000 	.word	0x80002000
 8002c50:	40005400 	.word	0x40005400

08002c54 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	4608      	mov	r0, r1
 8002c5e:	4611      	mov	r1, r2
 8002c60:	461a      	mov	r2, r3
 8002c62:	4603      	mov	r3, r0
 8002c64:	70fb      	strb	r3, [r7, #3]
 8002c66:	460b      	mov	r3, r1
 8002c68:	70bb      	strb	r3, [r7, #2]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8002c6e:	4a30      	ldr	r2, [pc, #192]	; (8002d30 <i2c_master_read+0xdc>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8002c74:	7c3b      	ldrb	r3, [r7, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8002c7a:	78bb      	ldrb	r3, [r7, #2]
 8002c7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c80:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8002c82:	4b2c      	ldr	r3, [pc, #176]	; (8002d34 <i2c_master_read+0xe0>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8002c88:	482b      	ldr	r0, [pc, #172]	; (8002d38 <i2c_master_read+0xe4>)
 8002c8a:	f7ff fe44 	bl	8002916 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002c8e:	7879      	ldrb	r1, [r7, #1]
 8002c90:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <i2c_master_read+0xe8>)
 8002c92:	9301      	str	r3, [sp, #4]
 8002c94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	4826      	ldr	r0, [pc, #152]	; (8002d38 <i2c_master_read+0xe4>)
 8002ca0:	f7ff feb2 	bl	8002a08 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002ca4:	e00a      	b.n	8002cbc <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8002ca6:	4824      	ldr	r0, [pc, #144]	; (8002d38 <i2c_master_read+0xe4>)
 8002ca8:	f7ff fe55 	bl	8002956 <LL_I2C_IsActiveFlag_TXIS>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d004      	beq.n	8002cbc <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8002cb2:	78bb      	ldrb	r3, [r7, #2]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4820      	ldr	r0, [pc, #128]	; (8002d38 <i2c_master_read+0xe4>)
 8002cb8:	f7ff fed9 	bl	8002a6e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002cbc:	481e      	ldr	r0, [pc, #120]	; (8002d38 <i2c_master_read+0xe4>)
 8002cbe:	f7ff fe70 	bl	80029a2 <LL_I2C_IsActiveFlag_STOP>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0ee      	beq.n	8002ca6 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8002cc8:	481b      	ldr	r0, [pc, #108]	; (8002d38 <i2c_master_read+0xe4>)
 8002cca:	f7ff fe7d 	bl	80029c8 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8002cce:	bf00      	nop
 8002cd0:	4819      	ldr	r0, [pc, #100]	; (8002d38 <i2c_master_read+0xe4>)
 8002cd2:	f7ff fe66 	bl	80029a2 <LL_I2C_IsActiveFlag_STOP>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f9      	bne.n	8002cd0 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8002cdc:	7879      	ldrb	r1, [r7, #1]
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	4a17      	ldr	r2, [pc, #92]	; (8002d40 <i2c_master_read+0xec>)
 8002ce2:	9201      	str	r2, [sp, #4]
 8002ce4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ce8:	9200      	str	r2, [sp, #0]
 8002cea:	2200      	movs	r2, #0
 8002cec:	4812      	ldr	r0, [pc, #72]	; (8002d38 <i2c_master_read+0xe4>)
 8002cee:	f7ff fe8b 	bl	8002a08 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8002cf2:	bf00      	nop
 8002cf4:	4810      	ldr	r0, [pc, #64]	; (8002d38 <i2c_master_read+0xe4>)
 8002cf6:	f7ff fe54 	bl	80029a2 <LL_I2C_IsActiveFlag_STOP>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f9      	beq.n	8002cf4 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8002d00:	480d      	ldr	r0, [pc, #52]	; (8002d38 <i2c_master_read+0xe4>)
 8002d02:	f7ff fe61 	bl	80029c8 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8002d06:	480c      	ldr	r0, [pc, #48]	; (8002d38 <i2c_master_read+0xe4>)
 8002d08:	f7ff fe15 	bl	8002936 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <i2c_master_read+0xe4>)
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <i2c_master_read+0xe4>)
 8002d12:	f043 0310 	orr.w	r3, r3, #16
 8002d16:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <i2c_master_read+0xf0>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8002d1e:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <i2c_master_read+0xe0>)
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8002d24:	4b02      	ldr	r3, [pc, #8]	; (8002d30 <i2c_master_read+0xdc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	200000b8 	.word	0x200000b8
 8002d34:	20000099 	.word	0x20000099
 8002d38:	40005400 	.word	0x40005400
 8002d3c:	80002000 	.word	0x80002000
 8002d40:	80002400 	.word	0x80002400
 8002d44:	2000009a 	.word	0x2000009a

08002d48 <I2C1_EV_IRQHandler>:
	(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
	end_of_read_flag = 0;
}

void I2C1_EV_IRQHandler(void)
{
 8002d48:	b598      	push	{r3, r4, r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
  /* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8002d4c:	4812      	ldr	r0, [pc, #72]	; (8002d98 <I2C1_EV_IRQHandler+0x50>)
 8002d4e:	f7ff fe15 	bl	800297c <LL_I2C_IsActiveFlag_RXNE>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01c      	beq.n	8002d92 <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8002d58:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <I2C1_EV_IRQHandler+0x54>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <I2C1_EV_IRQHandler+0x58>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	1c59      	adds	r1, r3, #1
 8002d64:	b2c8      	uxtb	r0, r1
 8002d66:	490e      	ldr	r1, [pc, #56]	; (8002da0 <I2C1_EV_IRQHandler+0x58>)
 8002d68:	7008      	strb	r0, [r1, #0]
 8002d6a:	18d4      	adds	r4, r2, r3
 8002d6c:	480a      	ldr	r0, [pc, #40]	; (8002d98 <I2C1_EV_IRQHandler+0x50>)
 8002d6e:	f7ff fe71 	bl	8002a54 <LL_I2C_ReceiveData8>
 8002d72:	4603      	mov	r3, r0
 8002d74:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <I2C1_EV_IRQHandler+0x58>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b13      	cmp	r3, #19
 8002d7e:	d903      	bls.n	8002d88 <I2C1_EV_IRQHandler+0x40>
 8002d80:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <I2C1_EV_IRQHandler+0x58>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	e001      	b.n	8002d8c <I2C1_EV_IRQHandler+0x44>
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <I2C1_EV_IRQHandler+0x58>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <I2C1_EV_IRQHandler+0x5c>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd98      	pop	{r3, r4, r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40005400 	.word	0x40005400
 8002d9c:	200000b8 	.word	0x200000b8
 8002da0:	2000009a 	.word	0x2000009a
 8002da4:	20000099 	.word	0x20000099

08002da8 <lsm6ds0_read_byte>:
#include "lps25hb.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	4603      	mov	r3, r0
 8002db0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 8002db6:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <lsm6ds0_read_byte+0x30>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	79fa      	ldrb	r2, [r7, #7]
 8002dbc:	f107 000f 	add.w	r0, r7, #15
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	9100      	str	r1, [sp, #0]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	f7ff ff45 	bl	8002c54 <i2c_master_read>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	781b      	ldrb	r3, [r3, #0]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	2000000a 	.word	0x2000000a

08002ddc <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	460a      	mov	r2, r1
 8002de6:	71fb      	strb	r3, [r7, #7]
 8002de8:	4613      	mov	r3, r2
 8002dea:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <lsm6ds0_write_byte+0x28>)
 8002dee:	781a      	ldrb	r2, [r3, #0]
 8002df0:	79f9      	ldrb	r1, [r7, #7]
 8002df2:	79b8      	ldrb	r0, [r7, #6]
 8002df4:	2300      	movs	r3, #0
 8002df6:	f7ff fee9 	bl	8002bcc <i2c_master_write>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	2000000a 	.word	0x2000000a

08002e08 <lsm6ds0_init>:
	*z = (zz >> 4) / 1000.0f;
}


uint8_t lsm6ds0_init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8002e12:	2064      	movs	r0, #100	; 0x64
 8002e14:	f001 ffb0 	bl	8004d78 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8002e18:	200f      	movs	r0, #15
 8002e1a:	f7ff ffc5 	bl	8002da8 <lsm6ds0_read_byte>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 8002e22:	79bb      	ldrb	r3, [r7, #6]
 8002e24:	2b68      	cmp	r3, #104	; 0x68
 8002e26:	d102      	bne.n	8002e2e <lsm6ds0_init+0x26>
	{
		status = 1;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	71fb      	strb	r3, [r7, #7]
 8002e2c:	e00f      	b.n	8002e4e <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <lsm6ds0_init+0x60>)
 8002e30:	22d6      	movs	r2, #214	; 0xd6
 8002e32:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8002e34:	200f      	movs	r0, #15
 8002e36:	f7ff ffb7 	bl	8002da8 <lsm6ds0_read_byte>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 8002e3e:	79bb      	ldrb	r3, [r7, #6]
 8002e40:	2b68      	cmp	r3, #104	; 0x68
 8002e42:	d102      	bne.n	8002e4a <lsm6ds0_init+0x42>
		{
			status = 1;
 8002e44:	2301      	movs	r3, #1
 8002e46:	71fb      	strb	r3, [r7, #7]
 8002e48:	e001      	b.n	8002e4e <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8002e52:	797b      	ldrb	r3, [r7, #5]
 8002e54:	4619      	mov	r1, r3
 8002e56:	2010      	movs	r0, #16
 8002e58:	f7ff ffc0 	bl	8002ddc <lsm6ds0_write_byte>

	return status;
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	2000000a 	.word	0x2000000a

08002e6c <__NVIC_SetPriorityGrouping>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e9e:	4a04      	ldr	r2, [pc, #16]	; (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	60d3      	str	r3, [r2, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <LL_RCC_HSI_Enable+0x1c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a04      	ldr	r2, [pc, #16]	; (8002ed0 <LL_RCC_HSI_Enable+0x1c>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6013      	str	r3, [r2, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000

08002ed4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <LL_RCC_HSI_IsReady+0x20>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	40021000 	.word	0x40021000

08002ef8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002f00:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4904      	ldr	r1, [pc, #16]	; (8002f20 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000

08002f24 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <LL_RCC_SetSysClkSource+0x24>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f023 0203 	bic.w	r2, r3, #3
 8002f34:	4904      	ldr	r1, [pc, #16]	; (8002f48 <LL_RCC_SetSysClkSource+0x24>)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	40021000 	.word	0x40021000

08002f4c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002f50:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <LL_RCC_GetSysClkSource+0x18>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 030c 	and.w	r3, r3, #12
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000

08002f68 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <LL_RCC_SetAHBPrescaler+0x24>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f78:	4904      	ldr	r1, [pc, #16]	; (8002f8c <LL_RCC_SetAHBPrescaler+0x24>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	40021000 	.word	0x40021000

08002f90 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fa0:	4904      	ldr	r1, [pc, #16]	; (8002fb4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	40021000 	.word	0x40021000

08002fb8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002fc0:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <LL_RCC_SetAPB2Prescaler+0x24>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fc8:	4904      	ldr	r1, [pc, #16]	; (8002fdc <LL_RCC_SetAPB2Prescaler+0x24>)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	40021000 	.word	0x40021000

08002fe0 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8002fe8:	4b08      	ldr	r3, [pc, #32]	; (800300c <LL_RCC_SetI2CClockSource+0x2c>)
 8002fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	0e1b      	lsrs	r3, r3, #24
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ffa:	4904      	ldr	r1, [pc, #16]	; (800300c <LL_RCC_SetI2CClockSource+0x2c>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	630b      	str	r3, [r1, #48]	; 0x30
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	40021000 	.word	0x40021000

08003010 <LL_APB1_GRP1_EnableClock>:
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003018:	4b08      	ldr	r3, [pc, #32]	; (800303c <LL_APB1_GRP1_EnableClock+0x2c>)
 800301a:	69da      	ldr	r2, [r3, #28]
 800301c:	4907      	ldr	r1, [pc, #28]	; (800303c <LL_APB1_GRP1_EnableClock+0x2c>)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4313      	orrs	r3, r2
 8003022:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4013      	ands	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800302e:	68fb      	ldr	r3, [r7, #12]
}
 8003030:	bf00      	nop
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	40021000 	.word	0x40021000

08003040 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003048:	4b08      	ldr	r3, [pc, #32]	; (800306c <LL_APB2_GRP1_EnableClock+0x2c>)
 800304a:	699a      	ldr	r2, [r3, #24]
 800304c:	4907      	ldr	r1, [pc, #28]	; (800306c <LL_APB2_GRP1_EnableClock+0x2c>)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4313      	orrs	r3, r2
 8003052:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003054:	4b05      	ldr	r3, [pc, #20]	; (800306c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003056:	699a      	ldr	r2, [r3, #24]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4013      	ands	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800305e:	68fb      	ldr	r3, [r7, #12]
}
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	40021000 	.word	0x40021000

08003070 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <LL_FLASH_SetLatency+0x24>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 0207 	bic.w	r2, r3, #7
 8003080:	4904      	ldr	r1, [pc, #16]	; (8003094 <LL_FLASH_SetLatency+0x24>)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4313      	orrs	r3, r2
 8003086:	600b      	str	r3, [r1, #0]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	40022000 	.word	0x40022000

08003098 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <LL_FLASH_GetLatency+0x18>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0307 	and.w	r3, r3, #7
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40022000 	.word	0x40022000

080030b4 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f043 0201 	orr.w	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	601a      	str	r2, [r3, #0]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f043 0201 	orr.w	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	60da      	str	r2, [r3, #12]
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80030f8:	2001      	movs	r0, #1
 80030fa:	f7ff ffa1 	bl	8003040 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80030fe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003102:	f7ff ff85 	bl	8003010 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003106:	2003      	movs	r0, #3
 8003108:	f7ff feb0 	bl	8002e6c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800310c:	f000 f836 	bl	800317c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003110:	f7ff faa2 	bl	8002658 <MX_GPIO_Init>
  MX_TIM2_Init();
 8003114:	f000 fd0c 	bl	8003b30 <MX_TIM2_Init>
  MX_I2C1_Init();
 8003118:	f7ff fce8 	bl	8002aec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //LL_TIM_EnableIT_CC2(TIM2);
  LL_TIM_EnableIT_UPDATE(TIM2);
 800311c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003120:	f7ff ffd8 	bl	80030d4 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 8003124:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003128:	f7ff ffc4 	bl	80030b4 <LL_TIM_EnableCounter>

  lsm6ds0_init();
 800312c:	f7ff fe6c 	bl	8002e08 <lsm6ds0_init>
  temperature_init();
 8003130:	f7fd ff10 	bl	8000f54 <temperature_init>
  humidity_init();
 8003134:	f7fd fe3c 	bl	8000db0 <humidity_init>
  pressure_init();
 8003138:	f7fd fda0 	bl	8000c7c <pressure_init>

  resetAllDigits();
 800313c:	f7fe fa38 	bl	80015b0 <resetAllDigits>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //lsm6ds0_get_acc(acc, (acc+1), (acc+2));
	  if(mode == 0){
 8003140:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <main+0x84>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d102      	bne.n	800314e <main+0x5a>
		  printTemperature();
 8003148:	f000 f84e 	bl	80031e8 <printTemperature>
 800314c:	e7f8      	b.n	8003140 <main+0x4c>
	  }
	  else if(mode == 1){
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <main+0x84>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d102      	bne.n	800315c <main+0x68>
		  printHumidity();
 8003156:	f000 f8d3 	bl	8003300 <printHumidity>
 800315a:	e7f1      	b.n	8003140 <main+0x4c>
	  }
	  else if(mode == 2){
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <main+0x84>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d102      	bne.n	800316a <main+0x76>
		  printPressure();
 8003164:	f000 f8fe 	bl	8003364 <printPressure>
 8003168:	e7ea      	b.n	8003140 <main+0x4c>
	  }
	  else if(mode == 3){
 800316a:	4b03      	ldr	r3, [pc, #12]	; (8003178 <main+0x84>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b03      	cmp	r3, #3
 8003170:	d1e6      	bne.n	8003140 <main+0x4c>
		  printAltitude();
 8003172:	f000 f931 	bl	80033d8 <printAltitude>
	  if(mode == 0){
 8003176:	e7e3      	b.n	8003140 <main+0x4c>
 8003178:	2000009b 	.word	0x2000009b

0800317c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8003180:	2000      	movs	r0, #0
 8003182:	f7ff ff75 	bl	8003070 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8003186:	bf00      	nop
 8003188:	f7ff ff86 	bl	8003098 <LL_FLASH_GetLatency>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1fa      	bne.n	8003188 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8003192:	f7ff fe8f 	bl	8002eb4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8003196:	bf00      	nop
 8003198:	f7ff fe9c 	bl	8002ed4 <LL_RCC_HSI_IsReady>
 800319c:	4603      	mov	r3, r0
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d1fa      	bne.n	8003198 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80031a2:	2010      	movs	r0, #16
 80031a4:	f7ff fea8 	bl	8002ef8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80031a8:	2000      	movs	r0, #0
 80031aa:	f7ff fedd 	bl	8002f68 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80031ae:	2000      	movs	r0, #0
 80031b0:	f7ff feee 	bl	8002f90 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80031b4:	2000      	movs	r0, #0
 80031b6:	f7ff feff 	bl	8002fb8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7ff feb2 	bl	8002f24 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80031c0:	bf00      	nop
 80031c2:	f7ff fec3 	bl	8002f4c <LL_RCC_GetSysClkSource>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1fa      	bne.n	80031c2 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80031cc:	4805      	ldr	r0, [pc, #20]	; (80031e4 <SystemClock_Config+0x68>)
 80031ce:	f001 fdc5 	bl	8004d5c <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80031d2:	4804      	ldr	r0, [pc, #16]	; (80031e4 <SystemClock_Config+0x68>)
 80031d4:	f001 fdf6 	bl	8004dc4 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80031d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80031dc:	f7ff ff00 	bl	8002fe0 <LL_RCC_SetI2CClockSource>
}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	007a1200 	.word	0x007a1200

080031e8 <printTemperature>:

/* USER CODE BEGIN 4 */
void printTemperature(void){
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
	char valueString[15];
	int16_t temperature = HTS221_Get_Temperature();
 80031ee:	f7fd fed2 	bl	8000f96 <HTS221_Get_Temperature>
 80031f2:	4603      	mov	r3, r0
 80031f4:	82fb      	strh	r3, [r7, #22]
	sprintf(valueString, "%d", temperature);
 80031f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80031fa:	1d3b      	adds	r3, r7, #4
 80031fc:	493a      	ldr	r1, [pc, #232]	; (80032e8 <printTemperature+0x100>)
 80031fe:	4618      	mov	r0, r3
 8003200:	f001 fe46 	bl	8004e90 <siprintf>
	memset(displayText, '\0', 15);
 8003204:	220f      	movs	r2, #15
 8003206:	2100      	movs	r1, #0
 8003208:	4838      	ldr	r0, [pc, #224]	; (80032ec <printTemperature+0x104>)
 800320a:	f001 fe39 	bl	8004e80 <memset>
	strcat(displayText, "tEMP_");
 800320e:	4837      	ldr	r0, [pc, #220]	; (80032ec <printTemperature+0x104>)
 8003210:	f7fc ffde 	bl	80001d0 <strlen>
 8003214:	4603      	mov	r3, r0
 8003216:	461a      	mov	r2, r3
 8003218:	4b34      	ldr	r3, [pc, #208]	; (80032ec <printTemperature+0x104>)
 800321a:	4413      	add	r3, r2
 800321c:	4a34      	ldr	r2, [pc, #208]	; (80032f0 <printTemperature+0x108>)
 800321e:	6810      	ldr	r0, [r2, #0]
 8003220:	6018      	str	r0, [r3, #0]
 8003222:	8892      	ldrh	r2, [r2, #4]
 8003224:	809a      	strh	r2, [r3, #4]
	if(valueString[0]=='-'){
 8003226:	793b      	ldrb	r3, [r7, #4]
 8003228:	2b2d      	cmp	r3, #45	; 0x2d
 800322a:	d119      	bne.n	8003260 <printTemperature+0x78>
		strncat(displayText, valueString, 3);
 800322c:	1d3b      	adds	r3, r7, #4
 800322e:	2203      	movs	r2, #3
 8003230:	4619      	mov	r1, r3
 8003232:	482e      	ldr	r0, [pc, #184]	; (80032ec <printTemperature+0x104>)
 8003234:	f001 fe5b 	bl	8004eee <strncat>
		strcat(displayText, ".");
 8003238:	482c      	ldr	r0, [pc, #176]	; (80032ec <printTemperature+0x104>)
 800323a:	f7fc ffc9 	bl	80001d0 <strlen>
 800323e:	4603      	mov	r3, r0
 8003240:	461a      	mov	r2, r3
 8003242:	4b2a      	ldr	r3, [pc, #168]	; (80032ec <printTemperature+0x104>)
 8003244:	4413      	add	r3, r2
 8003246:	492b      	ldr	r1, [pc, #172]	; (80032f4 <printTemperature+0x10c>)
 8003248:	461a      	mov	r2, r3
 800324a:	460b      	mov	r3, r1
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	8013      	strh	r3, [r2, #0]
		strncat(displayText, &valueString[3],1);
 8003250:	1d3b      	adds	r3, r7, #4
 8003252:	3303      	adds	r3, #3
 8003254:	2201      	movs	r2, #1
 8003256:	4619      	mov	r1, r3
 8003258:	4824      	ldr	r0, [pc, #144]	; (80032ec <printTemperature+0x104>)
 800325a:	f001 fe48 	bl	8004eee <strncat>
 800325e:	e03c      	b.n	80032da <printTemperature+0xf2>
	}
	else if(temperature > 999){
 8003260:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003264:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003268:	db0c      	blt.n	8003284 <printTemperature+0x9c>
		strcat(displayText, "99.9");
 800326a:	4820      	ldr	r0, [pc, #128]	; (80032ec <printTemperature+0x104>)
 800326c:	f7fc ffb0 	bl	80001d0 <strlen>
 8003270:	4603      	mov	r3, r0
 8003272:	461a      	mov	r2, r3
 8003274:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <printTemperature+0x104>)
 8003276:	4413      	add	r3, r2
 8003278:	4a1f      	ldr	r2, [pc, #124]	; (80032f8 <printTemperature+0x110>)
 800327a:	6810      	ldr	r0, [r2, #0]
 800327c:	6018      	str	r0, [r3, #0]
 800327e:	7912      	ldrb	r2, [r2, #4]
 8003280:	711a      	strb	r2, [r3, #4]
 8003282:	e02a      	b.n	80032da <printTemperature+0xf2>
	}
	else if(temperature < (-999)){
 8003284:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003288:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800328c:	dc0c      	bgt.n	80032a8 <printTemperature+0xc0>
		strcat(displayText, "-99.9");
 800328e:	4817      	ldr	r0, [pc, #92]	; (80032ec <printTemperature+0x104>)
 8003290:	f7fc ff9e 	bl	80001d0 <strlen>
 8003294:	4603      	mov	r3, r0
 8003296:	461a      	mov	r2, r3
 8003298:	4b14      	ldr	r3, [pc, #80]	; (80032ec <printTemperature+0x104>)
 800329a:	4413      	add	r3, r2
 800329c:	4a17      	ldr	r2, [pc, #92]	; (80032fc <printTemperature+0x114>)
 800329e:	6810      	ldr	r0, [r2, #0]
 80032a0:	6018      	str	r0, [r3, #0]
 80032a2:	8892      	ldrh	r2, [r2, #4]
 80032a4:	809a      	strh	r2, [r3, #4]
 80032a6:	e018      	b.n	80032da <printTemperature+0xf2>
	}
	else{
		strncat(displayText, valueString, 2);
 80032a8:	1d3b      	adds	r3, r7, #4
 80032aa:	2202      	movs	r2, #2
 80032ac:	4619      	mov	r1, r3
 80032ae:	480f      	ldr	r0, [pc, #60]	; (80032ec <printTemperature+0x104>)
 80032b0:	f001 fe1d 	bl	8004eee <strncat>
		strcat(displayText, ".");
 80032b4:	480d      	ldr	r0, [pc, #52]	; (80032ec <printTemperature+0x104>)
 80032b6:	f7fc ff8b 	bl	80001d0 <strlen>
 80032ba:	4603      	mov	r3, r0
 80032bc:	461a      	mov	r2, r3
 80032be:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <printTemperature+0x104>)
 80032c0:	4413      	add	r3, r2
 80032c2:	490c      	ldr	r1, [pc, #48]	; (80032f4 <printTemperature+0x10c>)
 80032c4:	461a      	mov	r2, r3
 80032c6:	460b      	mov	r3, r1
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	8013      	strh	r3, [r2, #0]
		strncat(displayText, &valueString[2],1);
 80032cc:	1d3b      	adds	r3, r7, #4
 80032ce:	3302      	adds	r3, #2
 80032d0:	2201      	movs	r2, #1
 80032d2:	4619      	mov	r1, r3
 80032d4:	4805      	ldr	r0, [pc, #20]	; (80032ec <printTemperature+0x104>)
 80032d6:	f001 fe0a 	bl	8004eee <strncat>
	}
	setDisplayText(displayText);
 80032da:	4804      	ldr	r0, [pc, #16]	; (80032ec <printTemperature+0x104>)
 80032dc:	f7fd fef4 	bl	80010c8 <setDisplayText>
}
 80032e0:	bf00      	nop
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	08008290 	.word	0x08008290
 80032ec:	200000c8 	.word	0x200000c8
 80032f0:	08008294 	.word	0x08008294
 80032f4:	0800829c 	.word	0x0800829c
 80032f8:	080082a0 	.word	0x080082a0
 80032fc:	080082a8 	.word	0x080082a8

08003300 <printHumidity>:

void printHumidity(void){
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
	char valueString[15];
	int16_t humidity = HTS221_Get_Humidity();
 8003306:	f7fd fd74 	bl	8000df2 <HTS221_Get_Humidity>
 800330a:	4603      	mov	r3, r0
 800330c:	82fb      	strh	r3, [r7, #22]
	sprintf(valueString, "%d", humidity);
 800330e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003312:	1d3b      	adds	r3, r7, #4
 8003314:	4910      	ldr	r1, [pc, #64]	; (8003358 <printHumidity+0x58>)
 8003316:	4618      	mov	r0, r3
 8003318:	f001 fdba 	bl	8004e90 <siprintf>
	memset(displayText, '\0', 15);
 800331c:	220f      	movs	r2, #15
 800331e:	2100      	movs	r1, #0
 8003320:	480e      	ldr	r0, [pc, #56]	; (800335c <printHumidity+0x5c>)
 8003322:	f001 fdad 	bl	8004e80 <memset>
	strcat(displayText, "HUM_");
 8003326:	480d      	ldr	r0, [pc, #52]	; (800335c <printHumidity+0x5c>)
 8003328:	f7fc ff52 	bl	80001d0 <strlen>
 800332c:	4603      	mov	r3, r0
 800332e:	461a      	mov	r2, r3
 8003330:	4b0a      	ldr	r3, [pc, #40]	; (800335c <printHumidity+0x5c>)
 8003332:	4413      	add	r3, r2
 8003334:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <printHumidity+0x60>)
 8003336:	6810      	ldr	r0, [r2, #0]
 8003338:	6018      	str	r0, [r3, #0]
 800333a:	7912      	ldrb	r2, [r2, #4]
 800333c:	711a      	strb	r2, [r3, #4]
	strncat(displayText, valueString, 2);
 800333e:	1d3b      	adds	r3, r7, #4
 8003340:	2202      	movs	r2, #2
 8003342:	4619      	mov	r1, r3
 8003344:	4805      	ldr	r0, [pc, #20]	; (800335c <printHumidity+0x5c>)
 8003346:	f001 fdd2 	bl	8004eee <strncat>
	setDisplayText(displayText);
 800334a:	4804      	ldr	r0, [pc, #16]	; (800335c <printHumidity+0x5c>)
 800334c:	f7fd febc 	bl	80010c8 <setDisplayText>
}
 8003350:	bf00      	nop
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	08008290 	.word	0x08008290
 800335c:	200000c8 	.word	0x200000c8
 8003360:	080082b0 	.word	0x080082b0

08003364 <printPressure>:

void printPressure(void){
 8003364:	b5b0      	push	{r4, r5, r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
	char valueString[15];
	float pressure = 0;
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
	pressure = (float)get_pressure();
 8003370:	f7fd fca2 	bl	8000cb8 <get_pressure>
 8003374:	ed87 0a05 	vstr	s0, [r7, #20]
	gcvt(pressure, 6, valueString);
 8003378:	6978      	ldr	r0, [r7, #20]
 800337a:	f7fd f8e5 	bl	8000548 <__aeabi_f2d>
 800337e:	4604      	mov	r4, r0
 8003380:	460d      	mov	r5, r1
 8003382:	1d3b      	adds	r3, r7, #4
 8003384:	4619      	mov	r1, r3
 8003386:	2006      	movs	r0, #6
 8003388:	ec45 4b10 	vmov	d0, r4, r5
 800338c:	f001 fd2a 	bl	8004de4 <gcvt>
	memset(displayText, '\0', 15);
 8003390:	220f      	movs	r2, #15
 8003392:	2100      	movs	r1, #0
 8003394:	480d      	ldr	r0, [pc, #52]	; (80033cc <printPressure+0x68>)
 8003396:	f001 fd73 	bl	8004e80 <memset>
	strcat(displayText, "bar_");
 800339a:	480c      	ldr	r0, [pc, #48]	; (80033cc <printPressure+0x68>)
 800339c:	f7fc ff18 	bl	80001d0 <strlen>
 80033a0:	4603      	mov	r3, r0
 80033a2:	461a      	mov	r2, r3
 80033a4:	4b09      	ldr	r3, [pc, #36]	; (80033cc <printPressure+0x68>)
 80033a6:	4413      	add	r3, r2
 80033a8:	4a09      	ldr	r2, [pc, #36]	; (80033d0 <printPressure+0x6c>)
 80033aa:	6810      	ldr	r0, [r2, #0]
 80033ac:	6018      	str	r0, [r3, #0]
 80033ae:	7912      	ldrb	r2, [r2, #4]
 80033b0:	711a      	strb	r2, [r3, #4]
	strcat(displayText, valueString);
 80033b2:	1d3b      	adds	r3, r7, #4
 80033b4:	4619      	mov	r1, r3
 80033b6:	4805      	ldr	r0, [pc, #20]	; (80033cc <printPressure+0x68>)
 80033b8:	f001 fd8a 	bl	8004ed0 <strcat>
	setDisplayText(displayText);
 80033bc:	4803      	ldr	r0, [pc, #12]	; (80033cc <printPressure+0x68>)
 80033be:	f7fd fe83 	bl	80010c8 <setDisplayText>
}
 80033c2:	bf00      	nop
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bdb0      	pop	{r4, r5, r7, pc}
 80033ca:	bf00      	nop
 80033cc:	200000c8 	.word	0x200000c8
 80033d0:	080082b8 	.word	0x080082b8
 80033d4:	00000000 	.word	0x00000000

080033d8 <printAltitude>:

void printAltitude(void){
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	; 0x28
 80033dc:	af00      	add	r7, sp, #0
	char valueString[15];
	int16_t temperature = HTS221_Get_Temperature();
 80033de:	f7fd fdda 	bl	8000f96 <HTS221_Get_Temperature>
 80033e2:	4603      	mov	r3, r0
 80033e4:	84fb      	strh	r3, [r7, #38]	; 0x26
	float pressure = (float)get_pressure();
 80033e6:	f7fd fc67 	bl	8000cb8 <get_pressure>
 80033ea:	ed87 0a08 	vstr	s0, [r7, #32]

	float tempVar1 = powf((1013.25/pressure),1/5.257)-1;
 80033ee:	eddf 6a68 	vldr	s13, [pc, #416]	; 8003590 <printAltitude+0x1b8>
 80033f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80033f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033fa:	eddf 0a66 	vldr	s1, [pc, #408]	; 8003594 <printAltitude+0x1bc>
 80033fe:	eeb0 0a47 	vmov.f32	s0, s14
 8003402:	f004 faf5 	bl	80079f0 <powf>
 8003406:	eef0 7a40 	vmov.f32	s15, s0
 800340a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800340e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003412:	edc7 7a07 	vstr	s15, [r7, #28]
	float tempVar2 = (float)temperature/10+273.15;
 8003416:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003422:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003426:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800342a:	ee16 0a90 	vmov	r0, s13
 800342e:	f7fd f88b 	bl	8000548 <__aeabi_f2d>
 8003432:	a353      	add	r3, pc, #332	; (adr r3, 8003580 <printAltitude+0x1a8>)
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	f7fc ff28 	bl	800028c <__adddf3>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4610      	mov	r0, r2
 8003442:	4619      	mov	r1, r3
 8003444:	f7fd fb9a 	bl	8000b7c <__aeabi_d2f>
 8003448:	4603      	mov	r3, r0
 800344a:	61bb      	str	r3, [r7, #24]
	float altitude = (tempVar1*tempVar2)/0.0065;
 800344c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003450:	edd7 7a06 	vldr	s15, [r7, #24]
 8003454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003458:	ee17 0a90 	vmov	r0, s15
 800345c:	f7fd f874 	bl	8000548 <__aeabi_f2d>
 8003460:	a349      	add	r3, pc, #292	; (adr r3, 8003588 <printAltitude+0x1b0>)
 8003462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003466:	f7fd f9f1 	bl	800084c <__aeabi_ddiv>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4610      	mov	r0, r2
 8003470:	4619      	mov	r1, r3
 8003472:	f7fd fb83 	bl	8000b7c <__aeabi_d2f>
 8003476:	4603      	mov	r3, r0
 8003478:	617b      	str	r3, [r7, #20]

	memset(displayText, '\0', 15);
 800347a:	220f      	movs	r2, #15
 800347c:	2100      	movs	r1, #0
 800347e:	4846      	ldr	r0, [pc, #280]	; (8003598 <printAltitude+0x1c0>)
 8003480:	f001 fcfe 	bl	8004e80 <memset>
	int altitudeInt = (int)floor(10*altitude);
 8003484:	edd7 7a05 	vldr	s15, [r7, #20]
 8003488:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800348c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003490:	ee17 0a90 	vmov	r0, s15
 8003494:	f7fd f858 	bl	8000548 <__aeabi_f2d>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	ec43 2b10 	vmov	d0, r2, r3
 80034a0:	f004 fa26 	bl	80078f0 <floor>
 80034a4:	ec53 2b10 	vmov	r2, r3, d0
 80034a8:	4610      	mov	r0, r2
 80034aa:	4619      	mov	r1, r3
 80034ac:	f7fd fb3e 	bl	8000b2c <__aeabi_d2iz>
 80034b0:	4603      	mov	r3, r0
 80034b2:	613b      	str	r3, [r7, #16]
	if(altitudeInt>=0){
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	db2b      	blt.n	8003512 <printAltitude+0x13a>
		sprintf(valueString, "%05d", altitudeInt);
 80034ba:	463b      	mov	r3, r7
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4937      	ldr	r1, [pc, #220]	; (800359c <printAltitude+0x1c4>)
 80034c0:	4618      	mov	r0, r3
 80034c2:	f001 fce5 	bl	8004e90 <siprintf>
		strcat(displayText, "ALt_");
 80034c6:	4834      	ldr	r0, [pc, #208]	; (8003598 <printAltitude+0x1c0>)
 80034c8:	f7fc fe82 	bl	80001d0 <strlen>
 80034cc:	4603      	mov	r3, r0
 80034ce:	461a      	mov	r2, r3
 80034d0:	4b31      	ldr	r3, [pc, #196]	; (8003598 <printAltitude+0x1c0>)
 80034d2:	4413      	add	r3, r2
 80034d4:	4a32      	ldr	r2, [pc, #200]	; (80035a0 <printAltitude+0x1c8>)
 80034d6:	6810      	ldr	r0, [r2, #0]
 80034d8:	6018      	str	r0, [r3, #0]
 80034da:	7912      	ldrb	r2, [r2, #4]
 80034dc:	711a      	strb	r2, [r3, #4]
		strncat(displayText, valueString, 4);
 80034de:	463b      	mov	r3, r7
 80034e0:	2204      	movs	r2, #4
 80034e2:	4619      	mov	r1, r3
 80034e4:	482c      	ldr	r0, [pc, #176]	; (8003598 <printAltitude+0x1c0>)
 80034e6:	f001 fd02 	bl	8004eee <strncat>
		strcat(displayText, ".");
 80034ea:	482b      	ldr	r0, [pc, #172]	; (8003598 <printAltitude+0x1c0>)
 80034ec:	f7fc fe70 	bl	80001d0 <strlen>
 80034f0:	4603      	mov	r3, r0
 80034f2:	461a      	mov	r2, r3
 80034f4:	4b28      	ldr	r3, [pc, #160]	; (8003598 <printAltitude+0x1c0>)
 80034f6:	4413      	add	r3, r2
 80034f8:	492a      	ldr	r1, [pc, #168]	; (80035a4 <printAltitude+0x1cc>)
 80034fa:	461a      	mov	r2, r3
 80034fc:	460b      	mov	r3, r1
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	8013      	strh	r3, [r2, #0]
		strncat(displayText, &valueString[4],1);
 8003502:	463b      	mov	r3, r7
 8003504:	3304      	adds	r3, #4
 8003506:	2201      	movs	r2, #1
 8003508:	4619      	mov	r1, r3
 800350a:	4823      	ldr	r0, [pc, #140]	; (8003598 <printAltitude+0x1c0>)
 800350c:	f001 fcef 	bl	8004eee <strncat>
 8003510:	e02d      	b.n	800356e <printAltitude+0x196>
	}
	else if(altitudeInt<0){
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	da2a      	bge.n	800356e <printAltitude+0x196>
		sprintf(valueString, "%06d", altitudeInt);
 8003518:	463b      	mov	r3, r7
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4922      	ldr	r1, [pc, #136]	; (80035a8 <printAltitude+0x1d0>)
 800351e:	4618      	mov	r0, r3
 8003520:	f001 fcb6 	bl	8004e90 <siprintf>
		strcat(displayText, "ALt_");
 8003524:	481c      	ldr	r0, [pc, #112]	; (8003598 <printAltitude+0x1c0>)
 8003526:	f7fc fe53 	bl	80001d0 <strlen>
 800352a:	4603      	mov	r3, r0
 800352c:	461a      	mov	r2, r3
 800352e:	4b1a      	ldr	r3, [pc, #104]	; (8003598 <printAltitude+0x1c0>)
 8003530:	4413      	add	r3, r2
 8003532:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <printAltitude+0x1c8>)
 8003534:	6810      	ldr	r0, [r2, #0]
 8003536:	6018      	str	r0, [r3, #0]
 8003538:	7912      	ldrb	r2, [r2, #4]
 800353a:	711a      	strb	r2, [r3, #4]
		strncat(displayText, valueString, 5);
 800353c:	463b      	mov	r3, r7
 800353e:	2205      	movs	r2, #5
 8003540:	4619      	mov	r1, r3
 8003542:	4815      	ldr	r0, [pc, #84]	; (8003598 <printAltitude+0x1c0>)
 8003544:	f001 fcd3 	bl	8004eee <strncat>
		strcat(displayText, ".");
 8003548:	4813      	ldr	r0, [pc, #76]	; (8003598 <printAltitude+0x1c0>)
 800354a:	f7fc fe41 	bl	80001d0 <strlen>
 800354e:	4603      	mov	r3, r0
 8003550:	461a      	mov	r2, r3
 8003552:	4b11      	ldr	r3, [pc, #68]	; (8003598 <printAltitude+0x1c0>)
 8003554:	4413      	add	r3, r2
 8003556:	4913      	ldr	r1, [pc, #76]	; (80035a4 <printAltitude+0x1cc>)
 8003558:	461a      	mov	r2, r3
 800355a:	460b      	mov	r3, r1
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	8013      	strh	r3, [r2, #0]
		strncat(displayText, &valueString[5],1);
 8003560:	463b      	mov	r3, r7
 8003562:	3305      	adds	r3, #5
 8003564:	2201      	movs	r2, #1
 8003566:	4619      	mov	r1, r3
 8003568:	480b      	ldr	r0, [pc, #44]	; (8003598 <printAltitude+0x1c0>)
 800356a:	f001 fcc0 	bl	8004eee <strncat>
	}
	setDisplayText(displayText);
 800356e:	480a      	ldr	r0, [pc, #40]	; (8003598 <printAltitude+0x1c0>)
 8003570:	f7fd fdaa 	bl	80010c8 <setDisplayText>
}
 8003574:	bf00      	nop
 8003576:	3728      	adds	r7, #40	; 0x28
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	f3af 8000 	nop.w
 8003580:	66666666 	.word	0x66666666
 8003584:	40711266 	.word	0x40711266
 8003588:	76c8b439 	.word	0x76c8b439
 800358c:	3f7a9fbe 	.word	0x3f7a9fbe
 8003590:	447d5000 	.word	0x447d5000
 8003594:	3e42c9b4 	.word	0x3e42c9b4
 8003598:	200000c8 	.word	0x200000c8
 800359c:	080082c0 	.word	0x080082c0
 80035a0:	080082c8 	.word	0x080082c8
 80035a4:	0800829c 	.word	0x0800829c
 80035a8:	080082d0 	.word	0x080082d0

080035ac <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80035b4:	4b07      	ldr	r3, [pc, #28]	; (80035d4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80035b6:	695a      	ldr	r2, [r3, #20]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4013      	ands	r3, r2
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	429a      	cmp	r2, r3
 80035c0:	bf0c      	ite	eq
 80035c2:	2301      	moveq	r3, #1
 80035c4:	2300      	movne	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	40010400 	.word	0x40010400

080035d8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80035e0:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6153      	str	r3, [r2, #20]
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40010400 	.word	0x40010400

080035f8 <LL_TIM_ClearFlag_UPDATE>:
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f06f 0201 	mvn.w	r2, #1
 8003606:	611a      	str	r2, [r3, #16]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800363a:	b480      	push	{r7}
 800363c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800363e:	e7fe      	b.n	800363e <NMI_Handler+0x4>

08003640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003644:	e7fe      	b.n	8003644 <HardFault_Handler+0x4>

08003646 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003646:	b480      	push	{r7}
 8003648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800364a:	e7fe      	b.n	800364a <MemManage_Handler+0x4>

0800364c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003650:	e7fe      	b.n	8003650 <BusFault_Handler+0x4>

08003652 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003652:	b480      	push	{r7}
 8003654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003656:	e7fe      	b.n	8003656 <UsageFault_Handler+0x4>

08003658 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003666:	b480      	push	{r7}
 8003668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003678:	bf00      	nop
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003682:	b480      	push	{r7}
 8003684:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003686:	bf00      	nop
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8003694:	2008      	movs	r0, #8
 8003696:	f7ff ff89 	bl	80035ac <LL_EXTI_IsActiveFlag_0_31>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01c      	beq.n	80036da <EXTI3_IRQHandler+0x4a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 80036a0:	2008      	movs	r0, #8
 80036a2:	f7ff ff99 	bl	80035d8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_3 */
    if(mode == 3){
 80036a6:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <EXTI3_IRQHandler+0x50>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d106      	bne.n	80036bc <EXTI3_IRQHandler+0x2c>
		mode = 0;
 80036ae:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <EXTI3_IRQHandler+0x50>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]
		displayTextPos = 0;
 80036b4:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <EXTI3_IRQHandler+0x54>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
 80036ba:	e008      	b.n	80036ce <EXTI3_IRQHandler+0x3e>
	}
    else{
		mode++;
 80036bc:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <EXTI3_IRQHandler+0x50>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	3301      	adds	r3, #1
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <EXTI3_IRQHandler+0x50>)
 80036c6:	701a      	strb	r2, [r3, #0]
		displayTextPos = 0;
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <EXTI3_IRQHandler+0x54>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	701a      	strb	r2, [r3, #0]
	}
	LL_mDelay(100);
 80036ce:	2064      	movs	r0, #100	; 0x64
 80036d0:	f001 fb52 	bl	8004d78 <LL_mDelay>
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 80036d4:	2008      	movs	r0, #8
 80036d6:	f7ff ff7f 	bl	80035d8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	2000009b 	.word	0x2000009b
 80036e4:	20000094 	.word	0x20000094

080036e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 80036ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80036f0:	f7ff ff90 	bl	8003614 <LL_TIM_IsActiveFlag_UPDATE>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <TIM2_IRQHandler+0x16>
		updateDisplay();
 80036fa:	f7fd fcf9 	bl	80010f0 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM2);
 80036fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003702:	f7ff ff79 	bl	80035f8 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}

0800370a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800370a:	b480      	push	{r7}
 800370c:	af00      	add	r7, sp, #0
	return 1;
 800370e:	2301      	movs	r3, #1
}
 8003710:	4618      	mov	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <_kill>:

int _kill(int pid, int sig)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003724:	f001 fb82 	bl	8004e2c <__errno>
 8003728:	4603      	mov	r3, r0
 800372a:	2216      	movs	r2, #22
 800372c:	601a      	str	r2, [r3, #0]
	return -1;
 800372e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <_exit>:

void _exit (int status)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003742:	f04f 31ff 	mov.w	r1, #4294967295
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff ffe7 	bl	800371a <_kill>
	while (1) {}		/* Make sure we hang here */
 800374c:	e7fe      	b.n	800374c <_exit+0x12>

0800374e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	e00a      	b.n	8003776 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003760:	f3af 8000 	nop.w
 8003764:	4601      	mov	r1, r0
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	60ba      	str	r2, [r7, #8]
 800376c:	b2ca      	uxtb	r2, r1
 800376e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	3301      	adds	r3, #1
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	429a      	cmp	r2, r3
 800377c:	dbf0      	blt.n	8003760 <_read+0x12>
	}

return len;
 800377e:	687b      	ldr	r3, [r7, #4]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	e009      	b.n	80037ae <_write+0x26>
	{
		__io_putchar(*ptr++);
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	60ba      	str	r2, [r7, #8]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	3301      	adds	r3, #1
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	dbf1      	blt.n	800379a <_write+0x12>
	}
	return len;
 80037b6:	687b      	ldr	r3, [r7, #4]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <_close>:

int _close(int file)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	return -1;
 80037c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037e8:	605a      	str	r2, [r3, #4]
	return 0;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <_isatty>:

int _isatty(int file)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	return 1;
 8003800:	2301      	movs	r3, #1
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800380e:	b480      	push	{r7}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
	return 0;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003830:	4a14      	ldr	r2, [pc, #80]	; (8003884 <_sbrk+0x5c>)
 8003832:	4b15      	ldr	r3, [pc, #84]	; (8003888 <_sbrk+0x60>)
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800383c:	4b13      	ldr	r3, [pc, #76]	; (800388c <_sbrk+0x64>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003844:	4b11      	ldr	r3, [pc, #68]	; (800388c <_sbrk+0x64>)
 8003846:	4a12      	ldr	r2, [pc, #72]	; (8003890 <_sbrk+0x68>)
 8003848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800384a:	4b10      	ldr	r3, [pc, #64]	; (800388c <_sbrk+0x64>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4413      	add	r3, r2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	429a      	cmp	r2, r3
 8003856:	d207      	bcs.n	8003868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003858:	f001 fae8 	bl	8004e2c <__errno>
 800385c:	4603      	mov	r3, r0
 800385e:	220c      	movs	r2, #12
 8003860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003862:	f04f 33ff 	mov.w	r3, #4294967295
 8003866:	e009      	b.n	800387c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003868:	4b08      	ldr	r3, [pc, #32]	; (800388c <_sbrk+0x64>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800386e:	4b07      	ldr	r3, [pc, #28]	; (800388c <_sbrk+0x64>)
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	4a05      	ldr	r2, [pc, #20]	; (800388c <_sbrk+0x64>)
 8003878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800387a:	68fb      	ldr	r3, [r7, #12]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	20003000 	.word	0x20003000
 8003888:	00000400 	.word	0x00000400
 800388c:	2000009c 	.word	0x2000009c
 8003890:	200000f8 	.word	0x200000f8

08003894 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003898:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <SystemInit+0x20>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389e:	4a05      	ldr	r2, [pc, #20]	; (80038b4 <SystemInit+0x20>)
 80038a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038a8:	bf00      	nop
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <__NVIC_GetPriorityGrouping>:
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038bc:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <__NVIC_GetPriorityGrouping+0x18>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	0a1b      	lsrs	r3, r3, #8
 80038c2:	f003 0307 	and.w	r3, r3, #7
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <__NVIC_EnableIRQ>:
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	db0b      	blt.n	80038fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	f003 021f 	and.w	r2, r3, #31
 80038ec:	4907      	ldr	r1, [pc, #28]	; (800390c <__NVIC_EnableIRQ+0x38>)
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	2001      	movs	r0, #1
 80038f6:	fa00 f202 	lsl.w	r2, r0, r2
 80038fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	e000e100 	.word	0xe000e100

08003910 <__NVIC_SetPriority>:
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	6039      	str	r1, [r7, #0]
 800391a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800391c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003920:	2b00      	cmp	r3, #0
 8003922:	db0a      	blt.n	800393a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	b2da      	uxtb	r2, r3
 8003928:	490c      	ldr	r1, [pc, #48]	; (800395c <__NVIC_SetPriority+0x4c>)
 800392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392e:	0112      	lsls	r2, r2, #4
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	440b      	add	r3, r1
 8003934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003938:	e00a      	b.n	8003950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	b2da      	uxtb	r2, r3
 800393e:	4908      	ldr	r1, [pc, #32]	; (8003960 <__NVIC_SetPriority+0x50>)
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	3b04      	subs	r3, #4
 8003948:	0112      	lsls	r2, r2, #4
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	440b      	add	r3, r1
 800394e:	761a      	strb	r2, [r3, #24]
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	e000e100 	.word	0xe000e100
 8003960:	e000ed00 	.word	0xe000ed00

08003964 <NVIC_EncodePriority>:
{
 8003964:	b480      	push	{r7}
 8003966:	b089      	sub	sp, #36	; 0x24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f1c3 0307 	rsb	r3, r3, #7
 800397e:	2b04      	cmp	r3, #4
 8003980:	bf28      	it	cs
 8003982:	2304      	movcs	r3, #4
 8003984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	3304      	adds	r3, #4
 800398a:	2b06      	cmp	r3, #6
 800398c:	d902      	bls.n	8003994 <NVIC_EncodePriority+0x30>
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3b03      	subs	r3, #3
 8003992:	e000      	b.n	8003996 <NVIC_EncodePriority+0x32>
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003998:	f04f 32ff 	mov.w	r2, #4294967295
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43da      	mvns	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	401a      	ands	r2, r3
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039ac:	f04f 31ff 	mov.w	r1, #4294967295
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	fa01 f303 	lsl.w	r3, r1, r3
 80039b6:	43d9      	mvns	r1, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039bc:	4313      	orrs	r3, r2
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3724      	adds	r7, #36	; 0x24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <LL_APB1_GRP1_EnableClock>:
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80039d4:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80039d6:	69da      	ldr	r2, [r3, #28]
 80039d8:	4907      	ldr	r1, [pc, #28]	; (80039f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80039e2:	69da      	ldr	r2, [r3, #28]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4013      	ands	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039ea:	68fb      	ldr	r3, [r7, #12]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	40021000 	.word	0x40021000

080039fc <LL_TIM_DisableARRPreload>:
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	601a      	str	r2, [r3, #0]
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <LL_TIM_OC_DisableFast>:
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d028      	beq.n	8003a7e <LL_TIM_OC_DisableFast+0x62>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d023      	beq.n	8003a7a <LL_TIM_OC_DisableFast+0x5e>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b10      	cmp	r3, #16
 8003a36:	d01e      	beq.n	8003a76 <LL_TIM_OC_DisableFast+0x5a>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b40      	cmp	r3, #64	; 0x40
 8003a3c:	d019      	beq.n	8003a72 <LL_TIM_OC_DisableFast+0x56>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a44:	d013      	beq.n	8003a6e <LL_TIM_OC_DisableFast+0x52>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4c:	d00d      	beq.n	8003a6a <LL_TIM_OC_DisableFast+0x4e>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a54:	d007      	beq.n	8003a66 <LL_TIM_OC_DisableFast+0x4a>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5c:	d101      	bne.n	8003a62 <LL_TIM_OC_DisableFast+0x46>
 8003a5e:	2307      	movs	r3, #7
 8003a60:	e00e      	b.n	8003a80 <LL_TIM_OC_DisableFast+0x64>
 8003a62:	2308      	movs	r3, #8
 8003a64:	e00c      	b.n	8003a80 <LL_TIM_OC_DisableFast+0x64>
 8003a66:	2306      	movs	r3, #6
 8003a68:	e00a      	b.n	8003a80 <LL_TIM_OC_DisableFast+0x64>
 8003a6a:	2305      	movs	r3, #5
 8003a6c:	e008      	b.n	8003a80 <LL_TIM_OC_DisableFast+0x64>
 8003a6e:	2304      	movs	r3, #4
 8003a70:	e006      	b.n	8003a80 <LL_TIM_OC_DisableFast+0x64>
 8003a72:	2303      	movs	r3, #3
 8003a74:	e004      	b.n	8003a80 <LL_TIM_OC_DisableFast+0x64>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e002      	b.n	8003a80 <LL_TIM_OC_DisableFast+0x64>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <LL_TIM_OC_DisableFast+0x64>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3318      	adds	r3, #24
 8003a86:	4619      	mov	r1, r3
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	4a0b      	ldr	r2, [pc, #44]	; (8003ab8 <LL_TIM_OC_DisableFast+0x9c>)
 8003a8c:	5cd3      	ldrb	r3, [r2, r3]
 8003a8e:	440b      	add	r3, r1
 8003a90:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	4908      	ldr	r1, [pc, #32]	; (8003abc <LL_TIM_OC_DisableFast+0xa0>)
 8003a9a:	5ccb      	ldrb	r3, [r1, r3]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	408b      	lsls	r3, r1
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	401a      	ands	r2, r3
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	601a      	str	r2, [r3, #0]
}
 8003aaa:	bf00      	nop
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	080082d8 	.word	0x080082d8
 8003abc:	080082e4 	.word	0x080082e4

08003ac0 <LL_TIM_SetClockSource>:
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003ad2:	f023 0307 	bic.w	r3, r3, #7
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	609a      	str	r2, [r3, #8]
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <LL_TIM_SetTriggerOutput>:
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	605a      	str	r2, [r3, #4]
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <LL_TIM_DisableMasterSlaveMode>:
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	609a      	str	r2, [r3, #8]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08e      	sub	sp, #56	; 0x38
 8003b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	605a      	str	r2, [r3, #4]
 8003b40:	609a      	str	r2, [r3, #8]
 8003b42:	60da      	str	r2, [r3, #12]
 8003b44:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003b46:	1d3b      	adds	r3, r7, #4
 8003b48:	2220      	movs	r2, #32
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f001 f997 	bl	8004e80 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8003b52:	2001      	movs	r0, #1
 8003b54:	f7ff ff3a 	bl	80039cc <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003b58:	f7ff feae 	bl	80038b8 <__NVIC_GetPriorityGrouping>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2100      	movs	r1, #0
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff fefe 	bl	8003964 <NVIC_EncodePriority>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	201c      	movs	r0, #28
 8003b6e:	f7ff fecf 	bl	8003910 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8003b72:	201c      	movs	r0, #28
 8003b74:	f7ff feae 	bl	80038d4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8003b78:	f240 331f 	movw	r3, #799	; 0x31f
 8003b7c:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 49;
 8003b82:	2331      	movs	r3, #49	; 0x31
 8003b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003b86:	2300      	movs	r3, #0
 8003b88:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8003b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b8e:	4619      	mov	r1, r3
 8003b90:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003b94:	f000 fd5e 	bl	8004654 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8003b98:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003b9c:	f7ff ff2e 	bl	80039fc <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003ba6:	f7ff ff8b 	bl	8003ac0 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8003baa:	2300      	movs	r3, #0
 8003bac:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003bbe:	1d3b      	adds	r3, r7, #4
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003bc8:	f000 fdb6 	bl	8004738 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8003bcc:	2101      	movs	r1, #1
 8003bce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003bd2:	f7ff ff23 	bl	8003a1c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003bdc:	f7ff ff85 	bl	8003aea <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8003be0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003be4:	f7ff ff94 	bl	8003b10 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003be8:	bf00      	nop
 8003bea:	3738      	adds	r7, #56	; 0x38
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c28 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bf4:	480d      	ldr	r0, [pc, #52]	; (8003c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8003bf6:	490e      	ldr	r1, [pc, #56]	; (8003c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003bf8:	4a0e      	ldr	r2, [pc, #56]	; (8003c34 <LoopForever+0xe>)
  movs r3, #0
 8003bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bfc:	e002      	b.n	8003c04 <LoopCopyDataInit>

08003bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c02:	3304      	adds	r3, #4

08003c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c08:	d3f9      	bcc.n	8003bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c0a:	4a0b      	ldr	r2, [pc, #44]	; (8003c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c0c:	4c0b      	ldr	r4, [pc, #44]	; (8003c3c <LoopForever+0x16>)
  movs r3, #0
 8003c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c10:	e001      	b.n	8003c16 <LoopFillZerobss>

08003c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c14:	3204      	adds	r2, #4

08003c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c18:	d3fb      	bcc.n	8003c12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c1a:	f7ff fe3b 	bl	8003894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c1e:	f001 f90b 	bl	8004e38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c22:	f7ff fa67 	bl	80030f4 <main>

08003c26 <LoopForever>:

LoopForever:
    b LoopForever
 8003c26:	e7fe      	b.n	8003c26 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003c28:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8003c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c30:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003c34:	080085e4 	.word	0x080085e4
  ldr r2, =_sbss
 8003c38:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003c3c:	200000f4 	.word	0x200000f4

08003c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c40:	e7fe      	b.n	8003c40 <ADC1_2_IRQHandler>
	...

08003c44 <LL_EXTI_EnableIT_0_31>:
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8003c4c:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <LL_EXTI_EnableIT_0_31+0x20>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4904      	ldr	r1, [pc, #16]	; (8003c64 <LL_EXTI_EnableIT_0_31+0x20>)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	600b      	str	r3, [r1, #0]
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	40010400 	.word	0x40010400

08003c68 <LL_EXTI_EnableIT_32_63>:
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003c70:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <LL_EXTI_EnableIT_32_63+0x20>)
 8003c72:	6a1a      	ldr	r2, [r3, #32]
 8003c74:	4904      	ldr	r1, [pc, #16]	; (8003c88 <LL_EXTI_EnableIT_32_63+0x20>)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	620b      	str	r3, [r1, #32]
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	40010400 	.word	0x40010400

08003c8c <LL_EXTI_DisableIT_0_31>:
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <LL_EXTI_DisableIT_0_31+0x24>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	4904      	ldr	r1, [pc, #16]	; (8003cb0 <LL_EXTI_DisableIT_0_31+0x24>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	600b      	str	r3, [r1, #0]
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40010400 	.word	0x40010400

08003cb4 <LL_EXTI_DisableIT_32_63>:
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <LL_EXTI_DisableIT_32_63+0x24>)
 8003cbe:	6a1a      	ldr	r2, [r3, #32]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	4904      	ldr	r1, [pc, #16]	; (8003cd8 <LL_EXTI_DisableIT_32_63+0x24>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	620b      	str	r3, [r1, #32]
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40010400 	.word	0x40010400

08003cdc <LL_EXTI_EnableEvent_0_31>:
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <LL_EXTI_EnableEvent_0_31+0x20>)
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	4904      	ldr	r1, [pc, #16]	; (8003cfc <LL_EXTI_EnableEvent_0_31+0x20>)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	604b      	str	r3, [r1, #4]
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40010400 	.word	0x40010400

08003d00 <LL_EXTI_EnableEvent_32_63>:
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003d0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d0c:	4904      	ldr	r1, [pc, #16]	; (8003d20 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	40010400 	.word	0x40010400

08003d24 <LL_EXTI_DisableEvent_0_31>:
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003d2c:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	43db      	mvns	r3, r3
 8003d34:	4904      	ldr	r1, [pc, #16]	; (8003d48 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	604b      	str	r3, [r1, #4]
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40010400 	.word	0x40010400

08003d4c <LL_EXTI_DisableEvent_32_63>:
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	4904      	ldr	r1, [pc, #16]	; (8003d70 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40010400 	.word	0x40010400

08003d74 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	4904      	ldr	r1, [pc, #16]	; (8003d94 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	608b      	str	r3, [r1, #8]
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	40010400 	.word	0x40010400

08003d98 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003da2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003da4:	4904      	ldr	r1, [pc, #16]	; (8003db8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	40010400 	.word	0x40010400

08003dbc <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003dc4:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	4904      	ldr	r1, [pc, #16]	; (8003de0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	608b      	str	r3, [r1, #8]
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40010400 	.word	0x40010400

08003de4 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003dec:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003dee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	43db      	mvns	r3, r3
 8003df4:	4904      	ldr	r1, [pc, #16]	; (8003e08 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40010400 	.word	0x40010400

08003e0c <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	4904      	ldr	r1, [pc, #16]	; (8003e2c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60cb      	str	r3, [r1, #12]
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	40010400 	.word	0x40010400

08003e30 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3c:	4904      	ldr	r1, [pc, #16]	; (8003e50 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	40010400 	.word	0x40010400

08003e54 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003e5c:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	43db      	mvns	r3, r3
 8003e64:	4904      	ldr	r1, [pc, #16]	; (8003e78 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003e66:	4013      	ands	r3, r2
 8003e68:	60cb      	str	r3, [r1, #12]
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40010400 	.word	0x40010400

08003e7c <LL_EXTI_DisableFallingTrig_32_63>:
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003e84:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	4904      	ldr	r1, [pc, #16]	; (8003ea0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40010400 	.word	0x40010400

08003ea4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8003eac:	2300      	movs	r3, #0
 8003eae:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	7a1b      	ldrb	r3, [r3, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 80cd 	beq.w	8004054 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d061      	beq.n	8003f86 <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	7a5b      	ldrb	r3, [r3, #9]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d01c      	beq.n	8003f04 <LL_EXTI_Init+0x60>
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	dc25      	bgt.n	8003f1a <LL_EXTI_Init+0x76>
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <LL_EXTI_Init+0x34>
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d00b      	beq.n	8003eee <LL_EXTI_Init+0x4a>
 8003ed6:	e020      	b.n	8003f1a <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff ff21 	bl	8003d24 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff feac 	bl	8003c44 <LL_EXTI_EnableIT_0_31>
          break;
 8003eec:	e018      	b.n	8003f20 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff feca 	bl	8003c8c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff feed 	bl	8003cdc <LL_EXTI_EnableEvent_0_31>
          break;
 8003f02:	e00d      	b.n	8003f20 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff fe9b 	bl	8003c44 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fee2 	bl	8003cdc <LL_EXTI_EnableEvent_0_31>
          break;
 8003f18:	e002      	b.n	8003f20 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	73fb      	strb	r3, [r7, #15]
          break;
 8003f1e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	7a9b      	ldrb	r3, [r3, #10]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d02e      	beq.n	8003f86 <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	7a9b      	ldrb	r3, [r3, #10]
 8003f2c:	2b03      	cmp	r3, #3
 8003f2e:	d01c      	beq.n	8003f6a <LL_EXTI_Init+0xc6>
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	dc25      	bgt.n	8003f80 <LL_EXTI_Init+0xdc>
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d002      	beq.n	8003f3e <LL_EXTI_Init+0x9a>
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d00b      	beq.n	8003f54 <LL_EXTI_Init+0xb0>
 8003f3c:	e020      	b.n	8003f80 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff ff86 	bl	8003e54 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff ff11 	bl	8003d74 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003f52:	e019      	b.n	8003f88 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff ff2f 	bl	8003dbc <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff ff52 	bl	8003e0c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003f68:	e00e      	b.n	8003f88 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff ff00 	bl	8003d74 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff ff47 	bl	8003e0c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003f7e:	e003      	b.n	8003f88 <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
            break;
 8003f84:	e000      	b.n	8003f88 <LL_EXTI_Init+0xe4>
        }
      }
 8003f86:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d076      	beq.n	800407e <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	7a5b      	ldrb	r3, [r3, #9]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d01c      	beq.n	8003fd2 <LL_EXTI_Init+0x12e>
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	dc25      	bgt.n	8003fe8 <LL_EXTI_Init+0x144>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <LL_EXTI_Init+0x102>
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d00b      	beq.n	8003fbc <LL_EXTI_Init+0x118>
 8003fa4:	e020      	b.n	8003fe8 <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff fece 	bl	8003d4c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff fe57 	bl	8003c68 <LL_EXTI_EnableIT_32_63>
          break;
 8003fba:	e018      	b.n	8003fee <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fe77 	bl	8003cb4 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff fe98 	bl	8003d00 <LL_EXTI_EnableEvent_32_63>
          break;
 8003fd0:	e00d      	b.n	8003fee <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff fe46 	bl	8003c68 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff fe8d 	bl	8003d00 <LL_EXTI_EnableEvent_32_63>
          break;
 8003fe6:	e002      	b.n	8003fee <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	73fb      	strb	r3, [r7, #15]
          break;
 8003fec:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	7a9b      	ldrb	r3, [r3, #10]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d043      	beq.n	800407e <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	7a9b      	ldrb	r3, [r3, #10]
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d01c      	beq.n	8004038 <LL_EXTI_Init+0x194>
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	dc25      	bgt.n	800404e <LL_EXTI_Init+0x1aa>
 8004002:	2b01      	cmp	r3, #1
 8004004:	d002      	beq.n	800400c <LL_EXTI_Init+0x168>
 8004006:	2b02      	cmp	r3, #2
 8004008:	d00b      	beq.n	8004022 <LL_EXTI_Init+0x17e>
 800400a:	e020      	b.n	800404e <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff ff33 	bl	8003e7c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff febc 	bl	8003d98 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8004020:	e02e      	b.n	8004080 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff fedc 	bl	8003de4 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff fefd 	bl	8003e30 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8004036:	e023      	b.n	8004080 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff feab 	bl	8003d98 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff fef2 	bl	8003e30 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800404c:	e018      	b.n	8004080 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	73fb      	strb	r3, [r7, #15]
            break;
 8004052:	e015      	b.n	8004080 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fe17 	bl	8003c8c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff fe5e 	bl	8003d24 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff fe21 	bl	8003cb4 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff fe68 	bl	8003d4c <LL_EXTI_DisableEvent_32_63>
 800407c:	e000      	b.n	8004080 <LL_EXTI_Init+0x1dc>
      }
 800407e:	bf00      	nop
#endif
  }
  return status;
 8004080:	7bfb      	ldrb	r3, [r7, #15]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <LL_GPIO_SetPinMode>:
{
 800408a:	b480      	push	{r7}
 800408c:	b089      	sub	sp, #36	; 0x24
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	fa93 f3a3 	rbit	r3, r3
 80040a4:	613b      	str	r3, [r7, #16]
  return result;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	fab3 f383 	clz	r3, r3
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	2103      	movs	r1, #3
 80040b2:	fa01 f303 	lsl.w	r3, r1, r3
 80040b6:	43db      	mvns	r3, r3
 80040b8:	401a      	ands	r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	61bb      	str	r3, [r7, #24]
  return result;
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	fab3 f383 	clz	r3, r3
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	fa01 f303 	lsl.w	r3, r1, r3
 80040d6:	431a      	orrs	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	601a      	str	r2, [r3, #0]
}
 80040dc:	bf00      	nop
 80040de:	3724      	adds	r7, #36	; 0x24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <LL_GPIO_SetPinOutputType>:
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	43db      	mvns	r3, r3
 80040fc:	401a      	ands	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	fb01 f303 	mul.w	r3, r1, r3
 8004106:	431a      	orrs	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	605a      	str	r2, [r3, #4]
}
 800410c:	bf00      	nop
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <LL_GPIO_SetPinSpeed>:
{
 8004118:	b480      	push	{r7}
 800411a:	b089      	sub	sp, #36	; 0x24
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	fa93 f3a3 	rbit	r3, r3
 8004132:	613b      	str	r3, [r7, #16]
  return result;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	fab3 f383 	clz	r3, r3
 800413a:	b2db      	uxtb	r3, r3
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	2103      	movs	r1, #3
 8004140:	fa01 f303 	lsl.w	r3, r1, r3
 8004144:	43db      	mvns	r3, r3
 8004146:	401a      	ands	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	fa93 f3a3 	rbit	r3, r3
 8004152:	61bb      	str	r3, [r7, #24]
  return result;
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	fab3 f383 	clz	r3, r3
 800415a:	b2db      	uxtb	r3, r3
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	431a      	orrs	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	609a      	str	r2, [r3, #8]
}
 800416a:	bf00      	nop
 800416c:	3724      	adds	r7, #36	; 0x24
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <LL_GPIO_SetPinPull>:
{
 8004176:	b480      	push	{r7}
 8004178:	b089      	sub	sp, #36	; 0x24
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	fa93 f3a3 	rbit	r3, r3
 8004190:	613b      	str	r3, [r7, #16]
  return result;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	fab3 f383 	clz	r3, r3
 8004198:	b2db      	uxtb	r3, r3
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	2103      	movs	r1, #3
 800419e:	fa01 f303 	lsl.w	r3, r1, r3
 80041a2:	43db      	mvns	r3, r3
 80041a4:	401a      	ands	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	fa93 f3a3 	rbit	r3, r3
 80041b0:	61bb      	str	r3, [r7, #24]
  return result;
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	fab3 f383 	clz	r3, r3
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	fa01 f303 	lsl.w	r3, r1, r3
 80041c2:	431a      	orrs	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	60da      	str	r2, [r3, #12]
}
 80041c8:	bf00      	nop
 80041ca:	3724      	adds	r7, #36	; 0x24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <LL_GPIO_SetAFPin_0_7>:
{
 80041d4:	b480      	push	{r7}
 80041d6:	b089      	sub	sp, #36	; 0x24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a1a      	ldr	r2, [r3, #32]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	fa93 f3a3 	rbit	r3, r3
 80041ee:	613b      	str	r3, [r7, #16]
  return result;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	fab3 f383 	clz	r3, r3
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	210f      	movs	r1, #15
 80041fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004200:	43db      	mvns	r3, r3
 8004202:	401a      	ands	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	fa93 f3a3 	rbit	r3, r3
 800420e:	61bb      	str	r3, [r7, #24]
  return result;
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	fab3 f383 	clz	r3, r3
 8004216:	b2db      	uxtb	r3, r3
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	fa01 f303 	lsl.w	r3, r1, r3
 8004220:	431a      	orrs	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	621a      	str	r2, [r3, #32]
}
 8004226:	bf00      	nop
 8004228:	3724      	adds	r7, #36	; 0x24
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <LL_GPIO_SetAFPin_8_15>:
{
 8004232:	b480      	push	{r7}
 8004234:	b089      	sub	sp, #36	; 0x24
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	0a1b      	lsrs	r3, r3, #8
 8004246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	fa93 f3a3 	rbit	r3, r3
 800424e:	613b      	str	r3, [r7, #16]
  return result;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	fab3 f383 	clz	r3, r3
 8004256:	b2db      	uxtb	r3, r3
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	210f      	movs	r1, #15
 800425c:	fa01 f303 	lsl.w	r3, r1, r3
 8004260:	43db      	mvns	r3, r3
 8004262:	401a      	ands	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	0a1b      	lsrs	r3, r3, #8
 8004268:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	fa93 f3a3 	rbit	r3, r3
 8004270:	61bb      	str	r3, [r7, #24]
  return result;
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	fab3 f383 	clz	r3, r3
 8004278:	b2db      	uxtb	r3, r3
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	fa01 f303 	lsl.w	r3, r1, r3
 8004282:	431a      	orrs	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004288:	bf00      	nop
 800428a:	3724      	adds	r7, #36	; 0x24
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	fa93 f3a3 	rbit	r3, r3
 80042aa:	613b      	str	r3, [r7, #16]
  return result;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	fab3 f383 	clz	r3, r3
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80042b6:	e051      	b.n	800435c <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	2101      	movs	r1, #1
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	fa01 f303 	lsl.w	r3, r1, r3
 80042c4:	4013      	ands	r3, r2
 80042c6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d043      	beq.n	8004356 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d003      	beq.n	80042de <LL_GPIO_Init+0x4a>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d10e      	bne.n	80042fc <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	461a      	mov	r2, r3
 80042e4:	69b9      	ldr	r1, [r7, #24]
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff ff16 	bl	8004118 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	6819      	ldr	r1, [r3, #0]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	461a      	mov	r2, r3
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fef6 	bl	80040e8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	461a      	mov	r2, r3
 8004302:	69b9      	ldr	r1, [r7, #24]
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff ff36 	bl	8004176 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d11a      	bne.n	8004348 <LL_GPIO_Init+0xb4>
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	fa93 f3a3 	rbit	r3, r3
 800431c:	60bb      	str	r3, [r7, #8]
  return result;
 800431e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004320:	fab3 f383 	clz	r3, r3
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b07      	cmp	r3, #7
 8004328:	d807      	bhi.n	800433a <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	461a      	mov	r2, r3
 8004330:	69b9      	ldr	r1, [r7, #24]
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7ff ff4e 	bl	80041d4 <LL_GPIO_SetAFPin_0_7>
 8004338:	e006      	b.n	8004348 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	461a      	mov	r2, r3
 8004340:	69b9      	ldr	r1, [r7, #24]
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff ff75 	bl	8004232 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	461a      	mov	r2, r3
 800434e:	69b9      	ldr	r1, [r7, #24]
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff fe9a 	bl	800408a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	3301      	adds	r3, #1
 800435a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	fa22 f303 	lsr.w	r3, r2, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1a6      	bne.n	80042b8 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3720      	adds	r7, #32
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <LL_I2C_Enable>:
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f043 0201 	orr.w	r2, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	601a      	str	r2, [r3, #0]
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <LL_I2C_Disable>:
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f023 0201 	bic.w	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	601a      	str	r2, [r3, #0]
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <LL_I2C_ConfigFilters>:
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	0219      	lsls	r1, r3, #8
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	430b      	orrs	r3, r1
 80043d0:	431a      	orrs	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	601a      	str	r2, [r3, #0]
}
 80043d6:	bf00      	nop
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <LL_I2C_SetOwnAddress1>:
{
 80043e2:	b480      	push	{r7}
 80043e4:	b085      	sub	sp, #20
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80043f6:	f023 0307 	bic.w	r3, r3, #7
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	430a      	orrs	r2, r1
 8004400:	431a      	orrs	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	609a      	str	r2, [r3, #8]
}
 8004406:	bf00      	nop
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <LL_I2C_EnableOwnAddress1>:
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	609a      	str	r2, [r3, #8]
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <LL_I2C_DisableOwnAddress1>:
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	609a      	str	r2, [r3, #8]
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <LL_I2C_SetTiming>:
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	611a      	str	r2, [r3, #16]
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <LL_I2C_SetMode>:
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	601a      	str	r2, [r3, #0]
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <LL_I2C_AcknowledgeNextData>:
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	605a      	str	r2, [r3, #4]
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff ff65 	bl	8004394 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	6899      	ldr	r1, [r3, #8]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	461a      	mov	r2, r3
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff ff6d 	bl	80043b4 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	4619      	mov	r1, r3
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff ffb6 	bl	8004452 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff ff44 	bl	8004374 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff ffa0 	bl	8004432 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	6919      	ldr	r1, [r3, #16]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	461a      	mov	r2, r3
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff ff70 	bl	80043e2 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff ff81 	bl	8004412 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4619      	mov	r1, r3
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff ffa9 	bl	800446e <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	4619      	mov	r1, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff ffb6 	bl	8004494 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <LL_TIM_SetPrescaler>:
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <LL_TIM_SetAutoReload>:
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <LL_TIM_SetRepetitionCounter>:
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	631a      	str	r2, [r3, #48]	; 0x30
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <LL_TIM_OC_SetCompareCH1>:
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <LL_TIM_OC_SetCompareCH2>:
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <LL_TIM_OC_SetCompareCH3>:
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <LL_TIM_OC_SetCompareCH4>:
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <LL_TIM_OC_SetCompareCH5>:
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	659a      	str	r2, [r3, #88]	; 0x58
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <LL_TIM_OC_SetCompareCH6>:
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f043 0201 	orr.w	r2, r3, #1
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	615a      	str	r2, [r3, #20]
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a2f      	ldr	r2, [pc, #188]	; (8004724 <LL_TIM_Init+0xd0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d007      	beq.n	800467c <LL_TIM_Init+0x28>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004672:	d003      	beq.n	800467c <LL_TIM_Init+0x28>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a2c      	ldr	r2, [pc, #176]	; (8004728 <LL_TIM_Init+0xd4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d106      	bne.n	800468a <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a25      	ldr	r2, [pc, #148]	; (8004724 <LL_TIM_Init+0xd0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <LL_TIM_Init+0x66>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004698:	d00f      	beq.n	80046ba <LL_TIM_Init+0x66>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a22      	ldr	r2, [pc, #136]	; (8004728 <LL_TIM_Init+0xd4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00b      	beq.n	80046ba <LL_TIM_Init+0x66>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a21      	ldr	r2, [pc, #132]	; (800472c <LL_TIM_Init+0xd8>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d007      	beq.n	80046ba <LL_TIM_Init+0x66>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a20      	ldr	r2, [pc, #128]	; (8004730 <LL_TIM_Init+0xdc>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d003      	beq.n	80046ba <LL_TIM_Init+0x66>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a1f      	ldr	r2, [pc, #124]	; (8004734 <LL_TIM_Init+0xe0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d106      	bne.n	80046c8 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	4619      	mov	r1, r3
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff ff3a 	bl	800454e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	4619      	mov	r1, r3
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7ff ff26 	bl	8004532 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a0e      	ldr	r2, [pc, #56]	; (8004724 <LL_TIM_Init+0xd0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00b      	beq.n	8004706 <LL_TIM_Init+0xb2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a0e      	ldr	r2, [pc, #56]	; (800472c <LL_TIM_Init+0xd8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d007      	beq.n	8004706 <LL_TIM_Init+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a0d      	ldr	r2, [pc, #52]	; (8004730 <LL_TIM_Init+0xdc>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d003      	beq.n	8004706 <LL_TIM_Init+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a0c      	ldr	r2, [pc, #48]	; (8004734 <LL_TIM_Init+0xe0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d105      	bne.n	8004712 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	4619      	mov	r1, r3
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7ff ff2c 	bl	800456a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7ff ff8d 	bl	8004632 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	40012c00 	.word	0x40012c00
 8004728:	40000400 	.word	0x40000400
 800472c:	40014000 	.word	0x40014000
 8004730:	40014400 	.word	0x40014400
 8004734:	40014800 	.word	0x40014800

08004738 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800474e:	d045      	beq.n	80047dc <LL_TIM_OC_Init+0xa4>
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004756:	d848      	bhi.n	80047ea <LL_TIM_OC_Init+0xb2>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800475e:	d036      	beq.n	80047ce <LL_TIM_OC_Init+0x96>
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004766:	d840      	bhi.n	80047ea <LL_TIM_OC_Init+0xb2>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476e:	d027      	beq.n	80047c0 <LL_TIM_OC_Init+0x88>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004776:	d838      	bhi.n	80047ea <LL_TIM_OC_Init+0xb2>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800477e:	d018      	beq.n	80047b2 <LL_TIM_OC_Init+0x7a>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004786:	d830      	bhi.n	80047ea <LL_TIM_OC_Init+0xb2>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d003      	beq.n	8004796 <LL_TIM_OC_Init+0x5e>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b10      	cmp	r3, #16
 8004792:	d007      	beq.n	80047a4 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8004794:	e029      	b.n	80047ea <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 f82d 	bl	80047f8 <OC1Config>
 800479e:	4603      	mov	r3, r0
 80047a0:	75fb      	strb	r3, [r7, #23]
      break;
 80047a2:	e023      	b.n	80047ec <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f8a0 	bl	80048ec <OC2Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	75fb      	strb	r3, [r7, #23]
      break;
 80047b0:	e01c      	b.n	80047ec <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 f917 	bl	80049e8 <OC3Config>
 80047ba:	4603      	mov	r3, r0
 80047bc:	75fb      	strb	r3, [r7, #23]
      break;
 80047be:	e015      	b.n	80047ec <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f98e 	bl	8004ae4 <OC4Config>
 80047c8:	4603      	mov	r3, r0
 80047ca:	75fb      	strb	r3, [r7, #23]
      break;
 80047cc:	e00e      	b.n	80047ec <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 f9ed 	bl	8004bb0 <OC5Config>
 80047d6:	4603      	mov	r3, r0
 80047d8:	75fb      	strb	r3, [r7, #23]
      break;
 80047da:	e007      	b.n	80047ec <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 fa44 	bl	8004c6c <OC6Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	75fb      	strb	r3, [r7, #23]
      break;
 80047e8:	e000      	b.n	80047ec <LL_TIM_OC_Init+0xb4>
      break;
 80047ea:	bf00      	nop
  }

  return result;
 80047ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	f023 0201 	bic.w	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 0303 	bic.w	r3, r3, #3
 8004826:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800482e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	6812      	ldr	r2, [r2, #0]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f023 0202 	bic.w	r2, r3, #2
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f023 0201 	bic.w	r2, r3, #1
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a20      	ldr	r2, [pc, #128]	; (80048dc <OC1Config+0xe4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00b      	beq.n	8004876 <OC1Config+0x7e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a1f      	ldr	r2, [pc, #124]	; (80048e0 <OC1Config+0xe8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d007      	beq.n	8004876 <OC1Config+0x7e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a1e      	ldr	r2, [pc, #120]	; (80048e4 <OC1Config+0xec>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <OC1Config+0x7e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a1d      	ldr	r2, [pc, #116]	; (80048e8 <OC1Config+0xf0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d11e      	bne.n	80048b4 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f023 0208 	bic.w	r2, r3, #8
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4313      	orrs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f023 0204 	bic.w	r2, r3, #4
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	4619      	mov	r1, r3
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7ff fe5d 	bl	8004586 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40012c00 	.word	0x40012c00
 80048e0:	40014000 	.word	0x40014000
 80048e4:	40014400 	.word	0x40014400
 80048e8:	40014800 	.word	0x40014800

080048ec <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	f023 0210 	bic.w	r2, r3, #16
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800491a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	6812      	ldr	r2, [r2, #0]
 800492a:	0212      	lsls	r2, r2, #8
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f023 0220 	bic.w	r2, r3, #32
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f023 0210 	bic.w	r2, r3, #16
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	4313      	orrs	r3, r2
 800494e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a21      	ldr	r2, [pc, #132]	; (80049d8 <OC2Config+0xec>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00b      	beq.n	8004970 <OC2Config+0x84>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a20      	ldr	r2, [pc, #128]	; (80049dc <OC2Config+0xf0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d007      	beq.n	8004970 <OC2Config+0x84>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a1f      	ldr	r2, [pc, #124]	; (80049e0 <OC2Config+0xf4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d003      	beq.n	8004970 <OC2Config+0x84>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a1e      	ldr	r2, [pc, #120]	; (80049e4 <OC2Config+0xf8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d11f      	bne.n	80049b0 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	019b      	lsls	r3, r3, #6
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	019b      	lsls	r3, r3, #6
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	4619      	mov	r1, r3
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff fded 	bl	80045a2 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3718      	adds	r7, #24
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40012c00 	.word	0x40012c00
 80049dc:	40014000 	.word	0x40014000
 80049e0:	40014400 	.word	0x40014400
 80049e4:	40014800 	.word	0x40014800

080049e8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0303 	bic.w	r3, r3, #3
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	6812      	ldr	r2, [r2, #0]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	021b      	lsls	r3, r3, #8
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a21      	ldr	r2, [pc, #132]	; (8004ad4 <OC3Config+0xec>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00b      	beq.n	8004a6a <OC3Config+0x82>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a20      	ldr	r2, [pc, #128]	; (8004ad8 <OC3Config+0xf0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d007      	beq.n	8004a6a <OC3Config+0x82>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a1f      	ldr	r2, [pc, #124]	; (8004adc <OC3Config+0xf4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d003      	beq.n	8004a6a <OC3Config+0x82>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1e      	ldr	r2, [pc, #120]	; (8004ae0 <OC3Config+0xf8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d11f      	bne.n	8004aaa <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	029b      	lsls	r3, r3, #10
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	029b      	lsls	r3, r3, #10
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	4313      	orrs	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	015b      	lsls	r3, r3, #5
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	4619      	mov	r1, r3
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff fd7e 	bl	80045be <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40012c00 	.word	0x40012c00
 8004ad8:	40014000 	.word	0x40014000
 8004adc:	40014400 	.word	0x40014400
 8004ae0:	40014800 	.word	0x40014800

08004ae4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	6812      	ldr	r2, [r2, #0]
 8004b22:	0212      	lsls	r2, r2, #8
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	031b      	lsls	r3, r3, #12
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	031b      	lsls	r3, r3, #12
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a15      	ldr	r2, [pc, #84]	; (8004ba0 <OC4Config+0xbc>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d00b      	beq.n	8004b68 <OC4Config+0x84>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a14      	ldr	r2, [pc, #80]	; (8004ba4 <OC4Config+0xc0>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d007      	beq.n	8004b68 <OC4Config+0x84>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a13      	ldr	r2, [pc, #76]	; (8004ba8 <OC4Config+0xc4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d003      	beq.n	8004b68 <OC4Config+0x84>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a12      	ldr	r2, [pc, #72]	; (8004bac <OC4Config+0xc8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d107      	bne.n	8004b78 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	019b      	lsls	r3, r3, #6
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	4619      	mov	r1, r3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7ff fd25 	bl	80045da <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40012c00 	.word	0x40012c00
 8004ba4:	40014000 	.word	0x40014000
 8004ba8:	40014400 	.word	0x40014400
 8004bac:	40014800 	.word	0x40014800

08004bb0 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	6812      	ldr	r2, [r2, #0]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	041b      	lsls	r3, r3, #16
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a15      	ldr	r2, [pc, #84]	; (8004c5c <OC5Config+0xac>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00b      	beq.n	8004c24 <OC5Config+0x74>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a14      	ldr	r2, [pc, #80]	; (8004c60 <OC5Config+0xb0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d007      	beq.n	8004c24 <OC5Config+0x74>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a13      	ldr	r2, [pc, #76]	; (8004c64 <OC5Config+0xb4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d003      	beq.n	8004c24 <OC5Config+0x74>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a12      	ldr	r2, [pc, #72]	; (8004c68 <OC5Config+0xb8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d109      	bne.n	8004c38 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	021b      	lsls	r3, r3, #8
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	4619      	mov	r1, r3
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff fcd6 	bl	80045f6 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40012c00 	.word	0x40012c00
 8004c60:	40014000 	.word	0x40014000
 8004c64:	40014400 	.word	0x40014400
 8004c68:	40014800 	.word	0x40014800

08004c6c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	0212      	lsls	r2, r2, #8
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	051b      	lsls	r3, r3, #20
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	051b      	lsls	r3, r3, #20
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <OC6Config+0xac>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d00b      	beq.n	8004ce2 <OC6Config+0x76>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a13      	ldr	r2, [pc, #76]	; (8004d1c <OC6Config+0xb0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d007      	beq.n	8004ce2 <OC6Config+0x76>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a12      	ldr	r2, [pc, #72]	; (8004d20 <OC6Config+0xb4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d003      	beq.n	8004ce2 <OC6Config+0x76>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a11      	ldr	r2, [pc, #68]	; (8004d24 <OC6Config+0xb8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d109      	bne.n	8004cf6 <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	029b      	lsls	r3, r3, #10
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	4619      	mov	r1, r3
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff fc87 	bl	8004616 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	40014000 	.word	0x40014000
 8004d20:	40014400 	.word	0x40014400
 8004d24:	40014800 	.word	0x40014800

08004d28 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3a:	4a07      	ldr	r2, [pc, #28]	; (8004d58 <LL_InitTick+0x30>)
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004d40:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <LL_InitTick+0x30>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d46:	4b04      	ldr	r3, [pc, #16]	; (8004d58 <LL_InitTick+0x30>)
 8004d48:	2205      	movs	r2, #5
 8004d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	e000e010 	.word	0xe000e010

08004d5c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004d64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff ffdd 	bl	8004d28 <LL_InitTick>
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004d80:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <LL_mDelay+0x48>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004d86:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8e:	d00c      	beq.n	8004daa <LL_mDelay+0x32>
  {
    Delay++;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3301      	adds	r3, #1
 8004d94:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8004d96:	e008      	b.n	8004daa <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004d98:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <LL_mDelay+0x48>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <LL_mDelay+0x32>
    {
      Delay--;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1f3      	bne.n	8004d98 <LL_mDelay+0x20>
    }
  }
}
 8004db0:	bf00      	nop
 8004db2:	bf00      	nop
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	e000e010 	.word	0xe000e010

08004dc4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004dcc:	4a04      	ldr	r2, [pc, #16]	; (8004de0 <LL_SetSystemCoreClock+0x1c>)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6013      	str	r3, [r2, #0]
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	2000000c 	.word	0x2000000c

08004de4 <gcvt>:
 8004de4:	b530      	push	{r4, r5, lr}
 8004de6:	2200      	movs	r2, #0
 8004de8:	b085      	sub	sp, #20
 8004dea:	460c      	mov	r4, r1
 8004dec:	4605      	mov	r5, r0
 8004dee:	2300      	movs	r3, #0
 8004df0:	ec51 0b10 	vmov	r0, r1, d0
 8004df4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004df8:	f7fb fe70 	bl	8000adc <__aeabi_dcmplt>
 8004dfc:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004e00:	4622      	mov	r2, r4
 8004e02:	b118      	cbz	r0, 8004e0c <gcvt+0x28>
 8004e04:	232d      	movs	r3, #45	; 0x2d
 8004e06:	f802 3b01 	strb.w	r3, [r2], #1
 8004e0a:	3d01      	subs	r5, #1
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	4806      	ldr	r0, [pc, #24]	; (8004e28 <gcvt+0x44>)
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	4629      	mov	r1, r5
 8004e14:	2367      	movs	r3, #103	; 0x67
 8004e16:	6800      	ldr	r0, [r0, #0]
 8004e18:	f000 f906 	bl	8005028 <_gcvt>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	bf14      	ite	ne
 8004e20:	4620      	movne	r0, r4
 8004e22:	2000      	moveq	r0, #0
 8004e24:	b005      	add	sp, #20
 8004e26:	bd30      	pop	{r4, r5, pc}
 8004e28:	20000010 	.word	0x20000010

08004e2c <__errno>:
 8004e2c:	4b01      	ldr	r3, [pc, #4]	; (8004e34 <__errno+0x8>)
 8004e2e:	6818      	ldr	r0, [r3, #0]
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	20000010 	.word	0x20000010

08004e38 <__libc_init_array>:
 8004e38:	b570      	push	{r4, r5, r6, lr}
 8004e3a:	4d0d      	ldr	r5, [pc, #52]	; (8004e70 <__libc_init_array+0x38>)
 8004e3c:	4c0d      	ldr	r4, [pc, #52]	; (8004e74 <__libc_init_array+0x3c>)
 8004e3e:	1b64      	subs	r4, r4, r5
 8004e40:	10a4      	asrs	r4, r4, #2
 8004e42:	2600      	movs	r6, #0
 8004e44:	42a6      	cmp	r6, r4
 8004e46:	d109      	bne.n	8004e5c <__libc_init_array+0x24>
 8004e48:	4d0b      	ldr	r5, [pc, #44]	; (8004e78 <__libc_init_array+0x40>)
 8004e4a:	4c0c      	ldr	r4, [pc, #48]	; (8004e7c <__libc_init_array+0x44>)
 8004e4c:	f003 fa14 	bl	8008278 <_init>
 8004e50:	1b64      	subs	r4, r4, r5
 8004e52:	10a4      	asrs	r4, r4, #2
 8004e54:	2600      	movs	r6, #0
 8004e56:	42a6      	cmp	r6, r4
 8004e58:	d105      	bne.n	8004e66 <__libc_init_array+0x2e>
 8004e5a:	bd70      	pop	{r4, r5, r6, pc}
 8004e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e60:	4798      	blx	r3
 8004e62:	3601      	adds	r6, #1
 8004e64:	e7ee      	b.n	8004e44 <__libc_init_array+0xc>
 8004e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6a:	4798      	blx	r3
 8004e6c:	3601      	adds	r6, #1
 8004e6e:	e7f2      	b.n	8004e56 <__libc_init_array+0x1e>
 8004e70:	080085dc 	.word	0x080085dc
 8004e74:	080085dc 	.word	0x080085dc
 8004e78:	080085dc 	.word	0x080085dc
 8004e7c:	080085e0 	.word	0x080085e0

08004e80 <memset>:
 8004e80:	4402      	add	r2, r0
 8004e82:	4603      	mov	r3, r0
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d100      	bne.n	8004e8a <memset+0xa>
 8004e88:	4770      	bx	lr
 8004e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e8e:	e7f9      	b.n	8004e84 <memset+0x4>

08004e90 <siprintf>:
 8004e90:	b40e      	push	{r1, r2, r3}
 8004e92:	b500      	push	{lr}
 8004e94:	b09c      	sub	sp, #112	; 0x70
 8004e96:	ab1d      	add	r3, sp, #116	; 0x74
 8004e98:	9002      	str	r0, [sp, #8]
 8004e9a:	9006      	str	r0, [sp, #24]
 8004e9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ea0:	4809      	ldr	r0, [pc, #36]	; (8004ec8 <siprintf+0x38>)
 8004ea2:	9107      	str	r1, [sp, #28]
 8004ea4:	9104      	str	r1, [sp, #16]
 8004ea6:	4909      	ldr	r1, [pc, #36]	; (8004ecc <siprintf+0x3c>)
 8004ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eac:	9105      	str	r1, [sp, #20]
 8004eae:	6800      	ldr	r0, [r0, #0]
 8004eb0:	9301      	str	r3, [sp, #4]
 8004eb2:	a902      	add	r1, sp, #8
 8004eb4:	f000 fe00 	bl	8005ab8 <_svfiprintf_r>
 8004eb8:	9b02      	ldr	r3, [sp, #8]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	b01c      	add	sp, #112	; 0x70
 8004ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ec4:	b003      	add	sp, #12
 8004ec6:	4770      	bx	lr
 8004ec8:	20000010 	.word	0x20000010
 8004ecc:	ffff0208 	.word	0xffff0208

08004ed0 <strcat>:
 8004ed0:	b510      	push	{r4, lr}
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	7814      	ldrb	r4, [r2, #0]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	3201      	adds	r2, #1
 8004eda:	2c00      	cmp	r4, #0
 8004edc:	d1fa      	bne.n	8004ed4 <strcat+0x4>
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ee4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ee8:	2a00      	cmp	r2, #0
 8004eea:	d1f9      	bne.n	8004ee0 <strcat+0x10>
 8004eec:	bd10      	pop	{r4, pc}

08004eee <strncat>:
 8004eee:	b530      	push	{r4, r5, lr}
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	7825      	ldrb	r5, [r4, #0]
 8004ef4:	4623      	mov	r3, r4
 8004ef6:	3401      	adds	r4, #1
 8004ef8:	2d00      	cmp	r5, #0
 8004efa:	d1fa      	bne.n	8004ef2 <strncat+0x4>
 8004efc:	3a01      	subs	r2, #1
 8004efe:	d304      	bcc.n	8004f0a <strncat+0x1c>
 8004f00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f04:	f803 4b01 	strb.w	r4, [r3], #1
 8004f08:	b904      	cbnz	r4, 8004f0c <strncat+0x1e>
 8004f0a:	bd30      	pop	{r4, r5, pc}
 8004f0c:	2a00      	cmp	r2, #0
 8004f0e:	d1f5      	bne.n	8004efc <strncat+0xe>
 8004f10:	701a      	strb	r2, [r3, #0]
 8004f12:	e7f3      	b.n	8004efc <strncat+0xe>

08004f14 <strncpy>:
 8004f14:	b510      	push	{r4, lr}
 8004f16:	3901      	subs	r1, #1
 8004f18:	4603      	mov	r3, r0
 8004f1a:	b132      	cbz	r2, 8004f2a <strncpy+0x16>
 8004f1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004f20:	f803 4b01 	strb.w	r4, [r3], #1
 8004f24:	3a01      	subs	r2, #1
 8004f26:	2c00      	cmp	r4, #0
 8004f28:	d1f7      	bne.n	8004f1a <strncpy+0x6>
 8004f2a:	441a      	add	r2, r3
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d100      	bne.n	8004f34 <strncpy+0x20>
 8004f32:	bd10      	pop	{r4, pc}
 8004f34:	f803 1b01 	strb.w	r1, [r3], #1
 8004f38:	e7f9      	b.n	8004f2e <strncpy+0x1a>

08004f3a <print_e>:
 8004f3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f3c:	b087      	sub	sp, #28
 8004f3e:	ec43 2b10 	vmov	d0, r2, r3
 8004f42:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004f44:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8004f48:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004f4a:	ab04      	add	r3, sp, #16
 8004f4c:	9301      	str	r3, [sp, #4]
 8004f4e:	ab03      	add	r3, sp, #12
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	1c62      	adds	r2, r4, #1
 8004f54:	ab05      	add	r3, sp, #20
 8004f56:	460f      	mov	r7, r1
 8004f58:	2102      	movs	r1, #2
 8004f5a:	f001 f905 	bl	8006168 <_dtoa_r>
 8004f5e:	9a05      	ldr	r2, [sp, #20]
 8004f60:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d105      	bne.n	8004f74 <print_e+0x3a>
 8004f68:	4601      	mov	r1, r0
 8004f6a:	4638      	mov	r0, r7
 8004f6c:	f001 f848 	bl	8006000 <strcpy>
 8004f70:	b007      	add	sp, #28
 8004f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f74:	463b      	mov	r3, r7
 8004f76:	7801      	ldrb	r1, [r0, #0]
 8004f78:	f803 1b01 	strb.w	r1, [r3], #1
 8004f7c:	2c00      	cmp	r4, #0
 8004f7e:	bfc8      	it	gt
 8004f80:	2501      	movgt	r5, #1
 8004f82:	212e      	movs	r1, #46	; 0x2e
 8004f84:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8004f88:	b10f      	cbz	r7, 8004f8e <print_e+0x54>
 8004f8a:	2c00      	cmp	r4, #0
 8004f8c:	dc37      	bgt.n	8004ffe <print_e+0xc4>
 8004f8e:	2e67      	cmp	r6, #103	; 0x67
 8004f90:	d046      	beq.n	8005020 <print_e+0xe6>
 8004f92:	2e47      	cmp	r6, #71	; 0x47
 8004f94:	d046      	beq.n	8005024 <print_e+0xea>
 8004f96:	212e      	movs	r1, #46	; 0x2e
 8004f98:	2030      	movs	r0, #48	; 0x30
 8004f9a:	2c00      	cmp	r4, #0
 8004f9c:	dc38      	bgt.n	8005010 <print_e+0xd6>
 8004f9e:	1e51      	subs	r1, r2, #1
 8004fa0:	2900      	cmp	r1, #0
 8004fa2:	bfb8      	it	lt
 8004fa4:	f1c2 0201 	rsblt	r2, r2, #1
 8004fa8:	4618      	mov	r0, r3
 8004faa:	9105      	str	r1, [sp, #20]
 8004fac:	bfbc      	itt	lt
 8004fae:	212d      	movlt	r1, #45	; 0x2d
 8004fb0:	9205      	strlt	r2, [sp, #20]
 8004fb2:	f800 6b02 	strb.w	r6, [r0], #2
 8004fb6:	bfb8      	it	lt
 8004fb8:	7059      	strblt	r1, [r3, #1]
 8004fba:	9905      	ldr	r1, [sp, #20]
 8004fbc:	bfa4      	itt	ge
 8004fbe:	222b      	movge	r2, #43	; 0x2b
 8004fc0:	705a      	strbge	r2, [r3, #1]
 8004fc2:	2963      	cmp	r1, #99	; 0x63
 8004fc4:	dd0b      	ble.n	8004fde <print_e+0xa4>
 8004fc6:	2264      	movs	r2, #100	; 0x64
 8004fc8:	fb91 f2f2 	sdiv	r2, r1, r2
 8004fcc:	f102 0430 	add.w	r4, r2, #48	; 0x30
 8004fd0:	1cd8      	adds	r0, r3, #3
 8004fd2:	709c      	strb	r4, [r3, #2]
 8004fd4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8004fd8:	fb03 1202 	mla	r2, r3, r2, r1
 8004fdc:	9205      	str	r2, [sp, #20]
 8004fde:	9a05      	ldr	r2, [sp, #20]
 8004fe0:	230a      	movs	r3, #10
 8004fe2:	fb92 f3f3 	sdiv	r3, r2, r3
 8004fe6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004fea:	7001      	strb	r1, [r0, #0]
 8004fec:	f06f 0109 	mvn.w	r1, #9
 8004ff0:	fb01 2303 	mla	r3, r1, r3, r2
 8004ff4:	3330      	adds	r3, #48	; 0x30
 8004ff6:	7043      	strb	r3, [r0, #1]
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	7083      	strb	r3, [r0, #2]
 8004ffc:	e7b8      	b.n	8004f70 <print_e+0x36>
 8004ffe:	b10d      	cbz	r5, 8005004 <print_e+0xca>
 8005000:	f803 1b01 	strb.w	r1, [r3], #1
 8005004:	7805      	ldrb	r5, [r0, #0]
 8005006:	f803 5b01 	strb.w	r5, [r3], #1
 800500a:	3c01      	subs	r4, #1
 800500c:	2500      	movs	r5, #0
 800500e:	e7b9      	b.n	8004f84 <print_e+0x4a>
 8005010:	b10d      	cbz	r5, 8005016 <print_e+0xdc>
 8005012:	f803 1b01 	strb.w	r1, [r3], #1
 8005016:	f803 0b01 	strb.w	r0, [r3], #1
 800501a:	3c01      	subs	r4, #1
 800501c:	2500      	movs	r5, #0
 800501e:	e7bc      	b.n	8004f9a <print_e+0x60>
 8005020:	2665      	movs	r6, #101	; 0x65
 8005022:	e7bc      	b.n	8004f9e <print_e+0x64>
 8005024:	2645      	movs	r6, #69	; 0x45
 8005026:	e7ba      	b.n	8004f9e <print_e+0x64>

08005028 <_gcvt>:
 8005028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800502c:	ec55 4b10 	vmov	r4, r5, d0
 8005030:	b088      	sub	sp, #32
 8005032:	4681      	mov	r9, r0
 8005034:	4688      	mov	r8, r1
 8005036:	4616      	mov	r6, r2
 8005038:	469a      	mov	sl, r3
 800503a:	ee10 0a10 	vmov	r0, s0
 800503e:	2200      	movs	r2, #0
 8005040:	2300      	movs	r3, #0
 8005042:	4629      	mov	r1, r5
 8005044:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8005046:	f7fb fd49 	bl	8000adc <__aeabi_dcmplt>
 800504a:	b110      	cbz	r0, 8005052 <_gcvt+0x2a>
 800504c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005050:	461d      	mov	r5, r3
 8005052:	2200      	movs	r2, #0
 8005054:	2300      	movs	r3, #0
 8005056:	4620      	mov	r0, r4
 8005058:	4629      	mov	r1, r5
 800505a:	f7fb fd35 	bl	8000ac8 <__aeabi_dcmpeq>
 800505e:	b138      	cbz	r0, 8005070 <_gcvt+0x48>
 8005060:	2330      	movs	r3, #48	; 0x30
 8005062:	7033      	strb	r3, [r6, #0]
 8005064:	2300      	movs	r3, #0
 8005066:	7073      	strb	r3, [r6, #1]
 8005068:	4630      	mov	r0, r6
 800506a:	b008      	add	sp, #32
 800506c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005070:	a34b      	add	r3, pc, #300	; (adr r3, 80051a0 <_gcvt+0x178>)
 8005072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005076:	4620      	mov	r0, r4
 8005078:	4629      	mov	r1, r5
 800507a:	f7fb fd39 	bl	8000af0 <__aeabi_dcmple>
 800507e:	b158      	cbz	r0, 8005098 <_gcvt+0x70>
 8005080:	f108 31ff 	add.w	r1, r8, #4294967295
 8005084:	9100      	str	r1, [sp, #0]
 8005086:	e9cd a701 	strd	sl, r7, [sp, #4]
 800508a:	4622      	mov	r2, r4
 800508c:	462b      	mov	r3, r5
 800508e:	4631      	mov	r1, r6
 8005090:	4648      	mov	r0, r9
 8005092:	f7ff ff52 	bl	8004f3a <print_e>
 8005096:	e7e7      	b.n	8005068 <_gcvt+0x40>
 8005098:	4640      	mov	r0, r8
 800509a:	f000 fc03 	bl	80058a4 <_mprec_log10>
 800509e:	4622      	mov	r2, r4
 80050a0:	ec51 0b10 	vmov	r0, r1, d0
 80050a4:	462b      	mov	r3, r5
 80050a6:	f7fb fd23 	bl	8000af0 <__aeabi_dcmple>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d1e8      	bne.n	8005080 <_gcvt+0x58>
 80050ae:	ab07      	add	r3, sp, #28
 80050b0:	9301      	str	r3, [sp, #4]
 80050b2:	ab06      	add	r3, sp, #24
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	4642      	mov	r2, r8
 80050b8:	ab05      	add	r3, sp, #20
 80050ba:	ec45 4b10 	vmov	d0, r4, r5
 80050be:	2102      	movs	r1, #2
 80050c0:	4648      	mov	r0, r9
 80050c2:	f001 f851 	bl	8006168 <_dtoa_r>
 80050c6:	9a05      	ldr	r2, [sp, #20]
 80050c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d00e      	beq.n	80050ee <_gcvt+0xc6>
 80050d0:	4633      	mov	r3, r6
 80050d2:	44b0      	add	r8, r6
 80050d4:	4604      	mov	r4, r0
 80050d6:	f810 5b01 	ldrb.w	r5, [r0], #1
 80050da:	9905      	ldr	r1, [sp, #20]
 80050dc:	eba8 0203 	sub.w	r2, r8, r3
 80050e0:	b10d      	cbz	r5, 80050e6 <_gcvt+0xbe>
 80050e2:	2900      	cmp	r1, #0
 80050e4:	dc08      	bgt.n	80050f8 <_gcvt+0xd0>
 80050e6:	2000      	movs	r0, #0
 80050e8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80050ec:	e00d      	b.n	800510a <_gcvt+0xe2>
 80050ee:	4601      	mov	r1, r0
 80050f0:	4630      	mov	r0, r6
 80050f2:	f000 ff85 	bl	8006000 <strcpy>
 80050f6:	e7b7      	b.n	8005068 <_gcvt+0x40>
 80050f8:	3901      	subs	r1, #1
 80050fa:	f803 5b01 	strb.w	r5, [r3], #1
 80050fe:	9105      	str	r1, [sp, #20]
 8005100:	e7e8      	b.n	80050d4 <_gcvt+0xac>
 8005102:	f803 cb01 	strb.w	ip, [r3], #1
 8005106:	3a01      	subs	r2, #1
 8005108:	2001      	movs	r0, #1
 800510a:	2900      	cmp	r1, #0
 800510c:	460d      	mov	r5, r1
 800510e:	dc2a      	bgt.n	8005166 <_gcvt+0x13e>
 8005110:	b100      	cbz	r0, 8005114 <_gcvt+0xec>
 8005112:	9105      	str	r1, [sp, #20]
 8005114:	b90f      	cbnz	r7, 800511a <_gcvt+0xf2>
 8005116:	7821      	ldrb	r1, [r4, #0]
 8005118:	b311      	cbz	r1, 8005160 <_gcvt+0x138>
 800511a:	42b3      	cmp	r3, r6
 800511c:	bf04      	itt	eq
 800511e:	2130      	moveq	r1, #48	; 0x30
 8005120:	f803 1b01 	strbeq.w	r1, [r3], #1
 8005124:	212e      	movs	r1, #46	; 0x2e
 8005126:	7019      	strb	r1, [r3, #0]
 8005128:	9905      	ldr	r1, [sp, #20]
 800512a:	4618      	mov	r0, r3
 800512c:	2500      	movs	r5, #0
 800512e:	eba1 0c03 	sub.w	ip, r1, r3
 8005132:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8005136:	eb1c 0f00 	cmn.w	ip, r0
 800513a:	d41c      	bmi.n	8005176 <_gcvt+0x14e>
 800513c:	2900      	cmp	r1, #0
 800513e:	f1c1 0000 	rsb	r0, r1, #0
 8005142:	bfc8      	it	gt
 8005144:	2000      	movgt	r0, #0
 8005146:	f100 0c01 	add.w	ip, r0, #1
 800514a:	4463      	add	r3, ip
 800514c:	4401      	add	r1, r0
 800514e:	b105      	cbz	r5, 8005152 <_gcvt+0x12a>
 8005150:	9105      	str	r1, [sp, #20]
 8005152:	1e61      	subs	r1, r4, #1
 8005154:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005158:	b108      	cbz	r0, 800515e <_gcvt+0x136>
 800515a:	2a00      	cmp	r2, #0
 800515c:	dc0f      	bgt.n	800517e <_gcvt+0x156>
 800515e:	b9df      	cbnz	r7, 8005198 <_gcvt+0x170>
 8005160:	2200      	movs	r2, #0
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	e780      	b.n	8005068 <_gcvt+0x40>
 8005166:	2a00      	cmp	r2, #0
 8005168:	f101 31ff 	add.w	r1, r1, #4294967295
 800516c:	dcc9      	bgt.n	8005102 <_gcvt+0xda>
 800516e:	2800      	cmp	r0, #0
 8005170:	d0d0      	beq.n	8005114 <_gcvt+0xec>
 8005172:	9505      	str	r5, [sp, #20]
 8005174:	e7ce      	b.n	8005114 <_gcvt+0xec>
 8005176:	f800 ef01 	strb.w	lr, [r0, #1]!
 800517a:	2501      	movs	r5, #1
 800517c:	e7db      	b.n	8005136 <_gcvt+0x10e>
 800517e:	f803 0b01 	strb.w	r0, [r3], #1
 8005182:	3a01      	subs	r2, #1
 8005184:	e7e6      	b.n	8005154 <_gcvt+0x12c>
 8005186:	f801 5b01 	strb.w	r5, [r1], #1
 800518a:	1a60      	subs	r0, r4, r1
 800518c:	2800      	cmp	r0, #0
 800518e:	dcfa      	bgt.n	8005186 <_gcvt+0x15e>
 8005190:	2a00      	cmp	r2, #0
 8005192:	bfa8      	it	ge
 8005194:	189b      	addge	r3, r3, r2
 8005196:	e7e3      	b.n	8005160 <_gcvt+0x138>
 8005198:	4619      	mov	r1, r3
 800519a:	189c      	adds	r4, r3, r2
 800519c:	2530      	movs	r5, #48	; 0x30
 800519e:	e7f4      	b.n	800518a <_gcvt+0x162>
 80051a0:	eb1c432d 	.word	0xeb1c432d
 80051a4:	3f1a36e2 	.word	0x3f1a36e2

080051a8 <_Balloc>:
 80051a8:	b570      	push	{r4, r5, r6, lr}
 80051aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80051ac:	4604      	mov	r4, r0
 80051ae:	460d      	mov	r5, r1
 80051b0:	b976      	cbnz	r6, 80051d0 <_Balloc+0x28>
 80051b2:	2010      	movs	r0, #16
 80051b4:	f001 fdd6 	bl	8006d64 <malloc>
 80051b8:	4602      	mov	r2, r0
 80051ba:	6260      	str	r0, [r4, #36]	; 0x24
 80051bc:	b920      	cbnz	r0, 80051c8 <_Balloc+0x20>
 80051be:	4b18      	ldr	r3, [pc, #96]	; (8005220 <_Balloc+0x78>)
 80051c0:	4818      	ldr	r0, [pc, #96]	; (8005224 <_Balloc+0x7c>)
 80051c2:	2166      	movs	r1, #102	; 0x66
 80051c4:	f000 ff24 	bl	8006010 <__assert_func>
 80051c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051cc:	6006      	str	r6, [r0, #0]
 80051ce:	60c6      	str	r6, [r0, #12]
 80051d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80051d2:	68f3      	ldr	r3, [r6, #12]
 80051d4:	b183      	cbz	r3, 80051f8 <_Balloc+0x50>
 80051d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80051de:	b9b8      	cbnz	r0, 8005210 <_Balloc+0x68>
 80051e0:	2101      	movs	r1, #1
 80051e2:	fa01 f605 	lsl.w	r6, r1, r5
 80051e6:	1d72      	adds	r2, r6, #5
 80051e8:	0092      	lsls	r2, r2, #2
 80051ea:	4620      	mov	r0, r4
 80051ec:	f000 fb78 	bl	80058e0 <_calloc_r>
 80051f0:	b160      	cbz	r0, 800520c <_Balloc+0x64>
 80051f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80051f6:	e00e      	b.n	8005216 <_Balloc+0x6e>
 80051f8:	2221      	movs	r2, #33	; 0x21
 80051fa:	2104      	movs	r1, #4
 80051fc:	4620      	mov	r0, r4
 80051fe:	f000 fb6f 	bl	80058e0 <_calloc_r>
 8005202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005204:	60f0      	str	r0, [r6, #12]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1e4      	bne.n	80051d6 <_Balloc+0x2e>
 800520c:	2000      	movs	r0, #0
 800520e:	bd70      	pop	{r4, r5, r6, pc}
 8005210:	6802      	ldr	r2, [r0, #0]
 8005212:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005216:	2300      	movs	r3, #0
 8005218:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800521c:	e7f7      	b.n	800520e <_Balloc+0x66>
 800521e:	bf00      	nop
 8005220:	080082f4 	.word	0x080082f4
 8005224:	0800830b 	.word	0x0800830b

08005228 <_Bfree>:
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800522c:	4605      	mov	r5, r0
 800522e:	460c      	mov	r4, r1
 8005230:	b976      	cbnz	r6, 8005250 <_Bfree+0x28>
 8005232:	2010      	movs	r0, #16
 8005234:	f001 fd96 	bl	8006d64 <malloc>
 8005238:	4602      	mov	r2, r0
 800523a:	6268      	str	r0, [r5, #36]	; 0x24
 800523c:	b920      	cbnz	r0, 8005248 <_Bfree+0x20>
 800523e:	4b09      	ldr	r3, [pc, #36]	; (8005264 <_Bfree+0x3c>)
 8005240:	4809      	ldr	r0, [pc, #36]	; (8005268 <_Bfree+0x40>)
 8005242:	218a      	movs	r1, #138	; 0x8a
 8005244:	f000 fee4 	bl	8006010 <__assert_func>
 8005248:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800524c:	6006      	str	r6, [r0, #0]
 800524e:	60c6      	str	r6, [r0, #12]
 8005250:	b13c      	cbz	r4, 8005262 <_Bfree+0x3a>
 8005252:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005254:	6862      	ldr	r2, [r4, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800525c:	6021      	str	r1, [r4, #0]
 800525e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005262:	bd70      	pop	{r4, r5, r6, pc}
 8005264:	080082f4 	.word	0x080082f4
 8005268:	0800830b 	.word	0x0800830b

0800526c <__multadd>:
 800526c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005270:	690e      	ldr	r6, [r1, #16]
 8005272:	4607      	mov	r7, r0
 8005274:	4698      	mov	r8, r3
 8005276:	460c      	mov	r4, r1
 8005278:	f101 0014 	add.w	r0, r1, #20
 800527c:	2300      	movs	r3, #0
 800527e:	6805      	ldr	r5, [r0, #0]
 8005280:	b2a9      	uxth	r1, r5
 8005282:	fb02 8101 	mla	r1, r2, r1, r8
 8005286:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800528a:	0c2d      	lsrs	r5, r5, #16
 800528c:	fb02 c505 	mla	r5, r2, r5, ip
 8005290:	b289      	uxth	r1, r1
 8005292:	3301      	adds	r3, #1
 8005294:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005298:	429e      	cmp	r6, r3
 800529a:	f840 1b04 	str.w	r1, [r0], #4
 800529e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80052a2:	dcec      	bgt.n	800527e <__multadd+0x12>
 80052a4:	f1b8 0f00 	cmp.w	r8, #0
 80052a8:	d022      	beq.n	80052f0 <__multadd+0x84>
 80052aa:	68a3      	ldr	r3, [r4, #8]
 80052ac:	42b3      	cmp	r3, r6
 80052ae:	dc19      	bgt.n	80052e4 <__multadd+0x78>
 80052b0:	6861      	ldr	r1, [r4, #4]
 80052b2:	4638      	mov	r0, r7
 80052b4:	3101      	adds	r1, #1
 80052b6:	f7ff ff77 	bl	80051a8 <_Balloc>
 80052ba:	4605      	mov	r5, r0
 80052bc:	b928      	cbnz	r0, 80052ca <__multadd+0x5e>
 80052be:	4602      	mov	r2, r0
 80052c0:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <__multadd+0x8c>)
 80052c2:	480e      	ldr	r0, [pc, #56]	; (80052fc <__multadd+0x90>)
 80052c4:	21b5      	movs	r1, #181	; 0xb5
 80052c6:	f000 fea3 	bl	8006010 <__assert_func>
 80052ca:	6922      	ldr	r2, [r4, #16]
 80052cc:	3202      	adds	r2, #2
 80052ce:	f104 010c 	add.w	r1, r4, #12
 80052d2:	0092      	lsls	r2, r2, #2
 80052d4:	300c      	adds	r0, #12
 80052d6:	f001 fd4d 	bl	8006d74 <memcpy>
 80052da:	4621      	mov	r1, r4
 80052dc:	4638      	mov	r0, r7
 80052de:	f7ff ffa3 	bl	8005228 <_Bfree>
 80052e2:	462c      	mov	r4, r5
 80052e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80052e8:	3601      	adds	r6, #1
 80052ea:	f8c3 8014 	str.w	r8, [r3, #20]
 80052ee:	6126      	str	r6, [r4, #16]
 80052f0:	4620      	mov	r0, r4
 80052f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052f6:	bf00      	nop
 80052f8:	0800836b 	.word	0x0800836b
 80052fc:	0800830b 	.word	0x0800830b

08005300 <__hi0bits>:
 8005300:	0c03      	lsrs	r3, r0, #16
 8005302:	041b      	lsls	r3, r3, #16
 8005304:	b9d3      	cbnz	r3, 800533c <__hi0bits+0x3c>
 8005306:	0400      	lsls	r0, r0, #16
 8005308:	2310      	movs	r3, #16
 800530a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800530e:	bf04      	itt	eq
 8005310:	0200      	lsleq	r0, r0, #8
 8005312:	3308      	addeq	r3, #8
 8005314:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005318:	bf04      	itt	eq
 800531a:	0100      	lsleq	r0, r0, #4
 800531c:	3304      	addeq	r3, #4
 800531e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005322:	bf04      	itt	eq
 8005324:	0080      	lsleq	r0, r0, #2
 8005326:	3302      	addeq	r3, #2
 8005328:	2800      	cmp	r0, #0
 800532a:	db05      	blt.n	8005338 <__hi0bits+0x38>
 800532c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005330:	f103 0301 	add.w	r3, r3, #1
 8005334:	bf08      	it	eq
 8005336:	2320      	moveq	r3, #32
 8005338:	4618      	mov	r0, r3
 800533a:	4770      	bx	lr
 800533c:	2300      	movs	r3, #0
 800533e:	e7e4      	b.n	800530a <__hi0bits+0xa>

08005340 <__lo0bits>:
 8005340:	6803      	ldr	r3, [r0, #0]
 8005342:	f013 0207 	ands.w	r2, r3, #7
 8005346:	4601      	mov	r1, r0
 8005348:	d00b      	beq.n	8005362 <__lo0bits+0x22>
 800534a:	07da      	lsls	r2, r3, #31
 800534c:	d424      	bmi.n	8005398 <__lo0bits+0x58>
 800534e:	0798      	lsls	r0, r3, #30
 8005350:	bf49      	itett	mi
 8005352:	085b      	lsrmi	r3, r3, #1
 8005354:	089b      	lsrpl	r3, r3, #2
 8005356:	2001      	movmi	r0, #1
 8005358:	600b      	strmi	r3, [r1, #0]
 800535a:	bf5c      	itt	pl
 800535c:	600b      	strpl	r3, [r1, #0]
 800535e:	2002      	movpl	r0, #2
 8005360:	4770      	bx	lr
 8005362:	b298      	uxth	r0, r3
 8005364:	b9b0      	cbnz	r0, 8005394 <__lo0bits+0x54>
 8005366:	0c1b      	lsrs	r3, r3, #16
 8005368:	2010      	movs	r0, #16
 800536a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800536e:	bf04      	itt	eq
 8005370:	0a1b      	lsreq	r3, r3, #8
 8005372:	3008      	addeq	r0, #8
 8005374:	071a      	lsls	r2, r3, #28
 8005376:	bf04      	itt	eq
 8005378:	091b      	lsreq	r3, r3, #4
 800537a:	3004      	addeq	r0, #4
 800537c:	079a      	lsls	r2, r3, #30
 800537e:	bf04      	itt	eq
 8005380:	089b      	lsreq	r3, r3, #2
 8005382:	3002      	addeq	r0, #2
 8005384:	07da      	lsls	r2, r3, #31
 8005386:	d403      	bmi.n	8005390 <__lo0bits+0x50>
 8005388:	085b      	lsrs	r3, r3, #1
 800538a:	f100 0001 	add.w	r0, r0, #1
 800538e:	d005      	beq.n	800539c <__lo0bits+0x5c>
 8005390:	600b      	str	r3, [r1, #0]
 8005392:	4770      	bx	lr
 8005394:	4610      	mov	r0, r2
 8005396:	e7e8      	b.n	800536a <__lo0bits+0x2a>
 8005398:	2000      	movs	r0, #0
 800539a:	4770      	bx	lr
 800539c:	2020      	movs	r0, #32
 800539e:	4770      	bx	lr

080053a0 <__i2b>:
 80053a0:	b510      	push	{r4, lr}
 80053a2:	460c      	mov	r4, r1
 80053a4:	2101      	movs	r1, #1
 80053a6:	f7ff feff 	bl	80051a8 <_Balloc>
 80053aa:	4602      	mov	r2, r0
 80053ac:	b928      	cbnz	r0, 80053ba <__i2b+0x1a>
 80053ae:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <__i2b+0x24>)
 80053b0:	4805      	ldr	r0, [pc, #20]	; (80053c8 <__i2b+0x28>)
 80053b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80053b6:	f000 fe2b 	bl	8006010 <__assert_func>
 80053ba:	2301      	movs	r3, #1
 80053bc:	6144      	str	r4, [r0, #20]
 80053be:	6103      	str	r3, [r0, #16]
 80053c0:	bd10      	pop	{r4, pc}
 80053c2:	bf00      	nop
 80053c4:	0800836b 	.word	0x0800836b
 80053c8:	0800830b 	.word	0x0800830b

080053cc <__multiply>:
 80053cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d0:	4614      	mov	r4, r2
 80053d2:	690a      	ldr	r2, [r1, #16]
 80053d4:	6923      	ldr	r3, [r4, #16]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	bfb8      	it	lt
 80053da:	460b      	movlt	r3, r1
 80053dc:	460d      	mov	r5, r1
 80053de:	bfbc      	itt	lt
 80053e0:	4625      	movlt	r5, r4
 80053e2:	461c      	movlt	r4, r3
 80053e4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80053e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80053ec:	68ab      	ldr	r3, [r5, #8]
 80053ee:	6869      	ldr	r1, [r5, #4]
 80053f0:	eb0a 0709 	add.w	r7, sl, r9
 80053f4:	42bb      	cmp	r3, r7
 80053f6:	b085      	sub	sp, #20
 80053f8:	bfb8      	it	lt
 80053fa:	3101      	addlt	r1, #1
 80053fc:	f7ff fed4 	bl	80051a8 <_Balloc>
 8005400:	b930      	cbnz	r0, 8005410 <__multiply+0x44>
 8005402:	4602      	mov	r2, r0
 8005404:	4b42      	ldr	r3, [pc, #264]	; (8005510 <__multiply+0x144>)
 8005406:	4843      	ldr	r0, [pc, #268]	; (8005514 <__multiply+0x148>)
 8005408:	f240 115d 	movw	r1, #349	; 0x15d
 800540c:	f000 fe00 	bl	8006010 <__assert_func>
 8005410:	f100 0614 	add.w	r6, r0, #20
 8005414:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005418:	4633      	mov	r3, r6
 800541a:	2200      	movs	r2, #0
 800541c:	4543      	cmp	r3, r8
 800541e:	d31e      	bcc.n	800545e <__multiply+0x92>
 8005420:	f105 0c14 	add.w	ip, r5, #20
 8005424:	f104 0314 	add.w	r3, r4, #20
 8005428:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800542c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005430:	9202      	str	r2, [sp, #8]
 8005432:	ebac 0205 	sub.w	r2, ip, r5
 8005436:	3a15      	subs	r2, #21
 8005438:	f022 0203 	bic.w	r2, r2, #3
 800543c:	3204      	adds	r2, #4
 800543e:	f105 0115 	add.w	r1, r5, #21
 8005442:	458c      	cmp	ip, r1
 8005444:	bf38      	it	cc
 8005446:	2204      	movcc	r2, #4
 8005448:	9201      	str	r2, [sp, #4]
 800544a:	9a02      	ldr	r2, [sp, #8]
 800544c:	9303      	str	r3, [sp, #12]
 800544e:	429a      	cmp	r2, r3
 8005450:	d808      	bhi.n	8005464 <__multiply+0x98>
 8005452:	2f00      	cmp	r7, #0
 8005454:	dc55      	bgt.n	8005502 <__multiply+0x136>
 8005456:	6107      	str	r7, [r0, #16]
 8005458:	b005      	add	sp, #20
 800545a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800545e:	f843 2b04 	str.w	r2, [r3], #4
 8005462:	e7db      	b.n	800541c <__multiply+0x50>
 8005464:	f8b3 a000 	ldrh.w	sl, [r3]
 8005468:	f1ba 0f00 	cmp.w	sl, #0
 800546c:	d020      	beq.n	80054b0 <__multiply+0xe4>
 800546e:	f105 0e14 	add.w	lr, r5, #20
 8005472:	46b1      	mov	r9, r6
 8005474:	2200      	movs	r2, #0
 8005476:	f85e 4b04 	ldr.w	r4, [lr], #4
 800547a:	f8d9 b000 	ldr.w	fp, [r9]
 800547e:	b2a1      	uxth	r1, r4
 8005480:	fa1f fb8b 	uxth.w	fp, fp
 8005484:	fb0a b101 	mla	r1, sl, r1, fp
 8005488:	4411      	add	r1, r2
 800548a:	f8d9 2000 	ldr.w	r2, [r9]
 800548e:	0c24      	lsrs	r4, r4, #16
 8005490:	0c12      	lsrs	r2, r2, #16
 8005492:	fb0a 2404 	mla	r4, sl, r4, r2
 8005496:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800549a:	b289      	uxth	r1, r1
 800549c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80054a0:	45f4      	cmp	ip, lr
 80054a2:	f849 1b04 	str.w	r1, [r9], #4
 80054a6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80054aa:	d8e4      	bhi.n	8005476 <__multiply+0xaa>
 80054ac:	9901      	ldr	r1, [sp, #4]
 80054ae:	5072      	str	r2, [r6, r1]
 80054b0:	9a03      	ldr	r2, [sp, #12]
 80054b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80054b6:	3304      	adds	r3, #4
 80054b8:	f1b9 0f00 	cmp.w	r9, #0
 80054bc:	d01f      	beq.n	80054fe <__multiply+0x132>
 80054be:	6834      	ldr	r4, [r6, #0]
 80054c0:	f105 0114 	add.w	r1, r5, #20
 80054c4:	46b6      	mov	lr, r6
 80054c6:	f04f 0a00 	mov.w	sl, #0
 80054ca:	880a      	ldrh	r2, [r1, #0]
 80054cc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80054d0:	fb09 b202 	mla	r2, r9, r2, fp
 80054d4:	4492      	add	sl, r2
 80054d6:	b2a4      	uxth	r4, r4
 80054d8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80054dc:	f84e 4b04 	str.w	r4, [lr], #4
 80054e0:	f851 4b04 	ldr.w	r4, [r1], #4
 80054e4:	f8be 2000 	ldrh.w	r2, [lr]
 80054e8:	0c24      	lsrs	r4, r4, #16
 80054ea:	fb09 2404 	mla	r4, r9, r4, r2
 80054ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80054f2:	458c      	cmp	ip, r1
 80054f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80054f8:	d8e7      	bhi.n	80054ca <__multiply+0xfe>
 80054fa:	9a01      	ldr	r2, [sp, #4]
 80054fc:	50b4      	str	r4, [r6, r2]
 80054fe:	3604      	adds	r6, #4
 8005500:	e7a3      	b.n	800544a <__multiply+0x7e>
 8005502:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1a5      	bne.n	8005456 <__multiply+0x8a>
 800550a:	3f01      	subs	r7, #1
 800550c:	e7a1      	b.n	8005452 <__multiply+0x86>
 800550e:	bf00      	nop
 8005510:	0800836b 	.word	0x0800836b
 8005514:	0800830b 	.word	0x0800830b

08005518 <__pow5mult>:
 8005518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800551c:	4615      	mov	r5, r2
 800551e:	f012 0203 	ands.w	r2, r2, #3
 8005522:	4606      	mov	r6, r0
 8005524:	460f      	mov	r7, r1
 8005526:	d007      	beq.n	8005538 <__pow5mult+0x20>
 8005528:	4c25      	ldr	r4, [pc, #148]	; (80055c0 <__pow5mult+0xa8>)
 800552a:	3a01      	subs	r2, #1
 800552c:	2300      	movs	r3, #0
 800552e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005532:	f7ff fe9b 	bl	800526c <__multadd>
 8005536:	4607      	mov	r7, r0
 8005538:	10ad      	asrs	r5, r5, #2
 800553a:	d03d      	beq.n	80055b8 <__pow5mult+0xa0>
 800553c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800553e:	b97c      	cbnz	r4, 8005560 <__pow5mult+0x48>
 8005540:	2010      	movs	r0, #16
 8005542:	f001 fc0f 	bl	8006d64 <malloc>
 8005546:	4602      	mov	r2, r0
 8005548:	6270      	str	r0, [r6, #36]	; 0x24
 800554a:	b928      	cbnz	r0, 8005558 <__pow5mult+0x40>
 800554c:	4b1d      	ldr	r3, [pc, #116]	; (80055c4 <__pow5mult+0xac>)
 800554e:	481e      	ldr	r0, [pc, #120]	; (80055c8 <__pow5mult+0xb0>)
 8005550:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005554:	f000 fd5c 	bl	8006010 <__assert_func>
 8005558:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800555c:	6004      	str	r4, [r0, #0]
 800555e:	60c4      	str	r4, [r0, #12]
 8005560:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005564:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005568:	b94c      	cbnz	r4, 800557e <__pow5mult+0x66>
 800556a:	f240 2171 	movw	r1, #625	; 0x271
 800556e:	4630      	mov	r0, r6
 8005570:	f7ff ff16 	bl	80053a0 <__i2b>
 8005574:	2300      	movs	r3, #0
 8005576:	f8c8 0008 	str.w	r0, [r8, #8]
 800557a:	4604      	mov	r4, r0
 800557c:	6003      	str	r3, [r0, #0]
 800557e:	f04f 0900 	mov.w	r9, #0
 8005582:	07eb      	lsls	r3, r5, #31
 8005584:	d50a      	bpl.n	800559c <__pow5mult+0x84>
 8005586:	4639      	mov	r1, r7
 8005588:	4622      	mov	r2, r4
 800558a:	4630      	mov	r0, r6
 800558c:	f7ff ff1e 	bl	80053cc <__multiply>
 8005590:	4639      	mov	r1, r7
 8005592:	4680      	mov	r8, r0
 8005594:	4630      	mov	r0, r6
 8005596:	f7ff fe47 	bl	8005228 <_Bfree>
 800559a:	4647      	mov	r7, r8
 800559c:	106d      	asrs	r5, r5, #1
 800559e:	d00b      	beq.n	80055b8 <__pow5mult+0xa0>
 80055a0:	6820      	ldr	r0, [r4, #0]
 80055a2:	b938      	cbnz	r0, 80055b4 <__pow5mult+0x9c>
 80055a4:	4622      	mov	r2, r4
 80055a6:	4621      	mov	r1, r4
 80055a8:	4630      	mov	r0, r6
 80055aa:	f7ff ff0f 	bl	80053cc <__multiply>
 80055ae:	6020      	str	r0, [r4, #0]
 80055b0:	f8c0 9000 	str.w	r9, [r0]
 80055b4:	4604      	mov	r4, r0
 80055b6:	e7e4      	b.n	8005582 <__pow5mult+0x6a>
 80055b8:	4638      	mov	r0, r7
 80055ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055be:	bf00      	nop
 80055c0:	08008470 	.word	0x08008470
 80055c4:	080082f4 	.word	0x080082f4
 80055c8:	0800830b 	.word	0x0800830b

080055cc <__lshift>:
 80055cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d0:	460c      	mov	r4, r1
 80055d2:	6849      	ldr	r1, [r1, #4]
 80055d4:	6923      	ldr	r3, [r4, #16]
 80055d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80055da:	68a3      	ldr	r3, [r4, #8]
 80055dc:	4607      	mov	r7, r0
 80055de:	4691      	mov	r9, r2
 80055e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80055e4:	f108 0601 	add.w	r6, r8, #1
 80055e8:	42b3      	cmp	r3, r6
 80055ea:	db0b      	blt.n	8005604 <__lshift+0x38>
 80055ec:	4638      	mov	r0, r7
 80055ee:	f7ff fddb 	bl	80051a8 <_Balloc>
 80055f2:	4605      	mov	r5, r0
 80055f4:	b948      	cbnz	r0, 800560a <__lshift+0x3e>
 80055f6:	4602      	mov	r2, r0
 80055f8:	4b28      	ldr	r3, [pc, #160]	; (800569c <__lshift+0xd0>)
 80055fa:	4829      	ldr	r0, [pc, #164]	; (80056a0 <__lshift+0xd4>)
 80055fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005600:	f000 fd06 	bl	8006010 <__assert_func>
 8005604:	3101      	adds	r1, #1
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	e7ee      	b.n	80055e8 <__lshift+0x1c>
 800560a:	2300      	movs	r3, #0
 800560c:	f100 0114 	add.w	r1, r0, #20
 8005610:	f100 0210 	add.w	r2, r0, #16
 8005614:	4618      	mov	r0, r3
 8005616:	4553      	cmp	r3, sl
 8005618:	db33      	blt.n	8005682 <__lshift+0xb6>
 800561a:	6920      	ldr	r0, [r4, #16]
 800561c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005620:	f104 0314 	add.w	r3, r4, #20
 8005624:	f019 091f 	ands.w	r9, r9, #31
 8005628:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800562c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005630:	d02b      	beq.n	800568a <__lshift+0xbe>
 8005632:	f1c9 0e20 	rsb	lr, r9, #32
 8005636:	468a      	mov	sl, r1
 8005638:	2200      	movs	r2, #0
 800563a:	6818      	ldr	r0, [r3, #0]
 800563c:	fa00 f009 	lsl.w	r0, r0, r9
 8005640:	4302      	orrs	r2, r0
 8005642:	f84a 2b04 	str.w	r2, [sl], #4
 8005646:	f853 2b04 	ldr.w	r2, [r3], #4
 800564a:	459c      	cmp	ip, r3
 800564c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005650:	d8f3      	bhi.n	800563a <__lshift+0x6e>
 8005652:	ebac 0304 	sub.w	r3, ip, r4
 8005656:	3b15      	subs	r3, #21
 8005658:	f023 0303 	bic.w	r3, r3, #3
 800565c:	3304      	adds	r3, #4
 800565e:	f104 0015 	add.w	r0, r4, #21
 8005662:	4584      	cmp	ip, r0
 8005664:	bf38      	it	cc
 8005666:	2304      	movcc	r3, #4
 8005668:	50ca      	str	r2, [r1, r3]
 800566a:	b10a      	cbz	r2, 8005670 <__lshift+0xa4>
 800566c:	f108 0602 	add.w	r6, r8, #2
 8005670:	3e01      	subs	r6, #1
 8005672:	4638      	mov	r0, r7
 8005674:	612e      	str	r6, [r5, #16]
 8005676:	4621      	mov	r1, r4
 8005678:	f7ff fdd6 	bl	8005228 <_Bfree>
 800567c:	4628      	mov	r0, r5
 800567e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005682:	f842 0f04 	str.w	r0, [r2, #4]!
 8005686:	3301      	adds	r3, #1
 8005688:	e7c5      	b.n	8005616 <__lshift+0x4a>
 800568a:	3904      	subs	r1, #4
 800568c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005690:	f841 2f04 	str.w	r2, [r1, #4]!
 8005694:	459c      	cmp	ip, r3
 8005696:	d8f9      	bhi.n	800568c <__lshift+0xc0>
 8005698:	e7ea      	b.n	8005670 <__lshift+0xa4>
 800569a:	bf00      	nop
 800569c:	0800836b 	.word	0x0800836b
 80056a0:	0800830b 	.word	0x0800830b

080056a4 <__mcmp>:
 80056a4:	b530      	push	{r4, r5, lr}
 80056a6:	6902      	ldr	r2, [r0, #16]
 80056a8:	690c      	ldr	r4, [r1, #16]
 80056aa:	1b12      	subs	r2, r2, r4
 80056ac:	d10e      	bne.n	80056cc <__mcmp+0x28>
 80056ae:	f100 0314 	add.w	r3, r0, #20
 80056b2:	3114      	adds	r1, #20
 80056b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80056b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80056bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80056c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80056c4:	42a5      	cmp	r5, r4
 80056c6:	d003      	beq.n	80056d0 <__mcmp+0x2c>
 80056c8:	d305      	bcc.n	80056d6 <__mcmp+0x32>
 80056ca:	2201      	movs	r2, #1
 80056cc:	4610      	mov	r0, r2
 80056ce:	bd30      	pop	{r4, r5, pc}
 80056d0:	4283      	cmp	r3, r0
 80056d2:	d3f3      	bcc.n	80056bc <__mcmp+0x18>
 80056d4:	e7fa      	b.n	80056cc <__mcmp+0x28>
 80056d6:	f04f 32ff 	mov.w	r2, #4294967295
 80056da:	e7f7      	b.n	80056cc <__mcmp+0x28>

080056dc <__mdiff>:
 80056dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e0:	460c      	mov	r4, r1
 80056e2:	4606      	mov	r6, r0
 80056e4:	4611      	mov	r1, r2
 80056e6:	4620      	mov	r0, r4
 80056e8:	4617      	mov	r7, r2
 80056ea:	f7ff ffdb 	bl	80056a4 <__mcmp>
 80056ee:	1e05      	subs	r5, r0, #0
 80056f0:	d110      	bne.n	8005714 <__mdiff+0x38>
 80056f2:	4629      	mov	r1, r5
 80056f4:	4630      	mov	r0, r6
 80056f6:	f7ff fd57 	bl	80051a8 <_Balloc>
 80056fa:	b930      	cbnz	r0, 800570a <__mdiff+0x2e>
 80056fc:	4b39      	ldr	r3, [pc, #228]	; (80057e4 <__mdiff+0x108>)
 80056fe:	4602      	mov	r2, r0
 8005700:	f240 2132 	movw	r1, #562	; 0x232
 8005704:	4838      	ldr	r0, [pc, #224]	; (80057e8 <__mdiff+0x10c>)
 8005706:	f000 fc83 	bl	8006010 <__assert_func>
 800570a:	2301      	movs	r3, #1
 800570c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005710:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005714:	bfa4      	itt	ge
 8005716:	463b      	movge	r3, r7
 8005718:	4627      	movge	r7, r4
 800571a:	4630      	mov	r0, r6
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	bfa6      	itte	ge
 8005720:	461c      	movge	r4, r3
 8005722:	2500      	movge	r5, #0
 8005724:	2501      	movlt	r5, #1
 8005726:	f7ff fd3f 	bl	80051a8 <_Balloc>
 800572a:	b920      	cbnz	r0, 8005736 <__mdiff+0x5a>
 800572c:	4b2d      	ldr	r3, [pc, #180]	; (80057e4 <__mdiff+0x108>)
 800572e:	4602      	mov	r2, r0
 8005730:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005734:	e7e6      	b.n	8005704 <__mdiff+0x28>
 8005736:	693e      	ldr	r6, [r7, #16]
 8005738:	60c5      	str	r5, [r0, #12]
 800573a:	6925      	ldr	r5, [r4, #16]
 800573c:	f107 0114 	add.w	r1, r7, #20
 8005740:	f104 0914 	add.w	r9, r4, #20
 8005744:	f100 0e14 	add.w	lr, r0, #20
 8005748:	f107 0210 	add.w	r2, r7, #16
 800574c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005750:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005754:	46f2      	mov	sl, lr
 8005756:	2700      	movs	r7, #0
 8005758:	f859 3b04 	ldr.w	r3, [r9], #4
 800575c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005760:	fa1f f883 	uxth.w	r8, r3
 8005764:	fa17 f78b 	uxtah	r7, r7, fp
 8005768:	0c1b      	lsrs	r3, r3, #16
 800576a:	eba7 0808 	sub.w	r8, r7, r8
 800576e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005772:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005776:	fa1f f888 	uxth.w	r8, r8
 800577a:	141f      	asrs	r7, r3, #16
 800577c:	454d      	cmp	r5, r9
 800577e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005782:	f84a 3b04 	str.w	r3, [sl], #4
 8005786:	d8e7      	bhi.n	8005758 <__mdiff+0x7c>
 8005788:	1b2b      	subs	r3, r5, r4
 800578a:	3b15      	subs	r3, #21
 800578c:	f023 0303 	bic.w	r3, r3, #3
 8005790:	3304      	adds	r3, #4
 8005792:	3415      	adds	r4, #21
 8005794:	42a5      	cmp	r5, r4
 8005796:	bf38      	it	cc
 8005798:	2304      	movcc	r3, #4
 800579a:	4419      	add	r1, r3
 800579c:	4473      	add	r3, lr
 800579e:	469e      	mov	lr, r3
 80057a0:	460d      	mov	r5, r1
 80057a2:	4565      	cmp	r5, ip
 80057a4:	d30e      	bcc.n	80057c4 <__mdiff+0xe8>
 80057a6:	f10c 0203 	add.w	r2, ip, #3
 80057aa:	1a52      	subs	r2, r2, r1
 80057ac:	f022 0203 	bic.w	r2, r2, #3
 80057b0:	3903      	subs	r1, #3
 80057b2:	458c      	cmp	ip, r1
 80057b4:	bf38      	it	cc
 80057b6:	2200      	movcc	r2, #0
 80057b8:	441a      	add	r2, r3
 80057ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80057be:	b17b      	cbz	r3, 80057e0 <__mdiff+0x104>
 80057c0:	6106      	str	r6, [r0, #16]
 80057c2:	e7a5      	b.n	8005710 <__mdiff+0x34>
 80057c4:	f855 8b04 	ldr.w	r8, [r5], #4
 80057c8:	fa17 f488 	uxtah	r4, r7, r8
 80057cc:	1422      	asrs	r2, r4, #16
 80057ce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80057d2:	b2a4      	uxth	r4, r4
 80057d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80057d8:	f84e 4b04 	str.w	r4, [lr], #4
 80057dc:	1417      	asrs	r7, r2, #16
 80057de:	e7e0      	b.n	80057a2 <__mdiff+0xc6>
 80057e0:	3e01      	subs	r6, #1
 80057e2:	e7ea      	b.n	80057ba <__mdiff+0xde>
 80057e4:	0800836b 	.word	0x0800836b
 80057e8:	0800830b 	.word	0x0800830b

080057ec <__d2b>:
 80057ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80057f0:	4689      	mov	r9, r1
 80057f2:	2101      	movs	r1, #1
 80057f4:	ec57 6b10 	vmov	r6, r7, d0
 80057f8:	4690      	mov	r8, r2
 80057fa:	f7ff fcd5 	bl	80051a8 <_Balloc>
 80057fe:	4604      	mov	r4, r0
 8005800:	b930      	cbnz	r0, 8005810 <__d2b+0x24>
 8005802:	4602      	mov	r2, r0
 8005804:	4b25      	ldr	r3, [pc, #148]	; (800589c <__d2b+0xb0>)
 8005806:	4826      	ldr	r0, [pc, #152]	; (80058a0 <__d2b+0xb4>)
 8005808:	f240 310a 	movw	r1, #778	; 0x30a
 800580c:	f000 fc00 	bl	8006010 <__assert_func>
 8005810:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005814:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005818:	bb35      	cbnz	r5, 8005868 <__d2b+0x7c>
 800581a:	2e00      	cmp	r6, #0
 800581c:	9301      	str	r3, [sp, #4]
 800581e:	d028      	beq.n	8005872 <__d2b+0x86>
 8005820:	4668      	mov	r0, sp
 8005822:	9600      	str	r6, [sp, #0]
 8005824:	f7ff fd8c 	bl	8005340 <__lo0bits>
 8005828:	9900      	ldr	r1, [sp, #0]
 800582a:	b300      	cbz	r0, 800586e <__d2b+0x82>
 800582c:	9a01      	ldr	r2, [sp, #4]
 800582e:	f1c0 0320 	rsb	r3, r0, #32
 8005832:	fa02 f303 	lsl.w	r3, r2, r3
 8005836:	430b      	orrs	r3, r1
 8005838:	40c2      	lsrs	r2, r0
 800583a:	6163      	str	r3, [r4, #20]
 800583c:	9201      	str	r2, [sp, #4]
 800583e:	9b01      	ldr	r3, [sp, #4]
 8005840:	61a3      	str	r3, [r4, #24]
 8005842:	2b00      	cmp	r3, #0
 8005844:	bf14      	ite	ne
 8005846:	2202      	movne	r2, #2
 8005848:	2201      	moveq	r2, #1
 800584a:	6122      	str	r2, [r4, #16]
 800584c:	b1d5      	cbz	r5, 8005884 <__d2b+0x98>
 800584e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005852:	4405      	add	r5, r0
 8005854:	f8c9 5000 	str.w	r5, [r9]
 8005858:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800585c:	f8c8 0000 	str.w	r0, [r8]
 8005860:	4620      	mov	r0, r4
 8005862:	b003      	add	sp, #12
 8005864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005868:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800586c:	e7d5      	b.n	800581a <__d2b+0x2e>
 800586e:	6161      	str	r1, [r4, #20]
 8005870:	e7e5      	b.n	800583e <__d2b+0x52>
 8005872:	a801      	add	r0, sp, #4
 8005874:	f7ff fd64 	bl	8005340 <__lo0bits>
 8005878:	9b01      	ldr	r3, [sp, #4]
 800587a:	6163      	str	r3, [r4, #20]
 800587c:	2201      	movs	r2, #1
 800587e:	6122      	str	r2, [r4, #16]
 8005880:	3020      	adds	r0, #32
 8005882:	e7e3      	b.n	800584c <__d2b+0x60>
 8005884:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005888:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800588c:	f8c9 0000 	str.w	r0, [r9]
 8005890:	6918      	ldr	r0, [r3, #16]
 8005892:	f7ff fd35 	bl	8005300 <__hi0bits>
 8005896:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800589a:	e7df      	b.n	800585c <__d2b+0x70>
 800589c:	0800836b 	.word	0x0800836b
 80058a0:	0800830b 	.word	0x0800830b

080058a4 <_mprec_log10>:
 80058a4:	2817      	cmp	r0, #23
 80058a6:	b5d0      	push	{r4, r6, r7, lr}
 80058a8:	4604      	mov	r4, r0
 80058aa:	dc07      	bgt.n	80058bc <_mprec_log10+0x18>
 80058ac:	4809      	ldr	r0, [pc, #36]	; (80058d4 <_mprec_log10+0x30>)
 80058ae:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80058b2:	e9d4 0100 	ldrd	r0, r1, [r4]
 80058b6:	ec41 0b10 	vmov	d0, r0, r1
 80058ba:	bdd0      	pop	{r4, r6, r7, pc}
 80058bc:	4906      	ldr	r1, [pc, #24]	; (80058d8 <_mprec_log10+0x34>)
 80058be:	4f07      	ldr	r7, [pc, #28]	; (80058dc <_mprec_log10+0x38>)
 80058c0:	2000      	movs	r0, #0
 80058c2:	2600      	movs	r6, #0
 80058c4:	4632      	mov	r2, r6
 80058c6:	463b      	mov	r3, r7
 80058c8:	f7fa fe96 	bl	80005f8 <__aeabi_dmul>
 80058cc:	3c01      	subs	r4, #1
 80058ce:	d1f9      	bne.n	80058c4 <_mprec_log10+0x20>
 80058d0:	e7f1      	b.n	80058b6 <_mprec_log10+0x12>
 80058d2:	bf00      	nop
 80058d4:	080083a8 	.word	0x080083a8
 80058d8:	3ff00000 	.word	0x3ff00000
 80058dc:	40240000 	.word	0x40240000

080058e0 <_calloc_r>:
 80058e0:	b513      	push	{r0, r1, r4, lr}
 80058e2:	434a      	muls	r2, r1
 80058e4:	4611      	mov	r1, r2
 80058e6:	9201      	str	r2, [sp, #4]
 80058e8:	f000 f80a 	bl	8005900 <_malloc_r>
 80058ec:	4604      	mov	r4, r0
 80058ee:	b118      	cbz	r0, 80058f8 <_calloc_r+0x18>
 80058f0:	9a01      	ldr	r2, [sp, #4]
 80058f2:	2100      	movs	r1, #0
 80058f4:	f7ff fac4 	bl	8004e80 <memset>
 80058f8:	4620      	mov	r0, r4
 80058fa:	b002      	add	sp, #8
 80058fc:	bd10      	pop	{r4, pc}
	...

08005900 <_malloc_r>:
 8005900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005902:	1ccd      	adds	r5, r1, #3
 8005904:	f025 0503 	bic.w	r5, r5, #3
 8005908:	3508      	adds	r5, #8
 800590a:	2d0c      	cmp	r5, #12
 800590c:	bf38      	it	cc
 800590e:	250c      	movcc	r5, #12
 8005910:	2d00      	cmp	r5, #0
 8005912:	4606      	mov	r6, r0
 8005914:	db01      	blt.n	800591a <_malloc_r+0x1a>
 8005916:	42a9      	cmp	r1, r5
 8005918:	d903      	bls.n	8005922 <_malloc_r+0x22>
 800591a:	230c      	movs	r3, #12
 800591c:	6033      	str	r3, [r6, #0]
 800591e:	2000      	movs	r0, #0
 8005920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005922:	f001 fa4f 	bl	8006dc4 <__malloc_lock>
 8005926:	4921      	ldr	r1, [pc, #132]	; (80059ac <_malloc_r+0xac>)
 8005928:	680a      	ldr	r2, [r1, #0]
 800592a:	4614      	mov	r4, r2
 800592c:	b99c      	cbnz	r4, 8005956 <_malloc_r+0x56>
 800592e:	4f20      	ldr	r7, [pc, #128]	; (80059b0 <_malloc_r+0xb0>)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	b923      	cbnz	r3, 800593e <_malloc_r+0x3e>
 8005934:	4621      	mov	r1, r4
 8005936:	4630      	mov	r0, r6
 8005938:	f000 fb52 	bl	8005fe0 <_sbrk_r>
 800593c:	6038      	str	r0, [r7, #0]
 800593e:	4629      	mov	r1, r5
 8005940:	4630      	mov	r0, r6
 8005942:	f000 fb4d 	bl	8005fe0 <_sbrk_r>
 8005946:	1c43      	adds	r3, r0, #1
 8005948:	d123      	bne.n	8005992 <_malloc_r+0x92>
 800594a:	230c      	movs	r3, #12
 800594c:	6033      	str	r3, [r6, #0]
 800594e:	4630      	mov	r0, r6
 8005950:	f001 fa3e 	bl	8006dd0 <__malloc_unlock>
 8005954:	e7e3      	b.n	800591e <_malloc_r+0x1e>
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	1b5b      	subs	r3, r3, r5
 800595a:	d417      	bmi.n	800598c <_malloc_r+0x8c>
 800595c:	2b0b      	cmp	r3, #11
 800595e:	d903      	bls.n	8005968 <_malloc_r+0x68>
 8005960:	6023      	str	r3, [r4, #0]
 8005962:	441c      	add	r4, r3
 8005964:	6025      	str	r5, [r4, #0]
 8005966:	e004      	b.n	8005972 <_malloc_r+0x72>
 8005968:	6863      	ldr	r3, [r4, #4]
 800596a:	42a2      	cmp	r2, r4
 800596c:	bf0c      	ite	eq
 800596e:	600b      	streq	r3, [r1, #0]
 8005970:	6053      	strne	r3, [r2, #4]
 8005972:	4630      	mov	r0, r6
 8005974:	f001 fa2c 	bl	8006dd0 <__malloc_unlock>
 8005978:	f104 000b 	add.w	r0, r4, #11
 800597c:	1d23      	adds	r3, r4, #4
 800597e:	f020 0007 	bic.w	r0, r0, #7
 8005982:	1ac2      	subs	r2, r0, r3
 8005984:	d0cc      	beq.n	8005920 <_malloc_r+0x20>
 8005986:	1a1b      	subs	r3, r3, r0
 8005988:	50a3      	str	r3, [r4, r2]
 800598a:	e7c9      	b.n	8005920 <_malloc_r+0x20>
 800598c:	4622      	mov	r2, r4
 800598e:	6864      	ldr	r4, [r4, #4]
 8005990:	e7cc      	b.n	800592c <_malloc_r+0x2c>
 8005992:	1cc4      	adds	r4, r0, #3
 8005994:	f024 0403 	bic.w	r4, r4, #3
 8005998:	42a0      	cmp	r0, r4
 800599a:	d0e3      	beq.n	8005964 <_malloc_r+0x64>
 800599c:	1a21      	subs	r1, r4, r0
 800599e:	4630      	mov	r0, r6
 80059a0:	f000 fb1e 	bl	8005fe0 <_sbrk_r>
 80059a4:	3001      	adds	r0, #1
 80059a6:	d1dd      	bne.n	8005964 <_malloc_r+0x64>
 80059a8:	e7cf      	b.n	800594a <_malloc_r+0x4a>
 80059aa:	bf00      	nop
 80059ac:	200000a0 	.word	0x200000a0
 80059b0:	200000a4 	.word	0x200000a4

080059b4 <_realloc_r>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	4607      	mov	r7, r0
 80059b8:	4614      	mov	r4, r2
 80059ba:	460e      	mov	r6, r1
 80059bc:	b921      	cbnz	r1, 80059c8 <_realloc_r+0x14>
 80059be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80059c2:	4611      	mov	r1, r2
 80059c4:	f7ff bf9c 	b.w	8005900 <_malloc_r>
 80059c8:	b922      	cbnz	r2, 80059d4 <_realloc_r+0x20>
 80059ca:	f001 fa07 	bl	8006ddc <_free_r>
 80059ce:	4625      	mov	r5, r4
 80059d0:	4628      	mov	r0, r5
 80059d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059d4:	f001 fa52 	bl	8006e7c <_malloc_usable_size_r>
 80059d8:	42a0      	cmp	r0, r4
 80059da:	d20f      	bcs.n	80059fc <_realloc_r+0x48>
 80059dc:	4621      	mov	r1, r4
 80059de:	4638      	mov	r0, r7
 80059e0:	f7ff ff8e 	bl	8005900 <_malloc_r>
 80059e4:	4605      	mov	r5, r0
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d0f2      	beq.n	80059d0 <_realloc_r+0x1c>
 80059ea:	4631      	mov	r1, r6
 80059ec:	4622      	mov	r2, r4
 80059ee:	f001 f9c1 	bl	8006d74 <memcpy>
 80059f2:	4631      	mov	r1, r6
 80059f4:	4638      	mov	r0, r7
 80059f6:	f001 f9f1 	bl	8006ddc <_free_r>
 80059fa:	e7e9      	b.n	80059d0 <_realloc_r+0x1c>
 80059fc:	4635      	mov	r5, r6
 80059fe:	e7e7      	b.n	80059d0 <_realloc_r+0x1c>

08005a00 <__ssputs_r>:
 8005a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a04:	688e      	ldr	r6, [r1, #8]
 8005a06:	429e      	cmp	r6, r3
 8005a08:	4682      	mov	sl, r0
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	4690      	mov	r8, r2
 8005a0e:	461f      	mov	r7, r3
 8005a10:	d838      	bhi.n	8005a84 <__ssputs_r+0x84>
 8005a12:	898a      	ldrh	r2, [r1, #12]
 8005a14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a18:	d032      	beq.n	8005a80 <__ssputs_r+0x80>
 8005a1a:	6825      	ldr	r5, [r4, #0]
 8005a1c:	6909      	ldr	r1, [r1, #16]
 8005a1e:	eba5 0901 	sub.w	r9, r5, r1
 8005a22:	6965      	ldr	r5, [r4, #20]
 8005a24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	444b      	add	r3, r9
 8005a30:	106d      	asrs	r5, r5, #1
 8005a32:	429d      	cmp	r5, r3
 8005a34:	bf38      	it	cc
 8005a36:	461d      	movcc	r5, r3
 8005a38:	0553      	lsls	r3, r2, #21
 8005a3a:	d531      	bpl.n	8005aa0 <__ssputs_r+0xa0>
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	f7ff ff5f 	bl	8005900 <_malloc_r>
 8005a42:	4606      	mov	r6, r0
 8005a44:	b950      	cbnz	r0, 8005a5c <__ssputs_r+0x5c>
 8005a46:	230c      	movs	r3, #12
 8005a48:	f8ca 3000 	str.w	r3, [sl]
 8005a4c:	89a3      	ldrh	r3, [r4, #12]
 8005a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a52:	81a3      	strh	r3, [r4, #12]
 8005a54:	f04f 30ff 	mov.w	r0, #4294967295
 8005a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a5c:	6921      	ldr	r1, [r4, #16]
 8005a5e:	464a      	mov	r2, r9
 8005a60:	f001 f988 	bl	8006d74 <memcpy>
 8005a64:	89a3      	ldrh	r3, [r4, #12]
 8005a66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6e:	81a3      	strh	r3, [r4, #12]
 8005a70:	6126      	str	r6, [r4, #16]
 8005a72:	6165      	str	r5, [r4, #20]
 8005a74:	444e      	add	r6, r9
 8005a76:	eba5 0509 	sub.w	r5, r5, r9
 8005a7a:	6026      	str	r6, [r4, #0]
 8005a7c:	60a5      	str	r5, [r4, #8]
 8005a7e:	463e      	mov	r6, r7
 8005a80:	42be      	cmp	r6, r7
 8005a82:	d900      	bls.n	8005a86 <__ssputs_r+0x86>
 8005a84:	463e      	mov	r6, r7
 8005a86:	4632      	mov	r2, r6
 8005a88:	6820      	ldr	r0, [r4, #0]
 8005a8a:	4641      	mov	r1, r8
 8005a8c:	f001 f980 	bl	8006d90 <memmove>
 8005a90:	68a3      	ldr	r3, [r4, #8]
 8005a92:	6822      	ldr	r2, [r4, #0]
 8005a94:	1b9b      	subs	r3, r3, r6
 8005a96:	4432      	add	r2, r6
 8005a98:	60a3      	str	r3, [r4, #8]
 8005a9a:	6022      	str	r2, [r4, #0]
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	e7db      	b.n	8005a58 <__ssputs_r+0x58>
 8005aa0:	462a      	mov	r2, r5
 8005aa2:	f7ff ff87 	bl	80059b4 <_realloc_r>
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	d1e1      	bne.n	8005a70 <__ssputs_r+0x70>
 8005aac:	6921      	ldr	r1, [r4, #16]
 8005aae:	4650      	mov	r0, sl
 8005ab0:	f001 f994 	bl	8006ddc <_free_r>
 8005ab4:	e7c7      	b.n	8005a46 <__ssputs_r+0x46>
	...

08005ab8 <_svfiprintf_r>:
 8005ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005abc:	4698      	mov	r8, r3
 8005abe:	898b      	ldrh	r3, [r1, #12]
 8005ac0:	061b      	lsls	r3, r3, #24
 8005ac2:	b09d      	sub	sp, #116	; 0x74
 8005ac4:	4607      	mov	r7, r0
 8005ac6:	460d      	mov	r5, r1
 8005ac8:	4614      	mov	r4, r2
 8005aca:	d50e      	bpl.n	8005aea <_svfiprintf_r+0x32>
 8005acc:	690b      	ldr	r3, [r1, #16]
 8005ace:	b963      	cbnz	r3, 8005aea <_svfiprintf_r+0x32>
 8005ad0:	2140      	movs	r1, #64	; 0x40
 8005ad2:	f7ff ff15 	bl	8005900 <_malloc_r>
 8005ad6:	6028      	str	r0, [r5, #0]
 8005ad8:	6128      	str	r0, [r5, #16]
 8005ada:	b920      	cbnz	r0, 8005ae6 <_svfiprintf_r+0x2e>
 8005adc:	230c      	movs	r3, #12
 8005ade:	603b      	str	r3, [r7, #0]
 8005ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae4:	e0d1      	b.n	8005c8a <_svfiprintf_r+0x1d2>
 8005ae6:	2340      	movs	r3, #64	; 0x40
 8005ae8:	616b      	str	r3, [r5, #20]
 8005aea:	2300      	movs	r3, #0
 8005aec:	9309      	str	r3, [sp, #36]	; 0x24
 8005aee:	2320      	movs	r3, #32
 8005af0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005af4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005af8:	2330      	movs	r3, #48	; 0x30
 8005afa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ca4 <_svfiprintf_r+0x1ec>
 8005afe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b02:	f04f 0901 	mov.w	r9, #1
 8005b06:	4623      	mov	r3, r4
 8005b08:	469a      	mov	sl, r3
 8005b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b0e:	b10a      	cbz	r2, 8005b14 <_svfiprintf_r+0x5c>
 8005b10:	2a25      	cmp	r2, #37	; 0x25
 8005b12:	d1f9      	bne.n	8005b08 <_svfiprintf_r+0x50>
 8005b14:	ebba 0b04 	subs.w	fp, sl, r4
 8005b18:	d00b      	beq.n	8005b32 <_svfiprintf_r+0x7a>
 8005b1a:	465b      	mov	r3, fp
 8005b1c:	4622      	mov	r2, r4
 8005b1e:	4629      	mov	r1, r5
 8005b20:	4638      	mov	r0, r7
 8005b22:	f7ff ff6d 	bl	8005a00 <__ssputs_r>
 8005b26:	3001      	adds	r0, #1
 8005b28:	f000 80aa 	beq.w	8005c80 <_svfiprintf_r+0x1c8>
 8005b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b2e:	445a      	add	r2, fp
 8005b30:	9209      	str	r2, [sp, #36]	; 0x24
 8005b32:	f89a 3000 	ldrb.w	r3, [sl]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 80a2 	beq.w	8005c80 <_svfiprintf_r+0x1c8>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b46:	f10a 0a01 	add.w	sl, sl, #1
 8005b4a:	9304      	str	r3, [sp, #16]
 8005b4c:	9307      	str	r3, [sp, #28]
 8005b4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b52:	931a      	str	r3, [sp, #104]	; 0x68
 8005b54:	4654      	mov	r4, sl
 8005b56:	2205      	movs	r2, #5
 8005b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b5c:	4851      	ldr	r0, [pc, #324]	; (8005ca4 <_svfiprintf_r+0x1ec>)
 8005b5e:	f7fa fb3f 	bl	80001e0 <memchr>
 8005b62:	9a04      	ldr	r2, [sp, #16]
 8005b64:	b9d8      	cbnz	r0, 8005b9e <_svfiprintf_r+0xe6>
 8005b66:	06d0      	lsls	r0, r2, #27
 8005b68:	bf44      	itt	mi
 8005b6a:	2320      	movmi	r3, #32
 8005b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b70:	0711      	lsls	r1, r2, #28
 8005b72:	bf44      	itt	mi
 8005b74:	232b      	movmi	r3, #43	; 0x2b
 8005b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b80:	d015      	beq.n	8005bae <_svfiprintf_r+0xf6>
 8005b82:	9a07      	ldr	r2, [sp, #28]
 8005b84:	4654      	mov	r4, sl
 8005b86:	2000      	movs	r0, #0
 8005b88:	f04f 0c0a 	mov.w	ip, #10
 8005b8c:	4621      	mov	r1, r4
 8005b8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b92:	3b30      	subs	r3, #48	; 0x30
 8005b94:	2b09      	cmp	r3, #9
 8005b96:	d94e      	bls.n	8005c36 <_svfiprintf_r+0x17e>
 8005b98:	b1b0      	cbz	r0, 8005bc8 <_svfiprintf_r+0x110>
 8005b9a:	9207      	str	r2, [sp, #28]
 8005b9c:	e014      	b.n	8005bc8 <_svfiprintf_r+0x110>
 8005b9e:	eba0 0308 	sub.w	r3, r0, r8
 8005ba2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	9304      	str	r3, [sp, #16]
 8005baa:	46a2      	mov	sl, r4
 8005bac:	e7d2      	b.n	8005b54 <_svfiprintf_r+0x9c>
 8005bae:	9b03      	ldr	r3, [sp, #12]
 8005bb0:	1d19      	adds	r1, r3, #4
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	9103      	str	r1, [sp, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	bfbb      	ittet	lt
 8005bba:	425b      	neglt	r3, r3
 8005bbc:	f042 0202 	orrlt.w	r2, r2, #2
 8005bc0:	9307      	strge	r3, [sp, #28]
 8005bc2:	9307      	strlt	r3, [sp, #28]
 8005bc4:	bfb8      	it	lt
 8005bc6:	9204      	strlt	r2, [sp, #16]
 8005bc8:	7823      	ldrb	r3, [r4, #0]
 8005bca:	2b2e      	cmp	r3, #46	; 0x2e
 8005bcc:	d10c      	bne.n	8005be8 <_svfiprintf_r+0x130>
 8005bce:	7863      	ldrb	r3, [r4, #1]
 8005bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8005bd2:	d135      	bne.n	8005c40 <_svfiprintf_r+0x188>
 8005bd4:	9b03      	ldr	r3, [sp, #12]
 8005bd6:	1d1a      	adds	r2, r3, #4
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	9203      	str	r2, [sp, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	bfb8      	it	lt
 8005be0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005be4:	3402      	adds	r4, #2
 8005be6:	9305      	str	r3, [sp, #20]
 8005be8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005cb4 <_svfiprintf_r+0x1fc>
 8005bec:	7821      	ldrb	r1, [r4, #0]
 8005bee:	2203      	movs	r2, #3
 8005bf0:	4650      	mov	r0, sl
 8005bf2:	f7fa faf5 	bl	80001e0 <memchr>
 8005bf6:	b140      	cbz	r0, 8005c0a <_svfiprintf_r+0x152>
 8005bf8:	2340      	movs	r3, #64	; 0x40
 8005bfa:	eba0 000a 	sub.w	r0, r0, sl
 8005bfe:	fa03 f000 	lsl.w	r0, r3, r0
 8005c02:	9b04      	ldr	r3, [sp, #16]
 8005c04:	4303      	orrs	r3, r0
 8005c06:	3401      	adds	r4, #1
 8005c08:	9304      	str	r3, [sp, #16]
 8005c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c0e:	4826      	ldr	r0, [pc, #152]	; (8005ca8 <_svfiprintf_r+0x1f0>)
 8005c10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c14:	2206      	movs	r2, #6
 8005c16:	f7fa fae3 	bl	80001e0 <memchr>
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	d038      	beq.n	8005c90 <_svfiprintf_r+0x1d8>
 8005c1e:	4b23      	ldr	r3, [pc, #140]	; (8005cac <_svfiprintf_r+0x1f4>)
 8005c20:	bb1b      	cbnz	r3, 8005c6a <_svfiprintf_r+0x1b2>
 8005c22:	9b03      	ldr	r3, [sp, #12]
 8005c24:	3307      	adds	r3, #7
 8005c26:	f023 0307 	bic.w	r3, r3, #7
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	9303      	str	r3, [sp, #12]
 8005c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c30:	4433      	add	r3, r6
 8005c32:	9309      	str	r3, [sp, #36]	; 0x24
 8005c34:	e767      	b.n	8005b06 <_svfiprintf_r+0x4e>
 8005c36:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	2001      	movs	r0, #1
 8005c3e:	e7a5      	b.n	8005b8c <_svfiprintf_r+0xd4>
 8005c40:	2300      	movs	r3, #0
 8005c42:	3401      	adds	r4, #1
 8005c44:	9305      	str	r3, [sp, #20]
 8005c46:	4619      	mov	r1, r3
 8005c48:	f04f 0c0a 	mov.w	ip, #10
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c52:	3a30      	subs	r2, #48	; 0x30
 8005c54:	2a09      	cmp	r2, #9
 8005c56:	d903      	bls.n	8005c60 <_svfiprintf_r+0x1a8>
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d0c5      	beq.n	8005be8 <_svfiprintf_r+0x130>
 8005c5c:	9105      	str	r1, [sp, #20]
 8005c5e:	e7c3      	b.n	8005be8 <_svfiprintf_r+0x130>
 8005c60:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c64:	4604      	mov	r4, r0
 8005c66:	2301      	movs	r3, #1
 8005c68:	e7f0      	b.n	8005c4c <_svfiprintf_r+0x194>
 8005c6a:	ab03      	add	r3, sp, #12
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	462a      	mov	r2, r5
 8005c70:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <_svfiprintf_r+0x1f8>)
 8005c72:	a904      	add	r1, sp, #16
 8005c74:	4638      	mov	r0, r7
 8005c76:	f3af 8000 	nop.w
 8005c7a:	1c42      	adds	r2, r0, #1
 8005c7c:	4606      	mov	r6, r0
 8005c7e:	d1d6      	bne.n	8005c2e <_svfiprintf_r+0x176>
 8005c80:	89ab      	ldrh	r3, [r5, #12]
 8005c82:	065b      	lsls	r3, r3, #25
 8005c84:	f53f af2c 	bmi.w	8005ae0 <_svfiprintf_r+0x28>
 8005c88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c8a:	b01d      	add	sp, #116	; 0x74
 8005c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c90:	ab03      	add	r3, sp, #12
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	462a      	mov	r2, r5
 8005c96:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <_svfiprintf_r+0x1f8>)
 8005c98:	a904      	add	r1, sp, #16
 8005c9a:	4638      	mov	r0, r7
 8005c9c:	f000 f87a 	bl	8005d94 <_printf_i>
 8005ca0:	e7eb      	b.n	8005c7a <_svfiprintf_r+0x1c2>
 8005ca2:	bf00      	nop
 8005ca4:	0800847c 	.word	0x0800847c
 8005ca8:	08008486 	.word	0x08008486
 8005cac:	00000000 	.word	0x00000000
 8005cb0:	08005a01 	.word	0x08005a01
 8005cb4:	08008482 	.word	0x08008482

08005cb8 <_printf_common>:
 8005cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cbc:	4616      	mov	r6, r2
 8005cbe:	4699      	mov	r9, r3
 8005cc0:	688a      	ldr	r2, [r1, #8]
 8005cc2:	690b      	ldr	r3, [r1, #16]
 8005cc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	bfb8      	it	lt
 8005ccc:	4613      	movlt	r3, r2
 8005cce:	6033      	str	r3, [r6, #0]
 8005cd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cd4:	4607      	mov	r7, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	b10a      	cbz	r2, 8005cde <_printf_common+0x26>
 8005cda:	3301      	adds	r3, #1
 8005cdc:	6033      	str	r3, [r6, #0]
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	0699      	lsls	r1, r3, #26
 8005ce2:	bf42      	ittt	mi
 8005ce4:	6833      	ldrmi	r3, [r6, #0]
 8005ce6:	3302      	addmi	r3, #2
 8005ce8:	6033      	strmi	r3, [r6, #0]
 8005cea:	6825      	ldr	r5, [r4, #0]
 8005cec:	f015 0506 	ands.w	r5, r5, #6
 8005cf0:	d106      	bne.n	8005d00 <_printf_common+0x48>
 8005cf2:	f104 0a19 	add.w	sl, r4, #25
 8005cf6:	68e3      	ldr	r3, [r4, #12]
 8005cf8:	6832      	ldr	r2, [r6, #0]
 8005cfa:	1a9b      	subs	r3, r3, r2
 8005cfc:	42ab      	cmp	r3, r5
 8005cfe:	dc26      	bgt.n	8005d4e <_printf_common+0x96>
 8005d00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d04:	1e13      	subs	r3, r2, #0
 8005d06:	6822      	ldr	r2, [r4, #0]
 8005d08:	bf18      	it	ne
 8005d0a:	2301      	movne	r3, #1
 8005d0c:	0692      	lsls	r2, r2, #26
 8005d0e:	d42b      	bmi.n	8005d68 <_printf_common+0xb0>
 8005d10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d14:	4649      	mov	r1, r9
 8005d16:	4638      	mov	r0, r7
 8005d18:	47c0      	blx	r8
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	d01e      	beq.n	8005d5c <_printf_common+0xa4>
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	68e5      	ldr	r5, [r4, #12]
 8005d22:	6832      	ldr	r2, [r6, #0]
 8005d24:	f003 0306 	and.w	r3, r3, #6
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	bf08      	it	eq
 8005d2c:	1aad      	subeq	r5, r5, r2
 8005d2e:	68a3      	ldr	r3, [r4, #8]
 8005d30:	6922      	ldr	r2, [r4, #16]
 8005d32:	bf0c      	ite	eq
 8005d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d38:	2500      	movne	r5, #0
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	bfc4      	itt	gt
 8005d3e:	1a9b      	subgt	r3, r3, r2
 8005d40:	18ed      	addgt	r5, r5, r3
 8005d42:	2600      	movs	r6, #0
 8005d44:	341a      	adds	r4, #26
 8005d46:	42b5      	cmp	r5, r6
 8005d48:	d11a      	bne.n	8005d80 <_printf_common+0xc8>
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	e008      	b.n	8005d60 <_printf_common+0xa8>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	4652      	mov	r2, sl
 8005d52:	4649      	mov	r1, r9
 8005d54:	4638      	mov	r0, r7
 8005d56:	47c0      	blx	r8
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d103      	bne.n	8005d64 <_printf_common+0xac>
 8005d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d64:	3501      	adds	r5, #1
 8005d66:	e7c6      	b.n	8005cf6 <_printf_common+0x3e>
 8005d68:	18e1      	adds	r1, r4, r3
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	2030      	movs	r0, #48	; 0x30
 8005d6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d72:	4422      	add	r2, r4
 8005d74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d7c:	3302      	adds	r3, #2
 8005d7e:	e7c7      	b.n	8005d10 <_printf_common+0x58>
 8005d80:	2301      	movs	r3, #1
 8005d82:	4622      	mov	r2, r4
 8005d84:	4649      	mov	r1, r9
 8005d86:	4638      	mov	r0, r7
 8005d88:	47c0      	blx	r8
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	d0e6      	beq.n	8005d5c <_printf_common+0xa4>
 8005d8e:	3601      	adds	r6, #1
 8005d90:	e7d9      	b.n	8005d46 <_printf_common+0x8e>
	...

08005d94 <_printf_i>:
 8005d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d98:	460c      	mov	r4, r1
 8005d9a:	4691      	mov	r9, r2
 8005d9c:	7e27      	ldrb	r7, [r4, #24]
 8005d9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005da0:	2f78      	cmp	r7, #120	; 0x78
 8005da2:	4680      	mov	r8, r0
 8005da4:	469a      	mov	sl, r3
 8005da6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005daa:	d807      	bhi.n	8005dbc <_printf_i+0x28>
 8005dac:	2f62      	cmp	r7, #98	; 0x62
 8005dae:	d80a      	bhi.n	8005dc6 <_printf_i+0x32>
 8005db0:	2f00      	cmp	r7, #0
 8005db2:	f000 80d8 	beq.w	8005f66 <_printf_i+0x1d2>
 8005db6:	2f58      	cmp	r7, #88	; 0x58
 8005db8:	f000 80a3 	beq.w	8005f02 <_printf_i+0x16e>
 8005dbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005dc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005dc4:	e03a      	b.n	8005e3c <_printf_i+0xa8>
 8005dc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005dca:	2b15      	cmp	r3, #21
 8005dcc:	d8f6      	bhi.n	8005dbc <_printf_i+0x28>
 8005dce:	a001      	add	r0, pc, #4	; (adr r0, 8005dd4 <_printf_i+0x40>)
 8005dd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005dd4:	08005e2d 	.word	0x08005e2d
 8005dd8:	08005e41 	.word	0x08005e41
 8005ddc:	08005dbd 	.word	0x08005dbd
 8005de0:	08005dbd 	.word	0x08005dbd
 8005de4:	08005dbd 	.word	0x08005dbd
 8005de8:	08005dbd 	.word	0x08005dbd
 8005dec:	08005e41 	.word	0x08005e41
 8005df0:	08005dbd 	.word	0x08005dbd
 8005df4:	08005dbd 	.word	0x08005dbd
 8005df8:	08005dbd 	.word	0x08005dbd
 8005dfc:	08005dbd 	.word	0x08005dbd
 8005e00:	08005f4d 	.word	0x08005f4d
 8005e04:	08005e71 	.word	0x08005e71
 8005e08:	08005f2f 	.word	0x08005f2f
 8005e0c:	08005dbd 	.word	0x08005dbd
 8005e10:	08005dbd 	.word	0x08005dbd
 8005e14:	08005f6f 	.word	0x08005f6f
 8005e18:	08005dbd 	.word	0x08005dbd
 8005e1c:	08005e71 	.word	0x08005e71
 8005e20:	08005dbd 	.word	0x08005dbd
 8005e24:	08005dbd 	.word	0x08005dbd
 8005e28:	08005f37 	.word	0x08005f37
 8005e2c:	680b      	ldr	r3, [r1, #0]
 8005e2e:	1d1a      	adds	r2, r3, #4
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	600a      	str	r2, [r1, #0]
 8005e34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e0a3      	b.n	8005f88 <_printf_i+0x1f4>
 8005e40:	6825      	ldr	r5, [r4, #0]
 8005e42:	6808      	ldr	r0, [r1, #0]
 8005e44:	062e      	lsls	r6, r5, #24
 8005e46:	f100 0304 	add.w	r3, r0, #4
 8005e4a:	d50a      	bpl.n	8005e62 <_printf_i+0xce>
 8005e4c:	6805      	ldr	r5, [r0, #0]
 8005e4e:	600b      	str	r3, [r1, #0]
 8005e50:	2d00      	cmp	r5, #0
 8005e52:	da03      	bge.n	8005e5c <_printf_i+0xc8>
 8005e54:	232d      	movs	r3, #45	; 0x2d
 8005e56:	426d      	negs	r5, r5
 8005e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e5c:	485e      	ldr	r0, [pc, #376]	; (8005fd8 <_printf_i+0x244>)
 8005e5e:	230a      	movs	r3, #10
 8005e60:	e019      	b.n	8005e96 <_printf_i+0x102>
 8005e62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005e66:	6805      	ldr	r5, [r0, #0]
 8005e68:	600b      	str	r3, [r1, #0]
 8005e6a:	bf18      	it	ne
 8005e6c:	b22d      	sxthne	r5, r5
 8005e6e:	e7ef      	b.n	8005e50 <_printf_i+0xbc>
 8005e70:	680b      	ldr	r3, [r1, #0]
 8005e72:	6825      	ldr	r5, [r4, #0]
 8005e74:	1d18      	adds	r0, r3, #4
 8005e76:	6008      	str	r0, [r1, #0]
 8005e78:	0628      	lsls	r0, r5, #24
 8005e7a:	d501      	bpl.n	8005e80 <_printf_i+0xec>
 8005e7c:	681d      	ldr	r5, [r3, #0]
 8005e7e:	e002      	b.n	8005e86 <_printf_i+0xf2>
 8005e80:	0669      	lsls	r1, r5, #25
 8005e82:	d5fb      	bpl.n	8005e7c <_printf_i+0xe8>
 8005e84:	881d      	ldrh	r5, [r3, #0]
 8005e86:	4854      	ldr	r0, [pc, #336]	; (8005fd8 <_printf_i+0x244>)
 8005e88:	2f6f      	cmp	r7, #111	; 0x6f
 8005e8a:	bf0c      	ite	eq
 8005e8c:	2308      	moveq	r3, #8
 8005e8e:	230a      	movne	r3, #10
 8005e90:	2100      	movs	r1, #0
 8005e92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e96:	6866      	ldr	r6, [r4, #4]
 8005e98:	60a6      	str	r6, [r4, #8]
 8005e9a:	2e00      	cmp	r6, #0
 8005e9c:	bfa2      	ittt	ge
 8005e9e:	6821      	ldrge	r1, [r4, #0]
 8005ea0:	f021 0104 	bicge.w	r1, r1, #4
 8005ea4:	6021      	strge	r1, [r4, #0]
 8005ea6:	b90d      	cbnz	r5, 8005eac <_printf_i+0x118>
 8005ea8:	2e00      	cmp	r6, #0
 8005eaa:	d04d      	beq.n	8005f48 <_printf_i+0x1b4>
 8005eac:	4616      	mov	r6, r2
 8005eae:	fbb5 f1f3 	udiv	r1, r5, r3
 8005eb2:	fb03 5711 	mls	r7, r3, r1, r5
 8005eb6:	5dc7      	ldrb	r7, [r0, r7]
 8005eb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ebc:	462f      	mov	r7, r5
 8005ebe:	42bb      	cmp	r3, r7
 8005ec0:	460d      	mov	r5, r1
 8005ec2:	d9f4      	bls.n	8005eae <_printf_i+0x11a>
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d10b      	bne.n	8005ee0 <_printf_i+0x14c>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	07df      	lsls	r7, r3, #31
 8005ecc:	d508      	bpl.n	8005ee0 <_printf_i+0x14c>
 8005ece:	6923      	ldr	r3, [r4, #16]
 8005ed0:	6861      	ldr	r1, [r4, #4]
 8005ed2:	4299      	cmp	r1, r3
 8005ed4:	bfde      	ittt	le
 8005ed6:	2330      	movle	r3, #48	; 0x30
 8005ed8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005edc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ee0:	1b92      	subs	r2, r2, r6
 8005ee2:	6122      	str	r2, [r4, #16]
 8005ee4:	f8cd a000 	str.w	sl, [sp]
 8005ee8:	464b      	mov	r3, r9
 8005eea:	aa03      	add	r2, sp, #12
 8005eec:	4621      	mov	r1, r4
 8005eee:	4640      	mov	r0, r8
 8005ef0:	f7ff fee2 	bl	8005cb8 <_printf_common>
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d14c      	bne.n	8005f92 <_printf_i+0x1fe>
 8005ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8005efc:	b004      	add	sp, #16
 8005efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f02:	4835      	ldr	r0, [pc, #212]	; (8005fd8 <_printf_i+0x244>)
 8005f04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	680e      	ldr	r6, [r1, #0]
 8005f0c:	061f      	lsls	r7, r3, #24
 8005f0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f12:	600e      	str	r6, [r1, #0]
 8005f14:	d514      	bpl.n	8005f40 <_printf_i+0x1ac>
 8005f16:	07d9      	lsls	r1, r3, #31
 8005f18:	bf44      	itt	mi
 8005f1a:	f043 0320 	orrmi.w	r3, r3, #32
 8005f1e:	6023      	strmi	r3, [r4, #0]
 8005f20:	b91d      	cbnz	r5, 8005f2a <_printf_i+0x196>
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	f023 0320 	bic.w	r3, r3, #32
 8005f28:	6023      	str	r3, [r4, #0]
 8005f2a:	2310      	movs	r3, #16
 8005f2c:	e7b0      	b.n	8005e90 <_printf_i+0xfc>
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	f043 0320 	orr.w	r3, r3, #32
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	2378      	movs	r3, #120	; 0x78
 8005f38:	4828      	ldr	r0, [pc, #160]	; (8005fdc <_printf_i+0x248>)
 8005f3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f3e:	e7e3      	b.n	8005f08 <_printf_i+0x174>
 8005f40:	065e      	lsls	r6, r3, #25
 8005f42:	bf48      	it	mi
 8005f44:	b2ad      	uxthmi	r5, r5
 8005f46:	e7e6      	b.n	8005f16 <_printf_i+0x182>
 8005f48:	4616      	mov	r6, r2
 8005f4a:	e7bb      	b.n	8005ec4 <_printf_i+0x130>
 8005f4c:	680b      	ldr	r3, [r1, #0]
 8005f4e:	6826      	ldr	r6, [r4, #0]
 8005f50:	6960      	ldr	r0, [r4, #20]
 8005f52:	1d1d      	adds	r5, r3, #4
 8005f54:	600d      	str	r5, [r1, #0]
 8005f56:	0635      	lsls	r5, r6, #24
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	d501      	bpl.n	8005f60 <_printf_i+0x1cc>
 8005f5c:	6018      	str	r0, [r3, #0]
 8005f5e:	e002      	b.n	8005f66 <_printf_i+0x1d2>
 8005f60:	0671      	lsls	r1, r6, #25
 8005f62:	d5fb      	bpl.n	8005f5c <_printf_i+0x1c8>
 8005f64:	8018      	strh	r0, [r3, #0]
 8005f66:	2300      	movs	r3, #0
 8005f68:	6123      	str	r3, [r4, #16]
 8005f6a:	4616      	mov	r6, r2
 8005f6c:	e7ba      	b.n	8005ee4 <_printf_i+0x150>
 8005f6e:	680b      	ldr	r3, [r1, #0]
 8005f70:	1d1a      	adds	r2, r3, #4
 8005f72:	600a      	str	r2, [r1, #0]
 8005f74:	681e      	ldr	r6, [r3, #0]
 8005f76:	6862      	ldr	r2, [r4, #4]
 8005f78:	2100      	movs	r1, #0
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	f7fa f930 	bl	80001e0 <memchr>
 8005f80:	b108      	cbz	r0, 8005f86 <_printf_i+0x1f2>
 8005f82:	1b80      	subs	r0, r0, r6
 8005f84:	6060      	str	r0, [r4, #4]
 8005f86:	6863      	ldr	r3, [r4, #4]
 8005f88:	6123      	str	r3, [r4, #16]
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f90:	e7a8      	b.n	8005ee4 <_printf_i+0x150>
 8005f92:	6923      	ldr	r3, [r4, #16]
 8005f94:	4632      	mov	r2, r6
 8005f96:	4649      	mov	r1, r9
 8005f98:	4640      	mov	r0, r8
 8005f9a:	47d0      	blx	sl
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	d0ab      	beq.n	8005ef8 <_printf_i+0x164>
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	079b      	lsls	r3, r3, #30
 8005fa4:	d413      	bmi.n	8005fce <_printf_i+0x23a>
 8005fa6:	68e0      	ldr	r0, [r4, #12]
 8005fa8:	9b03      	ldr	r3, [sp, #12]
 8005faa:	4298      	cmp	r0, r3
 8005fac:	bfb8      	it	lt
 8005fae:	4618      	movlt	r0, r3
 8005fb0:	e7a4      	b.n	8005efc <_printf_i+0x168>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4632      	mov	r2, r6
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	4640      	mov	r0, r8
 8005fba:	47d0      	blx	sl
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d09b      	beq.n	8005ef8 <_printf_i+0x164>
 8005fc0:	3501      	adds	r5, #1
 8005fc2:	68e3      	ldr	r3, [r4, #12]
 8005fc4:	9903      	ldr	r1, [sp, #12]
 8005fc6:	1a5b      	subs	r3, r3, r1
 8005fc8:	42ab      	cmp	r3, r5
 8005fca:	dcf2      	bgt.n	8005fb2 <_printf_i+0x21e>
 8005fcc:	e7eb      	b.n	8005fa6 <_printf_i+0x212>
 8005fce:	2500      	movs	r5, #0
 8005fd0:	f104 0619 	add.w	r6, r4, #25
 8005fd4:	e7f5      	b.n	8005fc2 <_printf_i+0x22e>
 8005fd6:	bf00      	nop
 8005fd8:	0800848d 	.word	0x0800848d
 8005fdc:	0800849e 	.word	0x0800849e

08005fe0 <_sbrk_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	4d06      	ldr	r5, [pc, #24]	; (8005ffc <_sbrk_r+0x1c>)
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	4608      	mov	r0, r1
 8005fea:	602b      	str	r3, [r5, #0]
 8005fec:	f7fd fc1c 	bl	8003828 <_sbrk>
 8005ff0:	1c43      	adds	r3, r0, #1
 8005ff2:	d102      	bne.n	8005ffa <_sbrk_r+0x1a>
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	b103      	cbz	r3, 8005ffa <_sbrk_r+0x1a>
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	bd38      	pop	{r3, r4, r5, pc}
 8005ffc:	200000e4 	.word	0x200000e4

08006000 <strcpy>:
 8006000:	4603      	mov	r3, r0
 8006002:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006006:	f803 2b01 	strb.w	r2, [r3], #1
 800600a:	2a00      	cmp	r2, #0
 800600c:	d1f9      	bne.n	8006002 <strcpy+0x2>
 800600e:	4770      	bx	lr

08006010 <__assert_func>:
 8006010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006012:	4614      	mov	r4, r2
 8006014:	461a      	mov	r2, r3
 8006016:	4b09      	ldr	r3, [pc, #36]	; (800603c <__assert_func+0x2c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4605      	mov	r5, r0
 800601c:	68d8      	ldr	r0, [r3, #12]
 800601e:	b14c      	cbz	r4, 8006034 <__assert_func+0x24>
 8006020:	4b07      	ldr	r3, [pc, #28]	; (8006040 <__assert_func+0x30>)
 8006022:	9100      	str	r1, [sp, #0]
 8006024:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006028:	4906      	ldr	r1, [pc, #24]	; (8006044 <__assert_func+0x34>)
 800602a:	462b      	mov	r3, r5
 800602c:	f000 fe88 	bl	8006d40 <fiprintf>
 8006030:	f001 f946 	bl	80072c0 <abort>
 8006034:	4b04      	ldr	r3, [pc, #16]	; (8006048 <__assert_func+0x38>)
 8006036:	461c      	mov	r4, r3
 8006038:	e7f3      	b.n	8006022 <__assert_func+0x12>
 800603a:	bf00      	nop
 800603c:	20000010 	.word	0x20000010
 8006040:	080084af 	.word	0x080084af
 8006044:	080084bc 	.word	0x080084bc
 8006048:	080084ea 	.word	0x080084ea

0800604c <quorem>:
 800604c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006050:	6903      	ldr	r3, [r0, #16]
 8006052:	690c      	ldr	r4, [r1, #16]
 8006054:	42a3      	cmp	r3, r4
 8006056:	4607      	mov	r7, r0
 8006058:	f2c0 8081 	blt.w	800615e <quorem+0x112>
 800605c:	3c01      	subs	r4, #1
 800605e:	f101 0814 	add.w	r8, r1, #20
 8006062:	f100 0514 	add.w	r5, r0, #20
 8006066:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800606a:	9301      	str	r3, [sp, #4]
 800606c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006070:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006074:	3301      	adds	r3, #1
 8006076:	429a      	cmp	r2, r3
 8006078:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800607c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006080:	fbb2 f6f3 	udiv	r6, r2, r3
 8006084:	d331      	bcc.n	80060ea <quorem+0x9e>
 8006086:	f04f 0e00 	mov.w	lr, #0
 800608a:	4640      	mov	r0, r8
 800608c:	46ac      	mov	ip, r5
 800608e:	46f2      	mov	sl, lr
 8006090:	f850 2b04 	ldr.w	r2, [r0], #4
 8006094:	b293      	uxth	r3, r2
 8006096:	fb06 e303 	mla	r3, r6, r3, lr
 800609a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800609e:	b29b      	uxth	r3, r3
 80060a0:	ebaa 0303 	sub.w	r3, sl, r3
 80060a4:	0c12      	lsrs	r2, r2, #16
 80060a6:	f8dc a000 	ldr.w	sl, [ip]
 80060aa:	fb06 e202 	mla	r2, r6, r2, lr
 80060ae:	fa13 f38a 	uxtah	r3, r3, sl
 80060b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80060b6:	fa1f fa82 	uxth.w	sl, r2
 80060ba:	f8dc 2000 	ldr.w	r2, [ip]
 80060be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80060c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060cc:	4581      	cmp	r9, r0
 80060ce:	f84c 3b04 	str.w	r3, [ip], #4
 80060d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060d6:	d2db      	bcs.n	8006090 <quorem+0x44>
 80060d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80060dc:	b92b      	cbnz	r3, 80060ea <quorem+0x9e>
 80060de:	9b01      	ldr	r3, [sp, #4]
 80060e0:	3b04      	subs	r3, #4
 80060e2:	429d      	cmp	r5, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	d32e      	bcc.n	8006146 <quorem+0xfa>
 80060e8:	613c      	str	r4, [r7, #16]
 80060ea:	4638      	mov	r0, r7
 80060ec:	f7ff fada 	bl	80056a4 <__mcmp>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	db24      	blt.n	800613e <quorem+0xf2>
 80060f4:	3601      	adds	r6, #1
 80060f6:	4628      	mov	r0, r5
 80060f8:	f04f 0c00 	mov.w	ip, #0
 80060fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8006100:	f8d0 e000 	ldr.w	lr, [r0]
 8006104:	b293      	uxth	r3, r2
 8006106:	ebac 0303 	sub.w	r3, ip, r3
 800610a:	0c12      	lsrs	r2, r2, #16
 800610c:	fa13 f38e 	uxtah	r3, r3, lr
 8006110:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006114:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006118:	b29b      	uxth	r3, r3
 800611a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800611e:	45c1      	cmp	r9, r8
 8006120:	f840 3b04 	str.w	r3, [r0], #4
 8006124:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006128:	d2e8      	bcs.n	80060fc <quorem+0xb0>
 800612a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800612e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006132:	b922      	cbnz	r2, 800613e <quorem+0xf2>
 8006134:	3b04      	subs	r3, #4
 8006136:	429d      	cmp	r5, r3
 8006138:	461a      	mov	r2, r3
 800613a:	d30a      	bcc.n	8006152 <quorem+0x106>
 800613c:	613c      	str	r4, [r7, #16]
 800613e:	4630      	mov	r0, r6
 8006140:	b003      	add	sp, #12
 8006142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006146:	6812      	ldr	r2, [r2, #0]
 8006148:	3b04      	subs	r3, #4
 800614a:	2a00      	cmp	r2, #0
 800614c:	d1cc      	bne.n	80060e8 <quorem+0x9c>
 800614e:	3c01      	subs	r4, #1
 8006150:	e7c7      	b.n	80060e2 <quorem+0x96>
 8006152:	6812      	ldr	r2, [r2, #0]
 8006154:	3b04      	subs	r3, #4
 8006156:	2a00      	cmp	r2, #0
 8006158:	d1f0      	bne.n	800613c <quorem+0xf0>
 800615a:	3c01      	subs	r4, #1
 800615c:	e7eb      	b.n	8006136 <quorem+0xea>
 800615e:	2000      	movs	r0, #0
 8006160:	e7ee      	b.n	8006140 <quorem+0xf4>
 8006162:	0000      	movs	r0, r0
 8006164:	0000      	movs	r0, r0
	...

08006168 <_dtoa_r>:
 8006168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616c:	ed2d 8b02 	vpush	{d8}
 8006170:	ec57 6b10 	vmov	r6, r7, d0
 8006174:	b095      	sub	sp, #84	; 0x54
 8006176:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006178:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800617c:	9105      	str	r1, [sp, #20]
 800617e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006182:	4604      	mov	r4, r0
 8006184:	9209      	str	r2, [sp, #36]	; 0x24
 8006186:	930f      	str	r3, [sp, #60]	; 0x3c
 8006188:	b975      	cbnz	r5, 80061a8 <_dtoa_r+0x40>
 800618a:	2010      	movs	r0, #16
 800618c:	f000 fdea 	bl	8006d64 <malloc>
 8006190:	4602      	mov	r2, r0
 8006192:	6260      	str	r0, [r4, #36]	; 0x24
 8006194:	b920      	cbnz	r0, 80061a0 <_dtoa_r+0x38>
 8006196:	4bb2      	ldr	r3, [pc, #712]	; (8006460 <_dtoa_r+0x2f8>)
 8006198:	21ea      	movs	r1, #234	; 0xea
 800619a:	48b2      	ldr	r0, [pc, #712]	; (8006464 <_dtoa_r+0x2fc>)
 800619c:	f7ff ff38 	bl	8006010 <__assert_func>
 80061a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80061a4:	6005      	str	r5, [r0, #0]
 80061a6:	60c5      	str	r5, [r0, #12]
 80061a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061aa:	6819      	ldr	r1, [r3, #0]
 80061ac:	b151      	cbz	r1, 80061c4 <_dtoa_r+0x5c>
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	604a      	str	r2, [r1, #4]
 80061b2:	2301      	movs	r3, #1
 80061b4:	4093      	lsls	r3, r2
 80061b6:	608b      	str	r3, [r1, #8]
 80061b8:	4620      	mov	r0, r4
 80061ba:	f7ff f835 	bl	8005228 <_Bfree>
 80061be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	1e3b      	subs	r3, r7, #0
 80061c6:	bfb9      	ittee	lt
 80061c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80061cc:	9303      	strlt	r3, [sp, #12]
 80061ce:	2300      	movge	r3, #0
 80061d0:	f8c8 3000 	strge.w	r3, [r8]
 80061d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80061d8:	4ba3      	ldr	r3, [pc, #652]	; (8006468 <_dtoa_r+0x300>)
 80061da:	bfbc      	itt	lt
 80061dc:	2201      	movlt	r2, #1
 80061de:	f8c8 2000 	strlt.w	r2, [r8]
 80061e2:	ea33 0309 	bics.w	r3, r3, r9
 80061e6:	d11b      	bne.n	8006220 <_dtoa_r+0xb8>
 80061e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061f4:	4333      	orrs	r3, r6
 80061f6:	f000 857a 	beq.w	8006cee <_dtoa_r+0xb86>
 80061fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061fc:	b963      	cbnz	r3, 8006218 <_dtoa_r+0xb0>
 80061fe:	4b9b      	ldr	r3, [pc, #620]	; (800646c <_dtoa_r+0x304>)
 8006200:	e024      	b.n	800624c <_dtoa_r+0xe4>
 8006202:	4b9b      	ldr	r3, [pc, #620]	; (8006470 <_dtoa_r+0x308>)
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	3308      	adds	r3, #8
 8006208:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	9800      	ldr	r0, [sp, #0]
 800620e:	b015      	add	sp, #84	; 0x54
 8006210:	ecbd 8b02 	vpop	{d8}
 8006214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006218:	4b94      	ldr	r3, [pc, #592]	; (800646c <_dtoa_r+0x304>)
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	3303      	adds	r3, #3
 800621e:	e7f3      	b.n	8006208 <_dtoa_r+0xa0>
 8006220:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006224:	2200      	movs	r2, #0
 8006226:	ec51 0b17 	vmov	r0, r1, d7
 800622a:	2300      	movs	r3, #0
 800622c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006230:	f7fa fc4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006234:	4680      	mov	r8, r0
 8006236:	b158      	cbz	r0, 8006250 <_dtoa_r+0xe8>
 8006238:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800623a:	2301      	movs	r3, #1
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 8551 	beq.w	8006ce8 <_dtoa_r+0xb80>
 8006246:	488b      	ldr	r0, [pc, #556]	; (8006474 <_dtoa_r+0x30c>)
 8006248:	6018      	str	r0, [r3, #0]
 800624a:	1e43      	subs	r3, r0, #1
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	e7dd      	b.n	800620c <_dtoa_r+0xa4>
 8006250:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006254:	aa12      	add	r2, sp, #72	; 0x48
 8006256:	a913      	add	r1, sp, #76	; 0x4c
 8006258:	4620      	mov	r0, r4
 800625a:	f7ff fac7 	bl	80057ec <__d2b>
 800625e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006262:	4683      	mov	fp, r0
 8006264:	2d00      	cmp	r5, #0
 8006266:	d07c      	beq.n	8006362 <_dtoa_r+0x1fa>
 8006268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800626a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800626e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006272:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006276:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800627a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800627e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006282:	4b7d      	ldr	r3, [pc, #500]	; (8006478 <_dtoa_r+0x310>)
 8006284:	2200      	movs	r2, #0
 8006286:	4630      	mov	r0, r6
 8006288:	4639      	mov	r1, r7
 800628a:	f7f9 fffd 	bl	8000288 <__aeabi_dsub>
 800628e:	a36e      	add	r3, pc, #440	; (adr r3, 8006448 <_dtoa_r+0x2e0>)
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	f7fa f9b0 	bl	80005f8 <__aeabi_dmul>
 8006298:	a36d      	add	r3, pc, #436	; (adr r3, 8006450 <_dtoa_r+0x2e8>)
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	f7f9 fff5 	bl	800028c <__adddf3>
 80062a2:	4606      	mov	r6, r0
 80062a4:	4628      	mov	r0, r5
 80062a6:	460f      	mov	r7, r1
 80062a8:	f7fa f93c 	bl	8000524 <__aeabi_i2d>
 80062ac:	a36a      	add	r3, pc, #424	; (adr r3, 8006458 <_dtoa_r+0x2f0>)
 80062ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b2:	f7fa f9a1 	bl	80005f8 <__aeabi_dmul>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4630      	mov	r0, r6
 80062bc:	4639      	mov	r1, r7
 80062be:	f7f9 ffe5 	bl	800028c <__adddf3>
 80062c2:	4606      	mov	r6, r0
 80062c4:	460f      	mov	r7, r1
 80062c6:	f7fa fc31 	bl	8000b2c <__aeabi_d2iz>
 80062ca:	2200      	movs	r2, #0
 80062cc:	4682      	mov	sl, r0
 80062ce:	2300      	movs	r3, #0
 80062d0:	4630      	mov	r0, r6
 80062d2:	4639      	mov	r1, r7
 80062d4:	f7fa fc02 	bl	8000adc <__aeabi_dcmplt>
 80062d8:	b148      	cbz	r0, 80062ee <_dtoa_r+0x186>
 80062da:	4650      	mov	r0, sl
 80062dc:	f7fa f922 	bl	8000524 <__aeabi_i2d>
 80062e0:	4632      	mov	r2, r6
 80062e2:	463b      	mov	r3, r7
 80062e4:	f7fa fbf0 	bl	8000ac8 <__aeabi_dcmpeq>
 80062e8:	b908      	cbnz	r0, 80062ee <_dtoa_r+0x186>
 80062ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062ee:	f1ba 0f16 	cmp.w	sl, #22
 80062f2:	d854      	bhi.n	800639e <_dtoa_r+0x236>
 80062f4:	4b61      	ldr	r3, [pc, #388]	; (800647c <_dtoa_r+0x314>)
 80062f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80062fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006302:	f7fa fbeb 	bl	8000adc <__aeabi_dcmplt>
 8006306:	2800      	cmp	r0, #0
 8006308:	d04b      	beq.n	80063a2 <_dtoa_r+0x23a>
 800630a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800630e:	2300      	movs	r3, #0
 8006310:	930e      	str	r3, [sp, #56]	; 0x38
 8006312:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006314:	1b5d      	subs	r5, r3, r5
 8006316:	1e6b      	subs	r3, r5, #1
 8006318:	9304      	str	r3, [sp, #16]
 800631a:	bf43      	ittte	mi
 800631c:	2300      	movmi	r3, #0
 800631e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006322:	9304      	strmi	r3, [sp, #16]
 8006324:	f04f 0800 	movpl.w	r8, #0
 8006328:	f1ba 0f00 	cmp.w	sl, #0
 800632c:	db3b      	blt.n	80063a6 <_dtoa_r+0x23e>
 800632e:	9b04      	ldr	r3, [sp, #16]
 8006330:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006334:	4453      	add	r3, sl
 8006336:	9304      	str	r3, [sp, #16]
 8006338:	2300      	movs	r3, #0
 800633a:	9306      	str	r3, [sp, #24]
 800633c:	9b05      	ldr	r3, [sp, #20]
 800633e:	2b09      	cmp	r3, #9
 8006340:	d869      	bhi.n	8006416 <_dtoa_r+0x2ae>
 8006342:	2b05      	cmp	r3, #5
 8006344:	bfc4      	itt	gt
 8006346:	3b04      	subgt	r3, #4
 8006348:	9305      	strgt	r3, [sp, #20]
 800634a:	9b05      	ldr	r3, [sp, #20]
 800634c:	f1a3 0302 	sub.w	r3, r3, #2
 8006350:	bfcc      	ite	gt
 8006352:	2500      	movgt	r5, #0
 8006354:	2501      	movle	r5, #1
 8006356:	2b03      	cmp	r3, #3
 8006358:	d869      	bhi.n	800642e <_dtoa_r+0x2c6>
 800635a:	e8df f003 	tbb	[pc, r3]
 800635e:	4e2c      	.short	0x4e2c
 8006360:	5a4c      	.short	0x5a4c
 8006362:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006366:	441d      	add	r5, r3
 8006368:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800636c:	2b20      	cmp	r3, #32
 800636e:	bfc1      	itttt	gt
 8006370:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006374:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006378:	fa09 f303 	lslgt.w	r3, r9, r3
 800637c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006380:	bfda      	itte	le
 8006382:	f1c3 0320 	rsble	r3, r3, #32
 8006386:	fa06 f003 	lslle.w	r0, r6, r3
 800638a:	4318      	orrgt	r0, r3
 800638c:	f7fa f8ba 	bl	8000504 <__aeabi_ui2d>
 8006390:	2301      	movs	r3, #1
 8006392:	4606      	mov	r6, r0
 8006394:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006398:	3d01      	subs	r5, #1
 800639a:	9310      	str	r3, [sp, #64]	; 0x40
 800639c:	e771      	b.n	8006282 <_dtoa_r+0x11a>
 800639e:	2301      	movs	r3, #1
 80063a0:	e7b6      	b.n	8006310 <_dtoa_r+0x1a8>
 80063a2:	900e      	str	r0, [sp, #56]	; 0x38
 80063a4:	e7b5      	b.n	8006312 <_dtoa_r+0x1aa>
 80063a6:	f1ca 0300 	rsb	r3, sl, #0
 80063aa:	9306      	str	r3, [sp, #24]
 80063ac:	2300      	movs	r3, #0
 80063ae:	eba8 080a 	sub.w	r8, r8, sl
 80063b2:	930d      	str	r3, [sp, #52]	; 0x34
 80063b4:	e7c2      	b.n	800633c <_dtoa_r+0x1d4>
 80063b6:	2300      	movs	r3, #0
 80063b8:	9308      	str	r3, [sp, #32]
 80063ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063bc:	2b00      	cmp	r3, #0
 80063be:	dc39      	bgt.n	8006434 <_dtoa_r+0x2cc>
 80063c0:	f04f 0901 	mov.w	r9, #1
 80063c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80063c8:	464b      	mov	r3, r9
 80063ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80063ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80063d0:	2200      	movs	r2, #0
 80063d2:	6042      	str	r2, [r0, #4]
 80063d4:	2204      	movs	r2, #4
 80063d6:	f102 0614 	add.w	r6, r2, #20
 80063da:	429e      	cmp	r6, r3
 80063dc:	6841      	ldr	r1, [r0, #4]
 80063de:	d92f      	bls.n	8006440 <_dtoa_r+0x2d8>
 80063e0:	4620      	mov	r0, r4
 80063e2:	f7fe fee1 	bl	80051a8 <_Balloc>
 80063e6:	9000      	str	r0, [sp, #0]
 80063e8:	2800      	cmp	r0, #0
 80063ea:	d14b      	bne.n	8006484 <_dtoa_r+0x31c>
 80063ec:	4b24      	ldr	r3, [pc, #144]	; (8006480 <_dtoa_r+0x318>)
 80063ee:	4602      	mov	r2, r0
 80063f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80063f4:	e6d1      	b.n	800619a <_dtoa_r+0x32>
 80063f6:	2301      	movs	r3, #1
 80063f8:	e7de      	b.n	80063b8 <_dtoa_r+0x250>
 80063fa:	2300      	movs	r3, #0
 80063fc:	9308      	str	r3, [sp, #32]
 80063fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006400:	eb0a 0903 	add.w	r9, sl, r3
 8006404:	f109 0301 	add.w	r3, r9, #1
 8006408:	2b01      	cmp	r3, #1
 800640a:	9301      	str	r3, [sp, #4]
 800640c:	bfb8      	it	lt
 800640e:	2301      	movlt	r3, #1
 8006410:	e7dd      	b.n	80063ce <_dtoa_r+0x266>
 8006412:	2301      	movs	r3, #1
 8006414:	e7f2      	b.n	80063fc <_dtoa_r+0x294>
 8006416:	2501      	movs	r5, #1
 8006418:	2300      	movs	r3, #0
 800641a:	9305      	str	r3, [sp, #20]
 800641c:	9508      	str	r5, [sp, #32]
 800641e:	f04f 39ff 	mov.w	r9, #4294967295
 8006422:	2200      	movs	r2, #0
 8006424:	f8cd 9004 	str.w	r9, [sp, #4]
 8006428:	2312      	movs	r3, #18
 800642a:	9209      	str	r2, [sp, #36]	; 0x24
 800642c:	e7cf      	b.n	80063ce <_dtoa_r+0x266>
 800642e:	2301      	movs	r3, #1
 8006430:	9308      	str	r3, [sp, #32]
 8006432:	e7f4      	b.n	800641e <_dtoa_r+0x2b6>
 8006434:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006438:	f8cd 9004 	str.w	r9, [sp, #4]
 800643c:	464b      	mov	r3, r9
 800643e:	e7c6      	b.n	80063ce <_dtoa_r+0x266>
 8006440:	3101      	adds	r1, #1
 8006442:	6041      	str	r1, [r0, #4]
 8006444:	0052      	lsls	r2, r2, #1
 8006446:	e7c6      	b.n	80063d6 <_dtoa_r+0x26e>
 8006448:	636f4361 	.word	0x636f4361
 800644c:	3fd287a7 	.word	0x3fd287a7
 8006450:	8b60c8b3 	.word	0x8b60c8b3
 8006454:	3fc68a28 	.word	0x3fc68a28
 8006458:	509f79fb 	.word	0x509f79fb
 800645c:	3fd34413 	.word	0x3fd34413
 8006460:	080082f4 	.word	0x080082f4
 8006464:	080084fa 	.word	0x080084fa
 8006468:	7ff00000 	.word	0x7ff00000
 800646c:	080084f4 	.word	0x080084f4
 8006470:	080084eb 	.word	0x080084eb
 8006474:	080084f9 	.word	0x080084f9
 8006478:	3ff80000 	.word	0x3ff80000
 800647c:	080083a8 	.word	0x080083a8
 8006480:	0800836b 	.word	0x0800836b
 8006484:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006486:	9a00      	ldr	r2, [sp, #0]
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	9b01      	ldr	r3, [sp, #4]
 800648c:	2b0e      	cmp	r3, #14
 800648e:	f200 80ad 	bhi.w	80065ec <_dtoa_r+0x484>
 8006492:	2d00      	cmp	r5, #0
 8006494:	f000 80aa 	beq.w	80065ec <_dtoa_r+0x484>
 8006498:	f1ba 0f00 	cmp.w	sl, #0
 800649c:	dd36      	ble.n	800650c <_dtoa_r+0x3a4>
 800649e:	4ac3      	ldr	r2, [pc, #780]	; (80067ac <_dtoa_r+0x644>)
 80064a0:	f00a 030f 	and.w	r3, sl, #15
 80064a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80064a8:	ed93 7b00 	vldr	d7, [r3]
 80064ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80064b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80064b4:	eeb0 8a47 	vmov.f32	s16, s14
 80064b8:	eef0 8a67 	vmov.f32	s17, s15
 80064bc:	d016      	beq.n	80064ec <_dtoa_r+0x384>
 80064be:	4bbc      	ldr	r3, [pc, #752]	; (80067b0 <_dtoa_r+0x648>)
 80064c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064c8:	f7fa f9c0 	bl	800084c <__aeabi_ddiv>
 80064cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064d0:	f007 070f 	and.w	r7, r7, #15
 80064d4:	2503      	movs	r5, #3
 80064d6:	4eb6      	ldr	r6, [pc, #728]	; (80067b0 <_dtoa_r+0x648>)
 80064d8:	b957      	cbnz	r7, 80064f0 <_dtoa_r+0x388>
 80064da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064de:	ec53 2b18 	vmov	r2, r3, d8
 80064e2:	f7fa f9b3 	bl	800084c <__aeabi_ddiv>
 80064e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ea:	e029      	b.n	8006540 <_dtoa_r+0x3d8>
 80064ec:	2502      	movs	r5, #2
 80064ee:	e7f2      	b.n	80064d6 <_dtoa_r+0x36e>
 80064f0:	07f9      	lsls	r1, r7, #31
 80064f2:	d508      	bpl.n	8006506 <_dtoa_r+0x39e>
 80064f4:	ec51 0b18 	vmov	r0, r1, d8
 80064f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064fc:	f7fa f87c 	bl	80005f8 <__aeabi_dmul>
 8006500:	ec41 0b18 	vmov	d8, r0, r1
 8006504:	3501      	adds	r5, #1
 8006506:	107f      	asrs	r7, r7, #1
 8006508:	3608      	adds	r6, #8
 800650a:	e7e5      	b.n	80064d8 <_dtoa_r+0x370>
 800650c:	f000 80a6 	beq.w	800665c <_dtoa_r+0x4f4>
 8006510:	f1ca 0600 	rsb	r6, sl, #0
 8006514:	4ba5      	ldr	r3, [pc, #660]	; (80067ac <_dtoa_r+0x644>)
 8006516:	4fa6      	ldr	r7, [pc, #664]	; (80067b0 <_dtoa_r+0x648>)
 8006518:	f006 020f 	and.w	r2, r6, #15
 800651c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006524:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006528:	f7fa f866 	bl	80005f8 <__aeabi_dmul>
 800652c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006530:	1136      	asrs	r6, r6, #4
 8006532:	2300      	movs	r3, #0
 8006534:	2502      	movs	r5, #2
 8006536:	2e00      	cmp	r6, #0
 8006538:	f040 8085 	bne.w	8006646 <_dtoa_r+0x4de>
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1d2      	bne.n	80064e6 <_dtoa_r+0x37e>
 8006540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 808c 	beq.w	8006660 <_dtoa_r+0x4f8>
 8006548:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800654c:	4b99      	ldr	r3, [pc, #612]	; (80067b4 <_dtoa_r+0x64c>)
 800654e:	2200      	movs	r2, #0
 8006550:	4630      	mov	r0, r6
 8006552:	4639      	mov	r1, r7
 8006554:	f7fa fac2 	bl	8000adc <__aeabi_dcmplt>
 8006558:	2800      	cmp	r0, #0
 800655a:	f000 8081 	beq.w	8006660 <_dtoa_r+0x4f8>
 800655e:	9b01      	ldr	r3, [sp, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d07d      	beq.n	8006660 <_dtoa_r+0x4f8>
 8006564:	f1b9 0f00 	cmp.w	r9, #0
 8006568:	dd3c      	ble.n	80065e4 <_dtoa_r+0x47c>
 800656a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800656e:	9307      	str	r3, [sp, #28]
 8006570:	2200      	movs	r2, #0
 8006572:	4b91      	ldr	r3, [pc, #580]	; (80067b8 <_dtoa_r+0x650>)
 8006574:	4630      	mov	r0, r6
 8006576:	4639      	mov	r1, r7
 8006578:	f7fa f83e 	bl	80005f8 <__aeabi_dmul>
 800657c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006580:	3501      	adds	r5, #1
 8006582:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006586:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800658a:	4628      	mov	r0, r5
 800658c:	f7f9 ffca 	bl	8000524 <__aeabi_i2d>
 8006590:	4632      	mov	r2, r6
 8006592:	463b      	mov	r3, r7
 8006594:	f7fa f830 	bl	80005f8 <__aeabi_dmul>
 8006598:	4b88      	ldr	r3, [pc, #544]	; (80067bc <_dtoa_r+0x654>)
 800659a:	2200      	movs	r2, #0
 800659c:	f7f9 fe76 	bl	800028c <__adddf3>
 80065a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80065a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065a8:	9303      	str	r3, [sp, #12]
 80065aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d15c      	bne.n	800666a <_dtoa_r+0x502>
 80065b0:	4b83      	ldr	r3, [pc, #524]	; (80067c0 <_dtoa_r+0x658>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	4630      	mov	r0, r6
 80065b6:	4639      	mov	r1, r7
 80065b8:	f7f9 fe66 	bl	8000288 <__aeabi_dsub>
 80065bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065c0:	4606      	mov	r6, r0
 80065c2:	460f      	mov	r7, r1
 80065c4:	f7fa faa8 	bl	8000b18 <__aeabi_dcmpgt>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	f040 8296 	bne.w	8006afa <_dtoa_r+0x992>
 80065ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80065d2:	4630      	mov	r0, r6
 80065d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065d8:	4639      	mov	r1, r7
 80065da:	f7fa fa7f 	bl	8000adc <__aeabi_dcmplt>
 80065de:	2800      	cmp	r0, #0
 80065e0:	f040 8288 	bne.w	8006af4 <_dtoa_r+0x98c>
 80065e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f2c0 8158 	blt.w	80068a4 <_dtoa_r+0x73c>
 80065f4:	f1ba 0f0e 	cmp.w	sl, #14
 80065f8:	f300 8154 	bgt.w	80068a4 <_dtoa_r+0x73c>
 80065fc:	4b6b      	ldr	r3, [pc, #428]	; (80067ac <_dtoa_r+0x644>)
 80065fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006602:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006608:	2b00      	cmp	r3, #0
 800660a:	f280 80e3 	bge.w	80067d4 <_dtoa_r+0x66c>
 800660e:	9b01      	ldr	r3, [sp, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	f300 80df 	bgt.w	80067d4 <_dtoa_r+0x66c>
 8006616:	f040 826d 	bne.w	8006af4 <_dtoa_r+0x98c>
 800661a:	4b69      	ldr	r3, [pc, #420]	; (80067c0 <_dtoa_r+0x658>)
 800661c:	2200      	movs	r2, #0
 800661e:	4640      	mov	r0, r8
 8006620:	4649      	mov	r1, r9
 8006622:	f7f9 ffe9 	bl	80005f8 <__aeabi_dmul>
 8006626:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800662a:	f7fa fa6b 	bl	8000b04 <__aeabi_dcmpge>
 800662e:	9e01      	ldr	r6, [sp, #4]
 8006630:	4637      	mov	r7, r6
 8006632:	2800      	cmp	r0, #0
 8006634:	f040 8243 	bne.w	8006abe <_dtoa_r+0x956>
 8006638:	9d00      	ldr	r5, [sp, #0]
 800663a:	2331      	movs	r3, #49	; 0x31
 800663c:	f805 3b01 	strb.w	r3, [r5], #1
 8006640:	f10a 0a01 	add.w	sl, sl, #1
 8006644:	e23f      	b.n	8006ac6 <_dtoa_r+0x95e>
 8006646:	07f2      	lsls	r2, r6, #31
 8006648:	d505      	bpl.n	8006656 <_dtoa_r+0x4ee>
 800664a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800664e:	f7f9 ffd3 	bl	80005f8 <__aeabi_dmul>
 8006652:	3501      	adds	r5, #1
 8006654:	2301      	movs	r3, #1
 8006656:	1076      	asrs	r6, r6, #1
 8006658:	3708      	adds	r7, #8
 800665a:	e76c      	b.n	8006536 <_dtoa_r+0x3ce>
 800665c:	2502      	movs	r5, #2
 800665e:	e76f      	b.n	8006540 <_dtoa_r+0x3d8>
 8006660:	9b01      	ldr	r3, [sp, #4]
 8006662:	f8cd a01c 	str.w	sl, [sp, #28]
 8006666:	930c      	str	r3, [sp, #48]	; 0x30
 8006668:	e78d      	b.n	8006586 <_dtoa_r+0x41e>
 800666a:	9900      	ldr	r1, [sp, #0]
 800666c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800666e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006670:	4b4e      	ldr	r3, [pc, #312]	; (80067ac <_dtoa_r+0x644>)
 8006672:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006676:	4401      	add	r1, r0
 8006678:	9102      	str	r1, [sp, #8]
 800667a:	9908      	ldr	r1, [sp, #32]
 800667c:	eeb0 8a47 	vmov.f32	s16, s14
 8006680:	eef0 8a67 	vmov.f32	s17, s15
 8006684:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006688:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800668c:	2900      	cmp	r1, #0
 800668e:	d045      	beq.n	800671c <_dtoa_r+0x5b4>
 8006690:	494c      	ldr	r1, [pc, #304]	; (80067c4 <_dtoa_r+0x65c>)
 8006692:	2000      	movs	r0, #0
 8006694:	f7fa f8da 	bl	800084c <__aeabi_ddiv>
 8006698:	ec53 2b18 	vmov	r2, r3, d8
 800669c:	f7f9 fdf4 	bl	8000288 <__aeabi_dsub>
 80066a0:	9d00      	ldr	r5, [sp, #0]
 80066a2:	ec41 0b18 	vmov	d8, r0, r1
 80066a6:	4639      	mov	r1, r7
 80066a8:	4630      	mov	r0, r6
 80066aa:	f7fa fa3f 	bl	8000b2c <__aeabi_d2iz>
 80066ae:	900c      	str	r0, [sp, #48]	; 0x30
 80066b0:	f7f9 ff38 	bl	8000524 <__aeabi_i2d>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4630      	mov	r0, r6
 80066ba:	4639      	mov	r1, r7
 80066bc:	f7f9 fde4 	bl	8000288 <__aeabi_dsub>
 80066c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066c2:	3330      	adds	r3, #48	; 0x30
 80066c4:	f805 3b01 	strb.w	r3, [r5], #1
 80066c8:	ec53 2b18 	vmov	r2, r3, d8
 80066cc:	4606      	mov	r6, r0
 80066ce:	460f      	mov	r7, r1
 80066d0:	f7fa fa04 	bl	8000adc <__aeabi_dcmplt>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	d165      	bne.n	80067a4 <_dtoa_r+0x63c>
 80066d8:	4632      	mov	r2, r6
 80066da:	463b      	mov	r3, r7
 80066dc:	4935      	ldr	r1, [pc, #212]	; (80067b4 <_dtoa_r+0x64c>)
 80066de:	2000      	movs	r0, #0
 80066e0:	f7f9 fdd2 	bl	8000288 <__aeabi_dsub>
 80066e4:	ec53 2b18 	vmov	r2, r3, d8
 80066e8:	f7fa f9f8 	bl	8000adc <__aeabi_dcmplt>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	f040 80b9 	bne.w	8006864 <_dtoa_r+0x6fc>
 80066f2:	9b02      	ldr	r3, [sp, #8]
 80066f4:	429d      	cmp	r5, r3
 80066f6:	f43f af75 	beq.w	80065e4 <_dtoa_r+0x47c>
 80066fa:	4b2f      	ldr	r3, [pc, #188]	; (80067b8 <_dtoa_r+0x650>)
 80066fc:	ec51 0b18 	vmov	r0, r1, d8
 8006700:	2200      	movs	r2, #0
 8006702:	f7f9 ff79 	bl	80005f8 <__aeabi_dmul>
 8006706:	4b2c      	ldr	r3, [pc, #176]	; (80067b8 <_dtoa_r+0x650>)
 8006708:	ec41 0b18 	vmov	d8, r0, r1
 800670c:	2200      	movs	r2, #0
 800670e:	4630      	mov	r0, r6
 8006710:	4639      	mov	r1, r7
 8006712:	f7f9 ff71 	bl	80005f8 <__aeabi_dmul>
 8006716:	4606      	mov	r6, r0
 8006718:	460f      	mov	r7, r1
 800671a:	e7c4      	b.n	80066a6 <_dtoa_r+0x53e>
 800671c:	ec51 0b17 	vmov	r0, r1, d7
 8006720:	f7f9 ff6a 	bl	80005f8 <__aeabi_dmul>
 8006724:	9b02      	ldr	r3, [sp, #8]
 8006726:	9d00      	ldr	r5, [sp, #0]
 8006728:	930c      	str	r3, [sp, #48]	; 0x30
 800672a:	ec41 0b18 	vmov	d8, r0, r1
 800672e:	4639      	mov	r1, r7
 8006730:	4630      	mov	r0, r6
 8006732:	f7fa f9fb 	bl	8000b2c <__aeabi_d2iz>
 8006736:	9011      	str	r0, [sp, #68]	; 0x44
 8006738:	f7f9 fef4 	bl	8000524 <__aeabi_i2d>
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	4630      	mov	r0, r6
 8006742:	4639      	mov	r1, r7
 8006744:	f7f9 fda0 	bl	8000288 <__aeabi_dsub>
 8006748:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800674a:	3330      	adds	r3, #48	; 0x30
 800674c:	f805 3b01 	strb.w	r3, [r5], #1
 8006750:	9b02      	ldr	r3, [sp, #8]
 8006752:	429d      	cmp	r5, r3
 8006754:	4606      	mov	r6, r0
 8006756:	460f      	mov	r7, r1
 8006758:	f04f 0200 	mov.w	r2, #0
 800675c:	d134      	bne.n	80067c8 <_dtoa_r+0x660>
 800675e:	4b19      	ldr	r3, [pc, #100]	; (80067c4 <_dtoa_r+0x65c>)
 8006760:	ec51 0b18 	vmov	r0, r1, d8
 8006764:	f7f9 fd92 	bl	800028c <__adddf3>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4630      	mov	r0, r6
 800676e:	4639      	mov	r1, r7
 8006770:	f7fa f9d2 	bl	8000b18 <__aeabi_dcmpgt>
 8006774:	2800      	cmp	r0, #0
 8006776:	d175      	bne.n	8006864 <_dtoa_r+0x6fc>
 8006778:	ec53 2b18 	vmov	r2, r3, d8
 800677c:	4911      	ldr	r1, [pc, #68]	; (80067c4 <_dtoa_r+0x65c>)
 800677e:	2000      	movs	r0, #0
 8006780:	f7f9 fd82 	bl	8000288 <__aeabi_dsub>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4630      	mov	r0, r6
 800678a:	4639      	mov	r1, r7
 800678c:	f7fa f9a6 	bl	8000adc <__aeabi_dcmplt>
 8006790:	2800      	cmp	r0, #0
 8006792:	f43f af27 	beq.w	80065e4 <_dtoa_r+0x47c>
 8006796:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006798:	1e6b      	subs	r3, r5, #1
 800679a:	930c      	str	r3, [sp, #48]	; 0x30
 800679c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067a0:	2b30      	cmp	r3, #48	; 0x30
 80067a2:	d0f8      	beq.n	8006796 <_dtoa_r+0x62e>
 80067a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80067a8:	e04a      	b.n	8006840 <_dtoa_r+0x6d8>
 80067aa:	bf00      	nop
 80067ac:	080083a8 	.word	0x080083a8
 80067b0:	08008380 	.word	0x08008380
 80067b4:	3ff00000 	.word	0x3ff00000
 80067b8:	40240000 	.word	0x40240000
 80067bc:	401c0000 	.word	0x401c0000
 80067c0:	40140000 	.word	0x40140000
 80067c4:	3fe00000 	.word	0x3fe00000
 80067c8:	4baf      	ldr	r3, [pc, #700]	; (8006a88 <_dtoa_r+0x920>)
 80067ca:	f7f9 ff15 	bl	80005f8 <__aeabi_dmul>
 80067ce:	4606      	mov	r6, r0
 80067d0:	460f      	mov	r7, r1
 80067d2:	e7ac      	b.n	800672e <_dtoa_r+0x5c6>
 80067d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80067d8:	9d00      	ldr	r5, [sp, #0]
 80067da:	4642      	mov	r2, r8
 80067dc:	464b      	mov	r3, r9
 80067de:	4630      	mov	r0, r6
 80067e0:	4639      	mov	r1, r7
 80067e2:	f7fa f833 	bl	800084c <__aeabi_ddiv>
 80067e6:	f7fa f9a1 	bl	8000b2c <__aeabi_d2iz>
 80067ea:	9002      	str	r0, [sp, #8]
 80067ec:	f7f9 fe9a 	bl	8000524 <__aeabi_i2d>
 80067f0:	4642      	mov	r2, r8
 80067f2:	464b      	mov	r3, r9
 80067f4:	f7f9 ff00 	bl	80005f8 <__aeabi_dmul>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	4630      	mov	r0, r6
 80067fe:	4639      	mov	r1, r7
 8006800:	f7f9 fd42 	bl	8000288 <__aeabi_dsub>
 8006804:	9e02      	ldr	r6, [sp, #8]
 8006806:	9f01      	ldr	r7, [sp, #4]
 8006808:	3630      	adds	r6, #48	; 0x30
 800680a:	f805 6b01 	strb.w	r6, [r5], #1
 800680e:	9e00      	ldr	r6, [sp, #0]
 8006810:	1bae      	subs	r6, r5, r6
 8006812:	42b7      	cmp	r7, r6
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	d137      	bne.n	800688a <_dtoa_r+0x722>
 800681a:	f7f9 fd37 	bl	800028c <__adddf3>
 800681e:	4642      	mov	r2, r8
 8006820:	464b      	mov	r3, r9
 8006822:	4606      	mov	r6, r0
 8006824:	460f      	mov	r7, r1
 8006826:	f7fa f977 	bl	8000b18 <__aeabi_dcmpgt>
 800682a:	b9c8      	cbnz	r0, 8006860 <_dtoa_r+0x6f8>
 800682c:	4642      	mov	r2, r8
 800682e:	464b      	mov	r3, r9
 8006830:	4630      	mov	r0, r6
 8006832:	4639      	mov	r1, r7
 8006834:	f7fa f948 	bl	8000ac8 <__aeabi_dcmpeq>
 8006838:	b110      	cbz	r0, 8006840 <_dtoa_r+0x6d8>
 800683a:	9b02      	ldr	r3, [sp, #8]
 800683c:	07d9      	lsls	r1, r3, #31
 800683e:	d40f      	bmi.n	8006860 <_dtoa_r+0x6f8>
 8006840:	4620      	mov	r0, r4
 8006842:	4659      	mov	r1, fp
 8006844:	f7fe fcf0 	bl	8005228 <_Bfree>
 8006848:	2300      	movs	r3, #0
 800684a:	702b      	strb	r3, [r5, #0]
 800684c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800684e:	f10a 0001 	add.w	r0, sl, #1
 8006852:	6018      	str	r0, [r3, #0]
 8006854:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006856:	2b00      	cmp	r3, #0
 8006858:	f43f acd8 	beq.w	800620c <_dtoa_r+0xa4>
 800685c:	601d      	str	r5, [r3, #0]
 800685e:	e4d5      	b.n	800620c <_dtoa_r+0xa4>
 8006860:	f8cd a01c 	str.w	sl, [sp, #28]
 8006864:	462b      	mov	r3, r5
 8006866:	461d      	mov	r5, r3
 8006868:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800686c:	2a39      	cmp	r2, #57	; 0x39
 800686e:	d108      	bne.n	8006882 <_dtoa_r+0x71a>
 8006870:	9a00      	ldr	r2, [sp, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	d1f7      	bne.n	8006866 <_dtoa_r+0x6fe>
 8006876:	9a07      	ldr	r2, [sp, #28]
 8006878:	9900      	ldr	r1, [sp, #0]
 800687a:	3201      	adds	r2, #1
 800687c:	9207      	str	r2, [sp, #28]
 800687e:	2230      	movs	r2, #48	; 0x30
 8006880:	700a      	strb	r2, [r1, #0]
 8006882:	781a      	ldrb	r2, [r3, #0]
 8006884:	3201      	adds	r2, #1
 8006886:	701a      	strb	r2, [r3, #0]
 8006888:	e78c      	b.n	80067a4 <_dtoa_r+0x63c>
 800688a:	4b7f      	ldr	r3, [pc, #508]	; (8006a88 <_dtoa_r+0x920>)
 800688c:	2200      	movs	r2, #0
 800688e:	f7f9 feb3 	bl	80005f8 <__aeabi_dmul>
 8006892:	2200      	movs	r2, #0
 8006894:	2300      	movs	r3, #0
 8006896:	4606      	mov	r6, r0
 8006898:	460f      	mov	r7, r1
 800689a:	f7fa f915 	bl	8000ac8 <__aeabi_dcmpeq>
 800689e:	2800      	cmp	r0, #0
 80068a0:	d09b      	beq.n	80067da <_dtoa_r+0x672>
 80068a2:	e7cd      	b.n	8006840 <_dtoa_r+0x6d8>
 80068a4:	9a08      	ldr	r2, [sp, #32]
 80068a6:	2a00      	cmp	r2, #0
 80068a8:	f000 80c4 	beq.w	8006a34 <_dtoa_r+0x8cc>
 80068ac:	9a05      	ldr	r2, [sp, #20]
 80068ae:	2a01      	cmp	r2, #1
 80068b0:	f300 80a8 	bgt.w	8006a04 <_dtoa_r+0x89c>
 80068b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068b6:	2a00      	cmp	r2, #0
 80068b8:	f000 80a0 	beq.w	80069fc <_dtoa_r+0x894>
 80068bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068c0:	9e06      	ldr	r6, [sp, #24]
 80068c2:	4645      	mov	r5, r8
 80068c4:	9a04      	ldr	r2, [sp, #16]
 80068c6:	2101      	movs	r1, #1
 80068c8:	441a      	add	r2, r3
 80068ca:	4620      	mov	r0, r4
 80068cc:	4498      	add	r8, r3
 80068ce:	9204      	str	r2, [sp, #16]
 80068d0:	f7fe fd66 	bl	80053a0 <__i2b>
 80068d4:	4607      	mov	r7, r0
 80068d6:	2d00      	cmp	r5, #0
 80068d8:	dd0b      	ble.n	80068f2 <_dtoa_r+0x78a>
 80068da:	9b04      	ldr	r3, [sp, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	dd08      	ble.n	80068f2 <_dtoa_r+0x78a>
 80068e0:	42ab      	cmp	r3, r5
 80068e2:	9a04      	ldr	r2, [sp, #16]
 80068e4:	bfa8      	it	ge
 80068e6:	462b      	movge	r3, r5
 80068e8:	eba8 0803 	sub.w	r8, r8, r3
 80068ec:	1aed      	subs	r5, r5, r3
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	9304      	str	r3, [sp, #16]
 80068f2:	9b06      	ldr	r3, [sp, #24]
 80068f4:	b1fb      	cbz	r3, 8006936 <_dtoa_r+0x7ce>
 80068f6:	9b08      	ldr	r3, [sp, #32]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 809f 	beq.w	8006a3c <_dtoa_r+0x8d4>
 80068fe:	2e00      	cmp	r6, #0
 8006900:	dd11      	ble.n	8006926 <_dtoa_r+0x7be>
 8006902:	4639      	mov	r1, r7
 8006904:	4632      	mov	r2, r6
 8006906:	4620      	mov	r0, r4
 8006908:	f7fe fe06 	bl	8005518 <__pow5mult>
 800690c:	465a      	mov	r2, fp
 800690e:	4601      	mov	r1, r0
 8006910:	4607      	mov	r7, r0
 8006912:	4620      	mov	r0, r4
 8006914:	f7fe fd5a 	bl	80053cc <__multiply>
 8006918:	4659      	mov	r1, fp
 800691a:	9007      	str	r0, [sp, #28]
 800691c:	4620      	mov	r0, r4
 800691e:	f7fe fc83 	bl	8005228 <_Bfree>
 8006922:	9b07      	ldr	r3, [sp, #28]
 8006924:	469b      	mov	fp, r3
 8006926:	9b06      	ldr	r3, [sp, #24]
 8006928:	1b9a      	subs	r2, r3, r6
 800692a:	d004      	beq.n	8006936 <_dtoa_r+0x7ce>
 800692c:	4659      	mov	r1, fp
 800692e:	4620      	mov	r0, r4
 8006930:	f7fe fdf2 	bl	8005518 <__pow5mult>
 8006934:	4683      	mov	fp, r0
 8006936:	2101      	movs	r1, #1
 8006938:	4620      	mov	r0, r4
 800693a:	f7fe fd31 	bl	80053a0 <__i2b>
 800693e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006940:	2b00      	cmp	r3, #0
 8006942:	4606      	mov	r6, r0
 8006944:	dd7c      	ble.n	8006a40 <_dtoa_r+0x8d8>
 8006946:	461a      	mov	r2, r3
 8006948:	4601      	mov	r1, r0
 800694a:	4620      	mov	r0, r4
 800694c:	f7fe fde4 	bl	8005518 <__pow5mult>
 8006950:	9b05      	ldr	r3, [sp, #20]
 8006952:	2b01      	cmp	r3, #1
 8006954:	4606      	mov	r6, r0
 8006956:	dd76      	ble.n	8006a46 <_dtoa_r+0x8de>
 8006958:	2300      	movs	r3, #0
 800695a:	9306      	str	r3, [sp, #24]
 800695c:	6933      	ldr	r3, [r6, #16]
 800695e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006962:	6918      	ldr	r0, [r3, #16]
 8006964:	f7fe fccc 	bl	8005300 <__hi0bits>
 8006968:	f1c0 0020 	rsb	r0, r0, #32
 800696c:	9b04      	ldr	r3, [sp, #16]
 800696e:	4418      	add	r0, r3
 8006970:	f010 001f 	ands.w	r0, r0, #31
 8006974:	f000 8086 	beq.w	8006a84 <_dtoa_r+0x91c>
 8006978:	f1c0 0320 	rsb	r3, r0, #32
 800697c:	2b04      	cmp	r3, #4
 800697e:	dd7f      	ble.n	8006a80 <_dtoa_r+0x918>
 8006980:	f1c0 001c 	rsb	r0, r0, #28
 8006984:	9b04      	ldr	r3, [sp, #16]
 8006986:	4403      	add	r3, r0
 8006988:	4480      	add	r8, r0
 800698a:	4405      	add	r5, r0
 800698c:	9304      	str	r3, [sp, #16]
 800698e:	f1b8 0f00 	cmp.w	r8, #0
 8006992:	dd05      	ble.n	80069a0 <_dtoa_r+0x838>
 8006994:	4659      	mov	r1, fp
 8006996:	4642      	mov	r2, r8
 8006998:	4620      	mov	r0, r4
 800699a:	f7fe fe17 	bl	80055cc <__lshift>
 800699e:	4683      	mov	fp, r0
 80069a0:	9b04      	ldr	r3, [sp, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	dd05      	ble.n	80069b2 <_dtoa_r+0x84a>
 80069a6:	4631      	mov	r1, r6
 80069a8:	461a      	mov	r2, r3
 80069aa:	4620      	mov	r0, r4
 80069ac:	f7fe fe0e 	bl	80055cc <__lshift>
 80069b0:	4606      	mov	r6, r0
 80069b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d069      	beq.n	8006a8c <_dtoa_r+0x924>
 80069b8:	4631      	mov	r1, r6
 80069ba:	4658      	mov	r0, fp
 80069bc:	f7fe fe72 	bl	80056a4 <__mcmp>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	da63      	bge.n	8006a8c <_dtoa_r+0x924>
 80069c4:	2300      	movs	r3, #0
 80069c6:	4659      	mov	r1, fp
 80069c8:	220a      	movs	r2, #10
 80069ca:	4620      	mov	r0, r4
 80069cc:	f7fe fc4e 	bl	800526c <__multadd>
 80069d0:	9b08      	ldr	r3, [sp, #32]
 80069d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069d6:	4683      	mov	fp, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 818f 	beq.w	8006cfc <_dtoa_r+0xb94>
 80069de:	4639      	mov	r1, r7
 80069e0:	2300      	movs	r3, #0
 80069e2:	220a      	movs	r2, #10
 80069e4:	4620      	mov	r0, r4
 80069e6:	f7fe fc41 	bl	800526c <__multadd>
 80069ea:	f1b9 0f00 	cmp.w	r9, #0
 80069ee:	4607      	mov	r7, r0
 80069f0:	f300 808e 	bgt.w	8006b10 <_dtoa_r+0x9a8>
 80069f4:	9b05      	ldr	r3, [sp, #20]
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	dc50      	bgt.n	8006a9c <_dtoa_r+0x934>
 80069fa:	e089      	b.n	8006b10 <_dtoa_r+0x9a8>
 80069fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a02:	e75d      	b.n	80068c0 <_dtoa_r+0x758>
 8006a04:	9b01      	ldr	r3, [sp, #4]
 8006a06:	1e5e      	subs	r6, r3, #1
 8006a08:	9b06      	ldr	r3, [sp, #24]
 8006a0a:	42b3      	cmp	r3, r6
 8006a0c:	bfbf      	itttt	lt
 8006a0e:	9b06      	ldrlt	r3, [sp, #24]
 8006a10:	9606      	strlt	r6, [sp, #24]
 8006a12:	1af2      	sublt	r2, r6, r3
 8006a14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006a16:	bfb6      	itet	lt
 8006a18:	189b      	addlt	r3, r3, r2
 8006a1a:	1b9e      	subge	r6, r3, r6
 8006a1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006a1e:	9b01      	ldr	r3, [sp, #4]
 8006a20:	bfb8      	it	lt
 8006a22:	2600      	movlt	r6, #0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	bfb5      	itete	lt
 8006a28:	eba8 0503 	sublt.w	r5, r8, r3
 8006a2c:	9b01      	ldrge	r3, [sp, #4]
 8006a2e:	2300      	movlt	r3, #0
 8006a30:	4645      	movge	r5, r8
 8006a32:	e747      	b.n	80068c4 <_dtoa_r+0x75c>
 8006a34:	9e06      	ldr	r6, [sp, #24]
 8006a36:	9f08      	ldr	r7, [sp, #32]
 8006a38:	4645      	mov	r5, r8
 8006a3a:	e74c      	b.n	80068d6 <_dtoa_r+0x76e>
 8006a3c:	9a06      	ldr	r2, [sp, #24]
 8006a3e:	e775      	b.n	800692c <_dtoa_r+0x7c4>
 8006a40:	9b05      	ldr	r3, [sp, #20]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	dc18      	bgt.n	8006a78 <_dtoa_r+0x910>
 8006a46:	9b02      	ldr	r3, [sp, #8]
 8006a48:	b9b3      	cbnz	r3, 8006a78 <_dtoa_r+0x910>
 8006a4a:	9b03      	ldr	r3, [sp, #12]
 8006a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a50:	b9a3      	cbnz	r3, 8006a7c <_dtoa_r+0x914>
 8006a52:	9b03      	ldr	r3, [sp, #12]
 8006a54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a58:	0d1b      	lsrs	r3, r3, #20
 8006a5a:	051b      	lsls	r3, r3, #20
 8006a5c:	b12b      	cbz	r3, 8006a6a <_dtoa_r+0x902>
 8006a5e:	9b04      	ldr	r3, [sp, #16]
 8006a60:	3301      	adds	r3, #1
 8006a62:	9304      	str	r3, [sp, #16]
 8006a64:	f108 0801 	add.w	r8, r8, #1
 8006a68:	2301      	movs	r3, #1
 8006a6a:	9306      	str	r3, [sp, #24]
 8006a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f47f af74 	bne.w	800695c <_dtoa_r+0x7f4>
 8006a74:	2001      	movs	r0, #1
 8006a76:	e779      	b.n	800696c <_dtoa_r+0x804>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e7f6      	b.n	8006a6a <_dtoa_r+0x902>
 8006a7c:	9b02      	ldr	r3, [sp, #8]
 8006a7e:	e7f4      	b.n	8006a6a <_dtoa_r+0x902>
 8006a80:	d085      	beq.n	800698e <_dtoa_r+0x826>
 8006a82:	4618      	mov	r0, r3
 8006a84:	301c      	adds	r0, #28
 8006a86:	e77d      	b.n	8006984 <_dtoa_r+0x81c>
 8006a88:	40240000 	.word	0x40240000
 8006a8c:	9b01      	ldr	r3, [sp, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	dc38      	bgt.n	8006b04 <_dtoa_r+0x99c>
 8006a92:	9b05      	ldr	r3, [sp, #20]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	dd35      	ble.n	8006b04 <_dtoa_r+0x99c>
 8006a98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006a9c:	f1b9 0f00 	cmp.w	r9, #0
 8006aa0:	d10d      	bne.n	8006abe <_dtoa_r+0x956>
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	464b      	mov	r3, r9
 8006aa6:	2205      	movs	r2, #5
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f7fe fbdf 	bl	800526c <__multadd>
 8006aae:	4601      	mov	r1, r0
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	4658      	mov	r0, fp
 8006ab4:	f7fe fdf6 	bl	80056a4 <__mcmp>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	f73f adbd 	bgt.w	8006638 <_dtoa_r+0x4d0>
 8006abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac0:	9d00      	ldr	r5, [sp, #0]
 8006ac2:	ea6f 0a03 	mvn.w	sl, r3
 8006ac6:	f04f 0800 	mov.w	r8, #0
 8006aca:	4631      	mov	r1, r6
 8006acc:	4620      	mov	r0, r4
 8006ace:	f7fe fbab 	bl	8005228 <_Bfree>
 8006ad2:	2f00      	cmp	r7, #0
 8006ad4:	f43f aeb4 	beq.w	8006840 <_dtoa_r+0x6d8>
 8006ad8:	f1b8 0f00 	cmp.w	r8, #0
 8006adc:	d005      	beq.n	8006aea <_dtoa_r+0x982>
 8006ade:	45b8      	cmp	r8, r7
 8006ae0:	d003      	beq.n	8006aea <_dtoa_r+0x982>
 8006ae2:	4641      	mov	r1, r8
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f7fe fb9f 	bl	8005228 <_Bfree>
 8006aea:	4639      	mov	r1, r7
 8006aec:	4620      	mov	r0, r4
 8006aee:	f7fe fb9b 	bl	8005228 <_Bfree>
 8006af2:	e6a5      	b.n	8006840 <_dtoa_r+0x6d8>
 8006af4:	2600      	movs	r6, #0
 8006af6:	4637      	mov	r7, r6
 8006af8:	e7e1      	b.n	8006abe <_dtoa_r+0x956>
 8006afa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006afc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006b00:	4637      	mov	r7, r6
 8006b02:	e599      	b.n	8006638 <_dtoa_r+0x4d0>
 8006b04:	9b08      	ldr	r3, [sp, #32]
 8006b06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 80fd 	beq.w	8006d0a <_dtoa_r+0xba2>
 8006b10:	2d00      	cmp	r5, #0
 8006b12:	dd05      	ble.n	8006b20 <_dtoa_r+0x9b8>
 8006b14:	4639      	mov	r1, r7
 8006b16:	462a      	mov	r2, r5
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f7fe fd57 	bl	80055cc <__lshift>
 8006b1e:	4607      	mov	r7, r0
 8006b20:	9b06      	ldr	r3, [sp, #24]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d05c      	beq.n	8006be0 <_dtoa_r+0xa78>
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f7fe fb3d 	bl	80051a8 <_Balloc>
 8006b2e:	4605      	mov	r5, r0
 8006b30:	b928      	cbnz	r0, 8006b3e <_dtoa_r+0x9d6>
 8006b32:	4b80      	ldr	r3, [pc, #512]	; (8006d34 <_dtoa_r+0xbcc>)
 8006b34:	4602      	mov	r2, r0
 8006b36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006b3a:	f7ff bb2e 	b.w	800619a <_dtoa_r+0x32>
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	3202      	adds	r2, #2
 8006b42:	0092      	lsls	r2, r2, #2
 8006b44:	f107 010c 	add.w	r1, r7, #12
 8006b48:	300c      	adds	r0, #12
 8006b4a:	f000 f913 	bl	8006d74 <memcpy>
 8006b4e:	2201      	movs	r2, #1
 8006b50:	4629      	mov	r1, r5
 8006b52:	4620      	mov	r0, r4
 8006b54:	f7fe fd3a 	bl	80055cc <__lshift>
 8006b58:	9b00      	ldr	r3, [sp, #0]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	9301      	str	r3, [sp, #4]
 8006b5e:	9b00      	ldr	r3, [sp, #0]
 8006b60:	444b      	add	r3, r9
 8006b62:	9307      	str	r3, [sp, #28]
 8006b64:	9b02      	ldr	r3, [sp, #8]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	46b8      	mov	r8, r7
 8006b6c:	9306      	str	r3, [sp, #24]
 8006b6e:	4607      	mov	r7, r0
 8006b70:	9b01      	ldr	r3, [sp, #4]
 8006b72:	4631      	mov	r1, r6
 8006b74:	3b01      	subs	r3, #1
 8006b76:	4658      	mov	r0, fp
 8006b78:	9302      	str	r3, [sp, #8]
 8006b7a:	f7ff fa67 	bl	800604c <quorem>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	3330      	adds	r3, #48	; 0x30
 8006b82:	9004      	str	r0, [sp, #16]
 8006b84:	4641      	mov	r1, r8
 8006b86:	4658      	mov	r0, fp
 8006b88:	9308      	str	r3, [sp, #32]
 8006b8a:	f7fe fd8b 	bl	80056a4 <__mcmp>
 8006b8e:	463a      	mov	r2, r7
 8006b90:	4681      	mov	r9, r0
 8006b92:	4631      	mov	r1, r6
 8006b94:	4620      	mov	r0, r4
 8006b96:	f7fe fda1 	bl	80056dc <__mdiff>
 8006b9a:	68c2      	ldr	r2, [r0, #12]
 8006b9c:	9b08      	ldr	r3, [sp, #32]
 8006b9e:	4605      	mov	r5, r0
 8006ba0:	bb02      	cbnz	r2, 8006be4 <_dtoa_r+0xa7c>
 8006ba2:	4601      	mov	r1, r0
 8006ba4:	4658      	mov	r0, fp
 8006ba6:	f7fe fd7d 	bl	80056a4 <__mcmp>
 8006baa:	9b08      	ldr	r3, [sp, #32]
 8006bac:	4602      	mov	r2, r0
 8006bae:	4629      	mov	r1, r5
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006bb6:	f7fe fb37 	bl	8005228 <_Bfree>
 8006bba:	9b05      	ldr	r3, [sp, #20]
 8006bbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bbe:	9d01      	ldr	r5, [sp, #4]
 8006bc0:	ea43 0102 	orr.w	r1, r3, r2
 8006bc4:	9b06      	ldr	r3, [sp, #24]
 8006bc6:	430b      	orrs	r3, r1
 8006bc8:	9b08      	ldr	r3, [sp, #32]
 8006bca:	d10d      	bne.n	8006be8 <_dtoa_r+0xa80>
 8006bcc:	2b39      	cmp	r3, #57	; 0x39
 8006bce:	d029      	beq.n	8006c24 <_dtoa_r+0xabc>
 8006bd0:	f1b9 0f00 	cmp.w	r9, #0
 8006bd4:	dd01      	ble.n	8006bda <_dtoa_r+0xa72>
 8006bd6:	9b04      	ldr	r3, [sp, #16]
 8006bd8:	3331      	adds	r3, #49	; 0x31
 8006bda:	9a02      	ldr	r2, [sp, #8]
 8006bdc:	7013      	strb	r3, [r2, #0]
 8006bde:	e774      	b.n	8006aca <_dtoa_r+0x962>
 8006be0:	4638      	mov	r0, r7
 8006be2:	e7b9      	b.n	8006b58 <_dtoa_r+0x9f0>
 8006be4:	2201      	movs	r2, #1
 8006be6:	e7e2      	b.n	8006bae <_dtoa_r+0xa46>
 8006be8:	f1b9 0f00 	cmp.w	r9, #0
 8006bec:	db06      	blt.n	8006bfc <_dtoa_r+0xa94>
 8006bee:	9905      	ldr	r1, [sp, #20]
 8006bf0:	ea41 0909 	orr.w	r9, r1, r9
 8006bf4:	9906      	ldr	r1, [sp, #24]
 8006bf6:	ea59 0101 	orrs.w	r1, r9, r1
 8006bfa:	d120      	bne.n	8006c3e <_dtoa_r+0xad6>
 8006bfc:	2a00      	cmp	r2, #0
 8006bfe:	ddec      	ble.n	8006bda <_dtoa_r+0xa72>
 8006c00:	4659      	mov	r1, fp
 8006c02:	2201      	movs	r2, #1
 8006c04:	4620      	mov	r0, r4
 8006c06:	9301      	str	r3, [sp, #4]
 8006c08:	f7fe fce0 	bl	80055cc <__lshift>
 8006c0c:	4631      	mov	r1, r6
 8006c0e:	4683      	mov	fp, r0
 8006c10:	f7fe fd48 	bl	80056a4 <__mcmp>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	9b01      	ldr	r3, [sp, #4]
 8006c18:	dc02      	bgt.n	8006c20 <_dtoa_r+0xab8>
 8006c1a:	d1de      	bne.n	8006bda <_dtoa_r+0xa72>
 8006c1c:	07da      	lsls	r2, r3, #31
 8006c1e:	d5dc      	bpl.n	8006bda <_dtoa_r+0xa72>
 8006c20:	2b39      	cmp	r3, #57	; 0x39
 8006c22:	d1d8      	bne.n	8006bd6 <_dtoa_r+0xa6e>
 8006c24:	9a02      	ldr	r2, [sp, #8]
 8006c26:	2339      	movs	r3, #57	; 0x39
 8006c28:	7013      	strb	r3, [r2, #0]
 8006c2a:	462b      	mov	r3, r5
 8006c2c:	461d      	mov	r5, r3
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006c34:	2a39      	cmp	r2, #57	; 0x39
 8006c36:	d050      	beq.n	8006cda <_dtoa_r+0xb72>
 8006c38:	3201      	adds	r2, #1
 8006c3a:	701a      	strb	r2, [r3, #0]
 8006c3c:	e745      	b.n	8006aca <_dtoa_r+0x962>
 8006c3e:	2a00      	cmp	r2, #0
 8006c40:	dd03      	ble.n	8006c4a <_dtoa_r+0xae2>
 8006c42:	2b39      	cmp	r3, #57	; 0x39
 8006c44:	d0ee      	beq.n	8006c24 <_dtoa_r+0xabc>
 8006c46:	3301      	adds	r3, #1
 8006c48:	e7c7      	b.n	8006bda <_dtoa_r+0xa72>
 8006c4a:	9a01      	ldr	r2, [sp, #4]
 8006c4c:	9907      	ldr	r1, [sp, #28]
 8006c4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c52:	428a      	cmp	r2, r1
 8006c54:	d02a      	beq.n	8006cac <_dtoa_r+0xb44>
 8006c56:	4659      	mov	r1, fp
 8006c58:	2300      	movs	r3, #0
 8006c5a:	220a      	movs	r2, #10
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f7fe fb05 	bl	800526c <__multadd>
 8006c62:	45b8      	cmp	r8, r7
 8006c64:	4683      	mov	fp, r0
 8006c66:	f04f 0300 	mov.w	r3, #0
 8006c6a:	f04f 020a 	mov.w	r2, #10
 8006c6e:	4641      	mov	r1, r8
 8006c70:	4620      	mov	r0, r4
 8006c72:	d107      	bne.n	8006c84 <_dtoa_r+0xb1c>
 8006c74:	f7fe fafa 	bl	800526c <__multadd>
 8006c78:	4680      	mov	r8, r0
 8006c7a:	4607      	mov	r7, r0
 8006c7c:	9b01      	ldr	r3, [sp, #4]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	9301      	str	r3, [sp, #4]
 8006c82:	e775      	b.n	8006b70 <_dtoa_r+0xa08>
 8006c84:	f7fe faf2 	bl	800526c <__multadd>
 8006c88:	4639      	mov	r1, r7
 8006c8a:	4680      	mov	r8, r0
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	220a      	movs	r2, #10
 8006c90:	4620      	mov	r0, r4
 8006c92:	f7fe faeb 	bl	800526c <__multadd>
 8006c96:	4607      	mov	r7, r0
 8006c98:	e7f0      	b.n	8006c7c <_dtoa_r+0xb14>
 8006c9a:	f1b9 0f00 	cmp.w	r9, #0
 8006c9e:	9a00      	ldr	r2, [sp, #0]
 8006ca0:	bfcc      	ite	gt
 8006ca2:	464d      	movgt	r5, r9
 8006ca4:	2501      	movle	r5, #1
 8006ca6:	4415      	add	r5, r2
 8006ca8:	f04f 0800 	mov.w	r8, #0
 8006cac:	4659      	mov	r1, fp
 8006cae:	2201      	movs	r2, #1
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	9301      	str	r3, [sp, #4]
 8006cb4:	f7fe fc8a 	bl	80055cc <__lshift>
 8006cb8:	4631      	mov	r1, r6
 8006cba:	4683      	mov	fp, r0
 8006cbc:	f7fe fcf2 	bl	80056a4 <__mcmp>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	dcb2      	bgt.n	8006c2a <_dtoa_r+0xac2>
 8006cc4:	d102      	bne.n	8006ccc <_dtoa_r+0xb64>
 8006cc6:	9b01      	ldr	r3, [sp, #4]
 8006cc8:	07db      	lsls	r3, r3, #31
 8006cca:	d4ae      	bmi.n	8006c2a <_dtoa_r+0xac2>
 8006ccc:	462b      	mov	r3, r5
 8006cce:	461d      	mov	r5, r3
 8006cd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cd4:	2a30      	cmp	r2, #48	; 0x30
 8006cd6:	d0fa      	beq.n	8006cce <_dtoa_r+0xb66>
 8006cd8:	e6f7      	b.n	8006aca <_dtoa_r+0x962>
 8006cda:	9a00      	ldr	r2, [sp, #0]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d1a5      	bne.n	8006c2c <_dtoa_r+0xac4>
 8006ce0:	f10a 0a01 	add.w	sl, sl, #1
 8006ce4:	2331      	movs	r3, #49	; 0x31
 8006ce6:	e779      	b.n	8006bdc <_dtoa_r+0xa74>
 8006ce8:	4b13      	ldr	r3, [pc, #76]	; (8006d38 <_dtoa_r+0xbd0>)
 8006cea:	f7ff baaf 	b.w	800624c <_dtoa_r+0xe4>
 8006cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f47f aa86 	bne.w	8006202 <_dtoa_r+0x9a>
 8006cf6:	4b11      	ldr	r3, [pc, #68]	; (8006d3c <_dtoa_r+0xbd4>)
 8006cf8:	f7ff baa8 	b.w	800624c <_dtoa_r+0xe4>
 8006cfc:	f1b9 0f00 	cmp.w	r9, #0
 8006d00:	dc03      	bgt.n	8006d0a <_dtoa_r+0xba2>
 8006d02:	9b05      	ldr	r3, [sp, #20]
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	f73f aec9 	bgt.w	8006a9c <_dtoa_r+0x934>
 8006d0a:	9d00      	ldr	r5, [sp, #0]
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	4658      	mov	r0, fp
 8006d10:	f7ff f99c 	bl	800604c <quorem>
 8006d14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006d18:	f805 3b01 	strb.w	r3, [r5], #1
 8006d1c:	9a00      	ldr	r2, [sp, #0]
 8006d1e:	1aaa      	subs	r2, r5, r2
 8006d20:	4591      	cmp	r9, r2
 8006d22:	ddba      	ble.n	8006c9a <_dtoa_r+0xb32>
 8006d24:	4659      	mov	r1, fp
 8006d26:	2300      	movs	r3, #0
 8006d28:	220a      	movs	r2, #10
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	f7fe fa9e 	bl	800526c <__multadd>
 8006d30:	4683      	mov	fp, r0
 8006d32:	e7eb      	b.n	8006d0c <_dtoa_r+0xba4>
 8006d34:	0800836b 	.word	0x0800836b
 8006d38:	080084f8 	.word	0x080084f8
 8006d3c:	080084eb 	.word	0x080084eb

08006d40 <fiprintf>:
 8006d40:	b40e      	push	{r1, r2, r3}
 8006d42:	b503      	push	{r0, r1, lr}
 8006d44:	4601      	mov	r1, r0
 8006d46:	ab03      	add	r3, sp, #12
 8006d48:	4805      	ldr	r0, [pc, #20]	; (8006d60 <fiprintf+0x20>)
 8006d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d4e:	6800      	ldr	r0, [r0, #0]
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	f000 f8c5 	bl	8006ee0 <_vfiprintf_r>
 8006d56:	b002      	add	sp, #8
 8006d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d5c:	b003      	add	sp, #12
 8006d5e:	4770      	bx	lr
 8006d60:	20000010 	.word	0x20000010

08006d64 <malloc>:
 8006d64:	4b02      	ldr	r3, [pc, #8]	; (8006d70 <malloc+0xc>)
 8006d66:	4601      	mov	r1, r0
 8006d68:	6818      	ldr	r0, [r3, #0]
 8006d6a:	f7fe bdc9 	b.w	8005900 <_malloc_r>
 8006d6e:	bf00      	nop
 8006d70:	20000010 	.word	0x20000010

08006d74 <memcpy>:
 8006d74:	440a      	add	r2, r1
 8006d76:	4291      	cmp	r1, r2
 8006d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d7c:	d100      	bne.n	8006d80 <memcpy+0xc>
 8006d7e:	4770      	bx	lr
 8006d80:	b510      	push	{r4, lr}
 8006d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d8a:	4291      	cmp	r1, r2
 8006d8c:	d1f9      	bne.n	8006d82 <memcpy+0xe>
 8006d8e:	bd10      	pop	{r4, pc}

08006d90 <memmove>:
 8006d90:	4288      	cmp	r0, r1
 8006d92:	b510      	push	{r4, lr}
 8006d94:	eb01 0402 	add.w	r4, r1, r2
 8006d98:	d902      	bls.n	8006da0 <memmove+0x10>
 8006d9a:	4284      	cmp	r4, r0
 8006d9c:	4623      	mov	r3, r4
 8006d9e:	d807      	bhi.n	8006db0 <memmove+0x20>
 8006da0:	1e43      	subs	r3, r0, #1
 8006da2:	42a1      	cmp	r1, r4
 8006da4:	d008      	beq.n	8006db8 <memmove+0x28>
 8006da6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006daa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006dae:	e7f8      	b.n	8006da2 <memmove+0x12>
 8006db0:	4402      	add	r2, r0
 8006db2:	4601      	mov	r1, r0
 8006db4:	428a      	cmp	r2, r1
 8006db6:	d100      	bne.n	8006dba <memmove+0x2a>
 8006db8:	bd10      	pop	{r4, pc}
 8006dba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006dc2:	e7f7      	b.n	8006db4 <memmove+0x24>

08006dc4 <__malloc_lock>:
 8006dc4:	4801      	ldr	r0, [pc, #4]	; (8006dcc <__malloc_lock+0x8>)
 8006dc6:	f000 bc3b 	b.w	8007640 <__retarget_lock_acquire_recursive>
 8006dca:	bf00      	nop
 8006dcc:	200000ec 	.word	0x200000ec

08006dd0 <__malloc_unlock>:
 8006dd0:	4801      	ldr	r0, [pc, #4]	; (8006dd8 <__malloc_unlock+0x8>)
 8006dd2:	f000 bc36 	b.w	8007642 <__retarget_lock_release_recursive>
 8006dd6:	bf00      	nop
 8006dd8:	200000ec 	.word	0x200000ec

08006ddc <_free_r>:
 8006ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dde:	2900      	cmp	r1, #0
 8006de0:	d048      	beq.n	8006e74 <_free_r+0x98>
 8006de2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006de6:	9001      	str	r0, [sp, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f1a1 0404 	sub.w	r4, r1, #4
 8006dee:	bfb8      	it	lt
 8006df0:	18e4      	addlt	r4, r4, r3
 8006df2:	f7ff ffe7 	bl	8006dc4 <__malloc_lock>
 8006df6:	4a20      	ldr	r2, [pc, #128]	; (8006e78 <_free_r+0x9c>)
 8006df8:	9801      	ldr	r0, [sp, #4]
 8006dfa:	6813      	ldr	r3, [r2, #0]
 8006dfc:	4615      	mov	r5, r2
 8006dfe:	b933      	cbnz	r3, 8006e0e <_free_r+0x32>
 8006e00:	6063      	str	r3, [r4, #4]
 8006e02:	6014      	str	r4, [r2, #0]
 8006e04:	b003      	add	sp, #12
 8006e06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e0a:	f7ff bfe1 	b.w	8006dd0 <__malloc_unlock>
 8006e0e:	42a3      	cmp	r3, r4
 8006e10:	d90b      	bls.n	8006e2a <_free_r+0x4e>
 8006e12:	6821      	ldr	r1, [r4, #0]
 8006e14:	1862      	adds	r2, r4, r1
 8006e16:	4293      	cmp	r3, r2
 8006e18:	bf04      	itt	eq
 8006e1a:	681a      	ldreq	r2, [r3, #0]
 8006e1c:	685b      	ldreq	r3, [r3, #4]
 8006e1e:	6063      	str	r3, [r4, #4]
 8006e20:	bf04      	itt	eq
 8006e22:	1852      	addeq	r2, r2, r1
 8006e24:	6022      	streq	r2, [r4, #0]
 8006e26:	602c      	str	r4, [r5, #0]
 8006e28:	e7ec      	b.n	8006e04 <_free_r+0x28>
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	b10b      	cbz	r3, 8006e34 <_free_r+0x58>
 8006e30:	42a3      	cmp	r3, r4
 8006e32:	d9fa      	bls.n	8006e2a <_free_r+0x4e>
 8006e34:	6811      	ldr	r1, [r2, #0]
 8006e36:	1855      	adds	r5, r2, r1
 8006e38:	42a5      	cmp	r5, r4
 8006e3a:	d10b      	bne.n	8006e54 <_free_r+0x78>
 8006e3c:	6824      	ldr	r4, [r4, #0]
 8006e3e:	4421      	add	r1, r4
 8006e40:	1854      	adds	r4, r2, r1
 8006e42:	42a3      	cmp	r3, r4
 8006e44:	6011      	str	r1, [r2, #0]
 8006e46:	d1dd      	bne.n	8006e04 <_free_r+0x28>
 8006e48:	681c      	ldr	r4, [r3, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	6053      	str	r3, [r2, #4]
 8006e4e:	4421      	add	r1, r4
 8006e50:	6011      	str	r1, [r2, #0]
 8006e52:	e7d7      	b.n	8006e04 <_free_r+0x28>
 8006e54:	d902      	bls.n	8006e5c <_free_r+0x80>
 8006e56:	230c      	movs	r3, #12
 8006e58:	6003      	str	r3, [r0, #0]
 8006e5a:	e7d3      	b.n	8006e04 <_free_r+0x28>
 8006e5c:	6825      	ldr	r5, [r4, #0]
 8006e5e:	1961      	adds	r1, r4, r5
 8006e60:	428b      	cmp	r3, r1
 8006e62:	bf04      	itt	eq
 8006e64:	6819      	ldreq	r1, [r3, #0]
 8006e66:	685b      	ldreq	r3, [r3, #4]
 8006e68:	6063      	str	r3, [r4, #4]
 8006e6a:	bf04      	itt	eq
 8006e6c:	1949      	addeq	r1, r1, r5
 8006e6e:	6021      	streq	r1, [r4, #0]
 8006e70:	6054      	str	r4, [r2, #4]
 8006e72:	e7c7      	b.n	8006e04 <_free_r+0x28>
 8006e74:	b003      	add	sp, #12
 8006e76:	bd30      	pop	{r4, r5, pc}
 8006e78:	200000a0 	.word	0x200000a0

08006e7c <_malloc_usable_size_r>:
 8006e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e80:	1f18      	subs	r0, r3, #4
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	bfbc      	itt	lt
 8006e86:	580b      	ldrlt	r3, [r1, r0]
 8006e88:	18c0      	addlt	r0, r0, r3
 8006e8a:	4770      	bx	lr

08006e8c <__sfputc_r>:
 8006e8c:	6893      	ldr	r3, [r2, #8]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	b410      	push	{r4}
 8006e94:	6093      	str	r3, [r2, #8]
 8006e96:	da08      	bge.n	8006eaa <__sfputc_r+0x1e>
 8006e98:	6994      	ldr	r4, [r2, #24]
 8006e9a:	42a3      	cmp	r3, r4
 8006e9c:	db01      	blt.n	8006ea2 <__sfputc_r+0x16>
 8006e9e:	290a      	cmp	r1, #10
 8006ea0:	d103      	bne.n	8006eaa <__sfputc_r+0x1e>
 8006ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ea6:	f000 b94b 	b.w	8007140 <__swbuf_r>
 8006eaa:	6813      	ldr	r3, [r2, #0]
 8006eac:	1c58      	adds	r0, r3, #1
 8006eae:	6010      	str	r0, [r2, #0]
 8006eb0:	7019      	strb	r1, [r3, #0]
 8006eb2:	4608      	mov	r0, r1
 8006eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <__sfputs_r>:
 8006eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ebc:	4606      	mov	r6, r0
 8006ebe:	460f      	mov	r7, r1
 8006ec0:	4614      	mov	r4, r2
 8006ec2:	18d5      	adds	r5, r2, r3
 8006ec4:	42ac      	cmp	r4, r5
 8006ec6:	d101      	bne.n	8006ecc <__sfputs_r+0x12>
 8006ec8:	2000      	movs	r0, #0
 8006eca:	e007      	b.n	8006edc <__sfputs_r+0x22>
 8006ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed0:	463a      	mov	r2, r7
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	f7ff ffda 	bl	8006e8c <__sfputc_r>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	d1f3      	bne.n	8006ec4 <__sfputs_r+0xa>
 8006edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ee0 <_vfiprintf_r>:
 8006ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee4:	460d      	mov	r5, r1
 8006ee6:	b09d      	sub	sp, #116	; 0x74
 8006ee8:	4614      	mov	r4, r2
 8006eea:	4698      	mov	r8, r3
 8006eec:	4606      	mov	r6, r0
 8006eee:	b118      	cbz	r0, 8006ef8 <_vfiprintf_r+0x18>
 8006ef0:	6983      	ldr	r3, [r0, #24]
 8006ef2:	b90b      	cbnz	r3, 8006ef8 <_vfiprintf_r+0x18>
 8006ef4:	f000 fb06 	bl	8007504 <__sinit>
 8006ef8:	4b89      	ldr	r3, [pc, #548]	; (8007120 <_vfiprintf_r+0x240>)
 8006efa:	429d      	cmp	r5, r3
 8006efc:	d11b      	bne.n	8006f36 <_vfiprintf_r+0x56>
 8006efe:	6875      	ldr	r5, [r6, #4]
 8006f00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f02:	07d9      	lsls	r1, r3, #31
 8006f04:	d405      	bmi.n	8006f12 <_vfiprintf_r+0x32>
 8006f06:	89ab      	ldrh	r3, [r5, #12]
 8006f08:	059a      	lsls	r2, r3, #22
 8006f0a:	d402      	bmi.n	8006f12 <_vfiprintf_r+0x32>
 8006f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f0e:	f000 fb97 	bl	8007640 <__retarget_lock_acquire_recursive>
 8006f12:	89ab      	ldrh	r3, [r5, #12]
 8006f14:	071b      	lsls	r3, r3, #28
 8006f16:	d501      	bpl.n	8006f1c <_vfiprintf_r+0x3c>
 8006f18:	692b      	ldr	r3, [r5, #16]
 8006f1a:	b9eb      	cbnz	r3, 8006f58 <_vfiprintf_r+0x78>
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	4630      	mov	r0, r6
 8006f20:	f000 f960 	bl	80071e4 <__swsetup_r>
 8006f24:	b1c0      	cbz	r0, 8006f58 <_vfiprintf_r+0x78>
 8006f26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f28:	07dc      	lsls	r4, r3, #31
 8006f2a:	d50e      	bpl.n	8006f4a <_vfiprintf_r+0x6a>
 8006f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f30:	b01d      	add	sp, #116	; 0x74
 8006f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f36:	4b7b      	ldr	r3, [pc, #492]	; (8007124 <_vfiprintf_r+0x244>)
 8006f38:	429d      	cmp	r5, r3
 8006f3a:	d101      	bne.n	8006f40 <_vfiprintf_r+0x60>
 8006f3c:	68b5      	ldr	r5, [r6, #8]
 8006f3e:	e7df      	b.n	8006f00 <_vfiprintf_r+0x20>
 8006f40:	4b79      	ldr	r3, [pc, #484]	; (8007128 <_vfiprintf_r+0x248>)
 8006f42:	429d      	cmp	r5, r3
 8006f44:	bf08      	it	eq
 8006f46:	68f5      	ldreq	r5, [r6, #12]
 8006f48:	e7da      	b.n	8006f00 <_vfiprintf_r+0x20>
 8006f4a:	89ab      	ldrh	r3, [r5, #12]
 8006f4c:	0598      	lsls	r0, r3, #22
 8006f4e:	d4ed      	bmi.n	8006f2c <_vfiprintf_r+0x4c>
 8006f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f52:	f000 fb76 	bl	8007642 <__retarget_lock_release_recursive>
 8006f56:	e7e9      	b.n	8006f2c <_vfiprintf_r+0x4c>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f5c:	2320      	movs	r3, #32
 8006f5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f62:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f66:	2330      	movs	r3, #48	; 0x30
 8006f68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800712c <_vfiprintf_r+0x24c>
 8006f6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f70:	f04f 0901 	mov.w	r9, #1
 8006f74:	4623      	mov	r3, r4
 8006f76:	469a      	mov	sl, r3
 8006f78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f7c:	b10a      	cbz	r2, 8006f82 <_vfiprintf_r+0xa2>
 8006f7e:	2a25      	cmp	r2, #37	; 0x25
 8006f80:	d1f9      	bne.n	8006f76 <_vfiprintf_r+0x96>
 8006f82:	ebba 0b04 	subs.w	fp, sl, r4
 8006f86:	d00b      	beq.n	8006fa0 <_vfiprintf_r+0xc0>
 8006f88:	465b      	mov	r3, fp
 8006f8a:	4622      	mov	r2, r4
 8006f8c:	4629      	mov	r1, r5
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f7ff ff93 	bl	8006eba <__sfputs_r>
 8006f94:	3001      	adds	r0, #1
 8006f96:	f000 80aa 	beq.w	80070ee <_vfiprintf_r+0x20e>
 8006f9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f9c:	445a      	add	r2, fp
 8006f9e:	9209      	str	r2, [sp, #36]	; 0x24
 8006fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 80a2 	beq.w	80070ee <_vfiprintf_r+0x20e>
 8006faa:	2300      	movs	r3, #0
 8006fac:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fb4:	f10a 0a01 	add.w	sl, sl, #1
 8006fb8:	9304      	str	r3, [sp, #16]
 8006fba:	9307      	str	r3, [sp, #28]
 8006fbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fc0:	931a      	str	r3, [sp, #104]	; 0x68
 8006fc2:	4654      	mov	r4, sl
 8006fc4:	2205      	movs	r2, #5
 8006fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fca:	4858      	ldr	r0, [pc, #352]	; (800712c <_vfiprintf_r+0x24c>)
 8006fcc:	f7f9 f908 	bl	80001e0 <memchr>
 8006fd0:	9a04      	ldr	r2, [sp, #16]
 8006fd2:	b9d8      	cbnz	r0, 800700c <_vfiprintf_r+0x12c>
 8006fd4:	06d1      	lsls	r1, r2, #27
 8006fd6:	bf44      	itt	mi
 8006fd8:	2320      	movmi	r3, #32
 8006fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fde:	0713      	lsls	r3, r2, #28
 8006fe0:	bf44      	itt	mi
 8006fe2:	232b      	movmi	r3, #43	; 0x2b
 8006fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8006fec:	2b2a      	cmp	r3, #42	; 0x2a
 8006fee:	d015      	beq.n	800701c <_vfiprintf_r+0x13c>
 8006ff0:	9a07      	ldr	r2, [sp, #28]
 8006ff2:	4654      	mov	r4, sl
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	f04f 0c0a 	mov.w	ip, #10
 8006ffa:	4621      	mov	r1, r4
 8006ffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007000:	3b30      	subs	r3, #48	; 0x30
 8007002:	2b09      	cmp	r3, #9
 8007004:	d94e      	bls.n	80070a4 <_vfiprintf_r+0x1c4>
 8007006:	b1b0      	cbz	r0, 8007036 <_vfiprintf_r+0x156>
 8007008:	9207      	str	r2, [sp, #28]
 800700a:	e014      	b.n	8007036 <_vfiprintf_r+0x156>
 800700c:	eba0 0308 	sub.w	r3, r0, r8
 8007010:	fa09 f303 	lsl.w	r3, r9, r3
 8007014:	4313      	orrs	r3, r2
 8007016:	9304      	str	r3, [sp, #16]
 8007018:	46a2      	mov	sl, r4
 800701a:	e7d2      	b.n	8006fc2 <_vfiprintf_r+0xe2>
 800701c:	9b03      	ldr	r3, [sp, #12]
 800701e:	1d19      	adds	r1, r3, #4
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	9103      	str	r1, [sp, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	bfbb      	ittet	lt
 8007028:	425b      	neglt	r3, r3
 800702a:	f042 0202 	orrlt.w	r2, r2, #2
 800702e:	9307      	strge	r3, [sp, #28]
 8007030:	9307      	strlt	r3, [sp, #28]
 8007032:	bfb8      	it	lt
 8007034:	9204      	strlt	r2, [sp, #16]
 8007036:	7823      	ldrb	r3, [r4, #0]
 8007038:	2b2e      	cmp	r3, #46	; 0x2e
 800703a:	d10c      	bne.n	8007056 <_vfiprintf_r+0x176>
 800703c:	7863      	ldrb	r3, [r4, #1]
 800703e:	2b2a      	cmp	r3, #42	; 0x2a
 8007040:	d135      	bne.n	80070ae <_vfiprintf_r+0x1ce>
 8007042:	9b03      	ldr	r3, [sp, #12]
 8007044:	1d1a      	adds	r2, r3, #4
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	9203      	str	r2, [sp, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	bfb8      	it	lt
 800704e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007052:	3402      	adds	r4, #2
 8007054:	9305      	str	r3, [sp, #20]
 8007056:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800713c <_vfiprintf_r+0x25c>
 800705a:	7821      	ldrb	r1, [r4, #0]
 800705c:	2203      	movs	r2, #3
 800705e:	4650      	mov	r0, sl
 8007060:	f7f9 f8be 	bl	80001e0 <memchr>
 8007064:	b140      	cbz	r0, 8007078 <_vfiprintf_r+0x198>
 8007066:	2340      	movs	r3, #64	; 0x40
 8007068:	eba0 000a 	sub.w	r0, r0, sl
 800706c:	fa03 f000 	lsl.w	r0, r3, r0
 8007070:	9b04      	ldr	r3, [sp, #16]
 8007072:	4303      	orrs	r3, r0
 8007074:	3401      	adds	r4, #1
 8007076:	9304      	str	r3, [sp, #16]
 8007078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800707c:	482c      	ldr	r0, [pc, #176]	; (8007130 <_vfiprintf_r+0x250>)
 800707e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007082:	2206      	movs	r2, #6
 8007084:	f7f9 f8ac 	bl	80001e0 <memchr>
 8007088:	2800      	cmp	r0, #0
 800708a:	d03f      	beq.n	800710c <_vfiprintf_r+0x22c>
 800708c:	4b29      	ldr	r3, [pc, #164]	; (8007134 <_vfiprintf_r+0x254>)
 800708e:	bb1b      	cbnz	r3, 80070d8 <_vfiprintf_r+0x1f8>
 8007090:	9b03      	ldr	r3, [sp, #12]
 8007092:	3307      	adds	r3, #7
 8007094:	f023 0307 	bic.w	r3, r3, #7
 8007098:	3308      	adds	r3, #8
 800709a:	9303      	str	r3, [sp, #12]
 800709c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800709e:	443b      	add	r3, r7
 80070a0:	9309      	str	r3, [sp, #36]	; 0x24
 80070a2:	e767      	b.n	8006f74 <_vfiprintf_r+0x94>
 80070a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80070a8:	460c      	mov	r4, r1
 80070aa:	2001      	movs	r0, #1
 80070ac:	e7a5      	b.n	8006ffa <_vfiprintf_r+0x11a>
 80070ae:	2300      	movs	r3, #0
 80070b0:	3401      	adds	r4, #1
 80070b2:	9305      	str	r3, [sp, #20]
 80070b4:	4619      	mov	r1, r3
 80070b6:	f04f 0c0a 	mov.w	ip, #10
 80070ba:	4620      	mov	r0, r4
 80070bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070c0:	3a30      	subs	r2, #48	; 0x30
 80070c2:	2a09      	cmp	r2, #9
 80070c4:	d903      	bls.n	80070ce <_vfiprintf_r+0x1ee>
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d0c5      	beq.n	8007056 <_vfiprintf_r+0x176>
 80070ca:	9105      	str	r1, [sp, #20]
 80070cc:	e7c3      	b.n	8007056 <_vfiprintf_r+0x176>
 80070ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80070d2:	4604      	mov	r4, r0
 80070d4:	2301      	movs	r3, #1
 80070d6:	e7f0      	b.n	80070ba <_vfiprintf_r+0x1da>
 80070d8:	ab03      	add	r3, sp, #12
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	462a      	mov	r2, r5
 80070de:	4b16      	ldr	r3, [pc, #88]	; (8007138 <_vfiprintf_r+0x258>)
 80070e0:	a904      	add	r1, sp, #16
 80070e2:	4630      	mov	r0, r6
 80070e4:	f3af 8000 	nop.w
 80070e8:	4607      	mov	r7, r0
 80070ea:	1c78      	adds	r0, r7, #1
 80070ec:	d1d6      	bne.n	800709c <_vfiprintf_r+0x1bc>
 80070ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070f0:	07d9      	lsls	r1, r3, #31
 80070f2:	d405      	bmi.n	8007100 <_vfiprintf_r+0x220>
 80070f4:	89ab      	ldrh	r3, [r5, #12]
 80070f6:	059a      	lsls	r2, r3, #22
 80070f8:	d402      	bmi.n	8007100 <_vfiprintf_r+0x220>
 80070fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070fc:	f000 faa1 	bl	8007642 <__retarget_lock_release_recursive>
 8007100:	89ab      	ldrh	r3, [r5, #12]
 8007102:	065b      	lsls	r3, r3, #25
 8007104:	f53f af12 	bmi.w	8006f2c <_vfiprintf_r+0x4c>
 8007108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800710a:	e711      	b.n	8006f30 <_vfiprintf_r+0x50>
 800710c:	ab03      	add	r3, sp, #12
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	462a      	mov	r2, r5
 8007112:	4b09      	ldr	r3, [pc, #36]	; (8007138 <_vfiprintf_r+0x258>)
 8007114:	a904      	add	r1, sp, #16
 8007116:	4630      	mov	r0, r6
 8007118:	f7fe fe3c 	bl	8005d94 <_printf_i>
 800711c:	e7e4      	b.n	80070e8 <_vfiprintf_r+0x208>
 800711e:	bf00      	nop
 8007120:	0800857c 	.word	0x0800857c
 8007124:	0800859c 	.word	0x0800859c
 8007128:	0800855c 	.word	0x0800855c
 800712c:	0800847c 	.word	0x0800847c
 8007130:	08008486 	.word	0x08008486
 8007134:	00000000 	.word	0x00000000
 8007138:	08006ebb 	.word	0x08006ebb
 800713c:	08008482 	.word	0x08008482

08007140 <__swbuf_r>:
 8007140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007142:	460e      	mov	r6, r1
 8007144:	4614      	mov	r4, r2
 8007146:	4605      	mov	r5, r0
 8007148:	b118      	cbz	r0, 8007152 <__swbuf_r+0x12>
 800714a:	6983      	ldr	r3, [r0, #24]
 800714c:	b90b      	cbnz	r3, 8007152 <__swbuf_r+0x12>
 800714e:	f000 f9d9 	bl	8007504 <__sinit>
 8007152:	4b21      	ldr	r3, [pc, #132]	; (80071d8 <__swbuf_r+0x98>)
 8007154:	429c      	cmp	r4, r3
 8007156:	d12b      	bne.n	80071b0 <__swbuf_r+0x70>
 8007158:	686c      	ldr	r4, [r5, #4]
 800715a:	69a3      	ldr	r3, [r4, #24]
 800715c:	60a3      	str	r3, [r4, #8]
 800715e:	89a3      	ldrh	r3, [r4, #12]
 8007160:	071a      	lsls	r2, r3, #28
 8007162:	d52f      	bpl.n	80071c4 <__swbuf_r+0x84>
 8007164:	6923      	ldr	r3, [r4, #16]
 8007166:	b36b      	cbz	r3, 80071c4 <__swbuf_r+0x84>
 8007168:	6923      	ldr	r3, [r4, #16]
 800716a:	6820      	ldr	r0, [r4, #0]
 800716c:	1ac0      	subs	r0, r0, r3
 800716e:	6963      	ldr	r3, [r4, #20]
 8007170:	b2f6      	uxtb	r6, r6
 8007172:	4283      	cmp	r3, r0
 8007174:	4637      	mov	r7, r6
 8007176:	dc04      	bgt.n	8007182 <__swbuf_r+0x42>
 8007178:	4621      	mov	r1, r4
 800717a:	4628      	mov	r0, r5
 800717c:	f000 f92e 	bl	80073dc <_fflush_r>
 8007180:	bb30      	cbnz	r0, 80071d0 <__swbuf_r+0x90>
 8007182:	68a3      	ldr	r3, [r4, #8]
 8007184:	3b01      	subs	r3, #1
 8007186:	60a3      	str	r3, [r4, #8]
 8007188:	6823      	ldr	r3, [r4, #0]
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	6022      	str	r2, [r4, #0]
 800718e:	701e      	strb	r6, [r3, #0]
 8007190:	6963      	ldr	r3, [r4, #20]
 8007192:	3001      	adds	r0, #1
 8007194:	4283      	cmp	r3, r0
 8007196:	d004      	beq.n	80071a2 <__swbuf_r+0x62>
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	07db      	lsls	r3, r3, #31
 800719c:	d506      	bpl.n	80071ac <__swbuf_r+0x6c>
 800719e:	2e0a      	cmp	r6, #10
 80071a0:	d104      	bne.n	80071ac <__swbuf_r+0x6c>
 80071a2:	4621      	mov	r1, r4
 80071a4:	4628      	mov	r0, r5
 80071a6:	f000 f919 	bl	80073dc <_fflush_r>
 80071aa:	b988      	cbnz	r0, 80071d0 <__swbuf_r+0x90>
 80071ac:	4638      	mov	r0, r7
 80071ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071b0:	4b0a      	ldr	r3, [pc, #40]	; (80071dc <__swbuf_r+0x9c>)
 80071b2:	429c      	cmp	r4, r3
 80071b4:	d101      	bne.n	80071ba <__swbuf_r+0x7a>
 80071b6:	68ac      	ldr	r4, [r5, #8]
 80071b8:	e7cf      	b.n	800715a <__swbuf_r+0x1a>
 80071ba:	4b09      	ldr	r3, [pc, #36]	; (80071e0 <__swbuf_r+0xa0>)
 80071bc:	429c      	cmp	r4, r3
 80071be:	bf08      	it	eq
 80071c0:	68ec      	ldreq	r4, [r5, #12]
 80071c2:	e7ca      	b.n	800715a <__swbuf_r+0x1a>
 80071c4:	4621      	mov	r1, r4
 80071c6:	4628      	mov	r0, r5
 80071c8:	f000 f80c 	bl	80071e4 <__swsetup_r>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	d0cb      	beq.n	8007168 <__swbuf_r+0x28>
 80071d0:	f04f 37ff 	mov.w	r7, #4294967295
 80071d4:	e7ea      	b.n	80071ac <__swbuf_r+0x6c>
 80071d6:	bf00      	nop
 80071d8:	0800857c 	.word	0x0800857c
 80071dc:	0800859c 	.word	0x0800859c
 80071e0:	0800855c 	.word	0x0800855c

080071e4 <__swsetup_r>:
 80071e4:	4b32      	ldr	r3, [pc, #200]	; (80072b0 <__swsetup_r+0xcc>)
 80071e6:	b570      	push	{r4, r5, r6, lr}
 80071e8:	681d      	ldr	r5, [r3, #0]
 80071ea:	4606      	mov	r6, r0
 80071ec:	460c      	mov	r4, r1
 80071ee:	b125      	cbz	r5, 80071fa <__swsetup_r+0x16>
 80071f0:	69ab      	ldr	r3, [r5, #24]
 80071f2:	b913      	cbnz	r3, 80071fa <__swsetup_r+0x16>
 80071f4:	4628      	mov	r0, r5
 80071f6:	f000 f985 	bl	8007504 <__sinit>
 80071fa:	4b2e      	ldr	r3, [pc, #184]	; (80072b4 <__swsetup_r+0xd0>)
 80071fc:	429c      	cmp	r4, r3
 80071fe:	d10f      	bne.n	8007220 <__swsetup_r+0x3c>
 8007200:	686c      	ldr	r4, [r5, #4]
 8007202:	89a3      	ldrh	r3, [r4, #12]
 8007204:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007208:	0719      	lsls	r1, r3, #28
 800720a:	d42c      	bmi.n	8007266 <__swsetup_r+0x82>
 800720c:	06dd      	lsls	r5, r3, #27
 800720e:	d411      	bmi.n	8007234 <__swsetup_r+0x50>
 8007210:	2309      	movs	r3, #9
 8007212:	6033      	str	r3, [r6, #0]
 8007214:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007218:	81a3      	strh	r3, [r4, #12]
 800721a:	f04f 30ff 	mov.w	r0, #4294967295
 800721e:	e03e      	b.n	800729e <__swsetup_r+0xba>
 8007220:	4b25      	ldr	r3, [pc, #148]	; (80072b8 <__swsetup_r+0xd4>)
 8007222:	429c      	cmp	r4, r3
 8007224:	d101      	bne.n	800722a <__swsetup_r+0x46>
 8007226:	68ac      	ldr	r4, [r5, #8]
 8007228:	e7eb      	b.n	8007202 <__swsetup_r+0x1e>
 800722a:	4b24      	ldr	r3, [pc, #144]	; (80072bc <__swsetup_r+0xd8>)
 800722c:	429c      	cmp	r4, r3
 800722e:	bf08      	it	eq
 8007230:	68ec      	ldreq	r4, [r5, #12]
 8007232:	e7e6      	b.n	8007202 <__swsetup_r+0x1e>
 8007234:	0758      	lsls	r0, r3, #29
 8007236:	d512      	bpl.n	800725e <__swsetup_r+0x7a>
 8007238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800723a:	b141      	cbz	r1, 800724e <__swsetup_r+0x6a>
 800723c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007240:	4299      	cmp	r1, r3
 8007242:	d002      	beq.n	800724a <__swsetup_r+0x66>
 8007244:	4630      	mov	r0, r6
 8007246:	f7ff fdc9 	bl	8006ddc <_free_r>
 800724a:	2300      	movs	r3, #0
 800724c:	6363      	str	r3, [r4, #52]	; 0x34
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007254:	81a3      	strh	r3, [r4, #12]
 8007256:	2300      	movs	r3, #0
 8007258:	6063      	str	r3, [r4, #4]
 800725a:	6923      	ldr	r3, [r4, #16]
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	89a3      	ldrh	r3, [r4, #12]
 8007260:	f043 0308 	orr.w	r3, r3, #8
 8007264:	81a3      	strh	r3, [r4, #12]
 8007266:	6923      	ldr	r3, [r4, #16]
 8007268:	b94b      	cbnz	r3, 800727e <__swsetup_r+0x9a>
 800726a:	89a3      	ldrh	r3, [r4, #12]
 800726c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007274:	d003      	beq.n	800727e <__swsetup_r+0x9a>
 8007276:	4621      	mov	r1, r4
 8007278:	4630      	mov	r0, r6
 800727a:	f000 fa07 	bl	800768c <__smakebuf_r>
 800727e:	89a0      	ldrh	r0, [r4, #12]
 8007280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007284:	f010 0301 	ands.w	r3, r0, #1
 8007288:	d00a      	beq.n	80072a0 <__swsetup_r+0xbc>
 800728a:	2300      	movs	r3, #0
 800728c:	60a3      	str	r3, [r4, #8]
 800728e:	6963      	ldr	r3, [r4, #20]
 8007290:	425b      	negs	r3, r3
 8007292:	61a3      	str	r3, [r4, #24]
 8007294:	6923      	ldr	r3, [r4, #16]
 8007296:	b943      	cbnz	r3, 80072aa <__swsetup_r+0xc6>
 8007298:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800729c:	d1ba      	bne.n	8007214 <__swsetup_r+0x30>
 800729e:	bd70      	pop	{r4, r5, r6, pc}
 80072a0:	0781      	lsls	r1, r0, #30
 80072a2:	bf58      	it	pl
 80072a4:	6963      	ldrpl	r3, [r4, #20]
 80072a6:	60a3      	str	r3, [r4, #8]
 80072a8:	e7f4      	b.n	8007294 <__swsetup_r+0xb0>
 80072aa:	2000      	movs	r0, #0
 80072ac:	e7f7      	b.n	800729e <__swsetup_r+0xba>
 80072ae:	bf00      	nop
 80072b0:	20000010 	.word	0x20000010
 80072b4:	0800857c 	.word	0x0800857c
 80072b8:	0800859c 	.word	0x0800859c
 80072bc:	0800855c 	.word	0x0800855c

080072c0 <abort>:
 80072c0:	b508      	push	{r3, lr}
 80072c2:	2006      	movs	r0, #6
 80072c4:	f000 fa4a 	bl	800775c <raise>
 80072c8:	2001      	movs	r0, #1
 80072ca:	f7fc fa36 	bl	800373a <_exit>
	...

080072d0 <__sflush_r>:
 80072d0:	898a      	ldrh	r2, [r1, #12]
 80072d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d6:	4605      	mov	r5, r0
 80072d8:	0710      	lsls	r0, r2, #28
 80072da:	460c      	mov	r4, r1
 80072dc:	d458      	bmi.n	8007390 <__sflush_r+0xc0>
 80072de:	684b      	ldr	r3, [r1, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	dc05      	bgt.n	80072f0 <__sflush_r+0x20>
 80072e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	dc02      	bgt.n	80072f0 <__sflush_r+0x20>
 80072ea:	2000      	movs	r0, #0
 80072ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072f2:	2e00      	cmp	r6, #0
 80072f4:	d0f9      	beq.n	80072ea <__sflush_r+0x1a>
 80072f6:	2300      	movs	r3, #0
 80072f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072fc:	682f      	ldr	r7, [r5, #0]
 80072fe:	602b      	str	r3, [r5, #0]
 8007300:	d032      	beq.n	8007368 <__sflush_r+0x98>
 8007302:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	075a      	lsls	r2, r3, #29
 8007308:	d505      	bpl.n	8007316 <__sflush_r+0x46>
 800730a:	6863      	ldr	r3, [r4, #4]
 800730c:	1ac0      	subs	r0, r0, r3
 800730e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007310:	b10b      	cbz	r3, 8007316 <__sflush_r+0x46>
 8007312:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007314:	1ac0      	subs	r0, r0, r3
 8007316:	2300      	movs	r3, #0
 8007318:	4602      	mov	r2, r0
 800731a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800731c:	6a21      	ldr	r1, [r4, #32]
 800731e:	4628      	mov	r0, r5
 8007320:	47b0      	blx	r6
 8007322:	1c43      	adds	r3, r0, #1
 8007324:	89a3      	ldrh	r3, [r4, #12]
 8007326:	d106      	bne.n	8007336 <__sflush_r+0x66>
 8007328:	6829      	ldr	r1, [r5, #0]
 800732a:	291d      	cmp	r1, #29
 800732c:	d82c      	bhi.n	8007388 <__sflush_r+0xb8>
 800732e:	4a2a      	ldr	r2, [pc, #168]	; (80073d8 <__sflush_r+0x108>)
 8007330:	40ca      	lsrs	r2, r1
 8007332:	07d6      	lsls	r6, r2, #31
 8007334:	d528      	bpl.n	8007388 <__sflush_r+0xb8>
 8007336:	2200      	movs	r2, #0
 8007338:	6062      	str	r2, [r4, #4]
 800733a:	04d9      	lsls	r1, r3, #19
 800733c:	6922      	ldr	r2, [r4, #16]
 800733e:	6022      	str	r2, [r4, #0]
 8007340:	d504      	bpl.n	800734c <__sflush_r+0x7c>
 8007342:	1c42      	adds	r2, r0, #1
 8007344:	d101      	bne.n	800734a <__sflush_r+0x7a>
 8007346:	682b      	ldr	r3, [r5, #0]
 8007348:	b903      	cbnz	r3, 800734c <__sflush_r+0x7c>
 800734a:	6560      	str	r0, [r4, #84]	; 0x54
 800734c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800734e:	602f      	str	r7, [r5, #0]
 8007350:	2900      	cmp	r1, #0
 8007352:	d0ca      	beq.n	80072ea <__sflush_r+0x1a>
 8007354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007358:	4299      	cmp	r1, r3
 800735a:	d002      	beq.n	8007362 <__sflush_r+0x92>
 800735c:	4628      	mov	r0, r5
 800735e:	f7ff fd3d 	bl	8006ddc <_free_r>
 8007362:	2000      	movs	r0, #0
 8007364:	6360      	str	r0, [r4, #52]	; 0x34
 8007366:	e7c1      	b.n	80072ec <__sflush_r+0x1c>
 8007368:	6a21      	ldr	r1, [r4, #32]
 800736a:	2301      	movs	r3, #1
 800736c:	4628      	mov	r0, r5
 800736e:	47b0      	blx	r6
 8007370:	1c41      	adds	r1, r0, #1
 8007372:	d1c7      	bne.n	8007304 <__sflush_r+0x34>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0c4      	beq.n	8007304 <__sflush_r+0x34>
 800737a:	2b1d      	cmp	r3, #29
 800737c:	d001      	beq.n	8007382 <__sflush_r+0xb2>
 800737e:	2b16      	cmp	r3, #22
 8007380:	d101      	bne.n	8007386 <__sflush_r+0xb6>
 8007382:	602f      	str	r7, [r5, #0]
 8007384:	e7b1      	b.n	80072ea <__sflush_r+0x1a>
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800738c:	81a3      	strh	r3, [r4, #12]
 800738e:	e7ad      	b.n	80072ec <__sflush_r+0x1c>
 8007390:	690f      	ldr	r7, [r1, #16]
 8007392:	2f00      	cmp	r7, #0
 8007394:	d0a9      	beq.n	80072ea <__sflush_r+0x1a>
 8007396:	0793      	lsls	r3, r2, #30
 8007398:	680e      	ldr	r6, [r1, #0]
 800739a:	bf08      	it	eq
 800739c:	694b      	ldreq	r3, [r1, #20]
 800739e:	600f      	str	r7, [r1, #0]
 80073a0:	bf18      	it	ne
 80073a2:	2300      	movne	r3, #0
 80073a4:	eba6 0807 	sub.w	r8, r6, r7
 80073a8:	608b      	str	r3, [r1, #8]
 80073aa:	f1b8 0f00 	cmp.w	r8, #0
 80073ae:	dd9c      	ble.n	80072ea <__sflush_r+0x1a>
 80073b0:	6a21      	ldr	r1, [r4, #32]
 80073b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073b4:	4643      	mov	r3, r8
 80073b6:	463a      	mov	r2, r7
 80073b8:	4628      	mov	r0, r5
 80073ba:	47b0      	blx	r6
 80073bc:	2800      	cmp	r0, #0
 80073be:	dc06      	bgt.n	80073ce <__sflush_r+0xfe>
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073c6:	81a3      	strh	r3, [r4, #12]
 80073c8:	f04f 30ff 	mov.w	r0, #4294967295
 80073cc:	e78e      	b.n	80072ec <__sflush_r+0x1c>
 80073ce:	4407      	add	r7, r0
 80073d0:	eba8 0800 	sub.w	r8, r8, r0
 80073d4:	e7e9      	b.n	80073aa <__sflush_r+0xda>
 80073d6:	bf00      	nop
 80073d8:	20400001 	.word	0x20400001

080073dc <_fflush_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	690b      	ldr	r3, [r1, #16]
 80073e0:	4605      	mov	r5, r0
 80073e2:	460c      	mov	r4, r1
 80073e4:	b913      	cbnz	r3, 80073ec <_fflush_r+0x10>
 80073e6:	2500      	movs	r5, #0
 80073e8:	4628      	mov	r0, r5
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	b118      	cbz	r0, 80073f6 <_fflush_r+0x1a>
 80073ee:	6983      	ldr	r3, [r0, #24]
 80073f0:	b90b      	cbnz	r3, 80073f6 <_fflush_r+0x1a>
 80073f2:	f000 f887 	bl	8007504 <__sinit>
 80073f6:	4b14      	ldr	r3, [pc, #80]	; (8007448 <_fflush_r+0x6c>)
 80073f8:	429c      	cmp	r4, r3
 80073fa:	d11b      	bne.n	8007434 <_fflush_r+0x58>
 80073fc:	686c      	ldr	r4, [r5, #4]
 80073fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d0ef      	beq.n	80073e6 <_fflush_r+0xa>
 8007406:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007408:	07d0      	lsls	r0, r2, #31
 800740a:	d404      	bmi.n	8007416 <_fflush_r+0x3a>
 800740c:	0599      	lsls	r1, r3, #22
 800740e:	d402      	bmi.n	8007416 <_fflush_r+0x3a>
 8007410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007412:	f000 f915 	bl	8007640 <__retarget_lock_acquire_recursive>
 8007416:	4628      	mov	r0, r5
 8007418:	4621      	mov	r1, r4
 800741a:	f7ff ff59 	bl	80072d0 <__sflush_r>
 800741e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007420:	07da      	lsls	r2, r3, #31
 8007422:	4605      	mov	r5, r0
 8007424:	d4e0      	bmi.n	80073e8 <_fflush_r+0xc>
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	059b      	lsls	r3, r3, #22
 800742a:	d4dd      	bmi.n	80073e8 <_fflush_r+0xc>
 800742c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800742e:	f000 f908 	bl	8007642 <__retarget_lock_release_recursive>
 8007432:	e7d9      	b.n	80073e8 <_fflush_r+0xc>
 8007434:	4b05      	ldr	r3, [pc, #20]	; (800744c <_fflush_r+0x70>)
 8007436:	429c      	cmp	r4, r3
 8007438:	d101      	bne.n	800743e <_fflush_r+0x62>
 800743a:	68ac      	ldr	r4, [r5, #8]
 800743c:	e7df      	b.n	80073fe <_fflush_r+0x22>
 800743e:	4b04      	ldr	r3, [pc, #16]	; (8007450 <_fflush_r+0x74>)
 8007440:	429c      	cmp	r4, r3
 8007442:	bf08      	it	eq
 8007444:	68ec      	ldreq	r4, [r5, #12]
 8007446:	e7da      	b.n	80073fe <_fflush_r+0x22>
 8007448:	0800857c 	.word	0x0800857c
 800744c:	0800859c 	.word	0x0800859c
 8007450:	0800855c 	.word	0x0800855c

08007454 <std>:
 8007454:	2300      	movs	r3, #0
 8007456:	b510      	push	{r4, lr}
 8007458:	4604      	mov	r4, r0
 800745a:	e9c0 3300 	strd	r3, r3, [r0]
 800745e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007462:	6083      	str	r3, [r0, #8]
 8007464:	8181      	strh	r1, [r0, #12]
 8007466:	6643      	str	r3, [r0, #100]	; 0x64
 8007468:	81c2      	strh	r2, [r0, #14]
 800746a:	6183      	str	r3, [r0, #24]
 800746c:	4619      	mov	r1, r3
 800746e:	2208      	movs	r2, #8
 8007470:	305c      	adds	r0, #92	; 0x5c
 8007472:	f7fd fd05 	bl	8004e80 <memset>
 8007476:	4b05      	ldr	r3, [pc, #20]	; (800748c <std+0x38>)
 8007478:	6263      	str	r3, [r4, #36]	; 0x24
 800747a:	4b05      	ldr	r3, [pc, #20]	; (8007490 <std+0x3c>)
 800747c:	62a3      	str	r3, [r4, #40]	; 0x28
 800747e:	4b05      	ldr	r3, [pc, #20]	; (8007494 <std+0x40>)
 8007480:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007482:	4b05      	ldr	r3, [pc, #20]	; (8007498 <std+0x44>)
 8007484:	6224      	str	r4, [r4, #32]
 8007486:	6323      	str	r3, [r4, #48]	; 0x30
 8007488:	bd10      	pop	{r4, pc}
 800748a:	bf00      	nop
 800748c:	08007795 	.word	0x08007795
 8007490:	080077b7 	.word	0x080077b7
 8007494:	080077ef 	.word	0x080077ef
 8007498:	08007813 	.word	0x08007813

0800749c <_cleanup_r>:
 800749c:	4901      	ldr	r1, [pc, #4]	; (80074a4 <_cleanup_r+0x8>)
 800749e:	f000 b8af 	b.w	8007600 <_fwalk_reent>
 80074a2:	bf00      	nop
 80074a4:	080073dd 	.word	0x080073dd

080074a8 <__sfmoreglue>:
 80074a8:	b570      	push	{r4, r5, r6, lr}
 80074aa:	1e4a      	subs	r2, r1, #1
 80074ac:	2568      	movs	r5, #104	; 0x68
 80074ae:	4355      	muls	r5, r2
 80074b0:	460e      	mov	r6, r1
 80074b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074b6:	f7fe fa23 	bl	8005900 <_malloc_r>
 80074ba:	4604      	mov	r4, r0
 80074bc:	b140      	cbz	r0, 80074d0 <__sfmoreglue+0x28>
 80074be:	2100      	movs	r1, #0
 80074c0:	e9c0 1600 	strd	r1, r6, [r0]
 80074c4:	300c      	adds	r0, #12
 80074c6:	60a0      	str	r0, [r4, #8]
 80074c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80074cc:	f7fd fcd8 	bl	8004e80 <memset>
 80074d0:	4620      	mov	r0, r4
 80074d2:	bd70      	pop	{r4, r5, r6, pc}

080074d4 <__sfp_lock_acquire>:
 80074d4:	4801      	ldr	r0, [pc, #4]	; (80074dc <__sfp_lock_acquire+0x8>)
 80074d6:	f000 b8b3 	b.w	8007640 <__retarget_lock_acquire_recursive>
 80074da:	bf00      	nop
 80074dc:	200000f0 	.word	0x200000f0

080074e0 <__sfp_lock_release>:
 80074e0:	4801      	ldr	r0, [pc, #4]	; (80074e8 <__sfp_lock_release+0x8>)
 80074e2:	f000 b8ae 	b.w	8007642 <__retarget_lock_release_recursive>
 80074e6:	bf00      	nop
 80074e8:	200000f0 	.word	0x200000f0

080074ec <__sinit_lock_acquire>:
 80074ec:	4801      	ldr	r0, [pc, #4]	; (80074f4 <__sinit_lock_acquire+0x8>)
 80074ee:	f000 b8a7 	b.w	8007640 <__retarget_lock_acquire_recursive>
 80074f2:	bf00      	nop
 80074f4:	200000eb 	.word	0x200000eb

080074f8 <__sinit_lock_release>:
 80074f8:	4801      	ldr	r0, [pc, #4]	; (8007500 <__sinit_lock_release+0x8>)
 80074fa:	f000 b8a2 	b.w	8007642 <__retarget_lock_release_recursive>
 80074fe:	bf00      	nop
 8007500:	200000eb 	.word	0x200000eb

08007504 <__sinit>:
 8007504:	b510      	push	{r4, lr}
 8007506:	4604      	mov	r4, r0
 8007508:	f7ff fff0 	bl	80074ec <__sinit_lock_acquire>
 800750c:	69a3      	ldr	r3, [r4, #24]
 800750e:	b11b      	cbz	r3, 8007518 <__sinit+0x14>
 8007510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007514:	f7ff bff0 	b.w	80074f8 <__sinit_lock_release>
 8007518:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800751c:	6523      	str	r3, [r4, #80]	; 0x50
 800751e:	4b13      	ldr	r3, [pc, #76]	; (800756c <__sinit+0x68>)
 8007520:	4a13      	ldr	r2, [pc, #76]	; (8007570 <__sinit+0x6c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	62a2      	str	r2, [r4, #40]	; 0x28
 8007526:	42a3      	cmp	r3, r4
 8007528:	bf04      	itt	eq
 800752a:	2301      	moveq	r3, #1
 800752c:	61a3      	streq	r3, [r4, #24]
 800752e:	4620      	mov	r0, r4
 8007530:	f000 f820 	bl	8007574 <__sfp>
 8007534:	6060      	str	r0, [r4, #4]
 8007536:	4620      	mov	r0, r4
 8007538:	f000 f81c 	bl	8007574 <__sfp>
 800753c:	60a0      	str	r0, [r4, #8]
 800753e:	4620      	mov	r0, r4
 8007540:	f000 f818 	bl	8007574 <__sfp>
 8007544:	2200      	movs	r2, #0
 8007546:	60e0      	str	r0, [r4, #12]
 8007548:	2104      	movs	r1, #4
 800754a:	6860      	ldr	r0, [r4, #4]
 800754c:	f7ff ff82 	bl	8007454 <std>
 8007550:	68a0      	ldr	r0, [r4, #8]
 8007552:	2201      	movs	r2, #1
 8007554:	2109      	movs	r1, #9
 8007556:	f7ff ff7d 	bl	8007454 <std>
 800755a:	68e0      	ldr	r0, [r4, #12]
 800755c:	2202      	movs	r2, #2
 800755e:	2112      	movs	r1, #18
 8007560:	f7ff ff78 	bl	8007454 <std>
 8007564:	2301      	movs	r3, #1
 8007566:	61a3      	str	r3, [r4, #24]
 8007568:	e7d2      	b.n	8007510 <__sinit+0xc>
 800756a:	bf00      	nop
 800756c:	080082f0 	.word	0x080082f0
 8007570:	0800749d 	.word	0x0800749d

08007574 <__sfp>:
 8007574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007576:	4607      	mov	r7, r0
 8007578:	f7ff ffac 	bl	80074d4 <__sfp_lock_acquire>
 800757c:	4b1e      	ldr	r3, [pc, #120]	; (80075f8 <__sfp+0x84>)
 800757e:	681e      	ldr	r6, [r3, #0]
 8007580:	69b3      	ldr	r3, [r6, #24]
 8007582:	b913      	cbnz	r3, 800758a <__sfp+0x16>
 8007584:	4630      	mov	r0, r6
 8007586:	f7ff ffbd 	bl	8007504 <__sinit>
 800758a:	3648      	adds	r6, #72	; 0x48
 800758c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007590:	3b01      	subs	r3, #1
 8007592:	d503      	bpl.n	800759c <__sfp+0x28>
 8007594:	6833      	ldr	r3, [r6, #0]
 8007596:	b30b      	cbz	r3, 80075dc <__sfp+0x68>
 8007598:	6836      	ldr	r6, [r6, #0]
 800759a:	e7f7      	b.n	800758c <__sfp+0x18>
 800759c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075a0:	b9d5      	cbnz	r5, 80075d8 <__sfp+0x64>
 80075a2:	4b16      	ldr	r3, [pc, #88]	; (80075fc <__sfp+0x88>)
 80075a4:	60e3      	str	r3, [r4, #12]
 80075a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075aa:	6665      	str	r5, [r4, #100]	; 0x64
 80075ac:	f000 f847 	bl	800763e <__retarget_lock_init_recursive>
 80075b0:	f7ff ff96 	bl	80074e0 <__sfp_lock_release>
 80075b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80075b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80075bc:	6025      	str	r5, [r4, #0]
 80075be:	61a5      	str	r5, [r4, #24]
 80075c0:	2208      	movs	r2, #8
 80075c2:	4629      	mov	r1, r5
 80075c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075c8:	f7fd fc5a 	bl	8004e80 <memset>
 80075cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80075d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80075d4:	4620      	mov	r0, r4
 80075d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075d8:	3468      	adds	r4, #104	; 0x68
 80075da:	e7d9      	b.n	8007590 <__sfp+0x1c>
 80075dc:	2104      	movs	r1, #4
 80075de:	4638      	mov	r0, r7
 80075e0:	f7ff ff62 	bl	80074a8 <__sfmoreglue>
 80075e4:	4604      	mov	r4, r0
 80075e6:	6030      	str	r0, [r6, #0]
 80075e8:	2800      	cmp	r0, #0
 80075ea:	d1d5      	bne.n	8007598 <__sfp+0x24>
 80075ec:	f7ff ff78 	bl	80074e0 <__sfp_lock_release>
 80075f0:	230c      	movs	r3, #12
 80075f2:	603b      	str	r3, [r7, #0]
 80075f4:	e7ee      	b.n	80075d4 <__sfp+0x60>
 80075f6:	bf00      	nop
 80075f8:	080082f0 	.word	0x080082f0
 80075fc:	ffff0001 	.word	0xffff0001

08007600 <_fwalk_reent>:
 8007600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007604:	4606      	mov	r6, r0
 8007606:	4688      	mov	r8, r1
 8007608:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800760c:	2700      	movs	r7, #0
 800760e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007612:	f1b9 0901 	subs.w	r9, r9, #1
 8007616:	d505      	bpl.n	8007624 <_fwalk_reent+0x24>
 8007618:	6824      	ldr	r4, [r4, #0]
 800761a:	2c00      	cmp	r4, #0
 800761c:	d1f7      	bne.n	800760e <_fwalk_reent+0xe>
 800761e:	4638      	mov	r0, r7
 8007620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007624:	89ab      	ldrh	r3, [r5, #12]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d907      	bls.n	800763a <_fwalk_reent+0x3a>
 800762a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800762e:	3301      	adds	r3, #1
 8007630:	d003      	beq.n	800763a <_fwalk_reent+0x3a>
 8007632:	4629      	mov	r1, r5
 8007634:	4630      	mov	r0, r6
 8007636:	47c0      	blx	r8
 8007638:	4307      	orrs	r7, r0
 800763a:	3568      	adds	r5, #104	; 0x68
 800763c:	e7e9      	b.n	8007612 <_fwalk_reent+0x12>

0800763e <__retarget_lock_init_recursive>:
 800763e:	4770      	bx	lr

08007640 <__retarget_lock_acquire_recursive>:
 8007640:	4770      	bx	lr

08007642 <__retarget_lock_release_recursive>:
 8007642:	4770      	bx	lr

08007644 <__swhatbuf_r>:
 8007644:	b570      	push	{r4, r5, r6, lr}
 8007646:	460e      	mov	r6, r1
 8007648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800764c:	2900      	cmp	r1, #0
 800764e:	b096      	sub	sp, #88	; 0x58
 8007650:	4614      	mov	r4, r2
 8007652:	461d      	mov	r5, r3
 8007654:	da07      	bge.n	8007666 <__swhatbuf_r+0x22>
 8007656:	2300      	movs	r3, #0
 8007658:	602b      	str	r3, [r5, #0]
 800765a:	89b3      	ldrh	r3, [r6, #12]
 800765c:	061a      	lsls	r2, r3, #24
 800765e:	d410      	bmi.n	8007682 <__swhatbuf_r+0x3e>
 8007660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007664:	e00e      	b.n	8007684 <__swhatbuf_r+0x40>
 8007666:	466a      	mov	r2, sp
 8007668:	f000 f8fa 	bl	8007860 <_fstat_r>
 800766c:	2800      	cmp	r0, #0
 800766e:	dbf2      	blt.n	8007656 <__swhatbuf_r+0x12>
 8007670:	9a01      	ldr	r2, [sp, #4]
 8007672:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007676:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800767a:	425a      	negs	r2, r3
 800767c:	415a      	adcs	r2, r3
 800767e:	602a      	str	r2, [r5, #0]
 8007680:	e7ee      	b.n	8007660 <__swhatbuf_r+0x1c>
 8007682:	2340      	movs	r3, #64	; 0x40
 8007684:	2000      	movs	r0, #0
 8007686:	6023      	str	r3, [r4, #0]
 8007688:	b016      	add	sp, #88	; 0x58
 800768a:	bd70      	pop	{r4, r5, r6, pc}

0800768c <__smakebuf_r>:
 800768c:	898b      	ldrh	r3, [r1, #12]
 800768e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007690:	079d      	lsls	r5, r3, #30
 8007692:	4606      	mov	r6, r0
 8007694:	460c      	mov	r4, r1
 8007696:	d507      	bpl.n	80076a8 <__smakebuf_r+0x1c>
 8007698:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800769c:	6023      	str	r3, [r4, #0]
 800769e:	6123      	str	r3, [r4, #16]
 80076a0:	2301      	movs	r3, #1
 80076a2:	6163      	str	r3, [r4, #20]
 80076a4:	b002      	add	sp, #8
 80076a6:	bd70      	pop	{r4, r5, r6, pc}
 80076a8:	ab01      	add	r3, sp, #4
 80076aa:	466a      	mov	r2, sp
 80076ac:	f7ff ffca 	bl	8007644 <__swhatbuf_r>
 80076b0:	9900      	ldr	r1, [sp, #0]
 80076b2:	4605      	mov	r5, r0
 80076b4:	4630      	mov	r0, r6
 80076b6:	f7fe f923 	bl	8005900 <_malloc_r>
 80076ba:	b948      	cbnz	r0, 80076d0 <__smakebuf_r+0x44>
 80076bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076c0:	059a      	lsls	r2, r3, #22
 80076c2:	d4ef      	bmi.n	80076a4 <__smakebuf_r+0x18>
 80076c4:	f023 0303 	bic.w	r3, r3, #3
 80076c8:	f043 0302 	orr.w	r3, r3, #2
 80076cc:	81a3      	strh	r3, [r4, #12]
 80076ce:	e7e3      	b.n	8007698 <__smakebuf_r+0xc>
 80076d0:	4b0d      	ldr	r3, [pc, #52]	; (8007708 <__smakebuf_r+0x7c>)
 80076d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80076d4:	89a3      	ldrh	r3, [r4, #12]
 80076d6:	6020      	str	r0, [r4, #0]
 80076d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076dc:	81a3      	strh	r3, [r4, #12]
 80076de:	9b00      	ldr	r3, [sp, #0]
 80076e0:	6163      	str	r3, [r4, #20]
 80076e2:	9b01      	ldr	r3, [sp, #4]
 80076e4:	6120      	str	r0, [r4, #16]
 80076e6:	b15b      	cbz	r3, 8007700 <__smakebuf_r+0x74>
 80076e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076ec:	4630      	mov	r0, r6
 80076ee:	f000 f8c9 	bl	8007884 <_isatty_r>
 80076f2:	b128      	cbz	r0, 8007700 <__smakebuf_r+0x74>
 80076f4:	89a3      	ldrh	r3, [r4, #12]
 80076f6:	f023 0303 	bic.w	r3, r3, #3
 80076fa:	f043 0301 	orr.w	r3, r3, #1
 80076fe:	81a3      	strh	r3, [r4, #12]
 8007700:	89a0      	ldrh	r0, [r4, #12]
 8007702:	4305      	orrs	r5, r0
 8007704:	81a5      	strh	r5, [r4, #12]
 8007706:	e7cd      	b.n	80076a4 <__smakebuf_r+0x18>
 8007708:	0800749d 	.word	0x0800749d

0800770c <_raise_r>:
 800770c:	291f      	cmp	r1, #31
 800770e:	b538      	push	{r3, r4, r5, lr}
 8007710:	4604      	mov	r4, r0
 8007712:	460d      	mov	r5, r1
 8007714:	d904      	bls.n	8007720 <_raise_r+0x14>
 8007716:	2316      	movs	r3, #22
 8007718:	6003      	str	r3, [r0, #0]
 800771a:	f04f 30ff 	mov.w	r0, #4294967295
 800771e:	bd38      	pop	{r3, r4, r5, pc}
 8007720:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007722:	b112      	cbz	r2, 800772a <_raise_r+0x1e>
 8007724:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007728:	b94b      	cbnz	r3, 800773e <_raise_r+0x32>
 800772a:	4620      	mov	r0, r4
 800772c:	f000 f830 	bl	8007790 <_getpid_r>
 8007730:	462a      	mov	r2, r5
 8007732:	4601      	mov	r1, r0
 8007734:	4620      	mov	r0, r4
 8007736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800773a:	f000 b817 	b.w	800776c <_kill_r>
 800773e:	2b01      	cmp	r3, #1
 8007740:	d00a      	beq.n	8007758 <_raise_r+0x4c>
 8007742:	1c59      	adds	r1, r3, #1
 8007744:	d103      	bne.n	800774e <_raise_r+0x42>
 8007746:	2316      	movs	r3, #22
 8007748:	6003      	str	r3, [r0, #0]
 800774a:	2001      	movs	r0, #1
 800774c:	e7e7      	b.n	800771e <_raise_r+0x12>
 800774e:	2400      	movs	r4, #0
 8007750:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007754:	4628      	mov	r0, r5
 8007756:	4798      	blx	r3
 8007758:	2000      	movs	r0, #0
 800775a:	e7e0      	b.n	800771e <_raise_r+0x12>

0800775c <raise>:
 800775c:	4b02      	ldr	r3, [pc, #8]	; (8007768 <raise+0xc>)
 800775e:	4601      	mov	r1, r0
 8007760:	6818      	ldr	r0, [r3, #0]
 8007762:	f7ff bfd3 	b.w	800770c <_raise_r>
 8007766:	bf00      	nop
 8007768:	20000010 	.word	0x20000010

0800776c <_kill_r>:
 800776c:	b538      	push	{r3, r4, r5, lr}
 800776e:	4d07      	ldr	r5, [pc, #28]	; (800778c <_kill_r+0x20>)
 8007770:	2300      	movs	r3, #0
 8007772:	4604      	mov	r4, r0
 8007774:	4608      	mov	r0, r1
 8007776:	4611      	mov	r1, r2
 8007778:	602b      	str	r3, [r5, #0]
 800777a:	f7fb ffce 	bl	800371a <_kill>
 800777e:	1c43      	adds	r3, r0, #1
 8007780:	d102      	bne.n	8007788 <_kill_r+0x1c>
 8007782:	682b      	ldr	r3, [r5, #0]
 8007784:	b103      	cbz	r3, 8007788 <_kill_r+0x1c>
 8007786:	6023      	str	r3, [r4, #0]
 8007788:	bd38      	pop	{r3, r4, r5, pc}
 800778a:	bf00      	nop
 800778c:	200000e4 	.word	0x200000e4

08007790 <_getpid_r>:
 8007790:	f7fb bfbb 	b.w	800370a <_getpid>

08007794 <__sread>:
 8007794:	b510      	push	{r4, lr}
 8007796:	460c      	mov	r4, r1
 8007798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800779c:	f000 f894 	bl	80078c8 <_read_r>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	bfab      	itete	ge
 80077a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077a6:	89a3      	ldrhlt	r3, [r4, #12]
 80077a8:	181b      	addge	r3, r3, r0
 80077aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077ae:	bfac      	ite	ge
 80077b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80077b2:	81a3      	strhlt	r3, [r4, #12]
 80077b4:	bd10      	pop	{r4, pc}

080077b6 <__swrite>:
 80077b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077ba:	461f      	mov	r7, r3
 80077bc:	898b      	ldrh	r3, [r1, #12]
 80077be:	05db      	lsls	r3, r3, #23
 80077c0:	4605      	mov	r5, r0
 80077c2:	460c      	mov	r4, r1
 80077c4:	4616      	mov	r6, r2
 80077c6:	d505      	bpl.n	80077d4 <__swrite+0x1e>
 80077c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077cc:	2302      	movs	r3, #2
 80077ce:	2200      	movs	r2, #0
 80077d0:	f000 f868 	bl	80078a4 <_lseek_r>
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077de:	81a3      	strh	r3, [r4, #12]
 80077e0:	4632      	mov	r2, r6
 80077e2:	463b      	mov	r3, r7
 80077e4:	4628      	mov	r0, r5
 80077e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077ea:	f000 b817 	b.w	800781c <_write_r>

080077ee <__sseek>:
 80077ee:	b510      	push	{r4, lr}
 80077f0:	460c      	mov	r4, r1
 80077f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f6:	f000 f855 	bl	80078a4 <_lseek_r>
 80077fa:	1c43      	adds	r3, r0, #1
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	bf15      	itete	ne
 8007800:	6560      	strne	r0, [r4, #84]	; 0x54
 8007802:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007806:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800780a:	81a3      	strheq	r3, [r4, #12]
 800780c:	bf18      	it	ne
 800780e:	81a3      	strhne	r3, [r4, #12]
 8007810:	bd10      	pop	{r4, pc}

08007812 <__sclose>:
 8007812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007816:	f000 b813 	b.w	8007840 <_close_r>
	...

0800781c <_write_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4d07      	ldr	r5, [pc, #28]	; (800783c <_write_r+0x20>)
 8007820:	4604      	mov	r4, r0
 8007822:	4608      	mov	r0, r1
 8007824:	4611      	mov	r1, r2
 8007826:	2200      	movs	r2, #0
 8007828:	602a      	str	r2, [r5, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	f7fb ffac 	bl	8003788 <_write>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d102      	bne.n	800783a <_write_r+0x1e>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	b103      	cbz	r3, 800783a <_write_r+0x1e>
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	200000e4 	.word	0x200000e4

08007840 <_close_r>:
 8007840:	b538      	push	{r3, r4, r5, lr}
 8007842:	4d06      	ldr	r5, [pc, #24]	; (800785c <_close_r+0x1c>)
 8007844:	2300      	movs	r3, #0
 8007846:	4604      	mov	r4, r0
 8007848:	4608      	mov	r0, r1
 800784a:	602b      	str	r3, [r5, #0]
 800784c:	f7fb ffb8 	bl	80037c0 <_close>
 8007850:	1c43      	adds	r3, r0, #1
 8007852:	d102      	bne.n	800785a <_close_r+0x1a>
 8007854:	682b      	ldr	r3, [r5, #0]
 8007856:	b103      	cbz	r3, 800785a <_close_r+0x1a>
 8007858:	6023      	str	r3, [r4, #0]
 800785a:	bd38      	pop	{r3, r4, r5, pc}
 800785c:	200000e4 	.word	0x200000e4

08007860 <_fstat_r>:
 8007860:	b538      	push	{r3, r4, r5, lr}
 8007862:	4d07      	ldr	r5, [pc, #28]	; (8007880 <_fstat_r+0x20>)
 8007864:	2300      	movs	r3, #0
 8007866:	4604      	mov	r4, r0
 8007868:	4608      	mov	r0, r1
 800786a:	4611      	mov	r1, r2
 800786c:	602b      	str	r3, [r5, #0]
 800786e:	f7fb ffb3 	bl	80037d8 <_fstat>
 8007872:	1c43      	adds	r3, r0, #1
 8007874:	d102      	bne.n	800787c <_fstat_r+0x1c>
 8007876:	682b      	ldr	r3, [r5, #0]
 8007878:	b103      	cbz	r3, 800787c <_fstat_r+0x1c>
 800787a:	6023      	str	r3, [r4, #0]
 800787c:	bd38      	pop	{r3, r4, r5, pc}
 800787e:	bf00      	nop
 8007880:	200000e4 	.word	0x200000e4

08007884 <_isatty_r>:
 8007884:	b538      	push	{r3, r4, r5, lr}
 8007886:	4d06      	ldr	r5, [pc, #24]	; (80078a0 <_isatty_r+0x1c>)
 8007888:	2300      	movs	r3, #0
 800788a:	4604      	mov	r4, r0
 800788c:	4608      	mov	r0, r1
 800788e:	602b      	str	r3, [r5, #0]
 8007890:	f7fb ffb2 	bl	80037f8 <_isatty>
 8007894:	1c43      	adds	r3, r0, #1
 8007896:	d102      	bne.n	800789e <_isatty_r+0x1a>
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	b103      	cbz	r3, 800789e <_isatty_r+0x1a>
 800789c:	6023      	str	r3, [r4, #0]
 800789e:	bd38      	pop	{r3, r4, r5, pc}
 80078a0:	200000e4 	.word	0x200000e4

080078a4 <_lseek_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	4d07      	ldr	r5, [pc, #28]	; (80078c4 <_lseek_r+0x20>)
 80078a8:	4604      	mov	r4, r0
 80078aa:	4608      	mov	r0, r1
 80078ac:	4611      	mov	r1, r2
 80078ae:	2200      	movs	r2, #0
 80078b0:	602a      	str	r2, [r5, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	f7fb ffab 	bl	800380e <_lseek>
 80078b8:	1c43      	adds	r3, r0, #1
 80078ba:	d102      	bne.n	80078c2 <_lseek_r+0x1e>
 80078bc:	682b      	ldr	r3, [r5, #0]
 80078be:	b103      	cbz	r3, 80078c2 <_lseek_r+0x1e>
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
 80078c4:	200000e4 	.word	0x200000e4

080078c8 <_read_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4d07      	ldr	r5, [pc, #28]	; (80078e8 <_read_r+0x20>)
 80078cc:	4604      	mov	r4, r0
 80078ce:	4608      	mov	r0, r1
 80078d0:	4611      	mov	r1, r2
 80078d2:	2200      	movs	r2, #0
 80078d4:	602a      	str	r2, [r5, #0]
 80078d6:	461a      	mov	r2, r3
 80078d8:	f7fb ff39 	bl	800374e <_read>
 80078dc:	1c43      	adds	r3, r0, #1
 80078de:	d102      	bne.n	80078e6 <_read_r+0x1e>
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	b103      	cbz	r3, 80078e6 <_read_r+0x1e>
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	bd38      	pop	{r3, r4, r5, pc}
 80078e8:	200000e4 	.word	0x200000e4
 80078ec:	00000000 	.word	0x00000000

080078f0 <floor>:
 80078f0:	ec51 0b10 	vmov	r0, r1, d0
 80078f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80078fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007900:	2e13      	cmp	r6, #19
 8007902:	ee10 5a10 	vmov	r5, s0
 8007906:	ee10 8a10 	vmov	r8, s0
 800790a:	460c      	mov	r4, r1
 800790c:	dc32      	bgt.n	8007974 <floor+0x84>
 800790e:	2e00      	cmp	r6, #0
 8007910:	da14      	bge.n	800793c <floor+0x4c>
 8007912:	a333      	add	r3, pc, #204	; (adr r3, 80079e0 <floor+0xf0>)
 8007914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007918:	f7f8 fcb8 	bl	800028c <__adddf3>
 800791c:	2200      	movs	r2, #0
 800791e:	2300      	movs	r3, #0
 8007920:	f7f9 f8fa 	bl	8000b18 <__aeabi_dcmpgt>
 8007924:	b138      	cbz	r0, 8007936 <floor+0x46>
 8007926:	2c00      	cmp	r4, #0
 8007928:	da57      	bge.n	80079da <floor+0xea>
 800792a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800792e:	431d      	orrs	r5, r3
 8007930:	d001      	beq.n	8007936 <floor+0x46>
 8007932:	4c2d      	ldr	r4, [pc, #180]	; (80079e8 <floor+0xf8>)
 8007934:	2500      	movs	r5, #0
 8007936:	4621      	mov	r1, r4
 8007938:	4628      	mov	r0, r5
 800793a:	e025      	b.n	8007988 <floor+0x98>
 800793c:	4f2b      	ldr	r7, [pc, #172]	; (80079ec <floor+0xfc>)
 800793e:	4137      	asrs	r7, r6
 8007940:	ea01 0307 	and.w	r3, r1, r7
 8007944:	4303      	orrs	r3, r0
 8007946:	d01f      	beq.n	8007988 <floor+0x98>
 8007948:	a325      	add	r3, pc, #148	; (adr r3, 80079e0 <floor+0xf0>)
 800794a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794e:	f7f8 fc9d 	bl	800028c <__adddf3>
 8007952:	2200      	movs	r2, #0
 8007954:	2300      	movs	r3, #0
 8007956:	f7f9 f8df 	bl	8000b18 <__aeabi_dcmpgt>
 800795a:	2800      	cmp	r0, #0
 800795c:	d0eb      	beq.n	8007936 <floor+0x46>
 800795e:	2c00      	cmp	r4, #0
 8007960:	bfbe      	ittt	lt
 8007962:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007966:	fa43 f606 	asrlt.w	r6, r3, r6
 800796a:	19a4      	addlt	r4, r4, r6
 800796c:	ea24 0407 	bic.w	r4, r4, r7
 8007970:	2500      	movs	r5, #0
 8007972:	e7e0      	b.n	8007936 <floor+0x46>
 8007974:	2e33      	cmp	r6, #51	; 0x33
 8007976:	dd0b      	ble.n	8007990 <floor+0xa0>
 8007978:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800797c:	d104      	bne.n	8007988 <floor+0x98>
 800797e:	ee10 2a10 	vmov	r2, s0
 8007982:	460b      	mov	r3, r1
 8007984:	f7f8 fc82 	bl	800028c <__adddf3>
 8007988:	ec41 0b10 	vmov	d0, r0, r1
 800798c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007990:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007994:	f04f 33ff 	mov.w	r3, #4294967295
 8007998:	fa23 f707 	lsr.w	r7, r3, r7
 800799c:	4207      	tst	r7, r0
 800799e:	d0f3      	beq.n	8007988 <floor+0x98>
 80079a0:	a30f      	add	r3, pc, #60	; (adr r3, 80079e0 <floor+0xf0>)
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	f7f8 fc71 	bl	800028c <__adddf3>
 80079aa:	2200      	movs	r2, #0
 80079ac:	2300      	movs	r3, #0
 80079ae:	f7f9 f8b3 	bl	8000b18 <__aeabi_dcmpgt>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d0bf      	beq.n	8007936 <floor+0x46>
 80079b6:	2c00      	cmp	r4, #0
 80079b8:	da02      	bge.n	80079c0 <floor+0xd0>
 80079ba:	2e14      	cmp	r6, #20
 80079bc:	d103      	bne.n	80079c6 <floor+0xd6>
 80079be:	3401      	adds	r4, #1
 80079c0:	ea25 0507 	bic.w	r5, r5, r7
 80079c4:	e7b7      	b.n	8007936 <floor+0x46>
 80079c6:	2301      	movs	r3, #1
 80079c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80079cc:	fa03 f606 	lsl.w	r6, r3, r6
 80079d0:	4435      	add	r5, r6
 80079d2:	4545      	cmp	r5, r8
 80079d4:	bf38      	it	cc
 80079d6:	18e4      	addcc	r4, r4, r3
 80079d8:	e7f2      	b.n	80079c0 <floor+0xd0>
 80079da:	2500      	movs	r5, #0
 80079dc:	462c      	mov	r4, r5
 80079de:	e7aa      	b.n	8007936 <floor+0x46>
 80079e0:	8800759c 	.word	0x8800759c
 80079e4:	7e37e43c 	.word	0x7e37e43c
 80079e8:	bff00000 	.word	0xbff00000
 80079ec:	000fffff 	.word	0x000fffff

080079f0 <powf>:
 80079f0:	b508      	push	{r3, lr}
 80079f2:	ed2d 8b04 	vpush	{d8-d9}
 80079f6:	eeb0 9a40 	vmov.f32	s18, s0
 80079fa:	eef0 8a60 	vmov.f32	s17, s1
 80079fe:	f000 f88f 	bl	8007b20 <__ieee754_powf>
 8007a02:	4b43      	ldr	r3, [pc, #268]	; (8007b10 <powf+0x120>)
 8007a04:	f993 3000 	ldrsb.w	r3, [r3]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	eeb0 8a40 	vmov.f32	s16, s0
 8007a0e:	d012      	beq.n	8007a36 <powf+0x46>
 8007a10:	eef4 8a68 	vcmp.f32	s17, s17
 8007a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a18:	d60d      	bvs.n	8007a36 <powf+0x46>
 8007a1a:	eeb4 9a49 	vcmp.f32	s18, s18
 8007a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a22:	d70d      	bvc.n	8007a40 <powf+0x50>
 8007a24:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007a30:	bf08      	it	eq
 8007a32:	eeb0 8a67 	vmoveq.f32	s16, s15
 8007a36:	eeb0 0a48 	vmov.f32	s0, s16
 8007a3a:	ecbd 8b04 	vpop	{d8-d9}
 8007a3e:	bd08      	pop	{r3, pc}
 8007a40:	eddf 9a34 	vldr	s19, [pc, #208]	; 8007b14 <powf+0x124>
 8007a44:	eeb4 9a69 	vcmp.f32	s18, s19
 8007a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a4c:	d116      	bne.n	8007a7c <powf+0x8c>
 8007a4e:	eef4 8a69 	vcmp.f32	s17, s19
 8007a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a56:	d057      	beq.n	8007b08 <powf+0x118>
 8007a58:	eeb0 0a68 	vmov.f32	s0, s17
 8007a5c:	f000 fb2a 	bl	80080b4 <finitef>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d0e8      	beq.n	8007a36 <powf+0x46>
 8007a64:	eef4 8ae9 	vcmpe.f32	s17, s19
 8007a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a6c:	d5e3      	bpl.n	8007a36 <powf+0x46>
 8007a6e:	f7fd f9dd 	bl	8004e2c <__errno>
 8007a72:	2321      	movs	r3, #33	; 0x21
 8007a74:	6003      	str	r3, [r0, #0]
 8007a76:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8007b18 <powf+0x128>
 8007a7a:	e7dc      	b.n	8007a36 <powf+0x46>
 8007a7c:	f000 fb1a 	bl	80080b4 <finitef>
 8007a80:	bb50      	cbnz	r0, 8007ad8 <powf+0xe8>
 8007a82:	eeb0 0a49 	vmov.f32	s0, s18
 8007a86:	f000 fb15 	bl	80080b4 <finitef>
 8007a8a:	b328      	cbz	r0, 8007ad8 <powf+0xe8>
 8007a8c:	eeb0 0a68 	vmov.f32	s0, s17
 8007a90:	f000 fb10 	bl	80080b4 <finitef>
 8007a94:	b300      	cbz	r0, 8007ad8 <powf+0xe8>
 8007a96:	eeb4 8a48 	vcmp.f32	s16, s16
 8007a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a9e:	d706      	bvc.n	8007aae <powf+0xbe>
 8007aa0:	f7fd f9c4 	bl	8004e2c <__errno>
 8007aa4:	2321      	movs	r3, #33	; 0x21
 8007aa6:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8007aaa:	6003      	str	r3, [r0, #0]
 8007aac:	e7c3      	b.n	8007a36 <powf+0x46>
 8007aae:	f7fd f9bd 	bl	8004e2c <__errno>
 8007ab2:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8007ab6:	2322      	movs	r3, #34	; 0x22
 8007ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007abc:	6003      	str	r3, [r0, #0]
 8007abe:	d508      	bpl.n	8007ad2 <powf+0xe2>
 8007ac0:	eeb0 0a68 	vmov.f32	s0, s17
 8007ac4:	f000 fb0a 	bl	80080dc <rintf>
 8007ac8:	eeb4 0a68 	vcmp.f32	s0, s17
 8007acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad0:	d1d1      	bne.n	8007a76 <powf+0x86>
 8007ad2:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8007b1c <powf+0x12c>
 8007ad6:	e7ae      	b.n	8007a36 <powf+0x46>
 8007ad8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae0:	d1a9      	bne.n	8007a36 <powf+0x46>
 8007ae2:	eeb0 0a49 	vmov.f32	s0, s18
 8007ae6:	f000 fae5 	bl	80080b4 <finitef>
 8007aea:	2800      	cmp	r0, #0
 8007aec:	d0a3      	beq.n	8007a36 <powf+0x46>
 8007aee:	eeb0 0a68 	vmov.f32	s0, s17
 8007af2:	f000 fadf 	bl	80080b4 <finitef>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	d09d      	beq.n	8007a36 <powf+0x46>
 8007afa:	f7fd f997 	bl	8004e2c <__errno>
 8007afe:	2322      	movs	r3, #34	; 0x22
 8007b00:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8007b14 <powf+0x124>
 8007b04:	6003      	str	r3, [r0, #0]
 8007b06:	e796      	b.n	8007a36 <powf+0x46>
 8007b08:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007b0c:	e793      	b.n	8007a36 <powf+0x46>
 8007b0e:	bf00      	nop
 8007b10:	20000074 	.word	0x20000074
 8007b14:	00000000 	.word	0x00000000
 8007b18:	ff800000 	.word	0xff800000
 8007b1c:	7f800000 	.word	0x7f800000

08007b20 <__ieee754_powf>:
 8007b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b24:	ee10 5a90 	vmov	r5, s1
 8007b28:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8007b2c:	ed2d 8b02 	vpush	{d8}
 8007b30:	eeb0 8a40 	vmov.f32	s16, s0
 8007b34:	eef0 8a60 	vmov.f32	s17, s1
 8007b38:	f000 8291 	beq.w	800805e <__ieee754_powf+0x53e>
 8007b3c:	ee10 8a10 	vmov	r8, s0
 8007b40:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8007b44:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007b48:	dc06      	bgt.n	8007b58 <__ieee754_powf+0x38>
 8007b4a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007b4e:	dd0a      	ble.n	8007b66 <__ieee754_powf+0x46>
 8007b50:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007b54:	f000 8283 	beq.w	800805e <__ieee754_powf+0x53e>
 8007b58:	ecbd 8b02 	vpop	{d8}
 8007b5c:	48d8      	ldr	r0, [pc, #864]	; (8007ec0 <__ieee754_powf+0x3a0>)
 8007b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b62:	f000 bab5 	b.w	80080d0 <nanf>
 8007b66:	f1b8 0f00 	cmp.w	r8, #0
 8007b6a:	da1f      	bge.n	8007bac <__ieee754_powf+0x8c>
 8007b6c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8007b70:	da2e      	bge.n	8007bd0 <__ieee754_powf+0xb0>
 8007b72:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007b76:	f2c0 827b 	blt.w	8008070 <__ieee754_powf+0x550>
 8007b7a:	15fb      	asrs	r3, r7, #23
 8007b7c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007b80:	fa47 f603 	asr.w	r6, r7, r3
 8007b84:	fa06 f303 	lsl.w	r3, r6, r3
 8007b88:	42bb      	cmp	r3, r7
 8007b8a:	f040 8271 	bne.w	8008070 <__ieee754_powf+0x550>
 8007b8e:	f006 0601 	and.w	r6, r6, #1
 8007b92:	f1c6 0602 	rsb	r6, r6, #2
 8007b96:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007b9a:	d120      	bne.n	8007bde <__ieee754_powf+0xbe>
 8007b9c:	2d00      	cmp	r5, #0
 8007b9e:	f280 8264 	bge.w	800806a <__ieee754_powf+0x54a>
 8007ba2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007ba6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007baa:	e00d      	b.n	8007bc8 <__ieee754_powf+0xa8>
 8007bac:	2600      	movs	r6, #0
 8007bae:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007bb2:	d1f0      	bne.n	8007b96 <__ieee754_powf+0x76>
 8007bb4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007bb8:	f000 8251 	beq.w	800805e <__ieee754_powf+0x53e>
 8007bbc:	dd0a      	ble.n	8007bd4 <__ieee754_powf+0xb4>
 8007bbe:	2d00      	cmp	r5, #0
 8007bc0:	f280 8250 	bge.w	8008064 <__ieee754_powf+0x544>
 8007bc4:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8007ec4 <__ieee754_powf+0x3a4>
 8007bc8:	ecbd 8b02 	vpop	{d8}
 8007bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd0:	2602      	movs	r6, #2
 8007bd2:	e7ec      	b.n	8007bae <__ieee754_powf+0x8e>
 8007bd4:	2d00      	cmp	r5, #0
 8007bd6:	daf5      	bge.n	8007bc4 <__ieee754_powf+0xa4>
 8007bd8:	eeb1 0a68 	vneg.f32	s0, s17
 8007bdc:	e7f4      	b.n	8007bc8 <__ieee754_powf+0xa8>
 8007bde:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8007be2:	d102      	bne.n	8007bea <__ieee754_powf+0xca>
 8007be4:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007be8:	e7ee      	b.n	8007bc8 <__ieee754_powf+0xa8>
 8007bea:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8007bee:	eeb0 0a48 	vmov.f32	s0, s16
 8007bf2:	d108      	bne.n	8007c06 <__ieee754_powf+0xe6>
 8007bf4:	f1b8 0f00 	cmp.w	r8, #0
 8007bf8:	db05      	blt.n	8007c06 <__ieee754_powf+0xe6>
 8007bfa:	ecbd 8b02 	vpop	{d8}
 8007bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c02:	f000 ba4d 	b.w	80080a0 <__ieee754_sqrtf>
 8007c06:	f000 fa4e 	bl	80080a6 <fabsf>
 8007c0a:	b124      	cbz	r4, 8007c16 <__ieee754_powf+0xf6>
 8007c0c:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8007c10:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007c14:	d117      	bne.n	8007c46 <__ieee754_powf+0x126>
 8007c16:	2d00      	cmp	r5, #0
 8007c18:	bfbc      	itt	lt
 8007c1a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8007c1e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007c22:	f1b8 0f00 	cmp.w	r8, #0
 8007c26:	dacf      	bge.n	8007bc8 <__ieee754_powf+0xa8>
 8007c28:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8007c2c:	ea54 0306 	orrs.w	r3, r4, r6
 8007c30:	d104      	bne.n	8007c3c <__ieee754_powf+0x11c>
 8007c32:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007c36:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007c3a:	e7c5      	b.n	8007bc8 <__ieee754_powf+0xa8>
 8007c3c:	2e01      	cmp	r6, #1
 8007c3e:	d1c3      	bne.n	8007bc8 <__ieee754_powf+0xa8>
 8007c40:	eeb1 0a40 	vneg.f32	s0, s0
 8007c44:	e7c0      	b.n	8007bc8 <__ieee754_powf+0xa8>
 8007c46:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8007c4a:	3801      	subs	r0, #1
 8007c4c:	ea56 0300 	orrs.w	r3, r6, r0
 8007c50:	d104      	bne.n	8007c5c <__ieee754_powf+0x13c>
 8007c52:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007c56:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007c5a:	e7b5      	b.n	8007bc8 <__ieee754_powf+0xa8>
 8007c5c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8007c60:	dd6b      	ble.n	8007d3a <__ieee754_powf+0x21a>
 8007c62:	4b99      	ldr	r3, [pc, #612]	; (8007ec8 <__ieee754_powf+0x3a8>)
 8007c64:	429c      	cmp	r4, r3
 8007c66:	dc06      	bgt.n	8007c76 <__ieee754_powf+0x156>
 8007c68:	2d00      	cmp	r5, #0
 8007c6a:	daab      	bge.n	8007bc4 <__ieee754_powf+0xa4>
 8007c6c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8007ecc <__ieee754_powf+0x3ac>
 8007c70:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007c74:	e7a8      	b.n	8007bc8 <__ieee754_powf+0xa8>
 8007c76:	4b96      	ldr	r3, [pc, #600]	; (8007ed0 <__ieee754_powf+0x3b0>)
 8007c78:	429c      	cmp	r4, r3
 8007c7a:	dd02      	ble.n	8007c82 <__ieee754_powf+0x162>
 8007c7c:	2d00      	cmp	r5, #0
 8007c7e:	dcf5      	bgt.n	8007c6c <__ieee754_powf+0x14c>
 8007c80:	e7a0      	b.n	8007bc4 <__ieee754_powf+0xa4>
 8007c82:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007c86:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007c8a:	eddf 6a92 	vldr	s13, [pc, #584]	; 8007ed4 <__ieee754_powf+0x3b4>
 8007c8e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8007c92:	eee0 6a67 	vfms.f32	s13, s0, s15
 8007c96:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007c9a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8007c9e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ca6:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8007ed8 <__ieee754_powf+0x3b8>
 8007caa:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8007cae:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8007edc <__ieee754_powf+0x3bc>
 8007cb2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007cb6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8007ee0 <__ieee754_powf+0x3c0>
 8007cba:	eef0 6a67 	vmov.f32	s13, s15
 8007cbe:	eee0 6a07 	vfma.f32	s13, s0, s14
 8007cc2:	ee16 3a90 	vmov	r3, s13
 8007cc6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007cca:	f023 030f 	bic.w	r3, r3, #15
 8007cce:	ee00 3a90 	vmov	s1, r3
 8007cd2:	eee0 0a47 	vfms.f32	s1, s0, s14
 8007cd6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007cda:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8007cde:	f025 050f 	bic.w	r5, r5, #15
 8007ce2:	ee07 5a10 	vmov	s14, r5
 8007ce6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8007cea:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8007cee:	ee07 3a90 	vmov	s15, r3
 8007cf2:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007cf6:	3e01      	subs	r6, #1
 8007cf8:	ea56 0200 	orrs.w	r2, r6, r0
 8007cfc:	ee07 5a10 	vmov	s14, r5
 8007d00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d04:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007d08:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007d0c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007d10:	ee17 4a10 	vmov	r4, s14
 8007d14:	bf08      	it	eq
 8007d16:	eeb0 8a40 	vmoveq.f32	s16, s0
 8007d1a:	2c00      	cmp	r4, #0
 8007d1c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007d20:	f340 8184 	ble.w	800802c <__ieee754_powf+0x50c>
 8007d24:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007d28:	f340 80fc 	ble.w	8007f24 <__ieee754_powf+0x404>
 8007d2c:	eddf 7a67 	vldr	s15, [pc, #412]	; 8007ecc <__ieee754_powf+0x3ac>
 8007d30:	ee28 0a27 	vmul.f32	s0, s16, s15
 8007d34:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007d38:	e746      	b.n	8007bc8 <__ieee754_powf+0xa8>
 8007d3a:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8007d3e:	bf01      	itttt	eq
 8007d40:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8007ee4 <__ieee754_powf+0x3c4>
 8007d44:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8007d48:	f06f 0217 	mvneq.w	r2, #23
 8007d4c:	ee17 4a90 	vmoveq	r4, s15
 8007d50:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8007d54:	bf18      	it	ne
 8007d56:	2200      	movne	r2, #0
 8007d58:	3b7f      	subs	r3, #127	; 0x7f
 8007d5a:	4413      	add	r3, r2
 8007d5c:	4a62      	ldr	r2, [pc, #392]	; (8007ee8 <__ieee754_powf+0x3c8>)
 8007d5e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8007d62:	4294      	cmp	r4, r2
 8007d64:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8007d68:	dd06      	ble.n	8007d78 <__ieee754_powf+0x258>
 8007d6a:	4a60      	ldr	r2, [pc, #384]	; (8007eec <__ieee754_powf+0x3cc>)
 8007d6c:	4294      	cmp	r4, r2
 8007d6e:	f340 80a4 	ble.w	8007eba <__ieee754_powf+0x39a>
 8007d72:	3301      	adds	r3, #1
 8007d74:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8007d78:	2400      	movs	r4, #0
 8007d7a:	4a5d      	ldr	r2, [pc, #372]	; (8007ef0 <__ieee754_powf+0x3d0>)
 8007d7c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007d80:	ee07 1a90 	vmov	s15, r1
 8007d84:	ed92 7a00 	vldr	s14, [r2]
 8007d88:	4a5a      	ldr	r2, [pc, #360]	; (8007ef4 <__ieee754_powf+0x3d4>)
 8007d8a:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007d8e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007d92:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8007d96:	1049      	asrs	r1, r1, #1
 8007d98:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007d9c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007da0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8007da4:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8007da8:	ee06 1a10 	vmov	s12, r1
 8007dac:	ee65 4a26 	vmul.f32	s9, s10, s13
 8007db0:	ee36 7a47 	vsub.f32	s14, s12, s14
 8007db4:	ee14 7a90 	vmov	r7, s9
 8007db8:	4017      	ands	r7, r2
 8007dba:	ee05 7a90 	vmov	s11, r7
 8007dbe:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8007dc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007dc6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007ef8 <__ieee754_powf+0x3d8>
 8007dca:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8007dce:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8007dd2:	ee25 6a26 	vmul.f32	s12, s10, s13
 8007dd6:	eddf 6a49 	vldr	s13, [pc, #292]	; 8007efc <__ieee754_powf+0x3dc>
 8007dda:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007dde:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007f00 <__ieee754_powf+0x3e0>
 8007de2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007de6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007ed4 <__ieee754_powf+0x3b4>
 8007dea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007dee:	eddf 6a45 	vldr	s13, [pc, #276]	; 8007f04 <__ieee754_powf+0x3e4>
 8007df2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007df6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007f08 <__ieee754_powf+0x3e8>
 8007dfa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007dfe:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8007e02:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8007e06:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007e0a:	eee5 6a07 	vfma.f32	s13, s10, s14
 8007e0e:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8007e12:	eef0 7a45 	vmov.f32	s15, s10
 8007e16:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8007e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e1e:	ee17 1a90 	vmov	r1, s15
 8007e22:	4011      	ands	r1, r2
 8007e24:	ee07 1a90 	vmov	s15, r1
 8007e28:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8007e2c:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8007e30:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007e34:	ee27 7a24 	vmul.f32	s14, s14, s9
 8007e38:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007e3c:	eeb0 6a47 	vmov.f32	s12, s14
 8007e40:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8007e44:	ee16 1a10 	vmov	r1, s12
 8007e48:	4011      	ands	r1, r2
 8007e4a:	ee06 1a90 	vmov	s13, r1
 8007e4e:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8007e52:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8007f0c <__ieee754_powf+0x3ec>
 8007e56:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007f10 <__ieee754_powf+0x3f0>
 8007e5a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007e5e:	ee06 1a10 	vmov	s12, r1
 8007e62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007e66:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007f14 <__ieee754_powf+0x3f4>
 8007e6a:	492b      	ldr	r1, [pc, #172]	; (8007f18 <__ieee754_powf+0x3f8>)
 8007e6c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007e70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e74:	edd1 7a00 	vldr	s15, [r1]
 8007e78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007e7c:	ee07 3a90 	vmov	s15, r3
 8007e80:	4b26      	ldr	r3, [pc, #152]	; (8007f1c <__ieee754_powf+0x3fc>)
 8007e82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007e86:	eef0 7a47 	vmov.f32	s15, s14
 8007e8a:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007e8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007e92:	edd4 0a00 	vldr	s1, [r4]
 8007e96:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e9e:	ee17 3a90 	vmov	r3, s15
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	ee07 3a90 	vmov	s15, r3
 8007ea8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8007eac:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8007eb0:	eee6 6a65 	vfms.f32	s13, s12, s11
 8007eb4:	ee77 7a66 	vsub.f32	s15, s14, s13
 8007eb8:	e70f      	b.n	8007cda <__ieee754_powf+0x1ba>
 8007eba:	2401      	movs	r4, #1
 8007ebc:	e75d      	b.n	8007d7a <__ieee754_powf+0x25a>
 8007ebe:	bf00      	nop
 8007ec0:	080084ea 	.word	0x080084ea
 8007ec4:	00000000 	.word	0x00000000
 8007ec8:	3f7ffff7 	.word	0x3f7ffff7
 8007ecc:	7149f2ca 	.word	0x7149f2ca
 8007ed0:	3f800007 	.word	0x3f800007
 8007ed4:	3eaaaaab 	.word	0x3eaaaaab
 8007ed8:	3fb8aa3b 	.word	0x3fb8aa3b
 8007edc:	36eca570 	.word	0x36eca570
 8007ee0:	3fb8aa00 	.word	0x3fb8aa00
 8007ee4:	4b800000 	.word	0x4b800000
 8007ee8:	001cc471 	.word	0x001cc471
 8007eec:	005db3d6 	.word	0x005db3d6
 8007ef0:	080085bc 	.word	0x080085bc
 8007ef4:	fffff000 	.word	0xfffff000
 8007ef8:	3e6c3255 	.word	0x3e6c3255
 8007efc:	3e53f142 	.word	0x3e53f142
 8007f00:	3e8ba305 	.word	0x3e8ba305
 8007f04:	3edb6db7 	.word	0x3edb6db7
 8007f08:	3f19999a 	.word	0x3f19999a
 8007f0c:	3f76384f 	.word	0x3f76384f
 8007f10:	3f763800 	.word	0x3f763800
 8007f14:	369dc3a0 	.word	0x369dc3a0
 8007f18:	080085cc 	.word	0x080085cc
 8007f1c:	080085c4 	.word	0x080085c4
 8007f20:	3338aa3c 	.word	0x3338aa3c
 8007f24:	f040 8092 	bne.w	800804c <__ieee754_powf+0x52c>
 8007f28:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8007f20 <__ieee754_powf+0x400>
 8007f2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007f30:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8007f34:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f3c:	f73f aef6 	bgt.w	8007d2c <__ieee754_powf+0x20c>
 8007f40:	15db      	asrs	r3, r3, #23
 8007f42:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8007f46:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007f4a:	4103      	asrs	r3, r0
 8007f4c:	4423      	add	r3, r4
 8007f4e:	4949      	ldr	r1, [pc, #292]	; (8008074 <__ieee754_powf+0x554>)
 8007f50:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007f54:	3a7f      	subs	r2, #127	; 0x7f
 8007f56:	4111      	asrs	r1, r2
 8007f58:	ea23 0101 	bic.w	r1, r3, r1
 8007f5c:	ee07 1a10 	vmov	s14, r1
 8007f60:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007f64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007f68:	f1c2 0217 	rsb	r2, r2, #23
 8007f6c:	4110      	asrs	r0, r2
 8007f6e:	2c00      	cmp	r4, #0
 8007f70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f74:	bfb8      	it	lt
 8007f76:	4240      	neglt	r0, r0
 8007f78:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8007f7c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8008078 <__ieee754_powf+0x558>
 8007f80:	ee17 3a10 	vmov	r3, s14
 8007f84:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007f88:	f023 030f 	bic.w	r3, r3, #15
 8007f8c:	ee07 3a10 	vmov	s14, r3
 8007f90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f94:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007f98:	eddf 7a38 	vldr	s15, [pc, #224]	; 800807c <__ieee754_powf+0x55c>
 8007f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8007fa4:	eddf 6a36 	vldr	s13, [pc, #216]	; 8008080 <__ieee754_powf+0x560>
 8007fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8007fac:	eea7 0a26 	vfma.f32	s0, s14, s13
 8007fb0:	eeb0 6a40 	vmov.f32	s12, s0
 8007fb4:	eea7 6a66 	vfms.f32	s12, s14, s13
 8007fb8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007fbc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007fc0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8008084 <__ieee754_powf+0x564>
 8007fc4:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8008088 <__ieee754_powf+0x568>
 8007fc8:	eea7 6a26 	vfma.f32	s12, s14, s13
 8007fcc:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800808c <__ieee754_powf+0x56c>
 8007fd0:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007fd4:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8008090 <__ieee754_powf+0x570>
 8007fd8:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007fdc:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8008094 <__ieee754_powf+0x574>
 8007fe0:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007fe4:	eeb0 6a40 	vmov.f32	s12, s0
 8007fe8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8007fec:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007ff0:	eeb0 7a46 	vmov.f32	s14, s12
 8007ff4:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007ff8:	ee20 6a06 	vmul.f32	s12, s0, s12
 8007ffc:	eee0 7a27 	vfma.f32	s15, s0, s15
 8008000:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008008:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800800c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008010:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008014:	ee10 3a10 	vmov	r3, s0
 8008018:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800801c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008020:	da1a      	bge.n	8008058 <__ieee754_powf+0x538>
 8008022:	f000 f8b7 	bl	8008194 <scalbnf>
 8008026:	ee20 0a08 	vmul.f32	s0, s0, s16
 800802a:	e5cd      	b.n	8007bc8 <__ieee754_powf+0xa8>
 800802c:	4a1a      	ldr	r2, [pc, #104]	; (8008098 <__ieee754_powf+0x578>)
 800802e:	4293      	cmp	r3, r2
 8008030:	dd02      	ble.n	8008038 <__ieee754_powf+0x518>
 8008032:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800809c <__ieee754_powf+0x57c>
 8008036:	e67b      	b.n	8007d30 <__ieee754_powf+0x210>
 8008038:	d108      	bne.n	800804c <__ieee754_powf+0x52c>
 800803a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800803e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8008042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008046:	f6ff af7b 	blt.w	8007f40 <__ieee754_powf+0x420>
 800804a:	e7f2      	b.n	8008032 <__ieee754_powf+0x512>
 800804c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8008050:	f73f af76 	bgt.w	8007f40 <__ieee754_powf+0x420>
 8008054:	2000      	movs	r0, #0
 8008056:	e78f      	b.n	8007f78 <__ieee754_powf+0x458>
 8008058:	ee00 3a10 	vmov	s0, r3
 800805c:	e7e3      	b.n	8008026 <__ieee754_powf+0x506>
 800805e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008062:	e5b1      	b.n	8007bc8 <__ieee754_powf+0xa8>
 8008064:	eeb0 0a68 	vmov.f32	s0, s17
 8008068:	e5ae      	b.n	8007bc8 <__ieee754_powf+0xa8>
 800806a:	eeb0 0a48 	vmov.f32	s0, s16
 800806e:	e5ab      	b.n	8007bc8 <__ieee754_powf+0xa8>
 8008070:	2600      	movs	r6, #0
 8008072:	e590      	b.n	8007b96 <__ieee754_powf+0x76>
 8008074:	007fffff 	.word	0x007fffff
 8008078:	3f317218 	.word	0x3f317218
 800807c:	35bfbe8c 	.word	0x35bfbe8c
 8008080:	3f317200 	.word	0x3f317200
 8008084:	3331bb4c 	.word	0x3331bb4c
 8008088:	b5ddea0e 	.word	0xb5ddea0e
 800808c:	388ab355 	.word	0x388ab355
 8008090:	bb360b61 	.word	0xbb360b61
 8008094:	3e2aaaab 	.word	0x3e2aaaab
 8008098:	43160000 	.word	0x43160000
 800809c:	0da24260 	.word	0x0da24260

080080a0 <__ieee754_sqrtf>:
 80080a0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80080a4:	4770      	bx	lr

080080a6 <fabsf>:
 80080a6:	ee10 3a10 	vmov	r3, s0
 80080aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080ae:	ee00 3a10 	vmov	s0, r3
 80080b2:	4770      	bx	lr

080080b4 <finitef>:
 80080b4:	b082      	sub	sp, #8
 80080b6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80080ba:	9801      	ldr	r0, [sp, #4]
 80080bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80080c0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80080c4:	bfac      	ite	ge
 80080c6:	2000      	movge	r0, #0
 80080c8:	2001      	movlt	r0, #1
 80080ca:	b002      	add	sp, #8
 80080cc:	4770      	bx	lr
	...

080080d0 <nanf>:
 80080d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80080d8 <nanf+0x8>
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	7fc00000 	.word	0x7fc00000

080080dc <rintf>:
 80080dc:	ee10 2a10 	vmov	r2, s0
 80080e0:	b513      	push	{r0, r1, r4, lr}
 80080e2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80080e6:	397f      	subs	r1, #127	; 0x7f
 80080e8:	2916      	cmp	r1, #22
 80080ea:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80080ee:	dc47      	bgt.n	8008180 <rintf+0xa4>
 80080f0:	b32b      	cbz	r3, 800813e <rintf+0x62>
 80080f2:	2900      	cmp	r1, #0
 80080f4:	ee10 3a10 	vmov	r3, s0
 80080f8:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 80080fc:	da21      	bge.n	8008142 <rintf+0x66>
 80080fe:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8008102:	425b      	negs	r3, r3
 8008104:	4921      	ldr	r1, [pc, #132]	; (800818c <rintf+0xb0>)
 8008106:	0a5b      	lsrs	r3, r3, #9
 8008108:	0d12      	lsrs	r2, r2, #20
 800810a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800810e:	0512      	lsls	r2, r2, #20
 8008110:	4313      	orrs	r3, r2
 8008112:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8008116:	ee07 3a90 	vmov	s15, r3
 800811a:	edd1 6a00 	vldr	s13, [r1]
 800811e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8008122:	ed8d 7a01 	vstr	s14, [sp, #4]
 8008126:	eddd 7a01 	vldr	s15, [sp, #4]
 800812a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800812e:	ee17 3a90 	vmov	r3, s15
 8008132:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008136:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800813a:	ee00 3a10 	vmov	s0, r3
 800813e:	b002      	add	sp, #8
 8008140:	bd10      	pop	{r4, pc}
 8008142:	4a13      	ldr	r2, [pc, #76]	; (8008190 <rintf+0xb4>)
 8008144:	410a      	asrs	r2, r1
 8008146:	4213      	tst	r3, r2
 8008148:	d0f9      	beq.n	800813e <rintf+0x62>
 800814a:	0854      	lsrs	r4, r2, #1
 800814c:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8008150:	d006      	beq.n	8008160 <rintf+0x84>
 8008152:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008156:	ea23 0304 	bic.w	r3, r3, r4
 800815a:	fa42 f101 	asr.w	r1, r2, r1
 800815e:	430b      	orrs	r3, r1
 8008160:	4a0a      	ldr	r2, [pc, #40]	; (800818c <rintf+0xb0>)
 8008162:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8008166:	ed90 7a00 	vldr	s14, [r0]
 800816a:	ee07 3a90 	vmov	s15, r3
 800816e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008172:	edcd 7a01 	vstr	s15, [sp, #4]
 8008176:	ed9d 0a01 	vldr	s0, [sp, #4]
 800817a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800817e:	e7de      	b.n	800813e <rintf+0x62>
 8008180:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008184:	d3db      	bcc.n	800813e <rintf+0x62>
 8008186:	ee30 0a00 	vadd.f32	s0, s0, s0
 800818a:	e7d8      	b.n	800813e <rintf+0x62>
 800818c:	080085d4 	.word	0x080085d4
 8008190:	007fffff 	.word	0x007fffff

08008194 <scalbnf>:
 8008194:	ee10 3a10 	vmov	r3, s0
 8008198:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800819c:	d025      	beq.n	80081ea <scalbnf+0x56>
 800819e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80081a2:	d302      	bcc.n	80081aa <scalbnf+0x16>
 80081a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80081a8:	4770      	bx	lr
 80081aa:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80081ae:	d122      	bne.n	80081f6 <scalbnf+0x62>
 80081b0:	4b2a      	ldr	r3, [pc, #168]	; (800825c <scalbnf+0xc8>)
 80081b2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008260 <scalbnf+0xcc>
 80081b6:	4298      	cmp	r0, r3
 80081b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80081bc:	db16      	blt.n	80081ec <scalbnf+0x58>
 80081be:	ee10 3a10 	vmov	r3, s0
 80081c2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80081c6:	3a19      	subs	r2, #25
 80081c8:	4402      	add	r2, r0
 80081ca:	2afe      	cmp	r2, #254	; 0xfe
 80081cc:	dd15      	ble.n	80081fa <scalbnf+0x66>
 80081ce:	ee10 3a10 	vmov	r3, s0
 80081d2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008264 <scalbnf+0xd0>
 80081d6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008268 <scalbnf+0xd4>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	eeb0 7a67 	vmov.f32	s14, s15
 80081e0:	bfb8      	it	lt
 80081e2:	eef0 7a66 	vmovlt.f32	s15, s13
 80081e6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80081ea:	4770      	bx	lr
 80081ec:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800826c <scalbnf+0xd8>
 80081f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80081f4:	4770      	bx	lr
 80081f6:	0dd2      	lsrs	r2, r2, #23
 80081f8:	e7e6      	b.n	80081c8 <scalbnf+0x34>
 80081fa:	2a00      	cmp	r2, #0
 80081fc:	dd06      	ble.n	800820c <scalbnf+0x78>
 80081fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008202:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008206:	ee00 3a10 	vmov	s0, r3
 800820a:	4770      	bx	lr
 800820c:	f112 0f16 	cmn.w	r2, #22
 8008210:	da1a      	bge.n	8008248 <scalbnf+0xb4>
 8008212:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008216:	4298      	cmp	r0, r3
 8008218:	ee10 3a10 	vmov	r3, s0
 800821c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008220:	dd0a      	ble.n	8008238 <scalbnf+0xa4>
 8008222:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008264 <scalbnf+0xd0>
 8008226:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008268 <scalbnf+0xd4>
 800822a:	eef0 7a40 	vmov.f32	s15, s0
 800822e:	2b00      	cmp	r3, #0
 8008230:	bf18      	it	ne
 8008232:	eeb0 0a47 	vmovne.f32	s0, s14
 8008236:	e7db      	b.n	80081f0 <scalbnf+0x5c>
 8008238:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800826c <scalbnf+0xd8>
 800823c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008270 <scalbnf+0xdc>
 8008240:	eef0 7a40 	vmov.f32	s15, s0
 8008244:	2b00      	cmp	r3, #0
 8008246:	e7f3      	b.n	8008230 <scalbnf+0x9c>
 8008248:	3219      	adds	r2, #25
 800824a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800824e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008252:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008274 <scalbnf+0xe0>
 8008256:	ee07 3a10 	vmov	s14, r3
 800825a:	e7c4      	b.n	80081e6 <scalbnf+0x52>
 800825c:	ffff3cb0 	.word	0xffff3cb0
 8008260:	4c000000 	.word	0x4c000000
 8008264:	7149f2ca 	.word	0x7149f2ca
 8008268:	f149f2ca 	.word	0xf149f2ca
 800826c:	0da24260 	.word	0x0da24260
 8008270:	8da24260 	.word	0x8da24260
 8008274:	33000000 	.word	0x33000000

08008278 <_init>:
 8008278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827a:	bf00      	nop
 800827c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800827e:	bc08      	pop	{r3}
 8008280:	469e      	mov	lr, r3
 8008282:	4770      	bx	lr

08008284 <_fini>:
 8008284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008286:	bf00      	nop
 8008288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800828a:	bc08      	pop	{r3}
 800828c:	469e      	mov	lr, r3
 800828e:	4770      	bx	lr
