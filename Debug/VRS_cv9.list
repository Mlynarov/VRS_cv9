
VRS_cv9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008108  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  08008298  08008298  00018298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085e4  080085e4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080085e4  080085e4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085e4  080085e4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085e4  080085e4  000185e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085e8  080085e8  000185e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080085ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0000007c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bbad  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002519  00000000  00000000  0002bc55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae8  00000000  00000000  0002e170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009c0  00000000  00000000  0002ec58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000189c3  00000000  00000000  0002f618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009413  00000000  00000000  00047fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007c1c4  00000000  00000000  000513ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000cd5b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e10  00000000  00000000  000cd608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008280 	.word	0x08008280

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008280 	.word	0x08008280

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <altPress_read_byte>:
#include <math.h>

uint8_t LPS_addres = LPS_DEVICE_ADDRESS	;

uint8_t altPress_read_byte(uint8_t reg_addr)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, LPS_addres, 0));
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <altPress_read_byte+0x30>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	79fa      	ldrb	r2, [r7, #7]
 8000c30:	f107 000f 	add.w	r0, r7, #15
 8000c34:	2100      	movs	r1, #0
 8000c36:	9100      	str	r1, [sp, #0]
 8000c38:	2101      	movs	r1, #1
 8000c3a:	f002 f873 	bl	8002d24 <i2c_master_read>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	781b      	ldrb	r3, [r3, #0]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000000 	.word	0x20000000

08000c50 <altPress_write_byte>:
{
	i2c_master_read(data, length, reg, LPS_addres, 1);
}

void altPress_write_byte(uint8_t reg_addr, uint8_t value)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	460a      	mov	r2, r1
 8000c5a:	71fb      	strb	r3, [r7, #7]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, LPS_addres, 0);
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <altPress_write_byte+0x28>)
 8000c62:	781a      	ldrb	r2, [r3, #0]
 8000c64:	79f9      	ldrb	r1, [r7, #7]
 8000c66:	79b8      	ldrb	r0, [r7, #6]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f002 f817 	bl	8002c9c <i2c_master_write>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000000 	.word	0x20000000

08000c7c <pressure_init>:

uint8_t pressure_init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8000c82:	2301      	movs	r3, #1
 8000c84:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8000c86:	2064      	movs	r0, #100	; 0x64
 8000c88:	f004 f87a 	bl	8004d80 <LL_mDelay>

	uint8_t val = altPress_read_byte(LPS_WHO_AM_I);
 8000c8c:	200f      	movs	r0, #15
 8000c8e:	f7ff ffc5 	bl	8000c1c <altPress_read_byte>
 8000c92:	4603      	mov	r3, r0
 8000c94:	71bb      	strb	r3, [r7, #6]

	if(val == LPS_WHO_AM_I_DEFAULT)
 8000c96:	79bb      	ldrb	r3, [r7, #6]
 8000c98:	2bbd      	cmp	r3, #189	; 0xbd
 8000c9a:	d102      	bne.n	8000ca2 <pressure_init+0x26>
	{
		status = 1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	71fb      	strb	r3, [r7, #7]
 8000ca0:	e001      	b.n	8000ca6 <pressure_init+0x2a>
	}
	else			//if the device is not found on one address, try another one
	{
			status = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	71fb      	strb	r3, [r7, #7]
			//return status;
	}

	//acc device init

	altPress_write_byte(LPS_CTRL_REG1, LPS_CTRL_REG1_SETUP);
 8000ca6:	2190      	movs	r1, #144	; 0x90
 8000ca8:	2020      	movs	r0, #32
 8000caa:	f7ff ffd1 	bl	8000c50 <altPress_write_byte>

	return status;
 8000cae:	79fb      	ldrb	r3, [r7, #7]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <get_pressure>:

float get_pressure()
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 uint8_t pressure_low,pressure_mid,pressure_high;
 float pressure,tmp=0;
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]

 pressure_low = altPress_read_byte(LPS_PRESS_OUT_XL);
 8000cc4:	2028      	movs	r0, #40	; 0x28
 8000cc6:	f7ff ffa9 	bl	8000c1c <altPress_read_byte>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	72fb      	strb	r3, [r7, #11]
 pressure_mid = altPress_read_byte(LPS_PRESS_OUT_L);
 8000cce:	2029      	movs	r0, #41	; 0x29
 8000cd0:	f7ff ffa4 	bl	8000c1c <altPress_read_byte>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	72bb      	strb	r3, [r7, #10]
 pressure_high = altPress_read_byte(LPS_PRESS_OUT_H);
 8000cd8:	202a      	movs	r0, #42	; 0x2a
 8000cda:	f7ff ff9f 	bl	8000c1c <altPress_read_byte>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	727b      	strb	r3, [r7, #9]

 //vypocitanie tlaku strana 15 v datasheete uvedenom v altitudePressure.h
 tmp=pressure_high << 16|pressure_mid<<8|pressure_low;
 8000ce2:	7a7b      	ldrb	r3, [r7, #9]
 8000ce4:	041a      	lsls	r2, r3, #16
 8000ce6:	7abb      	ldrb	r3, [r7, #10]
 8000ce8:	021b      	lsls	r3, r3, #8
 8000cea:	431a      	orrs	r2, r3
 8000cec:	7afb      	ldrb	r3, [r7, #11]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	ee07 3a90 	vmov	s15, r3
 8000cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf8:	edc7 7a03 	vstr	s15, [r7, #12]
 pressure=tmp/4096;
 8000cfc:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d00:	eddf 6a06 	vldr	s13, [pc, #24]	; 8000d1c <get_pressure+0x64>
 8000d04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d08:	edc7 7a01 	vstr	s15, [r7, #4]

 return pressure;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	ee07 3a90 	vmov	s15, r3
}
 8000d12:	eeb0 0a67 	vmov.f32	s0, s15
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	45800000 	.word	0x45800000

08000d20 <humidity_read_byte>:
#include "hts.h"

humiditiS_addres=HTS_ADDRESS;

uint8_t humidity_read_byte(uint8_t reg_addr)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af02      	add	r7, sp, #8
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, humiditiS_addres, 0));
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <humidity_read_byte+0x30>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	79fa      	ldrb	r2, [r7, #7]
 8000d36:	f107 000f 	add.w	r0, r7, #15
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	9100      	str	r1, [sp, #0]
 8000d3e:	2101      	movs	r1, #1
 8000d40:	f001 fff0 	bl	8002d24 <i2c_master_read>
 8000d44:	4603      	mov	r3, r0
 8000d46:	781b      	ldrb	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000004 	.word	0x20000004

08000d54 <humidity_readArray>:


void humidity_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]
 8000d60:	4613      	mov	r3, r2
 8000d62:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, humiditiS_addres, 1);
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <humidity_readArray+0x2c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	78fa      	ldrb	r2, [r7, #3]
 8000d6c:	78b9      	ldrb	r1, [r7, #2]
 8000d6e:	2001      	movs	r0, #1
 8000d70:	9000      	str	r0, [sp, #0]
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f001 ffd6 	bl	8002d24 <i2c_master_read>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000004 	.word	0x20000004

08000d84 <humidity_write_byte>:

void humidity_write_byte(uint8_t reg_addr, uint8_t value)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	460a      	mov	r2, r1
 8000d8e:	71fb      	strb	r3, [r7, #7]
 8000d90:	4613      	mov	r3, r2
 8000d92:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, humiditiS_addres, 0);
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <humidity_write_byte+0x28>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	79f9      	ldrb	r1, [r7, #7]
 8000d9c:	79b8      	ldrb	r0, [r7, #6]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f001 ff7c 	bl	8002c9c <i2c_master_write>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000004 	.word	0x20000004

08000db0 <humidity_init>:


uint8_t humidity_init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8000db6:	2301      	movs	r3, #1
 8000db8:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8000dba:	2064      	movs	r0, #100	; 0x64
 8000dbc:	f003 ffe0 	bl	8004d80 <LL_mDelay>

	uint8_t val = humidity_read_byte(HTS_WHO_AM_I	);
 8000dc0:	200f      	movs	r0, #15
 8000dc2:	f7ff ffad 	bl	8000d20 <humidity_read_byte>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71bb      	strb	r3, [r7, #6]

	if(val == HTS_WHO_AM_I_DEFAULT)
 8000dca:	79bb      	ldrb	r3, [r7, #6]
 8000dcc:	2bbc      	cmp	r3, #188	; 0xbc
 8000dce:	d102      	bne.n	8000dd6 <humidity_init+0x26>
	{
		status = 1;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	71fb      	strb	r3, [r7, #7]
 8000dd4:	e001      	b.n	8000dda <humidity_init+0x2a>
	}
	else			//if the device is not found on one address, try another one
	{
			status = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	71fb      	strb	r3, [r7, #7]
			//return status;
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	717b      	strb	r3, [r7, #5]
	humidity_write_byte(HTS_CTRL_REG1, ctrl1);
 8000dde:	797b      	ldrb	r3, [r7, #5]
 8000de0:	4619      	mov	r1, r3
 8000de2:	2020      	movs	r0, #32
 8000de4:	f7ff ffce 	bl	8000d84 <humidity_write_byte>

	return status;
 8000de8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HTS221_Get_Humidity>:

int16_t HTS221_Get_Humidity()
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
	uint8_t buffer[2];
	int32_t tmp;

/* 1. Read H0_rH and H1_rH coefficients*/

	humidity_readArray(buffer,HTS_H0_RH_X2,2);
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	2130      	movs	r1, #48	; 0x30
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ffa8 	bl	8000d54 <humidity_readArray>
	H0_rh = buffer[0]>>1;
 8000e04:	793b      	ldrb	r3, [r7, #4]
 8000e06:	085b      	lsrs	r3, r3, #1
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	82bb      	strh	r3, [r7, #20]
	H1_rh = buffer[1]>>1;
 8000e0c:	797b      	ldrb	r3, [r7, #5]
 8000e0e:	085b      	lsrs	r3, r3, #1
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	827b      	strh	r3, [r7, #18]
/*2. Read H0_T0_OUT */

	humidity_readArray(buffer,HTS_H0_T0_OUT_L,2);
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2202      	movs	r2, #2
 8000e18:	2136      	movs	r1, #54	; 0x36
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ff9a 	bl	8000d54 <humidity_readArray>
	H0_T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8000e20:	797b      	ldrb	r3, [r7, #5]
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	b21a      	sxth	r2, r3
 8000e26:	793b      	ldrb	r3, [r7, #4]
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	823b      	strh	r3, [r7, #16]

/*3. Read H1_T0_OUT */
	humidity_readArray(buffer,HTS_H1_T0_OUT_L,2);
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2202      	movs	r2, #2
 8000e32:	213a      	movs	r1, #58	; 0x3a
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff8d 	bl	8000d54 <humidity_readArray>
	H1_T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8000e3a:	797b      	ldrb	r3, [r7, #5]
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	b21a      	sxth	r2, r3
 8000e40:	793b      	ldrb	r3, [r7, #4]
 8000e42:	b21b      	sxth	r3, r3
 8000e44:	4313      	orrs	r3, r2
 8000e46:	81fb      	strh	r3, [r7, #14]

/*4. Read H_T_OUT */

	humidity_readArray(buffer,HTS_H_OUT,2);
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	2128      	movs	r1, #40	; 0x28
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff80 	bl	8000d54 <humidity_readArray>
	H_T_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8000e54:	797b      	ldrb	r3, [r7, #5]
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	793b      	ldrb	r3, [r7, #4]
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	81bb      	strh	r3, [r7, #12]

/*5. Compute the RH [%] value by linear interpolation */

	tmp = ((int32_t)(H_T_out - H0_T0_out)) * ((int32_t)(H1_rh - H0_rh)*10);
 8000e62:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000e66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000e70:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000e74:	1a8a      	subs	r2, r1, r2
 8000e76:	fb02 f203 	mul.w	r2, r2, r3
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
	value = (tmp/(H1_T0_out - H0_T0_out) + H0_rh*10);//delenie bacha nan :D
 8000e84:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000e88:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	8abb      	ldrh	r3, [r7, #20]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	0089      	lsls	r1, r1, #2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	82fb      	strh	r3, [r7, #22]


/* Saturation condition*/
	if(value>1000) {
 8000ea8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000eac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000eb0:	dd02      	ble.n	8000eb8 <HTS221_Get_Humidity+0xc6>
		value = 1000;
 8000eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb6:	82fb      	strh	r3, [r7, #22]
	}

	return value;
 8000eb8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <lsm6ds0_read_byte>:
#include "lps25hb.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af02      	add	r7, sp, #8
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <lsm6ds0_read_byte+0x30>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	79fa      	ldrb	r2, [r7, #7]
 8000ed8:	f107 000f 	add.w	r0, r7, #15
 8000edc:	2100      	movs	r1, #0
 8000ede:	9100      	str	r1, [sp, #0]
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	f001 ff1f 	bl	8002d24 <i2c_master_read>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	781b      	ldrb	r3, [r3, #0]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008

08000ef8 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	460a      	mov	r2, r1
 8000f02:	71fb      	strb	r3, [r7, #7]
 8000f04:	4613      	mov	r3, r2
 8000f06:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <lsm6ds0_write_byte+0x28>)
 8000f0a:	781a      	ldrb	r2, [r3, #0]
 8000f0c:	79f9      	ldrb	r1, [r7, #7]
 8000f0e:	79b8      	ldrb	r0, [r7, #6]
 8000f10:	2300      	movs	r3, #0
 8000f12:	f001 fec3 	bl	8002c9c <i2c_master_write>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008

08000f24 <lsm6ds0_init>:
	*z = (zz >> 4) / 1000.0f;
}


uint8_t lsm6ds0_init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8000f2e:	2064      	movs	r0, #100	; 0x64
 8000f30:	f003 ff26 	bl	8004d80 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8000f34:	200f      	movs	r0, #15
 8000f36:	f7ff ffc5 	bl	8000ec4 <lsm6ds0_read_byte>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 8000f3e:	79bb      	ldrb	r3, [r7, #6]
 8000f40:	2b68      	cmp	r3, #104	; 0x68
 8000f42:	d102      	bne.n	8000f4a <lsm6ds0_init+0x26>
	{
		status = 1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	71fb      	strb	r3, [r7, #7]
 8000f48:	e00f      	b.n	8000f6a <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <lsm6ds0_init+0x60>)
 8000f4c:	22d6      	movs	r2, #214	; 0xd6
 8000f4e:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8000f50:	200f      	movs	r0, #15
 8000f52:	f7ff ffb7 	bl	8000ec4 <lsm6ds0_read_byte>
 8000f56:	4603      	mov	r3, r0
 8000f58:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 8000f5a:	79bb      	ldrb	r3, [r7, #6]
 8000f5c:	2b68      	cmp	r3, #104	; 0x68
 8000f5e:	d102      	bne.n	8000f66 <lsm6ds0_init+0x42>
		{
			status = 1;
 8000f60:	2301      	movs	r3, #1
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	e001      	b.n	8000f6a <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8000f6e:	797b      	ldrb	r3, [r7, #5]
 8000f70:	4619      	mov	r1, r3
 8000f72:	2010      	movs	r0, #16
 8000f74:	f7ff ffc0 	bl	8000ef8 <lsm6ds0_write_byte>

	return status;
 8000f78:	79fb      	ldrb	r3, [r7, #7]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000008 	.word	0x20000008

08000f88 <temperature_read_byte>:
#include "hts.h"

uint8_t hts221_addres = HTS_ADDRESS;

uint8_t temperature_read_byte(uint8_t reg_addr)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, hts221_addres, 0));
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <temperature_read_byte+0x30>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	79fa      	ldrb	r2, [r7, #7]
 8000f9c:	f107 000f 	add.w	r0, r7, #15
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	9100      	str	r1, [sp, #0]
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	f001 febd 	bl	8002d24 <i2c_master_read>
 8000faa:	4603      	mov	r3, r0
 8000fac:	781b      	ldrb	r3, [r3, #0]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000009 	.word	0x20000009

08000fbc <temperature_readArray>:


void temperature_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	70fb      	strb	r3, [r7, #3]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, hts221_addres, 1);
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <temperature_readArray+0x2c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	78fa      	ldrb	r2, [r7, #3]
 8000fd2:	78b9      	ldrb	r1, [r7, #2]
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	9000      	str	r0, [sp, #0]
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f001 fea3 	bl	8002d24 <i2c_master_read>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000009 	.word	0x20000009

08000fec <temperature_write_byte>:

void temperature_write_byte(uint8_t reg_addr, uint8_t value)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	460a      	mov	r2, r1
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, hts221_addres, 0);
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <temperature_write_byte+0x28>)
 8000ffe:	781a      	ldrb	r2, [r3, #0]
 8001000:	79f9      	ldrb	r1, [r7, #7]
 8001002:	79b8      	ldrb	r0, [r7, #6]
 8001004:	2300      	movs	r3, #0
 8001006:	f001 fe49 	bl	8002c9c <i2c_master_write>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000009 	.word	0x20000009

08001018 <temperature_init>:

uint8_t temperature_init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 800101e:	2301      	movs	r3, #1
 8001020:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8001022:	2064      	movs	r0, #100	; 0x64
 8001024:	f003 feac 	bl	8004d80 <LL_mDelay>

	uint8_t val = temperature_read_byte(HTS_WHO_AM_I);
 8001028:	200f      	movs	r0, #15
 800102a:	f7ff ffad 	bl	8000f88 <temperature_read_byte>
 800102e:	4603      	mov	r3, r0
 8001030:	71bb      	strb	r3, [r7, #6]

	if(val == HTS_WHO_AM_I_DEFAULT)
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	2bbc      	cmp	r3, #188	; 0xbc
 8001036:	d102      	bne.n	800103e <temperature_init+0x26>
	{
		status = 1;
 8001038:	2301      	movs	r3, #1
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	e001      	b.n	8001042 <temperature_init+0x2a>
	}
	else			//if the device is not found on one address, try another one
	{
			status = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	71fb      	strb	r3, [r7, #7]
			//return status;
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 8001042:	2380      	movs	r3, #128	; 0x80
 8001044:	717b      	strb	r3, [r7, #5]
	temperature_write_byte(HTS_CTRL_REG1, ctrl1);
 8001046:	797b      	ldrb	r3, [r7, #5]
 8001048:	4619      	mov	r1, r3
 800104a:	2020      	movs	r0, #32
 800104c:	f7ff ffce 	bl	8000fec <temperature_write_byte>

	return status;
 8001050:	79fb      	ldrb	r3, [r7, #7]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HTS221_Get_Temperature>:

int16_t HTS221_Get_Temperature()
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b088      	sub	sp, #32
 800105e:	af00      	add	r7, sp, #0
 int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
 int16_t T0_degC, T1_degC, value;
 uint8_t buffer[4], tmp,sign;
 int32_t tmp32;

 sign=0b10000000;
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	777b      	strb	r3, [r7, #29]

/*1. Read from 0x32 & 0x33 registers the value of coefficients T0_degC_x8 and T1_degC_x8*/
 temperature_readArray(buffer,HTS_TO_DEGC_REG,2);
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2202      	movs	r2, #2
 8001068:	2132      	movs	r1, #50	; 0x32
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ffa6 	bl	8000fbc <temperature_readArray>

/*2. Read from 0x35 register the value of the MSB bits of T1_degC and T0_degC */
 tmp=temperature_read_byte(HTS_MSB_T1_T0);
 8001070:	2035      	movs	r0, #53	; 0x35
 8001072:	f7ff ff89 	bl	8000f88 <temperature_read_byte>
 8001076:	4603      	mov	r3, r0
 8001078:	773b      	strb	r3, [r7, #28]


/*Calculate the T0_degC and T1_degC values*/
 T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800107a:	7f3b      	ldrb	r3, [r7, #28]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21b      	sxth	r3, r3
 8001080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001084:	b21a      	sxth	r2, r3
 8001086:	793b      	ldrb	r3, [r7, #4]
 8001088:	b21b      	sxth	r3, r3
 800108a:	4313      	orrs	r3, r2
 800108c:	837b      	strh	r3, [r7, #26]
 T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800108e:	7f3b      	ldrb	r3, [r7, #28]
 8001090:	019b      	lsls	r3, r3, #6
 8001092:	b21b      	sxth	r3, r3
 8001094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001098:	b21a      	sxth	r2, r3
 800109a:	797b      	ldrb	r3, [r7, #5]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	833b      	strh	r3, [r7, #24]
 T0_degC = T0_degC_x8_u16>>3;
 80010a2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010a6:	10db      	asrs	r3, r3, #3
 80010a8:	82fb      	strh	r3, [r7, #22]
 T1_degC = T1_degC_x8_u16>>3;
 80010aa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80010ae:	10db      	asrs	r3, r3, #3
 80010b0:	82bb      	strh	r3, [r7, #20]

/*3. Read from 0x3C & 0x3D registers the value of T0_OUT*/
 temperature_readArray(buffer,HTS_T0_OUT,4 );
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2204      	movs	r2, #4
 80010b6:	213c      	movs	r1, #60	; 0x3c
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff7f 	bl	8000fbc <temperature_readArray>
 T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 80010be:	797b      	ldrb	r3, [r7, #5]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	793b      	ldrb	r3, [r7, #4]
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	827b      	strh	r3, [r7, #18]

 /*4. Read from 0x3E & 0x3F registers the value of T1_OUT*/
 T1_out = (((uint16_t)buffer[3])<<8) | (uint16_t)buffer[2];
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	79bb      	ldrb	r3, [r7, #6]
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	823b      	strh	r3, [r7, #16]

/* 5.Read from 0x2A & 0x2B registers the value T_OUT (ADC_OUT).*/
 temperature_readArray(buffer,HTS_T_OUT_Low,2 );
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2202      	movs	r2, #2
 80010de:	212a      	movs	r1, #42	; 0x2a
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff6b 	bl	8000fbc <temperature_readArray>
 T_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 80010e6:	797b      	ldrb	r3, [r7, #5]
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	793b      	ldrb	r3, [r7, #4]
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	81fb      	strh	r3, [r7, #14]


/* 6. Compute the Temperature value by linear interpolation*/
 tmp32 = ((int32_t)(T_out - T0_out)) * ((int32_t)(T1_degC - T0_degC)*10);
 80010f4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80010f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001102:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001106:	1a8a      	subs	r2, r1, r2
 8001108:	fb02 f203 	mul.w	r2, r2, r3
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
 value = tmp32 /(T1_out - T0_out) + T0_degC*10;
 8001116:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800111a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	fb92 f3f3 	sdiv	r3, r2, r3
 8001126:	b29a      	uxth	r2, r3
 8001128:	8afb      	ldrh	r3, [r7, #22]
 800112a:	4619      	mov	r1, r3
 800112c:	0089      	lsls	r1, r1, #2
 800112e:	440b      	add	r3, r1
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	b29b      	uxth	r3, r3
 8001134:	4413      	add	r3, r2
 8001136:	b29b      	uxth	r3, r3
 8001138:	83fb      	strh	r3, [r7, #30]

// temperature_write_byte(HTS221_CTRL_REG1,value);//neni som si isty reg_addresou

 //podmienka pre zistenie ci je teplota kladna alebo zaporna
 if(temperature_read_byte(HTS_T_OUT_High)==sign){
 800113a:	202b      	movs	r0, #43	; 0x2b
 800113c:	f7ff ff24 	bl	8000f88 <temperature_read_byte>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	7f7b      	ldrb	r3, [r7, #29]
 8001146:	4293      	cmp	r3, r2
 8001148:	d103      	bne.n	8001152 <HTS221_Get_Temperature+0xf8>
	 value = value*(-1);
 800114a:	8bfb      	ldrh	r3, [r7, #30]
 800114c:	425b      	negs	r3, r3
 800114e:	b29b      	uxth	r3, r3
 8001150:	83fb      	strh	r3, [r7, #30]
 }

 return value;
 8001152:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3720      	adds	r7, #32
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	619a      	str	r2, [r3, #24]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <setDisplayText>:
uint8_t direction = 0;
uint16_t counter = 0;
uint8_t shorter = 0;
char displayString[15];

void setDisplayText(char text[15]){
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	strncpy(displayString, &text[0],15);
 80011a0:	220f      	movs	r2, #15
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <setDisplayText+0x20>)
 80011a6:	f003 feb9 	bl	8004f1c <strncpy>
	shorter = 0;
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <setDisplayText+0x24>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200000a8 	.word	0x200000a8
 80011bc:	20000098 	.word	0x20000098

080011c0 <updateDisplay>:

void updateDisplay(){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
	uint8_t shift = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	71fb      	strb	r3, [r7, #7]
	for(int i = 1; i<5; i++){
 80011ca:	2301      	movs	r3, #1
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	e062      	b.n	8001296 <updateDisplay+0xd6>
		switch(updateDigit){
 80011d0:	4b3c      	ldr	r3, [pc, #240]	; (80012c4 <updateDisplay+0x104>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d82a      	bhi.n	8001230 <updateDisplay+0x70>
 80011da:	a201      	add	r2, pc, #4	; (adr r2, 80011e0 <updateDisplay+0x20>)
 80011dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e0:	080011f1 	.word	0x080011f1
 80011e4:	080011ff 	.word	0x080011ff
 80011e8:	0800120f 	.word	0x0800120f
 80011ec:	08001221 	.word	0x08001221
			case 1:
				DIGIT_1_ON;
 80011f0:	2101      	movs	r1, #1
 80011f2:	4835      	ldr	r0, [pc, #212]	; (80012c8 <updateDisplay+0x108>)
 80011f4:	f7ff ffb3 	bl	800115e <LL_GPIO_SetOutputPin>
				resetAllSegments();
 80011f8:	f000 fa14 	bl	8001624 <resetAllSegments>

				break;
 80011fc:	e018      	b.n	8001230 <updateDisplay+0x70>
			case 2:
				DIGIT_2_ON;
 80011fe:	2110      	movs	r1, #16
 8001200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001204:	f7ff ffab 	bl	800115e <LL_GPIO_SetOutputPin>
				resetAllSegments();
 8001208:	f000 fa0c 	bl	8001624 <resetAllSegments>
				break;
 800120c:	e010      	b.n	8001230 <updateDisplay+0x70>
			case 3:
				DIGIT_3_ON;
 800120e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001216:	f7ff ffa2 	bl	800115e <LL_GPIO_SetOutputPin>
				resetAllSegments();
 800121a:	f000 fa03 	bl	8001624 <resetAllSegments>
				break;
 800121e:	e007      	b.n	8001230 <updateDisplay+0x70>
			case 4:
				DIGIT_4_ON;
 8001220:	2104      	movs	r1, #4
 8001222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001226:	f7ff ff9a 	bl	800115e <LL_GPIO_SetOutputPin>
				resetAllSegments();
 800122a:	f000 f9fb 	bl	8001624 <resetAllSegments>
				break;
 800122e:	bf00      	nop
		}
		displayLetter(displayString[displayTextPos+updateDigit-1+shift]);
 8001230:	4b26      	ldr	r3, [pc, #152]	; (80012cc <updateDisplay+0x10c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <updateDisplay+0x104>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	1e5a      	subs	r2, r3, #1
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	4413      	add	r3, r2
 8001242:	4a23      	ldr	r2, [pc, #140]	; (80012d0 <updateDisplay+0x110>)
 8001244:	5cd3      	ldrb	r3, [r2, r3]
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f89e 	bl	8001388 <displayLetter>
		if(displayString[displayTextPos+updateDigit] == '.'){
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <updateDisplay+0x10c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <updateDisplay+0x104>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <updateDisplay+0x110>)
 800125a:	5cd3      	ldrb	r3, [r2, r3]
 800125c:	2b2e      	cmp	r3, #46	; 0x2e
 800125e:	d106      	bne.n	800126e <updateDisplay+0xae>
			shift = 1;
 8001260:	2301      	movs	r3, #1
 8001262:	71fb      	strb	r3, [r7, #7]
			shorter = 1;
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <updateDisplay+0x114>)
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
			setDot();
 800126a:	f001 f90d 	bl	8002488 <setDot>
		}
		updateDigit = (updateDigit < 4) ? updateDigit+1 : 1;
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <updateDisplay+0x104>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b03      	cmp	r3, #3
 8001274:	d804      	bhi.n	8001280 <updateDisplay+0xc0>
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <updateDisplay+0x104>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	e000      	b.n	8001282 <updateDisplay+0xc2>
 8001280:	2301      	movs	r3, #1
 8001282:	4a10      	ldr	r2, [pc, #64]	; (80012c4 <updateDisplay+0x104>)
 8001284:	7013      	strb	r3, [r2, #0]
		LL_mDelay(2);
 8001286:	2002      	movs	r0, #2
 8001288:	f003 fd7a 	bl	8004d80 <LL_mDelay>
		resetAllDigits();
 800128c:	f000 f9f8 	bl	8001680 <resetAllDigits>
	for(int i = 1; i<5; i++){
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	2b04      	cmp	r3, #4
 800129a:	dd99      	ble.n	80011d0 <updateDisplay+0x10>
	}
	counter +=1;
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <updateDisplay+0x118>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <updateDisplay+0x118>)
 80012a6:	801a      	strh	r2, [r3, #0]
	if(counter >= 50){
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <updateDisplay+0x118>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	2b31      	cmp	r3, #49	; 0x31
 80012ae:	d904      	bls.n	80012ba <updateDisplay+0xfa>
		shiftDisplayText();
 80012b0:	f000 f814 	bl	80012dc <shiftDisplayText>
		counter = 0;
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <updateDisplay+0x118>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	801a      	strh	r2, [r3, #0]
	}

}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000000a 	.word	0x2000000a
 80012c8:	48000400 	.word	0x48000400
 80012cc:	20000094 	.word	0x20000094
 80012d0:	200000a8 	.word	0x200000a8
 80012d4:	20000098 	.word	0x20000098
 80012d8:	20000096 	.word	0x20000096

080012dc <shiftDisplayText>:

void shiftDisplayText(){
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
	if(displayString[0] != '\0'){
 80012e0:	4b25      	ldr	r3, [pc, #148]	; (8001378 <shiftDisplayText+0x9c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d041      	beq.n	800136c <shiftDisplayText+0x90>
		if(direction == 0 && displayString[displayTextPos+4+shorter] != '\0'){
 80012e8:	4b24      	ldr	r3, [pc, #144]	; (800137c <shiftDisplayText+0xa0>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d110      	bne.n	8001312 <shiftDisplayText+0x36>
 80012f0:	4b23      	ldr	r3, [pc, #140]	; (8001380 <shiftDisplayText+0xa4>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	3304      	adds	r3, #4
 80012f6:	4a23      	ldr	r2, [pc, #140]	; (8001384 <shiftDisplayText+0xa8>)
 80012f8:	7812      	ldrb	r2, [r2, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	4a1e      	ldr	r2, [pc, #120]	; (8001378 <shiftDisplayText+0x9c>)
 80012fe:	5cd3      	ldrb	r3, [r2, r3]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d006      	beq.n	8001312 <shiftDisplayText+0x36>
			displayTextPos = displayTextPos+1;
 8001304:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <shiftDisplayText+0xa4>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	3301      	adds	r3, #1
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <shiftDisplayText+0xa4>)
 800130e:	701a      	strb	r2, [r3, #0]
 8001310:	e02c      	b.n	800136c <shiftDisplayText+0x90>
		}
		else if(direction == 0 && displayString[displayTextPos+4+shorter] == '\0'){
 8001312:	4b1a      	ldr	r3, [pc, #104]	; (800137c <shiftDisplayText+0xa0>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10d      	bne.n	8001336 <shiftDisplayText+0x5a>
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <shiftDisplayText+0xa4>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	3304      	adds	r3, #4
 8001320:	4a18      	ldr	r2, [pc, #96]	; (8001384 <shiftDisplayText+0xa8>)
 8001322:	7812      	ldrb	r2, [r2, #0]
 8001324:	4413      	add	r3, r2
 8001326:	4a14      	ldr	r2, [pc, #80]	; (8001378 <shiftDisplayText+0x9c>)
 8001328:	5cd3      	ldrb	r3, [r2, r3]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d103      	bne.n	8001336 <shiftDisplayText+0x5a>
			direction = 1;
 800132e:	4b13      	ldr	r3, [pc, #76]	; (800137c <shiftDisplayText+0xa0>)
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
 8001334:	e01a      	b.n	800136c <shiftDisplayText+0x90>
		}
		else if(displayTextPos <= 0 && direction == 1){
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <shiftDisplayText+0xa4>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d107      	bne.n	800134e <shiftDisplayText+0x72>
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <shiftDisplayText+0xa0>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d103      	bne.n	800134e <shiftDisplayText+0x72>
			direction = 0;
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <shiftDisplayText+0xa0>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
 800134c:	e00e      	b.n	800136c <shiftDisplayText+0x90>
		}
		else if(displayTextPos > 0 && direction == 1){
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <shiftDisplayText+0xa4>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00a      	beq.n	800136c <shiftDisplayText+0x90>
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <shiftDisplayText+0xa0>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d106      	bne.n	800136c <shiftDisplayText+0x90>
			displayTextPos = displayTextPos-1;
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <shiftDisplayText+0xa4>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	3b01      	subs	r3, #1
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <shiftDisplayText+0xa4>)
 8001368:	701a      	strb	r2, [r3, #0]
		}
	}

}
 800136a:	e7ff      	b.n	800136c <shiftDisplayText+0x90>
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	200000a8 	.word	0x200000a8
 800137c:	20000095 	.word	0x20000095
 8001380:	20000094 	.word	0x20000094
 8001384:	20000098 	.word	0x20000098

08001388 <displayLetter>:

void displayLetter(char letter){
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
	switch(letter){
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	3b20      	subs	r3, #32
 8001396:	2b59      	cmp	r3, #89	; 0x59
 8001398:	f200 813c 	bhi.w	8001614 <displayLetter+0x28c>
 800139c:	a201      	add	r2, pc, #4	; (adr r2, 80013a4 <displayLetter+0x1c>)
 800139e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a2:	bf00      	nop
 80013a4:	080015c7 	.word	0x080015c7
 80013a8:	08001615 	.word	0x08001615
 80013ac:	08001615 	.word	0x08001615
 80013b0:	08001615 	.word	0x08001615
 80013b4:	08001615 	.word	0x08001615
 80013b8:	08001615 	.word	0x08001615
 80013bc:	08001615 	.word	0x08001615
 80013c0:	08001615 	.word	0x08001615
 80013c4:	08001615 	.word	0x08001615
 80013c8:	08001615 	.word	0x08001615
 80013cc:	08001615 	.word	0x08001615
 80013d0:	08001615 	.word	0x08001615
 80013d4:	08001615 	.word	0x08001615
 80013d8:	080015d3 	.word	0x080015d3
 80013dc:	08001615 	.word	0x08001615
 80013e0:	08001615 	.word	0x08001615
 80013e4:	0800160f 	.word	0x0800160f
 80013e8:	080015d9 	.word	0x080015d9
 80013ec:	080015df 	.word	0x080015df
 80013f0:	080015e5 	.word	0x080015e5
 80013f4:	080015eb 	.word	0x080015eb
 80013f8:	080015f1 	.word	0x080015f1
 80013fc:	080015f7 	.word	0x080015f7
 8001400:	080015fd 	.word	0x080015fd
 8001404:	08001603 	.word	0x08001603
 8001408:	08001609 	.word	0x08001609
 800140c:	08001615 	.word	0x08001615
 8001410:	08001615 	.word	0x08001615
 8001414:	08001615 	.word	0x08001615
 8001418:	08001615 	.word	0x08001615
 800141c:	08001615 	.word	0x08001615
 8001420:	08001615 	.word	0x08001615
 8001424:	08001615 	.word	0x08001615
 8001428:	0800150d 	.word	0x0800150d
 800142c:	08001615 	.word	0x08001615
 8001430:	0800151f 	.word	0x0800151f
 8001434:	08001615 	.word	0x08001615
 8001438:	08001531 	.word	0x08001531
 800143c:	08001537 	.word	0x08001537
 8001440:	0800153d 	.word	0x0800153d
 8001444:	08001543 	.word	0x08001543
 8001448:	0800154f 	.word	0x0800154f
 800144c:	08001555 	.word	0x08001555
 8001450:	0800155b 	.word	0x0800155b
 8001454:	08001561 	.word	0x08001561
 8001458:	08001567 	.word	0x08001567
 800145c:	08001615 	.word	0x08001615
 8001460:	08001573 	.word	0x08001573
 8001464:	0800157f 	.word	0x0800157f
 8001468:	08001615 	.word	0x08001615
 800146c:	08001615 	.word	0x08001615
 8001470:	08001591 	.word	0x08001591
 8001474:	08001615 	.word	0x08001615
 8001478:	0800159d 	.word	0x0800159d
 800147c:	080015a9 	.word	0x080015a9
 8001480:	080015af 	.word	0x080015af
 8001484:	080015b5 	.word	0x080015b5
 8001488:	08001615 	.word	0x08001615
 800148c:	080015c1 	.word	0x080015c1
 8001490:	08001615 	.word	0x08001615
 8001494:	08001615 	.word	0x08001615
 8001498:	08001615 	.word	0x08001615
 800149c:	08001615 	.word	0x08001615
 80014a0:	080015cd 	.word	0x080015cd
 80014a4:	08001615 	.word	0x08001615
 80014a8:	08001513 	.word	0x08001513
 80014ac:	08001519 	.word	0x08001519
 80014b0:	08001525 	.word	0x08001525
 80014b4:	0800152b 	.word	0x0800152b
 80014b8:	08001615 	.word	0x08001615
 80014bc:	08001615 	.word	0x08001615
 80014c0:	08001615 	.word	0x08001615
 80014c4:	08001549 	.word	0x08001549
 80014c8:	08001615 	.word	0x08001615
 80014cc:	08001615 	.word	0x08001615
 80014d0:	08001615 	.word	0x08001615
 80014d4:	08001615 	.word	0x08001615
 80014d8:	08001615 	.word	0x08001615
 80014dc:	0800156d 	.word	0x0800156d
 80014e0:	08001579 	.word	0x08001579
 80014e4:	08001615 	.word	0x08001615
 80014e8:	08001585 	.word	0x08001585
 80014ec:	0800158b 	.word	0x0800158b
 80014f0:	08001615 	.word	0x08001615
 80014f4:	08001597 	.word	0x08001597
 80014f8:	080015a3 	.word	0x080015a3
 80014fc:	08001615 	.word	0x08001615
 8001500:	08001615 	.word	0x08001615
 8001504:	08001615 	.word	0x08001615
 8001508:	080015bb 	.word	0x080015bb
		case 'A':
			setA();
 800150c:	f000 f8d8 	bl	80016c0 <setA>
			break;
 8001510:	e083      	b.n	800161a <displayLetter+0x292>
		case 'a':
			seta();
 8001512:	f000 f8ff 	bl	8001714 <seta>
			break;
 8001516:	e080      	b.n	800161a <displayLetter+0x292>
		case 'b':
			setb();
 8001518:	f000 f926 	bl	8001768 <setb>
			break;
 800151c:	e07d      	b.n	800161a <displayLetter+0x292>
		case 'C':
			setC();
 800151e:	f000 f94d 	bl	80017bc <setC>
			break;
 8001522:	e07a      	b.n	800161a <displayLetter+0x292>
		case 'c':
			setc();
 8001524:	f000 f974 	bl	8001810 <setc>
			break;
 8001528:	e077      	b.n	800161a <displayLetter+0x292>
		case 'd':
			setd();
 800152a:	f000 f99b 	bl	8001864 <setd>
			break;
 800152e:	e074      	b.n	800161a <displayLetter+0x292>
		case 'E':
			setE();
 8001530:	f000 f9c2 	bl	80018b8 <setE>
			break;
 8001534:	e071      	b.n	800161a <displayLetter+0x292>
		case 'F':
			setF();
 8001536:	f000 f9e9 	bl	800190c <setF>
			break;
 800153a:	e06e      	b.n	800161a <displayLetter+0x292>
		case 'G':
			setG();
 800153c:	f000 fa10 	bl	8001960 <setG>
			break;
 8001540:	e06b      	b.n	800161a <displayLetter+0x292>
		case 'H':
			setH();
 8001542:	f000 fa37 	bl	80019b4 <setH>
			break;
 8001546:	e068      	b.n	800161a <displayLetter+0x292>
		case 'h':
			seth();
 8001548:	f000 fa5e 	bl	8001a08 <seth>
			break;
 800154c:	e065      	b.n	800161a <displayLetter+0x292>
		case 'I':
			setI();
 800154e:	f000 fa85 	bl	8001a5c <setI>
			break;
 8001552:	e062      	b.n	800161a <displayLetter+0x292>
		case 'J':
			setJ();
 8001554:	f000 faac 	bl	8001ab0 <setJ>
			break;
 8001558:	e05f      	b.n	800161a <displayLetter+0x292>
		case 'K':
			setK();
 800155a:	f000 fccb 	bl	8001ef4 <setK>
			break;
 800155e:	e05c      	b.n	800161a <displayLetter+0x292>
		case 'L':
			setL();
 8001560:	f000 fad0 	bl	8001b04 <setL>
			break;
 8001564:	e059      	b.n	800161a <displayLetter+0x292>
		case 'M':
			setM();
 8001566:	f000 fcef 	bl	8001f48 <setM>
			break;
 800156a:	e056      	b.n	800161a <displayLetter+0x292>
		case 'n':
			setn();
 800156c:	f000 faf4 	bl	8001b58 <setn>
			break;
 8001570:	e053      	b.n	800161a <displayLetter+0x292>
		case 'O':
			setO();
 8001572:	f000 fb1b 	bl	8001bac <setO>
			break;
 8001576:	e050      	b.n	800161a <displayLetter+0x292>
		case 'o':
			seto();
 8001578:	f000 fb42 	bl	8001c00 <seto>
			break;
 800157c:	e04d      	b.n	800161a <displayLetter+0x292>
		case 'P':
			setP();
 800157e:	f000 fb69 	bl	8001c54 <setP>
			break;
 8001582:	e04a      	b.n	800161a <displayLetter+0x292>
		case 'q':
			setq();
 8001584:	f000 fb90 	bl	8001ca8 <setq>
			break;
 8001588:	e047      	b.n	800161a <displayLetter+0x292>
		case 'r':
			setr();
 800158a:	f000 fbb7 	bl	8001cfc <setr>
			break;
 800158e:	e044      	b.n	800161a <displayLetter+0x292>
		case 'S':
			setS();
 8001590:	f000 fbde 	bl	8001d50 <setS>
			break;
 8001594:	e041      	b.n	800161a <displayLetter+0x292>
		case 't':
			sett();
 8001596:	f000 fc05 	bl	8001da4 <sett>
			break;
 800159a:	e03e      	b.n	800161a <displayLetter+0x292>
		case 'U':
			setU();
 800159c:	f000 fc2c 	bl	8001df8 <setU>
			break;
 80015a0:	e03b      	b.n	800161a <displayLetter+0x292>
		case 'u':
			setu();
 80015a2:	f000 fc53 	bl	8001e4c <setu>
			break;
 80015a6:	e038      	b.n	800161a <displayLetter+0x292>
		case 'V':
			setV();
 80015a8:	f000 fcf4 	bl	8001f94 <setV>
			break;
 80015ac:	e035      	b.n	800161a <displayLetter+0x292>
		case 'W':
			setW();
 80015ae:	f000 fd1b 	bl	8001fe8 <setW>
			break;
 80015b2:	e032      	b.n	800161a <displayLetter+0x292>
		case 'X':
			setX();
 80015b4:	f000 fd42 	bl	800203c <setX>
			break;
 80015b8:	e02f      	b.n	800161a <displayLetter+0x292>
		case 'y':
			sety();
 80015ba:	f000 fc71 	bl	8001ea0 <sety>
			break;
 80015be:	e02c      	b.n	800161a <displayLetter+0x292>
		case 'Z':
			setZ();
 80015c0:	f000 fd66 	bl	8002090 <setZ>
			break;
 80015c4:	e029      	b.n	800161a <displayLetter+0x292>
		case ' ':
			resetAllSegments();
 80015c6:	f000 f82d 	bl	8001624 <resetAllSegments>
			break;
 80015ca:	e026      	b.n	800161a <displayLetter+0x292>
		case '_':
			setLine();
 80015cc:	f000 ff2e 	bl	800242c <setLine>
			break;
 80015d0:	e023      	b.n	800161a <displayLetter+0x292>
		case '-':
			setDash();
 80015d2:	f000 ff63 	bl	800249c <setDash>
			break;
 80015d6:	e020      	b.n	800161a <displayLetter+0x292>


		case '1':
			setOne();
 80015d8:	f000 fd84 	bl	80020e4 <setOne>
			break;
 80015dc:	e01d      	b.n	800161a <displayLetter+0x292>
		case '2':
			setTwo();
 80015de:	f000 fdab 	bl	8002138 <setTwo>
			break;
 80015e2:	e01a      	b.n	800161a <displayLetter+0x292>
		case '3':
			setThree();
 80015e4:	f000 fdd2 	bl	800218c <setThree>
			break;
 80015e8:	e017      	b.n	800161a <displayLetter+0x292>
		case '4':
			setFour();
 80015ea:	f000 fdf9 	bl	80021e0 <setFour>
			break;
 80015ee:	e014      	b.n	800161a <displayLetter+0x292>
		case '5':
			setFive();
 80015f0:	f000 fe20 	bl	8002234 <setFive>
			break;
 80015f4:	e011      	b.n	800161a <displayLetter+0x292>
		case '6':
			setSix();
 80015f6:	f000 fe47 	bl	8002288 <setSix>
			break;
 80015fa:	e00e      	b.n	800161a <displayLetter+0x292>
		case '7':
			setSeven();
 80015fc:	f000 fe6e 	bl	80022dc <setSeven>
			break;
 8001600:	e00b      	b.n	800161a <displayLetter+0x292>
		case '8':
			setEight();
 8001602:	f000 fe95 	bl	8002330 <setEight>
			break;
 8001606:	e008      	b.n	800161a <displayLetter+0x292>
		case '9':
			setNine();
 8001608:	f000 febc 	bl	8002384 <setNine>
			break;
 800160c:	e005      	b.n	800161a <displayLetter+0x292>
		case '0':
			setZero();
 800160e:	f000 fee3 	bl	80023d8 <setZero>
			break;
 8001612:	e002      	b.n	800161a <displayLetter+0x292>
		default:
			setDot();
 8001614:	f000 ff38 	bl	8002488 <setDot>
			break;
 8001618:	bf00      	nop
	}
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop

08001624 <resetAllSegments>:
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
}

void resetAllSegments(void){
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001628:	2102      	movs	r1, #2
 800162a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162e:	f7ff fd96 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001632:	2101      	movs	r1, #1
 8001634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001638:	f7ff fd91 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800163c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001644:	f7ff fd8b 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001648:	2120      	movs	r1, #32
 800164a:	480c      	ldr	r0, [pc, #48]	; (800167c <resetAllSegments+0x58>)
 800164c:	f7ff fd87 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001650:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001658:	f7ff fd81 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 800165c:	2108      	movs	r1, #8
 800165e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001662:	f7ff fd7c 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001666:	2110      	movs	r1, #16
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <resetAllSegments+0x58>)
 800166a:	f7ff fd78 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentDP_Pin);
 800166e:	2102      	movs	r1, #2
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <resetAllSegments+0x58>)
 8001672:	f7ff fd74 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	48000400 	.word	0x48000400

08001680 <resetAllDigits>:

void resetAllDigits(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, digit1_Pin);
 8001684:	2101      	movs	r1, #1
 8001686:	480d      	ldr	r0, [pc, #52]	; (80016bc <resetAllDigits+0x3c>)
 8001688:	f7ff fd77 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, digit2_Pin);
 800168c:	2110      	movs	r1, #16
 800168e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001692:	f7ff fd72 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, digit3_Pin);
 8001696:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800169a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169e:	f7ff fd6c 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, digit4_Pin);
 80016a2:	2104      	movs	r1, #4
 80016a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a8:	f7ff fd67 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, digitTime_Pin);
 80016ac:	2180      	movs	r1, #128	; 0x80
 80016ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b2:	f7ff fd62 	bl	800117a <LL_GPIO_ResetOutputPin>
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	48000400 	.word	0x48000400

080016c0 <setA>:

void setA(void){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80016c4:	2102      	movs	r1, #2
 80016c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ca:	f7ff fd56 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80016ce:	2101      	movs	r1, #1
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d4:	f7ff fd51 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80016d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e0:	f7ff fd4b 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80016e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ec:	f7ff fd45 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80016f0:	2108      	movs	r1, #8
 80016f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f6:	f7ff fd40 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80016fa:	2110      	movs	r1, #16
 80016fc:	4804      	ldr	r0, [pc, #16]	; (8001710 <setA+0x50>)
 80016fe:	f7ff fd3c 	bl	800117a <LL_GPIO_ResetOutputPin>
	// reset D
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001702:	2120      	movs	r1, #32
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <setA+0x50>)
 8001706:	f7ff fd2a 	bl	800115e <LL_GPIO_SetOutputPin>

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	48000400 	.word	0x48000400

08001714 <seta>:
void seta(void){
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001718:	2102      	movs	r1, #2
 800171a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171e:	f7ff fd2c 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001722:	2101      	movs	r1, #1
 8001724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001728:	f7ff fd27 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800172c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001734:	f7ff fd21 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001738:	2120      	movs	r1, #32
 800173a:	480a      	ldr	r0, [pc, #40]	; (8001764 <seta+0x50>)
 800173c:	f7ff fd1d 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001740:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001748:	f7ff fd17 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800174c:	2110      	movs	r1, #16
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <seta+0x50>)
 8001750:	f7ff fd13 	bl	800117a <LL_GPIO_ResetOutputPin>
	// reset f
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001754:	2108      	movs	r1, #8
 8001756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175a:	f7ff fd00 	bl	800115e <LL_GPIO_SetOutputPin>

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	48000400 	.word	0x48000400

08001768 <setb>:
void setb(void){
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800176c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001774:	f7ff fd01 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001778:	2120      	movs	r1, #32
 800177a:	480f      	ldr	r0, [pc, #60]	; (80017b8 <setb+0x50>)
 800177c:	f7ff fcfd 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001780:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001788:	f7ff fcf7 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800178c:	2108      	movs	r1, #8
 800178e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001792:	f7ff fcf2 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001796:	2110      	movs	r1, #16
 8001798:	4807      	ldr	r0, [pc, #28]	; (80017b8 <setb+0x50>)
 800179a:	f7ff fcee 	bl	800117a <LL_GPIO_ResetOutputPin>
	// reset a,b
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800179e:	2102      	movs	r1, #2
 80017a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a4:	f7ff fcdb 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80017a8:	2101      	movs	r1, #1
 80017aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ae:	f7ff fcd6 	bl	800115e <LL_GPIO_SetOutputPin>
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	48000400 	.word	0x48000400

080017bc <setC>:
void setC(void){
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80017c0:	2102      	movs	r1, #2
 80017c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c6:	f7ff fcd8 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80017ca:	2120      	movs	r1, #32
 80017cc:	480f      	ldr	r0, [pc, #60]	; (800180c <setC+0x50>)
 80017ce:	f7ff fcd4 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80017d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017da:	f7ff fcce 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80017de:	2108      	movs	r1, #8
 80017e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e4:	f7ff fcc9 	bl	800117a <LL_GPIO_ResetOutputPin>
	// reset B,C,G
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80017e8:	2101      	movs	r1, #1
 80017ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ee:	f7ff fcb6 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80017f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fa:	f7ff fcb0 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 80017fe:	2110      	movs	r1, #16
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <setC+0x50>)
 8001802:	f7ff fcac 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	48000400 	.word	0x48000400

08001810 <setc>:
void setc(void){
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001814:	2120      	movs	r1, #32
 8001816:	4812      	ldr	r0, [pc, #72]	; (8001860 <setc+0x50>)
 8001818:	f7ff fcaf 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800181c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001824:	f7ff fca9 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001828:	2110      	movs	r1, #16
 800182a:	480d      	ldr	r0, [pc, #52]	; (8001860 <setc+0x50>)
 800182c:	f7ff fca5 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001830:	2102      	movs	r1, #2
 8001832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001836:	f7ff fc92 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800183a:	2101      	movs	r1, #1
 800183c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001840:	f7ff fc8d 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001844:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184c:	f7ff fc87 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001850:	2108      	movs	r1, #8
 8001852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001856:	f7ff fc82 	bl	800115e <LL_GPIO_SetOutputPin>
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	48000400 	.word	0x48000400

08001864 <setd>:
void setd(void){
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001868:	2101      	movs	r1, #1
 800186a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186e:	f7ff fc84 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001872:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187a:	f7ff fc7e 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800187e:	2120      	movs	r1, #32
 8001880:	480c      	ldr	r0, [pc, #48]	; (80018b4 <setd+0x50>)
 8001882:	f7ff fc7a 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001886:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800188a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188e:	f7ff fc74 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001892:	2110      	movs	r1, #16
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <setd+0x50>)
 8001896:	f7ff fc70 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800189a:	2102      	movs	r1, #2
 800189c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a0:	f7ff fc5d 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80018a4:	2108      	movs	r1, #8
 80018a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018aa:	f7ff fc58 	bl	800115e <LL_GPIO_SetOutputPin>
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	48000400 	.word	0x48000400

080018b8 <setE>:
void setE(void){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80018bc:	2102      	movs	r1, #2
 80018be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c2:	f7ff fc5a 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80018c6:	2120      	movs	r1, #32
 80018c8:	480f      	ldr	r0, [pc, #60]	; (8001908 <setE+0x50>)
 80018ca:	f7ff fc56 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80018ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d6:	f7ff fc50 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80018da:	2108      	movs	r1, #8
 80018dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e0:	f7ff fc4b 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80018e4:	2110      	movs	r1, #16
 80018e6:	4808      	ldr	r0, [pc, #32]	; (8001908 <setE+0x50>)
 80018e8:	f7ff fc47 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80018ec:	2101      	movs	r1, #1
 80018ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f2:	f7ff fc34 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80018f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fe:	f7ff fc2e 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	48000400 	.word	0x48000400

0800190c <setF>:
void setF(void){
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001910:	2102      	movs	r1, #2
 8001912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001916:	f7ff fc30 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800191a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800191e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001922:	f7ff fc2a 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001926:	2108      	movs	r1, #8
 8001928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192c:	f7ff fc25 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001930:	2110      	movs	r1, #16
 8001932:	480a      	ldr	r0, [pc, #40]	; (800195c <setF+0x50>)
 8001934:	f7ff fc21 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001938:	2101      	movs	r1, #1
 800193a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193e:	f7ff fc0e 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001942:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194a:	f7ff fc08 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800194e:	2120      	movs	r1, #32
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <setF+0x50>)
 8001952:	f7ff fc04 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	48000400 	.word	0x48000400

08001960 <setG>:
void setG(void){
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001964:	2102      	movs	r1, #2
 8001966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196a:	f7ff fc06 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800196e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001976:	f7ff fc00 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800197a:	2120      	movs	r1, #32
 800197c:	480c      	ldr	r0, [pc, #48]	; (80019b0 <setG+0x50>)
 800197e:	f7ff fbfc 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001982:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198a:	f7ff fbf6 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800198e:	2108      	movs	r1, #8
 8001990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001994:	f7ff fbf1 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001998:	2101      	movs	r1, #1
 800199a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199e:	f7ff fbde 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 80019a2:	2110      	movs	r1, #16
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <setG+0x50>)
 80019a6:	f7ff fbda 	bl	800115e <LL_GPIO_SetOutputPin>
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	48000400 	.word	0x48000400

080019b4 <setH>:
void setH(void){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80019b8:	2101      	movs	r1, #1
 80019ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019be:	f7ff fbdc 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80019c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ca:	f7ff fbd6 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80019ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d6:	f7ff fbd0 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80019da:	2108      	movs	r1, #8
 80019dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e0:	f7ff fbcb 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80019e4:	2110      	movs	r1, #16
 80019e6:	4807      	ldr	r0, [pc, #28]	; (8001a04 <setH+0x50>)
 80019e8:	f7ff fbc7 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80019ec:	2102      	movs	r1, #2
 80019ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f2:	f7ff fbb4 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 80019f6:	2120      	movs	r1, #32
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <setH+0x50>)
 80019fa:	f7ff fbb0 	bl	800115e <LL_GPIO_SetOutputPin>
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	48000400 	.word	0x48000400

08001a08 <seth>:
void seth(void){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001a0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a14:	f7ff fbb1 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001a18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a20:	f7ff fbab 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001a24:	2108      	movs	r1, #8
 8001a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2a:	f7ff fba6 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001a2e:	2110      	movs	r1, #16
 8001a30:	4809      	ldr	r0, [pc, #36]	; (8001a58 <seth+0x50>)
 8001a32:	f7ff fba2 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001a36:	2102      	movs	r1, #2
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3c:	f7ff fb8f 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001a40:	2101      	movs	r1, #1
 8001a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a46:	f7ff fb8a 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001a4a:	2120      	movs	r1, #32
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <seth+0x50>)
 8001a4e:	f7ff fb86 	bl	800115e <LL_GPIO_SetOutputPin>

}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	48000400 	.word	0x48000400

08001a5c <setI>:
void setI(void){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001a60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a68:	f7ff fb87 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001a6c:	2108      	movs	r1, #8
 8001a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a72:	f7ff fb82 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001a76:	2102      	movs	r1, #2
 8001a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7c:	f7ff fb6f 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001a80:	2101      	movs	r1, #1
 8001a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a86:	f7ff fb6a 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001a8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a92:	f7ff fb64 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001a96:	2120      	movs	r1, #32
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <setI+0x50>)
 8001a9a:	f7ff fb60 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001a9e:	2110      	movs	r1, #16
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <setI+0x50>)
 8001aa2:	f7ff fb5c 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	48000400 	.word	0x48000400

08001ab0 <setJ>:
void setJ(void){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aba:	f7ff fb5e 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001abe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac6:	f7ff fb58 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001aca:	2120      	movs	r1, #32
 8001acc:	480c      	ldr	r0, [pc, #48]	; (8001b00 <setJ+0x50>)
 8001ace:	f7ff fb54 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001ad2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ada:	f7ff fb4e 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001ade:	2102      	movs	r1, #2
 8001ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae4:	f7ff fb3b 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001ae8:	2108      	movs	r1, #8
 8001aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aee:	f7ff fb36 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001af2:	2110      	movs	r1, #16
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <setJ+0x50>)
 8001af6:	f7ff fb32 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	48000400 	.word	0x48000400

08001b04 <setL>:
void setL(void){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001b08:	2120      	movs	r1, #32
 8001b0a:	4812      	ldr	r0, [pc, #72]	; (8001b54 <setL+0x50>)
 8001b0c:	f7ff fb35 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001b10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b18:	f7ff fb2f 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001b1c:	2108      	movs	r1, #8
 8001b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b22:	f7ff fb2a 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001b26:	2102      	movs	r1, #2
 8001b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2c:	f7ff fb17 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001b30:	2101      	movs	r1, #1
 8001b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b36:	f7ff fb12 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001b3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b42:	f7ff fb0c 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001b46:	2110      	movs	r1, #16
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <setL+0x50>)
 8001b4a:	f7ff fb08 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	48000400 	.word	0x48000400

08001b58 <setn>:
void setn(void){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b64:	f7ff fb09 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001b68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b70:	f7ff fb03 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001b74:	2110      	movs	r1, #16
 8001b76:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <setn+0x50>)
 8001b78:	f7ff faff 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b82:	f7ff faec 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001b86:	2101      	movs	r1, #1
 8001b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8c:	f7ff fae7 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001b90:	2120      	movs	r1, #32
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <setn+0x50>)
 8001b94:	f7ff fae3 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001b98:	2108      	movs	r1, #8
 8001b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9e:	f7ff fade 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	48000400 	.word	0x48000400

08001bac <setO>:
void setO(void){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb6:	f7ff fae0 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001bba:	2101      	movs	r1, #1
 8001bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc0:	f7ff fadb 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001bc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bcc:	f7ff fad5 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001bd0:	2120      	movs	r1, #32
 8001bd2:	480a      	ldr	r0, [pc, #40]	; (8001bfc <setO+0x50>)
 8001bd4:	f7ff fad1 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001bd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be0:	f7ff facb 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001be4:	2108      	movs	r1, #8
 8001be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bea:	f7ff fac6 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001bee:	2110      	movs	r1, #16
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <setO+0x50>)
 8001bf2:	f7ff fab4 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	48000400 	.word	0x48000400

08001c00 <seto>:
void seto(void){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001c04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c0c:	f7ff fab5 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001c10:	2120      	movs	r1, #32
 8001c12:	480f      	ldr	r0, [pc, #60]	; (8001c50 <seto+0x50>)
 8001c14:	f7ff fab1 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001c18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c20:	f7ff faab 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001c24:	2110      	movs	r1, #16
 8001c26:	480a      	ldr	r0, [pc, #40]	; (8001c50 <seto+0x50>)
 8001c28:	f7ff faa7 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c32:	f7ff fa94 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001c36:	2101      	movs	r1, #1
 8001c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c3c:	f7ff fa8f 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001c40:	2108      	movs	r1, #8
 8001c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c46:	f7ff fa8a 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	48000400 	.word	0x48000400

08001c54 <setP>:
void setP(void){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001c58:	2102      	movs	r1, #2
 8001c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c5e:	f7ff fa8c 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001c62:	2101      	movs	r1, #1
 8001c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c68:	f7ff fa87 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001c6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c74:	f7ff fa81 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001c78:	2108      	movs	r1, #8
 8001c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7e:	f7ff fa7c 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001c82:	2110      	movs	r1, #16
 8001c84:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <setP+0x50>)
 8001c86:	f7ff fa78 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001c8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c92:	f7ff fa64 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001c96:	2120      	movs	r1, #32
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <setP+0x50>)
 8001c9a:	f7ff fa60 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	48000400 	.word	0x48000400

08001ca8 <setq>:
void setq(void){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001cac:	2102      	movs	r1, #2
 8001cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb2:	f7ff fa62 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cbc:	f7ff fa5d 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001cc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc8:	f7ff fa57 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001ccc:	2108      	movs	r1, #8
 8001cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd2:	f7ff fa52 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001cd6:	2110      	movs	r1, #16
 8001cd8:	4807      	ldr	r0, [pc, #28]	; (8001cf8 <setq+0x50>)
 8001cda:	f7ff fa4e 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001cde:	2120      	movs	r1, #32
 8001ce0:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <setq+0x50>)
 8001ce2:	f7ff fa3c 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001ce6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cee:	f7ff fa36 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	48000400 	.word	0x48000400

08001cfc <setr>:
void setr(void){
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001d00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d08:	f7ff fa37 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001d0c:	2110      	movs	r1, #16
 8001d0e:	480f      	ldr	r0, [pc, #60]	; (8001d4c <setr+0x50>)
 8001d10:	f7ff fa33 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001d14:	2102      	movs	r1, #2
 8001d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1a:	f7ff fa20 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001d1e:	2101      	movs	r1, #1
 8001d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d24:	f7ff fa1b 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001d28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d30:	f7ff fa15 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001d34:	2120      	movs	r1, #32
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <setr+0x50>)
 8001d38:	f7ff fa11 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001d3c:	2108      	movs	r1, #8
 8001d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d42:	f7ff fa0c 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	48000400 	.word	0x48000400

08001d50 <setS>:
void setS(void){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001d54:	2102      	movs	r1, #2
 8001d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d5a:	f7ff fa0e 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d66:	f7ff fa08 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001d6a:	2120      	movs	r1, #32
 8001d6c:	480c      	ldr	r0, [pc, #48]	; (8001da0 <setS+0x50>)
 8001d6e:	f7ff fa04 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001d72:	2108      	movs	r1, #8
 8001d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d78:	f7ff f9ff 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001d7c:	2110      	movs	r1, #16
 8001d7e:	4808      	ldr	r0, [pc, #32]	; (8001da0 <setS+0x50>)
 8001d80:	f7ff f9fb 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001d84:	2101      	movs	r1, #1
 8001d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8a:	f7ff f9e8 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001d8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d96:	f7ff f9e2 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	48000400 	.word	0x48000400

08001da4 <sett>:
void sett(void){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001da8:	2120      	movs	r1, #32
 8001daa:	4812      	ldr	r0, [pc, #72]	; (8001df4 <sett+0x50>)
 8001dac:	f7ff f9e5 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db8:	f7ff f9df 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001dbc:	2108      	movs	r1, #8
 8001dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc2:	f7ff f9da 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001dc6:	2110      	movs	r1, #16
 8001dc8:	480a      	ldr	r0, [pc, #40]	; (8001df4 <sett+0x50>)
 8001dca:	f7ff f9d6 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001dce:	2102      	movs	r1, #2
 8001dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd4:	f7ff f9c3 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001dd8:	2101      	movs	r1, #1
 8001dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dde:	f7ff f9be 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001de2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dea:	f7ff f9b8 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	48000400 	.word	0x48000400

08001df8 <setU>:
void setU(void){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e02:	f7ff f9ba 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001e06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0e:	f7ff f9b4 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001e12:	2120      	movs	r1, #32
 8001e14:	480c      	ldr	r0, [pc, #48]	; (8001e48 <setU+0x50>)
 8001e16:	f7ff f9b0 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001e1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e22:	f7ff f9aa 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001e26:	2108      	movs	r1, #8
 8001e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e2c:	f7ff f9a5 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001e30:	2102      	movs	r1, #2
 8001e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e36:	f7ff f992 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001e3a:	2110      	movs	r1, #16
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <setU+0x50>)
 8001e3e:	f7ff f98e 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	48000400 	.word	0x48000400

08001e4c <setu>:
void setu(void){
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001e50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e58:	f7ff f98f 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001e5c:	2120      	movs	r1, #32
 8001e5e:	480f      	ldr	r0, [pc, #60]	; (8001e9c <setu+0x50>)
 8001e60:	f7ff f98b 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001e64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e6c:	f7ff f985 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001e70:	2102      	movs	r1, #2
 8001e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e76:	f7ff f972 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e80:	f7ff f96d 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001e84:	2108      	movs	r1, #8
 8001e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e8a:	f7ff f968 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001e8e:	2110      	movs	r1, #16
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <setu+0x50>)
 8001e92:	f7ff f964 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	48000400 	.word	0x48000400

08001ea0 <sety>:
void sety(void){
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eaa:	f7ff f966 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001eae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb6:	f7ff f960 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001eba:	2120      	movs	r1, #32
 8001ebc:	480c      	ldr	r0, [pc, #48]	; (8001ef0 <sety+0x50>)
 8001ebe:	f7ff f95c 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001ec2:	2108      	movs	r1, #8
 8001ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec8:	f7ff f957 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001ecc:	2110      	movs	r1, #16
 8001ece:	4808      	ldr	r0, [pc, #32]	; (8001ef0 <sety+0x50>)
 8001ed0:	f7ff f953 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eda:	f7ff f940 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001ede:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee6:	f7ff f93a 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	48000400 	.word	0x48000400

08001ef4 <setK>:


// Disgusting letters :D
void setK(void){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001ef8:	2102      	movs	r1, #2
 8001efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001efe:	f7ff f93c 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001f02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0a:	f7ff f936 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001f0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f16:	f7ff f930 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001f1a:	2108      	movs	r1, #8
 8001f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f20:	f7ff f92b 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001f24:	2110      	movs	r1, #16
 8001f26:	4807      	ldr	r0, [pc, #28]	; (8001f44 <setK+0x50>)
 8001f28:	f7ff f927 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f32:	f7ff f914 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001f36:	2120      	movs	r1, #32
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <setK+0x50>)
 8001f3a:	f7ff f910 	bl	800115e <LL_GPIO_SetOutputPin>

}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	48000400 	.word	0x48000400

08001f48 <setM>:
void setM(void){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f52:	f7ff f912 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001f56:	2101      	movs	r1, #1
 8001f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f5c:	f7ff f90d 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001f60:	2120      	movs	r1, #32
 8001f62:	480b      	ldr	r0, [pc, #44]	; (8001f90 <setM+0x48>)
 8001f64:	f7ff f909 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001f68:	2108      	movs	r1, #8
 8001f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6e:	f7ff f904 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001f72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f7a:	f7ff f8f0 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001f7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f86:	f7ff f8ea 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	48000400 	.word	0x48000400

08001f94 <setV>:
void setV(void){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001f98:	2101      	movs	r1, #1
 8001f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f9e:	f7ff f8ec 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001fa2:	2120      	movs	r1, #32
 8001fa4:	480f      	ldr	r0, [pc, #60]	; (8001fe4 <setV+0x50>)
 8001fa6:	f7ff f8e8 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001faa:	2108      	movs	r1, #8
 8001fac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb0:	f7ff f8e3 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001fb4:	2102      	movs	r1, #2
 8001fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fba:	f7ff f8d0 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001fbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc6:	f7ff f8ca 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001fca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd2:	f7ff f8c4 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001fd6:	2110      	movs	r1, #16
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <setV+0x50>)
 8001fda:	f7ff f8c0 	bl	800115e <LL_GPIO_SetOutputPin>

}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	48000400 	.word	0x48000400

08001fe8 <setW>:
void setW(void){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001fec:	2101      	movs	r1, #1
 8001fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff2:	f7ff f8c2 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ffe:	f7ff f8bc 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8002002:	2120      	movs	r1, #32
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <setW+0x50>)
 8002006:	f7ff f8b8 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800200a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800200e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002012:	f7ff f8b2 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8002016:	2108      	movs	r1, #8
 8002018:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800201c:	f7ff f8ad 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8002020:	2110      	movs	r1, #16
 8002022:	4805      	ldr	r0, [pc, #20]	; (8002038 <setW+0x50>)
 8002024:	f7ff f8a9 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8002028:	2102      	movs	r1, #2
 800202a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800202e:	f7ff f896 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	48000400 	.word	0x48000400

0800203c <setX>:
void setX(void){
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8002040:	2102      	movs	r1, #2
 8002042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002046:	f7ff f898 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800204a:	2120      	movs	r1, #32
 800204c:	480f      	ldr	r0, [pc, #60]	; (800208c <setX+0x50>)
 800204e:	f7ff f894 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8002052:	2110      	movs	r1, #16
 8002054:	480d      	ldr	r0, [pc, #52]	; (800208c <setX+0x50>)
 8002056:	f7ff f890 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800205a:	2101      	movs	r1, #1
 800205c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002060:	f7ff f87d 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8002064:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800206c:	f7ff f877 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8002070:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002078:	f7ff f871 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 800207c:	2108      	movs	r1, #8
 800207e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002082:	f7ff f86c 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	48000400 	.word	0x48000400

08002090 <setZ>:
void setZ(void){
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8002094:	2102      	movs	r1, #2
 8002096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209a:	f7ff f86e 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800209e:	2101      	movs	r1, #1
 80020a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a4:	f7ff f869 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80020a8:	2120      	movs	r1, #32
 80020aa:	480d      	ldr	r0, [pc, #52]	; (80020e0 <setZ+0x50>)
 80020ac:	f7ff f865 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80020b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b8:	f7ff f85f 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80020bc:	2110      	movs	r1, #16
 80020be:	4808      	ldr	r0, [pc, #32]	; (80020e0 <setZ+0x50>)
 80020c0:	f7ff f85b 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80020c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020cc:	f7ff f847 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80020d0:	2108      	movs	r1, #8
 80020d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d6:	f7ff f842 	bl	800115e <LL_GPIO_SetOutputPin>
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	48000400 	.word	0x48000400

080020e4 <setOne>:

// numbers
void setOne(void){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80020e8:	2101      	movs	r1, #1
 80020ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ee:	f7ff f844 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80020f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fa:	f7ff f83e 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80020fe:	2102      	movs	r1, #2
 8002100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002104:	f7ff f82b 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8002108:	2120      	movs	r1, #32
 800210a:	480a      	ldr	r0, [pc, #40]	; (8002134 <setOne+0x50>)
 800210c:	f7ff f827 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8002110:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002118:	f7ff f821 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 800211c:	2108      	movs	r1, #8
 800211e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002122:	f7ff f81c 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8002126:	2110      	movs	r1, #16
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <setOne+0x50>)
 800212a:	f7ff f818 	bl	800115e <LL_GPIO_SetOutputPin>
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	48000400 	.word	0x48000400

08002138 <setTwo>:
void setTwo(void){
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800213c:	2102      	movs	r1, #2
 800213e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002142:	f7ff f81a 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8002146:	2101      	movs	r1, #1
 8002148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800214c:	f7ff f815 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8002150:	2120      	movs	r1, #32
 8002152:	480d      	ldr	r0, [pc, #52]	; (8002188 <setTwo+0x50>)
 8002154:	f7ff f811 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8002158:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800215c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002160:	f7ff f80b 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8002164:	2110      	movs	r1, #16
 8002166:	4808      	ldr	r0, [pc, #32]	; (8002188 <setTwo+0x50>)
 8002168:	f7ff f807 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800216c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002174:	f7fe fff3 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8002178:	2108      	movs	r1, #8
 800217a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217e:	f7fe ffee 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	48000400 	.word	0x48000400

0800218c <setThree>:
void setThree(void){
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8002190:	2102      	movs	r1, #2
 8002192:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002196:	f7fe fff0 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800219a:	2101      	movs	r1, #1
 800219c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a0:	f7fe ffeb 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80021a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ac:	f7fe ffe5 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80021b0:	2120      	movs	r1, #32
 80021b2:	480a      	ldr	r0, [pc, #40]	; (80021dc <setThree+0x50>)
 80021b4:	f7fe ffe1 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80021b8:	2110      	movs	r1, #16
 80021ba:	4808      	ldr	r0, [pc, #32]	; (80021dc <setThree+0x50>)
 80021bc:	f7fe ffdd 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80021c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c8:	f7fe ffc9 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80021cc:	2108      	movs	r1, #8
 80021ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d2:	f7fe ffc4 	bl	800115e <LL_GPIO_SetOutputPin>
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	48000400 	.word	0x48000400

080021e0 <setFour>:
void setFour(void){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80021e4:	2101      	movs	r1, #1
 80021e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ea:	f7fe ffc6 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80021ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f6:	f7fe ffc0 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80021fa:	2108      	movs	r1, #8
 80021fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002200:	f7fe ffbb 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8002204:	2110      	movs	r1, #16
 8002206:	480a      	ldr	r0, [pc, #40]	; (8002230 <setFour+0x50>)
 8002208:	f7fe ffb7 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800220c:	2102      	movs	r1, #2
 800220e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002212:	f7fe ffa4 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8002216:	2120      	movs	r1, #32
 8002218:	4805      	ldr	r0, [pc, #20]	; (8002230 <setFour+0x50>)
 800221a:	f7fe ffa0 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800221e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002226:	f7fe ff9a 	bl	800115e <LL_GPIO_SetOutputPin>
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	48000400 	.word	0x48000400

08002234 <setFive>:
void setFive(void){
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8002238:	2102      	movs	r1, #2
 800223a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800223e:	f7fe ff9c 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8002242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224a:	f7fe ff96 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800224e:	2120      	movs	r1, #32
 8002250:	480c      	ldr	r0, [pc, #48]	; (8002284 <setFive+0x50>)
 8002252:	f7fe ff92 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8002256:	2108      	movs	r1, #8
 8002258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800225c:	f7fe ff8d 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8002260:	2110      	movs	r1, #16
 8002262:	4808      	ldr	r0, [pc, #32]	; (8002284 <setFive+0x50>)
 8002264:	f7fe ff89 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8002268:	2101      	movs	r1, #1
 800226a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800226e:	f7fe ff76 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8002272:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227a:	f7fe ff70 	bl	800115e <LL_GPIO_SetOutputPin>
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	48000400 	.word	0x48000400

08002288 <setSix>:
void setSix(void){
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800228c:	2102      	movs	r1, #2
 800228e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002292:	f7fe ff72 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8002296:	f44f 7180 	mov.w	r1, #256	; 0x100
 800229a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800229e:	f7fe ff6c 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80022a2:	2120      	movs	r1, #32
 80022a4:	480c      	ldr	r0, [pc, #48]	; (80022d8 <setSix+0x50>)
 80022a6:	f7fe ff68 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80022aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b2:	f7fe ff62 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80022b6:	2108      	movs	r1, #8
 80022b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022bc:	f7fe ff5d 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80022c0:	2110      	movs	r1, #16
 80022c2:	4805      	ldr	r0, [pc, #20]	; (80022d8 <setSix+0x50>)
 80022c4:	f7fe ff59 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80022c8:	2101      	movs	r1, #1
 80022ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ce:	f7fe ff46 	bl	800115e <LL_GPIO_SetOutputPin>
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	48000400 	.word	0x48000400

080022dc <setSeven>:
void setSeven(void){
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80022e0:	2102      	movs	r1, #2
 80022e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e6:	f7fe ff48 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80022ea:	2101      	movs	r1, #1
 80022ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022f0:	f7fe ff43 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80022f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022fc:	f7fe ff3d 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8002300:	2120      	movs	r1, #32
 8002302:	480a      	ldr	r0, [pc, #40]	; (800232c <setSeven+0x50>)
 8002304:	f7fe ff2b 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8002308:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800230c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002310:	f7fe ff25 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8002314:	2108      	movs	r1, #8
 8002316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800231a:	f7fe ff20 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800231e:	2110      	movs	r1, #16
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <setSeven+0x50>)
 8002322:	f7fe ff1c 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	48000400 	.word	0x48000400

08002330 <setEight>:
void setEight(void){
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8002334:	2102      	movs	r1, #2
 8002336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800233a:	f7fe ff1e 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800233e:	2101      	movs	r1, #1
 8002340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002344:	f7fe ff19 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8002348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800234c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002350:	f7fe ff13 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8002354:	2120      	movs	r1, #32
 8002356:	480a      	ldr	r0, [pc, #40]	; (8002380 <setEight+0x50>)
 8002358:	f7fe ff0f 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800235c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002364:	f7fe ff09 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8002368:	2108      	movs	r1, #8
 800236a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800236e:	f7fe ff04 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8002372:	2110      	movs	r1, #16
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <setEight+0x50>)
 8002376:	f7fe ff00 	bl	800117a <LL_GPIO_ResetOutputPin>
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	48000400 	.word	0x48000400

08002384 <setNine>:
void setNine(void){
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8002388:	2102      	movs	r1, #2
 800238a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800238e:	f7fe fef4 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8002392:	2101      	movs	r1, #1
 8002394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002398:	f7fe feef 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800239c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a4:	f7fe fee9 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80023a8:	2120      	movs	r1, #32
 80023aa:	480a      	ldr	r0, [pc, #40]	; (80023d4 <setNine+0x50>)
 80023ac:	f7fe fee5 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80023b0:	2108      	movs	r1, #8
 80023b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b6:	f7fe fee0 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80023ba:	2110      	movs	r1, #16
 80023bc:	4805      	ldr	r0, [pc, #20]	; (80023d4 <setNine+0x50>)
 80023be:	f7fe fedc 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80023c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ca:	f7fe fec8 	bl	800115e <LL_GPIO_SetOutputPin>
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	48000400 	.word	0x48000400

080023d8 <setZero>:
void setZero(void){
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80023dc:	2102      	movs	r1, #2
 80023de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023e2:	f7fe feca 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80023e6:	2101      	movs	r1, #1
 80023e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ec:	f7fe fec5 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80023f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023f8:	f7fe febf 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80023fc:	2120      	movs	r1, #32
 80023fe:	480a      	ldr	r0, [pc, #40]	; (8002428 <setZero+0x50>)
 8002400:	f7fe febb 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8002404:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800240c:	f7fe feb5 	bl	800117a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8002410:	2108      	movs	r1, #8
 8002412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002416:	f7fe feb0 	bl	800117a <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800241a:	2110      	movs	r1, #16
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <setZero+0x50>)
 800241e:	f7fe fe9e 	bl	800115e <LL_GPIO_SetOutputPin>
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	48000400 	.word	0x48000400

0800242c <setLine>:

void setLine(void){
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8002430:	2120      	movs	r1, #32
 8002432:	4814      	ldr	r0, [pc, #80]	; (8002484 <setLine+0x58>)
 8002434:	f7fe fea1 	bl	800117a <LL_GPIO_ResetOutputPin>

	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8002438:	2102      	movs	r1, #2
 800243a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800243e:	f7fe fe8e 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8002442:	2101      	movs	r1, #1
 8002444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002448:	f7fe fe89 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800244c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002454:	f7fe fe83 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8002458:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800245c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002460:	f7fe fe7d 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8002464:	2108      	movs	r1, #8
 8002466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800246a:	f7fe fe78 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800246e:	2110      	movs	r1, #16
 8002470:	4804      	ldr	r0, [pc, #16]	; (8002484 <setLine+0x58>)
 8002472:	f7fe fe74 	bl	800115e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentDP_Pin);
 8002476:	2102      	movs	r1, #2
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <setLine+0x58>)
 800247a:	f7fe fe70 	bl	800115e <LL_GPIO_SetOutputPin>
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	48000400 	.word	0x48000400

08002488 <setDot>:
// and dot to end
void setDot(void){
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
 800248c:	2102      	movs	r1, #2
 800248e:	4802      	ldr	r0, [pc, #8]	; (8002498 <setDot+0x10>)
 8002490:	f7fe fe73 	bl	800117a <LL_GPIO_ResetOutputPin>
}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}
 8002498:	48000400 	.word	0x48000400

0800249c <setDash>:

void setDash(void){
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80024a0:	2110      	movs	r1, #16
 80024a2:	4802      	ldr	r0, [pc, #8]	; (80024ac <setDash+0x10>)
 80024a4:	f7fe fe69 	bl	800117a <LL_GPIO_ResetOutputPin>
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	48000400 	.word	0x48000400

080024b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <__NVIC_GetPriorityGrouping+0x18>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	f003 0307 	and.w	r3, r3, #7
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	db0b      	blt.n	80024f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	f003 021f 	and.w	r2, r3, #31
 80024e4:	4907      	ldr	r1, [pc, #28]	; (8002504 <__NVIC_EnableIRQ+0x38>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	2001      	movs	r0, #1
 80024ee:	fa00 f202 	lsl.w	r2, r0, r2
 80024f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000e100 	.word	0xe000e100

08002508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	6039      	str	r1, [r7, #0]
 8002512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002518:	2b00      	cmp	r3, #0
 800251a:	db0a      	blt.n	8002532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	b2da      	uxtb	r2, r3
 8002520:	490c      	ldr	r1, [pc, #48]	; (8002554 <__NVIC_SetPriority+0x4c>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	0112      	lsls	r2, r2, #4
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	440b      	add	r3, r1
 800252c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002530:	e00a      	b.n	8002548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	4908      	ldr	r1, [pc, #32]	; (8002558 <__NVIC_SetPriority+0x50>)
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	3b04      	subs	r3, #4
 8002540:	0112      	lsls	r2, r2, #4
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	440b      	add	r3, r1
 8002546:	761a      	strb	r2, [r3, #24]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000e100 	.word	0xe000e100
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	; 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f1c3 0307 	rsb	r3, r3, #7
 8002576:	2b04      	cmp	r3, #4
 8002578:	bf28      	it	cs
 800257a:	2304      	movcs	r3, #4
 800257c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3304      	adds	r3, #4
 8002582:	2b06      	cmp	r3, #6
 8002584:	d902      	bls.n	800258c <NVIC_EncodePriority+0x30>
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3b03      	subs	r3, #3
 800258a:	e000      	b.n	800258e <NVIC_EncodePriority+0x32>
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002590:	f04f 32ff 	mov.w	r2, #4294967295
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43da      	mvns	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	401a      	ands	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a4:	f04f 31ff 	mov.w	r1, #4294967295
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	43d9      	mvns	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	4313      	orrs	r3, r2
         );
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3724      	adds	r7, #36	; 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025ce:	695a      	ldr	r2, [r3, #20]
 80025d0:	4907      	ldr	r1, [pc, #28]	; (80025f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4013      	ands	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025e2:	68fb      	ldr	r3, [r7, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	40021000 	.word	0x40021000

080025f4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80025fe:	4a13      	ldr	r2, [pc, #76]	; (800264c <LL_SYSCFG_SetEXTISource+0x58>)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	3302      	adds	r3, #2
 8002606:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	0c1b      	lsrs	r3, r3, #16
 800260e:	43db      	mvns	r3, r3
 8002610:	ea02 0103 	and.w	r1, r2, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	0c1b      	lsrs	r3, r3, #16
 8002618:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	fa03 f202 	lsl.w	r2, r3, r2
 8002632:	4806      	ldr	r0, [pc, #24]	; (800264c <LL_SYSCFG_SetEXTISource+0x58>)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	430a      	orrs	r2, r1
 800263a:	3302      	adds	r3, #2
 800263c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	40010000 	.word	0x40010000

08002650 <LL_GPIO_SetPinMode>:
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	613b      	str	r3, [r7, #16]
  return result;
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2103      	movs	r1, #3
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	401a      	ands	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	61bb      	str	r3, [r7, #24]
  return result;
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	431a      	orrs	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	601a      	str	r2, [r3, #0]
}
 80026a2:	bf00      	nop
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <LL_GPIO_SetPinPull>:
{
 80026ae:	b480      	push	{r7}
 80026b0:	b089      	sub	sp, #36	; 0x24
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	613b      	str	r3, [r7, #16]
  return result;
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	fab3 f383 	clz	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	2103      	movs	r1, #3
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	401a      	ands	r2, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	fa93 f3a3 	rbit	r3, r3
 80026e8:	61bb      	str	r3, [r7, #24]
  return result;
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	431a      	orrs	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	60da      	str	r2, [r3, #12]
}
 8002700:	bf00      	nop
 8002702:	3724      	adds	r7, #36	; 0x24
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_GPIO_ResetOutputPin>:
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	; 0x28
 800272c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800272e:	f107 031c 	add.w	r3, r7, #28
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
 8002748:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800274a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800274e:	f7ff ff39 	bl	80025c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002752:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002756:	f7ff ff35 	bl	80025c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800275a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800275e:	f7ff ff31 	bl	80025c4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 8002762:	f641 119f 	movw	r1, #6559	; 0x199f
 8002766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800276a:	f7ff ffcf 	bl	800270c <LL_GPIO_ResetOutputPin>
                          |digit2_Pin|digitTime_Pin|segmentC_Pin|segmentE_Pin
                          |digit3_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, digit1_Pin|segmentDP_Pin|segmentG_Pin|segmentD_Pin);
 800276e:	2133      	movs	r1, #51	; 0x33
 8002770:	482b      	ldr	r0, [pc, #172]	; (8002820 <MX_GPIO_Init+0xf8>)
 8002772:	f7ff ffcb 	bl	800270c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 8002776:	f641 139f 	movw	r3, #6559	; 0x199f
 800277a:	607b      	str	r3, [r7, #4]
                          |digit2_Pin|digitTime_Pin|segmentC_Pin|segmentE_Pin
                          |digit3_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800277c:	2301      	movs	r3, #1
 800277e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	4619      	mov	r1, r3
 8002790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002794:	f001 fd82 	bl	800429c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = digit1_Pin|segmentDP_Pin|segmentG_Pin|segmentD_Pin;
 8002798:	2333      	movs	r3, #51	; 0x33
 800279a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800279c:	2301      	movs	r3, #1
 800279e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	4619      	mov	r1, r3
 80027b0:	481b      	ldr	r0, [pc, #108]	; (8002820 <MX_GPIO_Init+0xf8>)
 80027b2:	f001 fd73 	bl	800429c <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 80027b6:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 80027ba:	2001      	movs	r0, #1
 80027bc:	f7ff ff1a 	bl	80025f4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(button_GPIO_Port, button_Pin, LL_GPIO_PULL_UP);
 80027c0:	2201      	movs	r2, #1
 80027c2:	2108      	movs	r1, #8
 80027c4:	4816      	ldr	r0, [pc, #88]	; (8002820 <MX_GPIO_Init+0xf8>)
 80027c6:	f7ff ff72 	bl	80026ae <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(button_GPIO_Port, button_Pin, LL_GPIO_MODE_INPUT);
 80027ca:	2200      	movs	r2, #0
 80027cc:	2108      	movs	r1, #8
 80027ce:	4814      	ldr	r0, [pc, #80]	; (8002820 <MX_GPIO_Init+0xf8>)
 80027d0:	f7ff ff3e 	bl	8002650 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 80027d4:	2308      	movs	r3, #8
 80027d6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80027d8:	2300      	movs	r3, #0
 80027da:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80027dc:	2301      	movs	r3, #1
 80027de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80027e8:	2301      	movs	r3, #1
 80027ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80027ee:	f107 031c 	add.w	r3, r7, #28
 80027f2:	4618      	mov	r0, r3
 80027f4:	f001 fb5a 	bl	8003eac <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80027f8:	f7ff fe5a 	bl	80024b0 <__NVIC_GetPriorityGrouping>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2200      	movs	r2, #0
 8002800:	2100      	movs	r1, #0
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff feaa 	bl	800255c <NVIC_EncodePriority>
 8002808:	4603      	mov	r3, r0
 800280a:	4619      	mov	r1, r3
 800280c:	2009      	movs	r0, #9
 800280e:	f7ff fe7b 	bl	8002508 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8002812:	2009      	movs	r0, #9
 8002814:	f7ff fe5a 	bl	80024cc <__NVIC_EnableIRQ>

}
 8002818:	bf00      	nop
 800281a:	3728      	adds	r7, #40	; 0x28
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	48000400 	.word	0x48000400

08002824 <__NVIC_GetPriorityGrouping>:
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <__NVIC_GetPriorityGrouping+0x18>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	f003 0307 	and.w	r3, r3, #7
}
 8002832:	4618      	mov	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_EnableIRQ>:
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	2b00      	cmp	r3, #0
 8002850:	db0b      	blt.n	800286a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	f003 021f 	and.w	r2, r3, #31
 8002858:	4907      	ldr	r1, [pc, #28]	; (8002878 <__NVIC_EnableIRQ+0x38>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	2001      	movs	r0, #1
 8002862:	fa00 f202 	lsl.w	r2, r0, r2
 8002866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000e100 	.word	0xe000e100

0800287c <__NVIC_SetPriority>:
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	6039      	str	r1, [r7, #0]
 8002886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	2b00      	cmp	r3, #0
 800288e:	db0a      	blt.n	80028a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	b2da      	uxtb	r2, r3
 8002894:	490c      	ldr	r1, [pc, #48]	; (80028c8 <__NVIC_SetPriority+0x4c>)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	0112      	lsls	r2, r2, #4
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	440b      	add	r3, r1
 80028a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028a4:	e00a      	b.n	80028bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	4908      	ldr	r1, [pc, #32]	; (80028cc <__NVIC_SetPriority+0x50>)
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	3b04      	subs	r3, #4
 80028b4:	0112      	lsls	r2, r2, #4
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	440b      	add	r3, r1
 80028ba:	761a      	strb	r2, [r3, #24]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000e100 	.word	0xe000e100
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <NVIC_EncodePriority>:
{
 80028d0:	b480      	push	{r7}
 80028d2:	b089      	sub	sp, #36	; 0x24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f1c3 0307 	rsb	r3, r3, #7
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	bf28      	it	cs
 80028ee:	2304      	movcs	r3, #4
 80028f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3304      	adds	r3, #4
 80028f6:	2b06      	cmp	r3, #6
 80028f8:	d902      	bls.n	8002900 <NVIC_EncodePriority+0x30>
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3b03      	subs	r3, #3
 80028fe:	e000      	b.n	8002902 <NVIC_EncodePriority+0x32>
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002904:	f04f 32ff 	mov.w	r2, #4294967295
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43da      	mvns	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	401a      	ands	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002918:	f04f 31ff 	mov.w	r1, #4294967295
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	fa01 f303 	lsl.w	r3, r1, r3
 8002922:	43d9      	mvns	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002928:	4313      	orrs	r3, r2
}
 800292a:	4618      	mov	r0, r3
 800292c:	3724      	adds	r7, #36	; 0x24
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f043 0201 	orr.w	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	601a      	str	r2, [r3, #0]
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	601a      	str	r2, [r3, #0]
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	601a      	str	r2, [r3, #0]
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80029aa:	f023 0306 	bic.w	r3, r3, #6
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	431a      	orrs	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	60da      	str	r2, [r3, #12]
}
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	60da      	str	r2, [r3, #12]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f043 0204 	orr.w	r2, r3, #4
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	601a      	str	r2, [r3, #0]
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 0204 	bic.w	r2, r3, #4
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	601a      	str	r2, [r3, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d101      	bne.n	8002a3e <LL_I2C_IsActiveFlag_TXIS+0x18>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d101      	bne.n	8002a64 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	f003 0320 	and.w	r3, r3, #32
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	d101      	bne.n	8002a8a <LL_I2C_IsActiveFlag_STOP+0x18>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <LL_I2C_IsActiveFlag_STOP+0x1a>
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	f043 0220 	orr.w	r2, r3, #32
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	61da      	str	r2, [r3, #28]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	605a      	str	r2, [r3, #4]
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	0d5b      	lsrs	r3, r3, #21
 8002aee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <LL_I2C_HandleTransfer+0x48>)
 8002af4:	430b      	orrs	r3, r1
 8002af6:	43db      	mvns	r3, r3
 8002af8:	401a      	ands	r2, r3
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4319      	orrs	r1, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	041b      	lsls	r3, r3, #16
 8002b04:	4319      	orrs	r1, r3
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	4319      	orrs	r1, r3
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	03ff7bff 	.word	0x03ff7bff

08002b24 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	b2db      	uxtb	r3, r3
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	460b      	mov	r3, r1
 8002b48:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_AHB1_GRP1_EnableClock>:
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b66:	695a      	ldr	r2, [r3, #20]
 8002b68:	4907      	ldr	r1, [pc, #28]	; (8002b88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b72:	695a      	ldr	r2, [r3, #20]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4013      	ands	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	40021000 	.word	0x40021000

08002b8c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002b94:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b96:	69da      	ldr	r2, [r3, #28]
 8002b98:	4907      	ldr	r1, [pc, #28]	; (8002bb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ba2:	69da      	ldr	r2, [r3, #28]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002baa:	68fb      	ldr	r3, [r7, #12]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40021000 	.word	0x40021000

08002bbc <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08e      	sub	sp, #56	; 0x38
 8002bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002bc2:	f107 031c 	add.w	r3, r7, #28
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	605a      	str	r2, [r3, #4]
 8002bcc:	609a      	str	r2, [r3, #8]
 8002bce:	60da      	str	r2, [r3, #12]
 8002bd0:	611a      	str	r2, [r3, #16]
 8002bd2:	615a      	str	r2, [r3, #20]
 8002bd4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
 8002be4:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002be6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002bea:	f7ff ffb7 	bl	8002b5c <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002bee:	23c0      	movs	r3, #192	; 0xc0
 8002bf0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002c02:	2304      	movs	r3, #4
 8002c04:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c06:	1d3b      	adds	r3, r7, #4
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4821      	ldr	r0, [pc, #132]	; (8002c90 <MX_I2C1_Init+0xd4>)
 8002c0c:	f001 fb46 	bl	800429c <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002c10:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002c14:	f7ff ffba 	bl	8002b8c <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8002c18:	f7ff fe04 	bl	8002824 <__NVIC_GetPriorityGrouping>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2102      	movs	r1, #2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fe54 	bl	80028d0 <NVIC_EncodePriority>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	201f      	movs	r0, #31
 8002c2e:	f7ff fe25 	bl	800287c <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002c32:	201f      	movs	r0, #31
 8002c34:	f7ff fe04 	bl	8002840 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8002c38:	4816      	ldr	r0, [pc, #88]	; (8002c94 <MX_I2C1_Init+0xd8>)
 8002c3a:	f7ff ff3d 	bl	8002ab8 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8002c3e:	4815      	ldr	r0, [pc, #84]	; (8002c94 <MX_I2C1_Init+0xd8>)
 8002c40:	f7ff fec1 	bl	80029c6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002c44:	4813      	ldr	r0, [pc, #76]	; (8002c94 <MX_I2C1_Init+0xd8>)
 8002c46:	f7ff fe96 	bl	8002976 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8002c4a:	4812      	ldr	r0, [pc, #72]	; (8002c94 <MX_I2C1_Init+0xd8>)
 8002c4c:	f7ff fe83 	bl	8002956 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <MX_I2C1_Init+0xdc>)
 8002c56:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8002c60:	2302      	movs	r3, #2
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002c6c:	f107 031c 	add.w	r3, r7, #28
 8002c70:	4619      	mov	r1, r3
 8002c72:	4808      	ldr	r0, [pc, #32]	; (8002c94 <MX_I2C1_Init+0xd8>)
 8002c74:	f001 fc25 	bl	80044c2 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4805      	ldr	r0, [pc, #20]	; (8002c94 <MX_I2C1_Init+0xd8>)
 8002c7e:	f7ff fe8a 	bl	8002996 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8002c82:	4804      	ldr	r0, [pc, #16]	; (8002c94 <MX_I2C1_Init+0xd8>)
 8002c84:	f7ff fe57 	bl	8002936 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8002c88:	bf00      	nop
 8002c8a:	3738      	adds	r7, #56	; 0x38
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	48000400 	.word	0x48000400
 8002c94:	40005400 	.word	0x40005400
 8002c98:	2000090e 	.word	0x2000090e

08002c9c <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8002c9c:	b590      	push	{r4, r7, lr}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	4604      	mov	r4, r0
 8002ca4:	4608      	mov	r0, r1
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4623      	mov	r3, r4
 8002cac:	71fb      	strb	r3, [r7, #7]
 8002cae:	4603      	mov	r3, r0
 8002cb0:	71bb      	strb	r3, [r7, #6]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	717b      	strb	r3, [r7, #5]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8002cba:	793b      	ldrb	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8002cc0:	79bb      	ldrb	r3, [r7, #6]
 8002cc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cc6:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002cc8:	7979      	ldrb	r1, [r7, #5]
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <i2c_master_write+0x80>)
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	4811      	ldr	r0, [pc, #68]	; (8002d20 <i2c_master_write+0x84>)
 8002cda:	f7ff fefd 	bl	8002ad8 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8002cde:	79bb      	ldrb	r3, [r7, #6]
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	480f      	ldr	r0, [pc, #60]	; (8002d20 <i2c_master_write+0x84>)
 8002ce4:	f7ff ff2b 	bl	8002b3e <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002ce8:	e00a      	b.n	8002d00 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8002cea:	480d      	ldr	r0, [pc, #52]	; (8002d20 <i2c_master_write+0x84>)
 8002cec:	f7ff fe9b 	bl	8002a26 <LL_I2C_IsActiveFlag_TXIS>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d004      	beq.n	8002d00 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4809      	ldr	r0, [pc, #36]	; (8002d20 <i2c_master_write+0x84>)
 8002cfc:	f7ff ff1f 	bl	8002b3e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002d00:	4807      	ldr	r0, [pc, #28]	; (8002d20 <i2c_master_write+0x84>)
 8002d02:	f7ff feb6 	bl	8002a72 <LL_I2C_IsActiveFlag_STOP>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0ee      	beq.n	8002cea <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8002d0c:	4804      	ldr	r0, [pc, #16]	; (8002d20 <i2c_master_write+0x84>)
 8002d0e:	f7ff fec3 	bl	8002a98 <LL_I2C_ClearFlag_STOP>
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd90      	pop	{r4, r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	80002000 	.word	0x80002000
 8002d20:	40005400 	.word	0x40005400

08002d24 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	4608      	mov	r0, r1
 8002d2e:	4611      	mov	r1, r2
 8002d30:	461a      	mov	r2, r3
 8002d32:	4603      	mov	r3, r0
 8002d34:	70fb      	strb	r3, [r7, #3]
 8002d36:	460b      	mov	r3, r1
 8002d38:	70bb      	strb	r3, [r7, #2]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8002d3e:	4a30      	ldr	r2, [pc, #192]	; (8002e00 <i2c_master_read+0xdc>)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8002d44:	7c3b      	ldrb	r3, [r7, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8002d4a:	78bb      	ldrb	r3, [r7, #2]
 8002d4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d50:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8002d52:	4b2c      	ldr	r3, [pc, #176]	; (8002e04 <i2c_master_read+0xe0>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8002d58:	482b      	ldr	r0, [pc, #172]	; (8002e08 <i2c_master_read+0xe4>)
 8002d5a:	f7ff fe44 	bl	80029e6 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002d5e:	7879      	ldrb	r1, [r7, #1]
 8002d60:	4b2a      	ldr	r3, [pc, #168]	; (8002e0c <i2c_master_read+0xe8>)
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	4826      	ldr	r0, [pc, #152]	; (8002e08 <i2c_master_read+0xe4>)
 8002d70:	f7ff feb2 	bl	8002ad8 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002d74:	e00a      	b.n	8002d8c <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8002d76:	4824      	ldr	r0, [pc, #144]	; (8002e08 <i2c_master_read+0xe4>)
 8002d78:	f7ff fe55 	bl	8002a26 <LL_I2C_IsActiveFlag_TXIS>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d004      	beq.n	8002d8c <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8002d82:	78bb      	ldrb	r3, [r7, #2]
 8002d84:	4619      	mov	r1, r3
 8002d86:	4820      	ldr	r0, [pc, #128]	; (8002e08 <i2c_master_read+0xe4>)
 8002d88:	f7ff fed9 	bl	8002b3e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002d8c:	481e      	ldr	r0, [pc, #120]	; (8002e08 <i2c_master_read+0xe4>)
 8002d8e:	f7ff fe70 	bl	8002a72 <LL_I2C_IsActiveFlag_STOP>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0ee      	beq.n	8002d76 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8002d98:	481b      	ldr	r0, [pc, #108]	; (8002e08 <i2c_master_read+0xe4>)
 8002d9a:	f7ff fe7d 	bl	8002a98 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8002d9e:	bf00      	nop
 8002da0:	4819      	ldr	r0, [pc, #100]	; (8002e08 <i2c_master_read+0xe4>)
 8002da2:	f7ff fe66 	bl	8002a72 <LL_I2C_IsActiveFlag_STOP>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1f9      	bne.n	8002da0 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8002dac:	7879      	ldrb	r1, [r7, #1]
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	4a17      	ldr	r2, [pc, #92]	; (8002e10 <i2c_master_read+0xec>)
 8002db2:	9201      	str	r2, [sp, #4]
 8002db4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002db8:	9200      	str	r2, [sp, #0]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	4812      	ldr	r0, [pc, #72]	; (8002e08 <i2c_master_read+0xe4>)
 8002dbe:	f7ff fe8b 	bl	8002ad8 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8002dc2:	bf00      	nop
 8002dc4:	4810      	ldr	r0, [pc, #64]	; (8002e08 <i2c_master_read+0xe4>)
 8002dc6:	f7ff fe54 	bl	8002a72 <LL_I2C_IsActiveFlag_STOP>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f9      	beq.n	8002dc4 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8002dd0:	480d      	ldr	r0, [pc, #52]	; (8002e08 <i2c_master_read+0xe4>)
 8002dd2:	f7ff fe61 	bl	8002a98 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8002dd6:	480c      	ldr	r0, [pc, #48]	; (8002e08 <i2c_master_read+0xe4>)
 8002dd8:	f7ff fe15 	bl	8002a06 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <i2c_master_read+0xe4>)
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	4a09      	ldr	r2, [pc, #36]	; (8002e08 <i2c_master_read+0xe4>)
 8002de2:	f043 0310 	orr.w	r3, r3, #16
 8002de6:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8002de8:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <i2c_master_read+0xf0>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8002dee:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <i2c_master_read+0xe0>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8002df4:	4b02      	ldr	r3, [pc, #8]	; (8002e00 <i2c_master_read+0xdc>)
 8002df6:	681b      	ldr	r3, [r3, #0]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	200000b8 	.word	0x200000b8
 8002e04:	20000099 	.word	0x20000099
 8002e08:	40005400 	.word	0x40005400
 8002e0c:	80002000 	.word	0x80002000
 8002e10:	80002400 	.word	0x80002400
 8002e14:	2000009a 	.word	0x2000009a

08002e18 <I2C1_EV_IRQHandler>:
	(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
	end_of_read_flag = 0;
}

void I2C1_EV_IRQHandler(void)
{
 8002e18:	b598      	push	{r3, r4, r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
  /* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8002e1c:	4812      	ldr	r0, [pc, #72]	; (8002e68 <I2C1_EV_IRQHandler+0x50>)
 8002e1e:	f7ff fe15 	bl	8002a4c <LL_I2C_IsActiveFlag_RXNE>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d01c      	beq.n	8002e62 <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8002e28:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <I2C1_EV_IRQHandler+0x54>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <I2C1_EV_IRQHandler+0x58>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	1c59      	adds	r1, r3, #1
 8002e34:	b2c8      	uxtb	r0, r1
 8002e36:	490e      	ldr	r1, [pc, #56]	; (8002e70 <I2C1_EV_IRQHandler+0x58>)
 8002e38:	7008      	strb	r0, [r1, #0]
 8002e3a:	18d4      	adds	r4, r2, r3
 8002e3c:	480a      	ldr	r0, [pc, #40]	; (8002e68 <I2C1_EV_IRQHandler+0x50>)
 8002e3e:	f7ff fe71 	bl	8002b24 <LL_I2C_ReceiveData8>
 8002e42:	4603      	mov	r3, r0
 8002e44:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8002e46:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <I2C1_EV_IRQHandler+0x58>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b13      	cmp	r3, #19
 8002e4e:	d903      	bls.n	8002e58 <I2C1_EV_IRQHandler+0x40>
 8002e50:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <I2C1_EV_IRQHandler+0x58>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	e001      	b.n	8002e5c <I2C1_EV_IRQHandler+0x44>
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <I2C1_EV_IRQHandler+0x58>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <I2C1_EV_IRQHandler+0x5c>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	701a      	strb	r2, [r3, #0]
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002e62:	bf00      	nop
 8002e64:	bd98      	pop	{r3, r4, r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40005400 	.word	0x40005400
 8002e6c:	200000b8 	.word	0x200000b8
 8002e70:	2000009a 	.word	0x2000009a
 8002e74:	20000099 	.word	0x20000099

08002e78 <__NVIC_SetPriorityGrouping>:
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e94:	4013      	ands	r3, r2
 8002e96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eaa:	4a04      	ldr	r2, [pc, #16]	; (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	60d3      	str	r3, [r2, #12]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <LL_RCC_HSI_Enable+0x1c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a04      	ldr	r2, [pc, #16]	; (8002edc <LL_RCC_HSI_Enable+0x1c>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6013      	str	r3, [r2, #0]
}
 8002ed0:	bf00      	nop
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000

08002ee0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002ee4:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <LL_RCC_HSI_IsReady+0x20>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	40021000 	.word	0x40021000

08002f04 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002f0c:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4904      	ldr	r1, [pc, #16]	; (8002f2c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000

08002f30 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <LL_RCC_SetSysClkSource+0x24>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f023 0203 	bic.w	r2, r3, #3
 8002f40:	4904      	ldr	r1, [pc, #16]	; (8002f54 <LL_RCC_SetSysClkSource+0x24>)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	40021000 	.word	0x40021000

08002f58 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <LL_RCC_GetSysClkSource+0x18>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 030c 	and.w	r3, r3, #12
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000

08002f74 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <LL_RCC_SetAHBPrescaler+0x24>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f84:	4904      	ldr	r1, [pc, #16]	; (8002f98 <LL_RCC_SetAHBPrescaler+0x24>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	40021000 	.word	0x40021000

08002f9c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fac:	4904      	ldr	r1, [pc, #16]	; (8002fc0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	40021000 	.word	0x40021000

08002fc4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002fcc:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fd4:	4904      	ldr	r1, [pc, #16]	; (8002fe8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	40021000 	.word	0x40021000

08002fec <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <LL_RCC_SetI2CClockSource+0x2c>)
 8002ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	0e1b      	lsrs	r3, r3, #24
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	401a      	ands	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003006:	4904      	ldr	r1, [pc, #16]	; (8003018 <LL_RCC_SetI2CClockSource+0x2c>)
 8003008:	4313      	orrs	r3, r2
 800300a:	630b      	str	r3, [r1, #48]	; 0x30
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	40021000 	.word	0x40021000

0800301c <LL_APB1_GRP1_EnableClock>:
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003024:	4b08      	ldr	r3, [pc, #32]	; (8003048 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	4907      	ldr	r1, [pc, #28]	; (8003048 <LL_APB1_GRP1_EnableClock+0x2c>)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4313      	orrs	r3, r2
 800302e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003032:	69da      	ldr	r2, [r3, #28]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4013      	ands	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800303a:	68fb      	ldr	r3, [r7, #12]
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	40021000 	.word	0x40021000

0800304c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003056:	699a      	ldr	r2, [r3, #24]
 8003058:	4907      	ldr	r1, [pc, #28]	; (8003078 <LL_APB2_GRP1_EnableClock+0x2c>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4313      	orrs	r3, r2
 800305e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003062:	699a      	ldr	r2, [r3, #24]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4013      	ands	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800306a:	68fb      	ldr	r3, [r7, #12]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	40021000 	.word	0x40021000

0800307c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <LL_FLASH_SetLatency+0x24>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f023 0207 	bic.w	r2, r3, #7
 800308c:	4904      	ldr	r1, [pc, #16]	; (80030a0 <LL_FLASH_SetLatency+0x24>)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	40022000 	.word	0x40022000

080030a4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80030a8:	4b04      	ldr	r3, [pc, #16]	; (80030bc <LL_FLASH_GetLatency+0x18>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0307 	and.w	r3, r3, #7
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40022000 	.word	0x40022000

080030c0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f043 0201 	orr.w	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	601a      	str	r2, [r3, #0]
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f043 0201 	orr.w	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	60da      	str	r2, [r3, #12]
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8003104:	2001      	movs	r0, #1
 8003106:	f7ff ffa1 	bl	800304c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800310a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800310e:	f7ff ff85 	bl	800301c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003112:	2003      	movs	r0, #3
 8003114:	f7ff feb0 	bl	8002e78 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003118:	f000 f836 	bl	8003188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800311c:	f7ff fb04 	bl	8002728 <MX_GPIO_Init>
  MX_TIM2_Init();
 8003120:	f000 fd0a 	bl	8003b38 <MX_TIM2_Init>
  MX_I2C1_Init();
 8003124:	f7ff fd4a 	bl	8002bbc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //LL_TIM_EnableIT_CC2(TIM2);
  LL_TIM_EnableIT_UPDATE(TIM2);
 8003128:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800312c:	f7ff ffd8 	bl	80030e0 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 8003130:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003134:	f7ff ffc4 	bl	80030c0 <LL_TIM_EnableCounter>

  lsm6ds0_init();
 8003138:	f7fd fef4 	bl	8000f24 <lsm6ds0_init>
  temperature_init();
 800313c:	f7fd ff6c 	bl	8001018 <temperature_init>
  humidity_init();
 8003140:	f7fd fe36 	bl	8000db0 <humidity_init>
  pressure_init();
 8003144:	f7fd fd9a 	bl	8000c7c <pressure_init>

  resetAllDigits();
 8003148:	f7fe fa9a 	bl	8001680 <resetAllDigits>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //lsm6ds0_get_acc(acc, (acc+1), (acc+2));
	  if(mode == 0){
 800314c:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <main+0x84>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d102      	bne.n	800315a <main+0x5a>
		  printTemperature();
 8003154:	f000 f84e 	bl	80031f4 <printTemperature>
 8003158:	e7f8      	b.n	800314c <main+0x4c>
	  }
	  else if(mode == 1){
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <main+0x84>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d102      	bne.n	8003168 <main+0x68>
		  printHumidity();
 8003162:	f000 f8d3 	bl	800330c <printHumidity>
 8003166:	e7f1      	b.n	800314c <main+0x4c>
	  }
	  else if(mode == 2){
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <main+0x84>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d102      	bne.n	8003176 <main+0x76>
		  printPressure();
 8003170:	f000 f8fe 	bl	8003370 <printPressure>
 8003174:	e7ea      	b.n	800314c <main+0x4c>
	  }
	  else if(mode == 3){
 8003176:	4b03      	ldr	r3, [pc, #12]	; (8003184 <main+0x84>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b03      	cmp	r3, #3
 800317c:	d1e6      	bne.n	800314c <main+0x4c>
		  printAltitude();
 800317e:	f000 f92f 	bl	80033e0 <printAltitude>
	  if(mode == 0){
 8003182:	e7e3      	b.n	800314c <main+0x4c>
 8003184:	2000009b 	.word	0x2000009b

08003188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800318c:	2000      	movs	r0, #0
 800318e:	f7ff ff75 	bl	800307c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8003192:	bf00      	nop
 8003194:	f7ff ff86 	bl	80030a4 <LL_FLASH_GetLatency>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1fa      	bne.n	8003194 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800319e:	f7ff fe8f 	bl	8002ec0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80031a2:	bf00      	nop
 80031a4:	f7ff fe9c 	bl	8002ee0 <LL_RCC_HSI_IsReady>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d1fa      	bne.n	80031a4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80031ae:	2010      	movs	r0, #16
 80031b0:	f7ff fea8 	bl	8002f04 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80031b4:	2000      	movs	r0, #0
 80031b6:	f7ff fedd 	bl	8002f74 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7ff feee 	bl	8002f9c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80031c0:	2000      	movs	r0, #0
 80031c2:	f7ff feff 	bl	8002fc4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f7ff feb2 	bl	8002f30 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80031cc:	bf00      	nop
 80031ce:	f7ff fec3 	bl	8002f58 <LL_RCC_GetSysClkSource>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1fa      	bne.n	80031ce <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80031d8:	4805      	ldr	r0, [pc, #20]	; (80031f0 <SystemClock_Config+0x68>)
 80031da:	f001 fdc3 	bl	8004d64 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80031de:	4804      	ldr	r0, [pc, #16]	; (80031f0 <SystemClock_Config+0x68>)
 80031e0:	f001 fdf4 	bl	8004dcc <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80031e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80031e8:	f7ff ff00 	bl	8002fec <LL_RCC_SetI2CClockSource>
}
 80031ec:	bf00      	nop
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	007a1200 	.word	0x007a1200

080031f4 <printTemperature>:

/* USER CODE BEGIN 4 */
void printTemperature(void){
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
	char valueString[15];
	int16_t temperature = HTS221_Get_Temperature();
 80031fa:	f7fd ff2e 	bl	800105a <HTS221_Get_Temperature>
 80031fe:	4603      	mov	r3, r0
 8003200:	82fb      	strh	r3, [r7, #22]
	sprintf(valueString, "%d", temperature);
 8003202:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003206:	1d3b      	adds	r3, r7, #4
 8003208:	493a      	ldr	r1, [pc, #232]	; (80032f4 <printTemperature+0x100>)
 800320a:	4618      	mov	r0, r3
 800320c:	f001 fe44 	bl	8004e98 <siprintf>
	memset(displayText, '\0', 15);
 8003210:	220f      	movs	r2, #15
 8003212:	2100      	movs	r1, #0
 8003214:	4838      	ldr	r0, [pc, #224]	; (80032f8 <printTemperature+0x104>)
 8003216:	f001 fe37 	bl	8004e88 <memset>
	strcat(displayText, "tEMP_");
 800321a:	4837      	ldr	r0, [pc, #220]	; (80032f8 <printTemperature+0x104>)
 800321c:	f7fc ffd8 	bl	80001d0 <strlen>
 8003220:	4603      	mov	r3, r0
 8003222:	461a      	mov	r2, r3
 8003224:	4b34      	ldr	r3, [pc, #208]	; (80032f8 <printTemperature+0x104>)
 8003226:	4413      	add	r3, r2
 8003228:	4a34      	ldr	r2, [pc, #208]	; (80032fc <printTemperature+0x108>)
 800322a:	6810      	ldr	r0, [r2, #0]
 800322c:	6018      	str	r0, [r3, #0]
 800322e:	8892      	ldrh	r2, [r2, #4]
 8003230:	809a      	strh	r2, [r3, #4]
	if(valueString[0]=='-'){
 8003232:	793b      	ldrb	r3, [r7, #4]
 8003234:	2b2d      	cmp	r3, #45	; 0x2d
 8003236:	d119      	bne.n	800326c <printTemperature+0x78>
		strncat(displayText, valueString, 3);
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	2203      	movs	r2, #3
 800323c:	4619      	mov	r1, r3
 800323e:	482e      	ldr	r0, [pc, #184]	; (80032f8 <printTemperature+0x104>)
 8003240:	f001 fe59 	bl	8004ef6 <strncat>
		strcat(displayText, ".");
 8003244:	482c      	ldr	r0, [pc, #176]	; (80032f8 <printTemperature+0x104>)
 8003246:	f7fc ffc3 	bl	80001d0 <strlen>
 800324a:	4603      	mov	r3, r0
 800324c:	461a      	mov	r2, r3
 800324e:	4b2a      	ldr	r3, [pc, #168]	; (80032f8 <printTemperature+0x104>)
 8003250:	4413      	add	r3, r2
 8003252:	492b      	ldr	r1, [pc, #172]	; (8003300 <printTemperature+0x10c>)
 8003254:	461a      	mov	r2, r3
 8003256:	460b      	mov	r3, r1
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	8013      	strh	r3, [r2, #0]
		strncat(displayText, &valueString[3],1);
 800325c:	1d3b      	adds	r3, r7, #4
 800325e:	3303      	adds	r3, #3
 8003260:	2201      	movs	r2, #1
 8003262:	4619      	mov	r1, r3
 8003264:	4824      	ldr	r0, [pc, #144]	; (80032f8 <printTemperature+0x104>)
 8003266:	f001 fe46 	bl	8004ef6 <strncat>
 800326a:	e03c      	b.n	80032e6 <printTemperature+0xf2>
	}
	else if(temperature > 999){
 800326c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003270:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003274:	db0c      	blt.n	8003290 <printTemperature+0x9c>
		strcat(displayText, "99.9");
 8003276:	4820      	ldr	r0, [pc, #128]	; (80032f8 <printTemperature+0x104>)
 8003278:	f7fc ffaa 	bl	80001d0 <strlen>
 800327c:	4603      	mov	r3, r0
 800327e:	461a      	mov	r2, r3
 8003280:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <printTemperature+0x104>)
 8003282:	4413      	add	r3, r2
 8003284:	4a1f      	ldr	r2, [pc, #124]	; (8003304 <printTemperature+0x110>)
 8003286:	6810      	ldr	r0, [r2, #0]
 8003288:	6018      	str	r0, [r3, #0]
 800328a:	7912      	ldrb	r2, [r2, #4]
 800328c:	711a      	strb	r2, [r3, #4]
 800328e:	e02a      	b.n	80032e6 <printTemperature+0xf2>
	}
	else if(temperature < (-999)){
 8003290:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003294:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003298:	dc0c      	bgt.n	80032b4 <printTemperature+0xc0>
		strcat(displayText, "-99.9");
 800329a:	4817      	ldr	r0, [pc, #92]	; (80032f8 <printTemperature+0x104>)
 800329c:	f7fc ff98 	bl	80001d0 <strlen>
 80032a0:	4603      	mov	r3, r0
 80032a2:	461a      	mov	r2, r3
 80032a4:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <printTemperature+0x104>)
 80032a6:	4413      	add	r3, r2
 80032a8:	4a17      	ldr	r2, [pc, #92]	; (8003308 <printTemperature+0x114>)
 80032aa:	6810      	ldr	r0, [r2, #0]
 80032ac:	6018      	str	r0, [r3, #0]
 80032ae:	8892      	ldrh	r2, [r2, #4]
 80032b0:	809a      	strh	r2, [r3, #4]
 80032b2:	e018      	b.n	80032e6 <printTemperature+0xf2>
	}
	else{
		strncat(displayText, valueString, 2);
 80032b4:	1d3b      	adds	r3, r7, #4
 80032b6:	2202      	movs	r2, #2
 80032b8:	4619      	mov	r1, r3
 80032ba:	480f      	ldr	r0, [pc, #60]	; (80032f8 <printTemperature+0x104>)
 80032bc:	f001 fe1b 	bl	8004ef6 <strncat>
		strcat(displayText, ".");
 80032c0:	480d      	ldr	r0, [pc, #52]	; (80032f8 <printTemperature+0x104>)
 80032c2:	f7fc ff85 	bl	80001d0 <strlen>
 80032c6:	4603      	mov	r3, r0
 80032c8:	461a      	mov	r2, r3
 80032ca:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <printTemperature+0x104>)
 80032cc:	4413      	add	r3, r2
 80032ce:	490c      	ldr	r1, [pc, #48]	; (8003300 <printTemperature+0x10c>)
 80032d0:	461a      	mov	r2, r3
 80032d2:	460b      	mov	r3, r1
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	8013      	strh	r3, [r2, #0]
		strncat(displayText, &valueString[2],1);
 80032d8:	1d3b      	adds	r3, r7, #4
 80032da:	3302      	adds	r3, #2
 80032dc:	2201      	movs	r2, #1
 80032de:	4619      	mov	r1, r3
 80032e0:	4805      	ldr	r0, [pc, #20]	; (80032f8 <printTemperature+0x104>)
 80032e2:	f001 fe08 	bl	8004ef6 <strncat>
	}
	setDisplayText(displayText);
 80032e6:	4804      	ldr	r0, [pc, #16]	; (80032f8 <printTemperature+0x104>)
 80032e8:	f7fd ff56 	bl	8001198 <setDisplayText>
}
 80032ec:	bf00      	nop
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	08008298 	.word	0x08008298
 80032f8:	200000c8 	.word	0x200000c8
 80032fc:	0800829c 	.word	0x0800829c
 8003300:	080082a4 	.word	0x080082a4
 8003304:	080082a8 	.word	0x080082a8
 8003308:	080082b0 	.word	0x080082b0

0800330c <printHumidity>:

void printHumidity(void){
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
	char valueString[15];
	int16_t humidity = HTS221_Get_Humidity();
 8003312:	f7fd fd6e 	bl	8000df2 <HTS221_Get_Humidity>
 8003316:	4603      	mov	r3, r0
 8003318:	82fb      	strh	r3, [r7, #22]
	sprintf(valueString, "%d", humidity);
 800331a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	4910      	ldr	r1, [pc, #64]	; (8003364 <printHumidity+0x58>)
 8003322:	4618      	mov	r0, r3
 8003324:	f001 fdb8 	bl	8004e98 <siprintf>
	memset(displayText, '\0', 15);
 8003328:	220f      	movs	r2, #15
 800332a:	2100      	movs	r1, #0
 800332c:	480e      	ldr	r0, [pc, #56]	; (8003368 <printHumidity+0x5c>)
 800332e:	f001 fdab 	bl	8004e88 <memset>
	strcat(displayText, "HUM_");
 8003332:	480d      	ldr	r0, [pc, #52]	; (8003368 <printHumidity+0x5c>)
 8003334:	f7fc ff4c 	bl	80001d0 <strlen>
 8003338:	4603      	mov	r3, r0
 800333a:	461a      	mov	r2, r3
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <printHumidity+0x5c>)
 800333e:	4413      	add	r3, r2
 8003340:	4a0a      	ldr	r2, [pc, #40]	; (800336c <printHumidity+0x60>)
 8003342:	6810      	ldr	r0, [r2, #0]
 8003344:	6018      	str	r0, [r3, #0]
 8003346:	7912      	ldrb	r2, [r2, #4]
 8003348:	711a      	strb	r2, [r3, #4]
	strncat(displayText, valueString, 2);
 800334a:	1d3b      	adds	r3, r7, #4
 800334c:	2202      	movs	r2, #2
 800334e:	4619      	mov	r1, r3
 8003350:	4805      	ldr	r0, [pc, #20]	; (8003368 <printHumidity+0x5c>)
 8003352:	f001 fdd0 	bl	8004ef6 <strncat>
	setDisplayText(displayText);
 8003356:	4804      	ldr	r0, [pc, #16]	; (8003368 <printHumidity+0x5c>)
 8003358:	f7fd ff1e 	bl	8001198 <setDisplayText>
}
 800335c:	bf00      	nop
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	08008298 	.word	0x08008298
 8003368:	200000c8 	.word	0x200000c8
 800336c:	080082b8 	.word	0x080082b8

08003370 <printPressure>:

void printPressure(void){
 8003370:	b5b0      	push	{r4, r5, r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
	char valueString[15];
	float pressure = 0;
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	617b      	str	r3, [r7, #20]
	pressure = (float)get_pressure();
 800337c:	f7fd fc9c 	bl	8000cb8 <get_pressure>
 8003380:	ed87 0a05 	vstr	s0, [r7, #20]
	gcvt(pressure, 6, valueString);
 8003384:	6978      	ldr	r0, [r7, #20]
 8003386:	f7fd f8df 	bl	8000548 <__aeabi_f2d>
 800338a:	4604      	mov	r4, r0
 800338c:	460d      	mov	r5, r1
 800338e:	1d3b      	adds	r3, r7, #4
 8003390:	4619      	mov	r1, r3
 8003392:	2006      	movs	r0, #6
 8003394:	ec45 4b10 	vmov	d0, r4, r5
 8003398:	f001 fd28 	bl	8004dec <gcvt>
	memset(displayText, '\0', 15);
 800339c:	220f      	movs	r2, #15
 800339e:	2100      	movs	r1, #0
 80033a0:	480d      	ldr	r0, [pc, #52]	; (80033d8 <printPressure+0x68>)
 80033a2:	f001 fd71 	bl	8004e88 <memset>
	strcat(displayText, "bar_");
 80033a6:	480c      	ldr	r0, [pc, #48]	; (80033d8 <printPressure+0x68>)
 80033a8:	f7fc ff12 	bl	80001d0 <strlen>
 80033ac:	4603      	mov	r3, r0
 80033ae:	461a      	mov	r2, r3
 80033b0:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <printPressure+0x68>)
 80033b2:	4413      	add	r3, r2
 80033b4:	4a09      	ldr	r2, [pc, #36]	; (80033dc <printPressure+0x6c>)
 80033b6:	6810      	ldr	r0, [r2, #0]
 80033b8:	6018      	str	r0, [r3, #0]
 80033ba:	7912      	ldrb	r2, [r2, #4]
 80033bc:	711a      	strb	r2, [r3, #4]
	strcat(displayText, valueString);
 80033be:	1d3b      	adds	r3, r7, #4
 80033c0:	4619      	mov	r1, r3
 80033c2:	4805      	ldr	r0, [pc, #20]	; (80033d8 <printPressure+0x68>)
 80033c4:	f001 fd88 	bl	8004ed8 <strcat>
	setDisplayText(displayText);
 80033c8:	4803      	ldr	r0, [pc, #12]	; (80033d8 <printPressure+0x68>)
 80033ca:	f7fd fee5 	bl	8001198 <setDisplayText>
}
 80033ce:	bf00      	nop
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bdb0      	pop	{r4, r5, r7, pc}
 80033d6:	bf00      	nop
 80033d8:	200000c8 	.word	0x200000c8
 80033dc:	080082c0 	.word	0x080082c0

080033e0 <printAltitude>:

void printAltitude(void){
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08a      	sub	sp, #40	; 0x28
 80033e4:	af00      	add	r7, sp, #0
	char valueString[15];
	int16_t temperature = HTS221_Get_Temperature();
 80033e6:	f7fd fe38 	bl	800105a <HTS221_Get_Temperature>
 80033ea:	4603      	mov	r3, r0
 80033ec:	84fb      	strh	r3, [r7, #38]	; 0x26
	float pressure = (float)get_pressure();
 80033ee:	f7fd fc63 	bl	8000cb8 <get_pressure>
 80033f2:	ed87 0a08 	vstr	s0, [r7, #32]

	float tempVar1 = powf((1013.25/pressure),1/5.257)-1;
 80033f6:	eddf 6a68 	vldr	s13, [pc, #416]	; 8003598 <printAltitude+0x1b8>
 80033fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80033fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003402:	eddf 0a66 	vldr	s1, [pc, #408]	; 800359c <printAltitude+0x1bc>
 8003406:	eeb0 0a47 	vmov.f32	s0, s14
 800340a:	f004 faf5 	bl	80079f8 <powf>
 800340e:	eef0 7a40 	vmov.f32	s15, s0
 8003412:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003416:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800341a:	edc7 7a07 	vstr	s15, [r7, #28]
	float tempVar2 = (float)temperature/10+273.15;
 800341e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800342a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800342e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003432:	ee16 0a90 	vmov	r0, s13
 8003436:	f7fd f887 	bl	8000548 <__aeabi_f2d>
 800343a:	a353      	add	r3, pc, #332	; (adr r3, 8003588 <printAltitude+0x1a8>)
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003440:	f7fc ff24 	bl	800028c <__adddf3>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4610      	mov	r0, r2
 800344a:	4619      	mov	r1, r3
 800344c:	f7fd fb96 	bl	8000b7c <__aeabi_d2f>
 8003450:	4603      	mov	r3, r0
 8003452:	61bb      	str	r3, [r7, #24]
	float altitude = (tempVar1*tempVar2)/0.0065;
 8003454:	ed97 7a07 	vldr	s14, [r7, #28]
 8003458:	edd7 7a06 	vldr	s15, [r7, #24]
 800345c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003460:	ee17 0a90 	vmov	r0, s15
 8003464:	f7fd f870 	bl	8000548 <__aeabi_f2d>
 8003468:	a349      	add	r3, pc, #292	; (adr r3, 8003590 <printAltitude+0x1b0>)
 800346a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346e:	f7fd f9ed 	bl	800084c <__aeabi_ddiv>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4610      	mov	r0, r2
 8003478:	4619      	mov	r1, r3
 800347a:	f7fd fb7f 	bl	8000b7c <__aeabi_d2f>
 800347e:	4603      	mov	r3, r0
 8003480:	617b      	str	r3, [r7, #20]

	memset(displayText, '\0', 15);
 8003482:	220f      	movs	r2, #15
 8003484:	2100      	movs	r1, #0
 8003486:	4846      	ldr	r0, [pc, #280]	; (80035a0 <printAltitude+0x1c0>)
 8003488:	f001 fcfe 	bl	8004e88 <memset>
	int altitudeInt = (int)floor(10*altitude);
 800348c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003490:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003498:	ee17 0a90 	vmov	r0, s15
 800349c:	f7fd f854 	bl	8000548 <__aeabi_f2d>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	ec43 2b10 	vmov	d0, r2, r3
 80034a8:	f004 fa26 	bl	80078f8 <floor>
 80034ac:	ec53 2b10 	vmov	r2, r3, d0
 80034b0:	4610      	mov	r0, r2
 80034b2:	4619      	mov	r1, r3
 80034b4:	f7fd fb3a 	bl	8000b2c <__aeabi_d2iz>
 80034b8:	4603      	mov	r3, r0
 80034ba:	613b      	str	r3, [r7, #16]
	if(altitudeInt>=0){
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	db2b      	blt.n	800351a <printAltitude+0x13a>
		sprintf(valueString, "%05d", altitudeInt);
 80034c2:	463b      	mov	r3, r7
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4937      	ldr	r1, [pc, #220]	; (80035a4 <printAltitude+0x1c4>)
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 fce5 	bl	8004e98 <siprintf>
		strcat(displayText, "ALt_");
 80034ce:	4834      	ldr	r0, [pc, #208]	; (80035a0 <printAltitude+0x1c0>)
 80034d0:	f7fc fe7e 	bl	80001d0 <strlen>
 80034d4:	4603      	mov	r3, r0
 80034d6:	461a      	mov	r2, r3
 80034d8:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <printAltitude+0x1c0>)
 80034da:	4413      	add	r3, r2
 80034dc:	4a32      	ldr	r2, [pc, #200]	; (80035a8 <printAltitude+0x1c8>)
 80034de:	6810      	ldr	r0, [r2, #0]
 80034e0:	6018      	str	r0, [r3, #0]
 80034e2:	7912      	ldrb	r2, [r2, #4]
 80034e4:	711a      	strb	r2, [r3, #4]
		strncat(displayText, valueString, 4);
 80034e6:	463b      	mov	r3, r7
 80034e8:	2204      	movs	r2, #4
 80034ea:	4619      	mov	r1, r3
 80034ec:	482c      	ldr	r0, [pc, #176]	; (80035a0 <printAltitude+0x1c0>)
 80034ee:	f001 fd02 	bl	8004ef6 <strncat>
		strcat(displayText, ".");
 80034f2:	482b      	ldr	r0, [pc, #172]	; (80035a0 <printAltitude+0x1c0>)
 80034f4:	f7fc fe6c 	bl	80001d0 <strlen>
 80034f8:	4603      	mov	r3, r0
 80034fa:	461a      	mov	r2, r3
 80034fc:	4b28      	ldr	r3, [pc, #160]	; (80035a0 <printAltitude+0x1c0>)
 80034fe:	4413      	add	r3, r2
 8003500:	492a      	ldr	r1, [pc, #168]	; (80035ac <printAltitude+0x1cc>)
 8003502:	461a      	mov	r2, r3
 8003504:	460b      	mov	r3, r1
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	8013      	strh	r3, [r2, #0]
		strncat(displayText, &valueString[4],1);
 800350a:	463b      	mov	r3, r7
 800350c:	3304      	adds	r3, #4
 800350e:	2201      	movs	r2, #1
 8003510:	4619      	mov	r1, r3
 8003512:	4823      	ldr	r0, [pc, #140]	; (80035a0 <printAltitude+0x1c0>)
 8003514:	f001 fcef 	bl	8004ef6 <strncat>
 8003518:	e02d      	b.n	8003576 <printAltitude+0x196>
	}
	else if(altitudeInt<0){
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2b00      	cmp	r3, #0
 800351e:	da2a      	bge.n	8003576 <printAltitude+0x196>
		sprintf(valueString, "%06d", altitudeInt);
 8003520:	463b      	mov	r3, r7
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4922      	ldr	r1, [pc, #136]	; (80035b0 <printAltitude+0x1d0>)
 8003526:	4618      	mov	r0, r3
 8003528:	f001 fcb6 	bl	8004e98 <siprintf>
		strcat(displayText, "ALt_");
 800352c:	481c      	ldr	r0, [pc, #112]	; (80035a0 <printAltitude+0x1c0>)
 800352e:	f7fc fe4f 	bl	80001d0 <strlen>
 8003532:	4603      	mov	r3, r0
 8003534:	461a      	mov	r2, r3
 8003536:	4b1a      	ldr	r3, [pc, #104]	; (80035a0 <printAltitude+0x1c0>)
 8003538:	4413      	add	r3, r2
 800353a:	4a1b      	ldr	r2, [pc, #108]	; (80035a8 <printAltitude+0x1c8>)
 800353c:	6810      	ldr	r0, [r2, #0]
 800353e:	6018      	str	r0, [r3, #0]
 8003540:	7912      	ldrb	r2, [r2, #4]
 8003542:	711a      	strb	r2, [r3, #4]
		strncat(displayText, valueString, 5);
 8003544:	463b      	mov	r3, r7
 8003546:	2205      	movs	r2, #5
 8003548:	4619      	mov	r1, r3
 800354a:	4815      	ldr	r0, [pc, #84]	; (80035a0 <printAltitude+0x1c0>)
 800354c:	f001 fcd3 	bl	8004ef6 <strncat>
		strcat(displayText, ".");
 8003550:	4813      	ldr	r0, [pc, #76]	; (80035a0 <printAltitude+0x1c0>)
 8003552:	f7fc fe3d 	bl	80001d0 <strlen>
 8003556:	4603      	mov	r3, r0
 8003558:	461a      	mov	r2, r3
 800355a:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <printAltitude+0x1c0>)
 800355c:	4413      	add	r3, r2
 800355e:	4913      	ldr	r1, [pc, #76]	; (80035ac <printAltitude+0x1cc>)
 8003560:	461a      	mov	r2, r3
 8003562:	460b      	mov	r3, r1
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	8013      	strh	r3, [r2, #0]
		strncat(displayText, &valueString[5],1);
 8003568:	463b      	mov	r3, r7
 800356a:	3305      	adds	r3, #5
 800356c:	2201      	movs	r2, #1
 800356e:	4619      	mov	r1, r3
 8003570:	480b      	ldr	r0, [pc, #44]	; (80035a0 <printAltitude+0x1c0>)
 8003572:	f001 fcc0 	bl	8004ef6 <strncat>
	}
	setDisplayText(displayText);
 8003576:	480a      	ldr	r0, [pc, #40]	; (80035a0 <printAltitude+0x1c0>)
 8003578:	f7fd fe0e 	bl	8001198 <setDisplayText>
}
 800357c:	bf00      	nop
 800357e:	3728      	adds	r7, #40	; 0x28
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	f3af 8000 	nop.w
 8003588:	66666666 	.word	0x66666666
 800358c:	40711266 	.word	0x40711266
 8003590:	76c8b439 	.word	0x76c8b439
 8003594:	3f7a9fbe 	.word	0x3f7a9fbe
 8003598:	447d5000 	.word	0x447d5000
 800359c:	3e42c9b4 	.word	0x3e42c9b4
 80035a0:	200000c8 	.word	0x200000c8
 80035a4:	080082c8 	.word	0x080082c8
 80035a8:	080082d0 	.word	0x080082d0
 80035ac:	080082a4 	.word	0x080082a4
 80035b0:	080082d8 	.word	0x080082d8

080035b4 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80035bc:	4b07      	ldr	r3, [pc, #28]	; (80035dc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4013      	ands	r3, r2
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	bf0c      	ite	eq
 80035ca:	2301      	moveq	r3, #1
 80035cc:	2300      	movne	r3, #0
 80035ce:	b2db      	uxtb	r3, r3
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	40010400 	.word	0x40010400

080035e0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80035e8:	4a04      	ldr	r2, [pc, #16]	; (80035fc <LL_EXTI_ClearFlag_0_31+0x1c>)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6153      	str	r3, [r2, #20]
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40010400 	.word	0x40010400

08003600 <LL_TIM_ClearFlag_UPDATE>:
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f06f 0201 	mvn.w	r2, #1
 800360e:	611a      	str	r2, [r3, #16]
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <LL_TIM_IsActiveFlag_UPDATE>:
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003642:	b480      	push	{r7}
 8003644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003646:	e7fe      	b.n	8003646 <NMI_Handler+0x4>

08003648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800364c:	e7fe      	b.n	800364c <HardFault_Handler+0x4>

0800364e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800364e:	b480      	push	{r7}
 8003650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003652:	e7fe      	b.n	8003652 <MemManage_Handler+0x4>

08003654 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003658:	e7fe      	b.n	8003658 <BusFault_Handler+0x4>

0800365a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800365a:	b480      	push	{r7}
 800365c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800365e:	e7fe      	b.n	800365e <UsageFault_Handler+0x4>

08003660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800366e:	b480      	push	{r7}
 8003670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003672:	bf00      	nop
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003680:	bf00      	nop
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800368a:	b480      	push	{r7}
 800368c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800368e:	bf00      	nop
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 800369c:	2008      	movs	r0, #8
 800369e:	f7ff ff89 	bl	80035b4 <LL_EXTI_IsActiveFlag_0_31>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01d      	beq.n	80036e4 <EXTI3_IRQHandler+0x4c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 80036a8:	2008      	movs	r0, #8
 80036aa:	f7ff ff99 	bl	80035e0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_3 */
    if(mode == 3){
 80036ae:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <EXTI3_IRQHandler+0x50>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d106      	bne.n	80036c4 <EXTI3_IRQHandler+0x2c>
		mode = 0;
 80036b6:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <EXTI3_IRQHandler+0x50>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
		displayTextPos = 0;
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <EXTI3_IRQHandler+0x54>)
 80036be:	2200      	movs	r2, #0
 80036c0:	701a      	strb	r2, [r3, #0]
 80036c2:	e008      	b.n	80036d6 <EXTI3_IRQHandler+0x3e>
	}
    else{
		mode++;
 80036c4:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <EXTI3_IRQHandler+0x50>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	3301      	adds	r3, #1
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <EXTI3_IRQHandler+0x50>)
 80036ce:	701a      	strb	r2, [r3, #0]
		displayTextPos = 0;
 80036d0:	4b06      	ldr	r3, [pc, #24]	; (80036ec <EXTI3_IRQHandler+0x54>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	701a      	strb	r2, [r3, #0]
	}
	LL_mDelay(500);
 80036d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80036da:	f001 fb51 	bl	8004d80 <LL_mDelay>
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 80036de:	2008      	movs	r0, #8
 80036e0:	f7ff ff7e 	bl	80035e0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80036e4:	bf00      	nop
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	2000009b 	.word	0x2000009b
 80036ec:	20000094 	.word	0x20000094

080036f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 80036f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80036f8:	f7ff ff90 	bl	800361c <LL_TIM_IsActiveFlag_UPDATE>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <TIM2_IRQHandler+0x16>
		updateDisplay();
 8003702:	f7fd fd5d 	bl	80011c0 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM2);
 8003706:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800370a:	f7ff ff79 	bl	8003600 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}

08003712 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003712:	b480      	push	{r7}
 8003714:	af00      	add	r7, sp, #0
	return 1;
 8003716:	2301      	movs	r3, #1
}
 8003718:	4618      	mov	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <_kill>:

int _kill(int pid, int sig)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800372c:	f001 fb82 	bl	8004e34 <__errno>
 8003730:	4603      	mov	r3, r0
 8003732:	2216      	movs	r2, #22
 8003734:	601a      	str	r2, [r3, #0]
	return -1;
 8003736:	f04f 33ff 	mov.w	r3, #4294967295
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <_exit>:

void _exit (int status)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800374a:	f04f 31ff 	mov.w	r1, #4294967295
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff ffe7 	bl	8003722 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003754:	e7fe      	b.n	8003754 <_exit+0x12>

08003756 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b086      	sub	sp, #24
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	e00a      	b.n	800377e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003768:	f3af 8000 	nop.w
 800376c:	4601      	mov	r1, r0
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	60ba      	str	r2, [r7, #8]
 8003774:	b2ca      	uxtb	r2, r1
 8003776:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	3301      	adds	r3, #1
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	429a      	cmp	r2, r3
 8003784:	dbf0      	blt.n	8003768 <_read+0x12>
	}

return len;
 8003786:	687b      	ldr	r3, [r7, #4]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	e009      	b.n	80037b6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	60ba      	str	r2, [r7, #8]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	3301      	adds	r3, #1
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	dbf1      	blt.n	80037a2 <_write+0x12>
	}
	return len;
 80037be:	687b      	ldr	r3, [r7, #4]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <_close>:

int _close(int file)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
	return -1;
 80037d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037f0:	605a      	str	r2, [r3, #4]
	return 0;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <_isatty>:

int _isatty(int file)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	return 1;
 8003808:	2301      	movs	r3, #1
}
 800380a:	4618      	mov	r0, r3
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003816:	b480      	push	{r7}
 8003818:	b085      	sub	sp, #20
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
	return 0;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003838:	4a14      	ldr	r2, [pc, #80]	; (800388c <_sbrk+0x5c>)
 800383a:	4b15      	ldr	r3, [pc, #84]	; (8003890 <_sbrk+0x60>)
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003844:	4b13      	ldr	r3, [pc, #76]	; (8003894 <_sbrk+0x64>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d102      	bne.n	8003852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800384c:	4b11      	ldr	r3, [pc, #68]	; (8003894 <_sbrk+0x64>)
 800384e:	4a12      	ldr	r2, [pc, #72]	; (8003898 <_sbrk+0x68>)
 8003850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <_sbrk+0x64>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	429a      	cmp	r2, r3
 800385e:	d207      	bcs.n	8003870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003860:	f001 fae8 	bl	8004e34 <__errno>
 8003864:	4603      	mov	r3, r0
 8003866:	220c      	movs	r2, #12
 8003868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800386a:	f04f 33ff 	mov.w	r3, #4294967295
 800386e:	e009      	b.n	8003884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003870:	4b08      	ldr	r3, [pc, #32]	; (8003894 <_sbrk+0x64>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003876:	4b07      	ldr	r3, [pc, #28]	; (8003894 <_sbrk+0x64>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	4a05      	ldr	r2, [pc, #20]	; (8003894 <_sbrk+0x64>)
 8003880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003882:	68fb      	ldr	r3, [r7, #12]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	20003000 	.word	0x20003000
 8003890:	00000400 	.word	0x00000400
 8003894:	2000009c 	.word	0x2000009c
 8003898:	200000f8 	.word	0x200000f8

0800389c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038a0:	4b06      	ldr	r3, [pc, #24]	; (80038bc <SystemInit+0x20>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a6:	4a05      	ldr	r2, [pc, #20]	; (80038bc <SystemInit+0x20>)
 80038a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038b0:	bf00      	nop
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	e000ed00 	.word	0xe000ed00

080038c0 <__NVIC_GetPriorityGrouping>:
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <__NVIC_GetPriorityGrouping+0x18>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	0a1b      	lsrs	r3, r3, #8
 80038ca:	f003 0307 	and.w	r3, r3, #7
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	e000ed00 	.word	0xe000ed00

080038dc <__NVIC_EnableIRQ>:
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	4603      	mov	r3, r0
 80038e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	db0b      	blt.n	8003906 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	f003 021f 	and.w	r2, r3, #31
 80038f4:	4907      	ldr	r1, [pc, #28]	; (8003914 <__NVIC_EnableIRQ+0x38>)
 80038f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	2001      	movs	r0, #1
 80038fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	e000e100 	.word	0xe000e100

08003918 <__NVIC_SetPriority>:
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	6039      	str	r1, [r7, #0]
 8003922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003928:	2b00      	cmp	r3, #0
 800392a:	db0a      	blt.n	8003942 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	b2da      	uxtb	r2, r3
 8003930:	490c      	ldr	r1, [pc, #48]	; (8003964 <__NVIC_SetPriority+0x4c>)
 8003932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003936:	0112      	lsls	r2, r2, #4
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	440b      	add	r3, r1
 800393c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003940:	e00a      	b.n	8003958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	4908      	ldr	r1, [pc, #32]	; (8003968 <__NVIC_SetPriority+0x50>)
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	3b04      	subs	r3, #4
 8003950:	0112      	lsls	r2, r2, #4
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	440b      	add	r3, r1
 8003956:	761a      	strb	r2, [r3, #24]
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000e100 	.word	0xe000e100
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <NVIC_EncodePriority>:
{
 800396c:	b480      	push	{r7}
 800396e:	b089      	sub	sp, #36	; 0x24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f1c3 0307 	rsb	r3, r3, #7
 8003986:	2b04      	cmp	r3, #4
 8003988:	bf28      	it	cs
 800398a:	2304      	movcs	r3, #4
 800398c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3304      	adds	r3, #4
 8003992:	2b06      	cmp	r3, #6
 8003994:	d902      	bls.n	800399c <NVIC_EncodePriority+0x30>
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	3b03      	subs	r3, #3
 800399a:	e000      	b.n	800399e <NVIC_EncodePriority+0x32>
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a0:	f04f 32ff 	mov.w	r2, #4294967295
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43da      	mvns	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	401a      	ands	r2, r3
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039b4:	f04f 31ff 	mov.w	r1, #4294967295
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	fa01 f303 	lsl.w	r3, r1, r3
 80039be:	43d9      	mvns	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c4:	4313      	orrs	r3, r2
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3724      	adds	r7, #36	; 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <LL_APB1_GRP1_EnableClock>:
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80039dc:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <LL_APB1_GRP1_EnableClock+0x2c>)
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	4907      	ldr	r1, [pc, #28]	; (8003a00 <LL_APB1_GRP1_EnableClock+0x2c>)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <LL_APB1_GRP1_EnableClock+0x2c>)
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4013      	ands	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039f2:	68fb      	ldr	r3, [r7, #12]
}
 80039f4:	bf00      	nop
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	40021000 	.word	0x40021000

08003a04 <LL_TIM_DisableARRPreload>:
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	601a      	str	r2, [r3, #0]
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <LL_TIM_OC_DisableFast>:
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d028      	beq.n	8003a86 <LL_TIM_OC_DisableFast+0x62>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d023      	beq.n	8003a82 <LL_TIM_OC_DisableFast+0x5e>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b10      	cmp	r3, #16
 8003a3e:	d01e      	beq.n	8003a7e <LL_TIM_OC_DisableFast+0x5a>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b40      	cmp	r3, #64	; 0x40
 8003a44:	d019      	beq.n	8003a7a <LL_TIM_OC_DisableFast+0x56>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a4c:	d013      	beq.n	8003a76 <LL_TIM_OC_DisableFast+0x52>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a54:	d00d      	beq.n	8003a72 <LL_TIM_OC_DisableFast+0x4e>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5c:	d007      	beq.n	8003a6e <LL_TIM_OC_DisableFast+0x4a>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a64:	d101      	bne.n	8003a6a <LL_TIM_OC_DisableFast+0x46>
 8003a66:	2307      	movs	r3, #7
 8003a68:	e00e      	b.n	8003a88 <LL_TIM_OC_DisableFast+0x64>
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	e00c      	b.n	8003a88 <LL_TIM_OC_DisableFast+0x64>
 8003a6e:	2306      	movs	r3, #6
 8003a70:	e00a      	b.n	8003a88 <LL_TIM_OC_DisableFast+0x64>
 8003a72:	2305      	movs	r3, #5
 8003a74:	e008      	b.n	8003a88 <LL_TIM_OC_DisableFast+0x64>
 8003a76:	2304      	movs	r3, #4
 8003a78:	e006      	b.n	8003a88 <LL_TIM_OC_DisableFast+0x64>
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e004      	b.n	8003a88 <LL_TIM_OC_DisableFast+0x64>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e002      	b.n	8003a88 <LL_TIM_OC_DisableFast+0x64>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <LL_TIM_OC_DisableFast+0x64>
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3318      	adds	r3, #24
 8003a8e:	4619      	mov	r1, r3
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	4a0b      	ldr	r2, [pc, #44]	; (8003ac0 <LL_TIM_OC_DisableFast+0x9c>)
 8003a94:	5cd3      	ldrb	r3, [r2, r3]
 8003a96:	440b      	add	r3, r1
 8003a98:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	4908      	ldr	r1, [pc, #32]	; (8003ac4 <LL_TIM_OC_DisableFast+0xa0>)
 8003aa2:	5ccb      	ldrb	r3, [r1, r3]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	408b      	lsls	r3, r1
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	401a      	ands	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	601a      	str	r2, [r3, #0]
}
 8003ab2:	bf00      	nop
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	080082e0 	.word	0x080082e0
 8003ac4:	080082ec 	.word	0x080082ec

08003ac8 <LL_TIM_SetClockSource>:
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003ada:	f023 0307 	bic.w	r3, r3, #7
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	609a      	str	r2, [r3, #8]
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <LL_TIM_SetTriggerOutput>:
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	605a      	str	r2, [r3, #4]
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <LL_TIM_DisableMasterSlaveMode>:
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08e      	sub	sp, #56	; 0x38
 8003b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	605a      	str	r2, [r3, #4]
 8003b48:	609a      	str	r2, [r3, #8]
 8003b4a:	60da      	str	r2, [r3, #12]
 8003b4c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003b4e:	1d3b      	adds	r3, r7, #4
 8003b50:	2220      	movs	r2, #32
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f001 f997 	bl	8004e88 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8003b5a:	2001      	movs	r0, #1
 8003b5c:	f7ff ff3a 	bl	80039d4 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003b60:	f7ff feae 	bl	80038c0 <__NVIC_GetPriorityGrouping>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2200      	movs	r2, #0
 8003b68:	2100      	movs	r1, #0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff fefe 	bl	800396c <NVIC_EncodePriority>
 8003b70:	4603      	mov	r3, r0
 8003b72:	4619      	mov	r1, r3
 8003b74:	201c      	movs	r0, #28
 8003b76:	f7ff fecf 	bl	8003918 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8003b7a:	201c      	movs	r0, #28
 8003b7c:	f7ff feae 	bl	80038dc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8003b80:	f240 331f 	movw	r3, #799	; 0x31f
 8003b84:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003b86:	2300      	movs	r3, #0
 8003b88:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 49;
 8003b8a:	2331      	movs	r3, #49	; 0x31
 8003b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8003b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b96:	4619      	mov	r1, r3
 8003b98:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003b9c:	f000 fd5e 	bl	800465c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8003ba0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003ba4:	f7ff ff2e 	bl	8003a04 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003ba8:	2100      	movs	r1, #0
 8003baa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003bae:	f7ff ff8b 	bl	8003ac8 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003bc6:	1d3b      	adds	r3, r7, #4
 8003bc8:	461a      	mov	r2, r3
 8003bca:	2101      	movs	r1, #1
 8003bcc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003bd0:	f000 fdb6 	bl	8004740 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003bda:	f7ff ff23 	bl	8003a24 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8003bde:	2100      	movs	r1, #0
 8003be0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003be4:	f7ff ff85 	bl	8003af2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8003be8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003bec:	f7ff ff94 	bl	8003b18 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003bf0:	bf00      	nop
 8003bf2:	3738      	adds	r7, #56	; 0x38
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c30 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bfc:	480d      	ldr	r0, [pc, #52]	; (8003c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8003bfe:	490e      	ldr	r1, [pc, #56]	; (8003c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c00:	4a0e      	ldr	r2, [pc, #56]	; (8003c3c <LoopForever+0xe>)
  movs r3, #0
 8003c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c04:	e002      	b.n	8003c0c <LoopCopyDataInit>

08003c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c0a:	3304      	adds	r3, #4

08003c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c10:	d3f9      	bcc.n	8003c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c12:	4a0b      	ldr	r2, [pc, #44]	; (8003c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c14:	4c0b      	ldr	r4, [pc, #44]	; (8003c44 <LoopForever+0x16>)
  movs r3, #0
 8003c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c18:	e001      	b.n	8003c1e <LoopFillZerobss>

08003c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c1c:	3204      	adds	r2, #4

08003c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c20:	d3fb      	bcc.n	8003c1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c22:	f7ff fe3b 	bl	800389c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c26:	f001 f90b 	bl	8004e40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c2a:	f7ff fa69 	bl	8003100 <main>

08003c2e <LoopForever>:

LoopForever:
    b LoopForever
 8003c2e:	e7fe      	b.n	8003c2e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003c30:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8003c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c38:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003c3c:	080085ec 	.word	0x080085ec
  ldr r2, =_sbss
 8003c40:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003c44:	200000f4 	.word	0x200000f4

08003c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c48:	e7fe      	b.n	8003c48 <ADC1_2_IRQHandler>
	...

08003c4c <LL_EXTI_EnableIT_0_31>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8003c54:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <LL_EXTI_EnableIT_0_31+0x20>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4904      	ldr	r1, [pc, #16]	; (8003c6c <LL_EXTI_EnableIT_0_31+0x20>)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	600b      	str	r3, [r1, #0]
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	40010400 	.word	0x40010400

08003c70 <LL_EXTI_EnableIT_32_63>:
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <LL_EXTI_EnableIT_32_63+0x20>)
 8003c7a:	6a1a      	ldr	r2, [r3, #32]
 8003c7c:	4904      	ldr	r1, [pc, #16]	; (8003c90 <LL_EXTI_EnableIT_32_63+0x20>)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	620b      	str	r3, [r1, #32]
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	40010400 	.word	0x40010400

08003c94 <LL_EXTI_DisableIT_0_31>:
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <LL_EXTI_DisableIT_0_31+0x24>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	4904      	ldr	r1, [pc, #16]	; (8003cb8 <LL_EXTI_DisableIT_0_31+0x24>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	600b      	str	r3, [r1, #0]
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40010400 	.word	0x40010400

08003cbc <LL_EXTI_DisableIT_32_63>:
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <LL_EXTI_DisableIT_32_63+0x24>)
 8003cc6:	6a1a      	ldr	r2, [r3, #32]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	4904      	ldr	r1, [pc, #16]	; (8003ce0 <LL_EXTI_DisableIT_32_63+0x24>)
 8003cce:	4013      	ands	r3, r2
 8003cd0:	620b      	str	r3, [r1, #32]
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40010400 	.word	0x40010400

08003ce4 <LL_EXTI_EnableEvent_0_31>:
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	4904      	ldr	r1, [pc, #16]	; (8003d04 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	604b      	str	r3, [r1, #4]
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	40010400 	.word	0x40010400

08003d08 <LL_EXTI_EnableEvent_32_63>:
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d14:	4904      	ldr	r1, [pc, #16]	; (8003d28 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	40010400 	.word	0x40010400

08003d2c <LL_EXTI_DisableEvent_0_31>:
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	4904      	ldr	r1, [pc, #16]	; (8003d50 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	604b      	str	r3, [r1, #4]
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40010400 	.word	0x40010400

08003d54 <LL_EXTI_DisableEvent_32_63>:
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	43db      	mvns	r3, r3
 8003d64:	4904      	ldr	r1, [pc, #16]	; (8003d78 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	40010400 	.word	0x40010400

08003d7c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	4904      	ldr	r1, [pc, #16]	; (8003d9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	608b      	str	r3, [r1, #8]
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	40010400 	.word	0x40010400

08003da0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003daa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dac:	4904      	ldr	r1, [pc, #16]	; (8003dc0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	40010400 	.word	0x40010400

08003dc4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003dcc:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	4904      	ldr	r1, [pc, #16]	; (8003de8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	608b      	str	r3, [r1, #8]
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40010400 	.word	0x40010400

08003dec <LL_EXTI_DisableRisingTrig_32_63>:
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003df4:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003df6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	4904      	ldr	r1, [pc, #16]	; (8003e10 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40010400 	.word	0x40010400

08003e14 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	4904      	ldr	r1, [pc, #16]	; (8003e34 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60cb      	str	r3, [r1, #12]
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	40010400 	.word	0x40010400

08003e38 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e44:	4904      	ldr	r1, [pc, #16]	; (8003e58 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	40010400 	.word	0x40010400

08003e5c <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	4904      	ldr	r1, [pc, #16]	; (8003e80 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	60cb      	str	r3, [r1, #12]
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40010400 	.word	0x40010400

08003e84 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003e8c:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	43db      	mvns	r3, r3
 8003e94:	4904      	ldr	r1, [pc, #16]	; (8003ea8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40010400 	.word	0x40010400

08003eac <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	7a1b      	ldrb	r3, [r3, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80cd 	beq.w	800405c <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d061      	beq.n	8003f8e <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	7a5b      	ldrb	r3, [r3, #9]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d01c      	beq.n	8003f0c <LL_EXTI_Init+0x60>
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	dc25      	bgt.n	8003f22 <LL_EXTI_Init+0x76>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <LL_EXTI_Init+0x34>
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d00b      	beq.n	8003ef6 <LL_EXTI_Init+0x4a>
 8003ede:	e020      	b.n	8003f22 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff ff21 	bl	8003d2c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff feac 	bl	8003c4c <LL_EXTI_EnableIT_0_31>
          break;
 8003ef4:	e018      	b.n	8003f28 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff feca 	bl	8003c94 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff feed 	bl	8003ce4 <LL_EXTI_EnableEvent_0_31>
          break;
 8003f0a:	e00d      	b.n	8003f28 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fe9b 	bl	8003c4c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff fee2 	bl	8003ce4 <LL_EXTI_EnableEvent_0_31>
          break;
 8003f20:	e002      	b.n	8003f28 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
          break;
 8003f26:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	7a9b      	ldrb	r3, [r3, #10]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d02e      	beq.n	8003f8e <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	7a9b      	ldrb	r3, [r3, #10]
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d01c      	beq.n	8003f72 <LL_EXTI_Init+0xc6>
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	dc25      	bgt.n	8003f88 <LL_EXTI_Init+0xdc>
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d002      	beq.n	8003f46 <LL_EXTI_Init+0x9a>
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d00b      	beq.n	8003f5c <LL_EXTI_Init+0xb0>
 8003f44:	e020      	b.n	8003f88 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff ff86 	bl	8003e5c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff ff11 	bl	8003d7c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003f5a:	e019      	b.n	8003f90 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff2f 	bl	8003dc4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff ff52 	bl	8003e14 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003f70:	e00e      	b.n	8003f90 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff ff00 	bl	8003d7c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff ff47 	bl	8003e14 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003f86:	e003      	b.n	8003f90 <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
            break;
 8003f8c:	e000      	b.n	8003f90 <LL_EXTI_Init+0xe4>
        }
      }
 8003f8e:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d076      	beq.n	8004086 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	7a5b      	ldrb	r3, [r3, #9]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d01c      	beq.n	8003fda <LL_EXTI_Init+0x12e>
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	dc25      	bgt.n	8003ff0 <LL_EXTI_Init+0x144>
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <LL_EXTI_Init+0x102>
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d00b      	beq.n	8003fc4 <LL_EXTI_Init+0x118>
 8003fac:	e020      	b.n	8003ff0 <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff fece 	bl	8003d54 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fe57 	bl	8003c70 <LL_EXTI_EnableIT_32_63>
          break;
 8003fc2:	e018      	b.n	8003ff6 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fe77 	bl	8003cbc <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff fe98 	bl	8003d08 <LL_EXTI_EnableEvent_32_63>
          break;
 8003fd8:	e00d      	b.n	8003ff6 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff fe46 	bl	8003c70 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fe8d 	bl	8003d08 <LL_EXTI_EnableEvent_32_63>
          break;
 8003fee:	e002      	b.n	8003ff6 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
          break;
 8003ff4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	7a9b      	ldrb	r3, [r3, #10]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d043      	beq.n	8004086 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	7a9b      	ldrb	r3, [r3, #10]
 8004002:	2b03      	cmp	r3, #3
 8004004:	d01c      	beq.n	8004040 <LL_EXTI_Init+0x194>
 8004006:	2b03      	cmp	r3, #3
 8004008:	dc25      	bgt.n	8004056 <LL_EXTI_Init+0x1aa>
 800400a:	2b01      	cmp	r3, #1
 800400c:	d002      	beq.n	8004014 <LL_EXTI_Init+0x168>
 800400e:	2b02      	cmp	r3, #2
 8004010:	d00b      	beq.n	800402a <LL_EXTI_Init+0x17e>
 8004012:	e020      	b.n	8004056 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff ff33 	bl	8003e84 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff febc 	bl	8003da0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8004028:	e02e      	b.n	8004088 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff fedc 	bl	8003dec <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fefd 	bl	8003e38 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800403e:	e023      	b.n	8004088 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff feab 	bl	8003da0 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff fef2 	bl	8003e38 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8004054:	e018      	b.n	8004088 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	73fb      	strb	r3, [r7, #15]
            break;
 800405a:	e015      	b.n	8004088 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff fe17 	bl	8003c94 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff fe5e 	bl	8003d2c <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff fe21 	bl	8003cbc <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fe68 	bl	8003d54 <LL_EXTI_DisableEvent_32_63>
 8004084:	e000      	b.n	8004088 <LL_EXTI_Init+0x1dc>
      }
 8004086:	bf00      	nop
#endif
  }
  return status;
 8004088:	7bfb      	ldrb	r3, [r7, #15]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <LL_GPIO_SetPinMode>:
{
 8004092:	b480      	push	{r7}
 8004094:	b089      	sub	sp, #36	; 0x24
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	fa93 f3a3 	rbit	r3, r3
 80040ac:	613b      	str	r3, [r7, #16]
  return result;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	fab3 f383 	clz	r3, r3
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	2103      	movs	r1, #3
 80040ba:	fa01 f303 	lsl.w	r3, r1, r3
 80040be:	43db      	mvns	r3, r3
 80040c0:	401a      	ands	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	fa93 f3a3 	rbit	r3, r3
 80040cc:	61bb      	str	r3, [r7, #24]
  return result;
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	fab3 f383 	clz	r3, r3
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	fa01 f303 	lsl.w	r3, r1, r3
 80040de:	431a      	orrs	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	601a      	str	r2, [r3, #0]
}
 80040e4:	bf00      	nop
 80040e6:	3724      	adds	r7, #36	; 0x24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <LL_GPIO_SetPinOutputType>:
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	43db      	mvns	r3, r3
 8004104:	401a      	ands	r2, r3
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	431a      	orrs	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	605a      	str	r2, [r3, #4]
}
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <LL_GPIO_SetPinSpeed>:
{
 8004120:	b480      	push	{r7}
 8004122:	b089      	sub	sp, #36	; 0x24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	fa93 f3a3 	rbit	r3, r3
 800413a:	613b      	str	r3, [r7, #16]
  return result;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	fab3 f383 	clz	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	2103      	movs	r1, #3
 8004148:	fa01 f303 	lsl.w	r3, r1, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	401a      	ands	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	fa93 f3a3 	rbit	r3, r3
 800415a:	61bb      	str	r3, [r7, #24]
  return result;
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	fa01 f303 	lsl.w	r3, r1, r3
 800416c:	431a      	orrs	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	609a      	str	r2, [r3, #8]
}
 8004172:	bf00      	nop
 8004174:	3724      	adds	r7, #36	; 0x24
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <LL_GPIO_SetPinPull>:
{
 800417e:	b480      	push	{r7}
 8004180:	b089      	sub	sp, #36	; 0x24
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	fa93 f3a3 	rbit	r3, r3
 8004198:	613b      	str	r3, [r7, #16]
  return result;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	fab3 f383 	clz	r3, r3
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	2103      	movs	r1, #3
 80041a6:	fa01 f303 	lsl.w	r3, r1, r3
 80041aa:	43db      	mvns	r3, r3
 80041ac:	401a      	ands	r2, r3
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	fa93 f3a3 	rbit	r3, r3
 80041b8:	61bb      	str	r3, [r7, #24]
  return result;
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	fab3 f383 	clz	r3, r3
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ca:	431a      	orrs	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	60da      	str	r2, [r3, #12]
}
 80041d0:	bf00      	nop
 80041d2:	3724      	adds	r7, #36	; 0x24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <LL_GPIO_SetAFPin_0_7>:
{
 80041dc:	b480      	push	{r7}
 80041de:	b089      	sub	sp, #36	; 0x24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a1a      	ldr	r2, [r3, #32]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	fa93 f3a3 	rbit	r3, r3
 80041f6:	613b      	str	r3, [r7, #16]
  return result;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	fab3 f383 	clz	r3, r3
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	210f      	movs	r1, #15
 8004204:	fa01 f303 	lsl.w	r3, r1, r3
 8004208:	43db      	mvns	r3, r3
 800420a:	401a      	ands	r2, r3
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	fa93 f3a3 	rbit	r3, r3
 8004216:	61bb      	str	r3, [r7, #24]
  return result;
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	fab3 f383 	clz	r3, r3
 800421e:	b2db      	uxtb	r3, r3
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	fa01 f303 	lsl.w	r3, r1, r3
 8004228:	431a      	orrs	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	621a      	str	r2, [r3, #32]
}
 800422e:	bf00      	nop
 8004230:	3724      	adds	r7, #36	; 0x24
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <LL_GPIO_SetAFPin_8_15>:
{
 800423a:	b480      	push	{r7}
 800423c:	b089      	sub	sp, #36	; 0x24
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	0a1b      	lsrs	r3, r3, #8
 800424e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	fa93 f3a3 	rbit	r3, r3
 8004256:	613b      	str	r3, [r7, #16]
  return result;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	fab3 f383 	clz	r3, r3
 800425e:	b2db      	uxtb	r3, r3
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	210f      	movs	r1, #15
 8004264:	fa01 f303 	lsl.w	r3, r1, r3
 8004268:	43db      	mvns	r3, r3
 800426a:	401a      	ands	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	0a1b      	lsrs	r3, r3, #8
 8004270:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	fa93 f3a3 	rbit	r3, r3
 8004278:	61bb      	str	r3, [r7, #24]
  return result;
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	fab3 f383 	clz	r3, r3
 8004280:	b2db      	uxtb	r3, r3
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	fa01 f303 	lsl.w	r3, r1, r3
 800428a:	431a      	orrs	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004290:	bf00      	nop
 8004292:	3724      	adds	r7, #36	; 0x24
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	fa93 f3a3 	rbit	r3, r3
 80042b2:	613b      	str	r3, [r7, #16]
  return result;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	fab3 f383 	clz	r3, r3
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80042be:	e051      	b.n	8004364 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	2101      	movs	r1, #1
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	fa01 f303 	lsl.w	r3, r1, r3
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d043      	beq.n	800435e <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d003      	beq.n	80042e6 <LL_GPIO_Init+0x4a>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d10e      	bne.n	8004304 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	461a      	mov	r2, r3
 80042ec:	69b9      	ldr	r1, [r7, #24]
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff ff16 	bl	8004120 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	6819      	ldr	r1, [r3, #0]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	461a      	mov	r2, r3
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff fef6 	bl	80040f0 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	461a      	mov	r2, r3
 800430a:	69b9      	ldr	r1, [r7, #24]
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff ff36 	bl	800417e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d11a      	bne.n	8004350 <LL_GPIO_Init+0xb4>
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	fa93 f3a3 	rbit	r3, r3
 8004324:	60bb      	str	r3, [r7, #8]
  return result;
 8004326:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004328:	fab3 f383 	clz	r3, r3
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b07      	cmp	r3, #7
 8004330:	d807      	bhi.n	8004342 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	461a      	mov	r2, r3
 8004338:	69b9      	ldr	r1, [r7, #24]
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7ff ff4e 	bl	80041dc <LL_GPIO_SetAFPin_0_7>
 8004340:	e006      	b.n	8004350 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	461a      	mov	r2, r3
 8004348:	69b9      	ldr	r1, [r7, #24]
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff ff75 	bl	800423a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	461a      	mov	r2, r3
 8004356:	69b9      	ldr	r1, [r7, #24]
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff fe9a 	bl	8004092 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	3301      	adds	r3, #1
 8004362:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	fa22 f303 	lsr.w	r3, r2, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1a6      	bne.n	80042c0 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3720      	adds	r7, #32
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <LL_I2C_Enable>:
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f043 0201 	orr.w	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	601a      	str	r2, [r3, #0]
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <LL_I2C_Disable>:
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f023 0201 	bic.w	r2, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	601a      	str	r2, [r3, #0]
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <LL_I2C_ConfigFilters>:
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	0219      	lsls	r1, r3, #8
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	430b      	orrs	r3, r1
 80043d8:	431a      	orrs	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	601a      	str	r2, [r3, #0]
}
 80043de:	bf00      	nop
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <LL_I2C_SetOwnAddress1>:
{
 80043ea:	b480      	push	{r7}
 80043ec:	b085      	sub	sp, #20
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80043fe:	f023 0307 	bic.w	r3, r3, #7
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	430a      	orrs	r2, r1
 8004408:	431a      	orrs	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	609a      	str	r2, [r3, #8]
}
 800440e:	bf00      	nop
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <LL_I2C_EnableOwnAddress1>:
{
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	609a      	str	r2, [r3, #8]
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <LL_I2C_DisableOwnAddress1>:
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	609a      	str	r2, [r3, #8]
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <LL_I2C_SetTiming>:
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	611a      	str	r2, [r3, #16]
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <LL_I2C_SetMode>:
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	601a      	str	r2, [r3, #0]
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <LL_I2C_AcknowledgeNextData>:
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	605a      	str	r2, [r3, #4]
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b082      	sub	sp, #8
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ff65 	bl	800439c <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6899      	ldr	r1, [r3, #8]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	461a      	mov	r2, r3
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff ff6d 	bl	80043bc <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	4619      	mov	r1, r3
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7ff ffb6 	bl	800445a <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff ff44 	bl	800437c <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff ffa0 	bl	800443a <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	6919      	ldr	r1, [r3, #16]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	461a      	mov	r2, r3
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff ff70 	bl	80043ea <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff ff81 	bl	800441a <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4619      	mov	r1, r3
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff ffa9 	bl	8004476 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	4619      	mov	r1, r3
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff ffb6 	bl	800449c <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <LL_TIM_SetPrescaler>:
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	629a      	str	r2, [r3, #40]	; 0x28
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <LL_TIM_SetAutoReload>:
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <LL_TIM_SetRepetitionCounter>:
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <LL_TIM_OC_SetCompareCH1>:
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <LL_TIM_OC_SetCompareCH2>:
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <LL_TIM_OC_SetCompareCH3>:
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <LL_TIM_OC_SetCompareCH4>:
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <LL_TIM_OC_SetCompareCH5>:
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <LL_TIM_OC_SetCompareCH6>:
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f043 0201 	orr.w	r2, r3, #1
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	615a      	str	r2, [r3, #20]
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
	...

0800465c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a2f      	ldr	r2, [pc, #188]	; (800472c <LL_TIM_Init+0xd0>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d007      	beq.n	8004684 <LL_TIM_Init+0x28>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467a:	d003      	beq.n	8004684 <LL_TIM_Init+0x28>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a2c      	ldr	r2, [pc, #176]	; (8004730 <LL_TIM_Init+0xd4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d106      	bne.n	8004692 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a25      	ldr	r2, [pc, #148]	; (800472c <LL_TIM_Init+0xd0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <LL_TIM_Init+0x66>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a0:	d00f      	beq.n	80046c2 <LL_TIM_Init+0x66>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a22      	ldr	r2, [pc, #136]	; (8004730 <LL_TIM_Init+0xd4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00b      	beq.n	80046c2 <LL_TIM_Init+0x66>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a21      	ldr	r2, [pc, #132]	; (8004734 <LL_TIM_Init+0xd8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d007      	beq.n	80046c2 <LL_TIM_Init+0x66>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a20      	ldr	r2, [pc, #128]	; (8004738 <LL_TIM_Init+0xdc>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d003      	beq.n	80046c2 <LL_TIM_Init+0x66>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a1f      	ldr	r2, [pc, #124]	; (800473c <LL_TIM_Init+0xe0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d106      	bne.n	80046d0 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	4619      	mov	r1, r3
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff ff3a 	bl	8004556 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	4619      	mov	r1, r3
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff ff26 	bl	800453a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a0e      	ldr	r2, [pc, #56]	; (800472c <LL_TIM_Init+0xd0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00b      	beq.n	800470e <LL_TIM_Init+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a0e      	ldr	r2, [pc, #56]	; (8004734 <LL_TIM_Init+0xd8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d007      	beq.n	800470e <LL_TIM_Init+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a0d      	ldr	r2, [pc, #52]	; (8004738 <LL_TIM_Init+0xdc>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d003      	beq.n	800470e <LL_TIM_Init+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a0c      	ldr	r2, [pc, #48]	; (800473c <LL_TIM_Init+0xe0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d105      	bne.n	800471a <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	4619      	mov	r1, r3
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff ff2c 	bl	8004572 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7ff ff8d 	bl	800463a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40012c00 	.word	0x40012c00
 8004730:	40000400 	.word	0x40000400
 8004734:	40014000 	.word	0x40014000
 8004738:	40014400 	.word	0x40014400
 800473c:	40014800 	.word	0x40014800

08004740 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004756:	d045      	beq.n	80047e4 <LL_TIM_OC_Init+0xa4>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800475e:	d848      	bhi.n	80047f2 <LL_TIM_OC_Init+0xb2>
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004766:	d036      	beq.n	80047d6 <LL_TIM_OC_Init+0x96>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476e:	d840      	bhi.n	80047f2 <LL_TIM_OC_Init+0xb2>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004776:	d027      	beq.n	80047c8 <LL_TIM_OC_Init+0x88>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477e:	d838      	bhi.n	80047f2 <LL_TIM_OC_Init+0xb2>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004786:	d018      	beq.n	80047ba <LL_TIM_OC_Init+0x7a>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800478e:	d830      	bhi.n	80047f2 <LL_TIM_OC_Init+0xb2>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d003      	beq.n	800479e <LL_TIM_OC_Init+0x5e>
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b10      	cmp	r3, #16
 800479a:	d007      	beq.n	80047ac <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 800479c:	e029      	b.n	80047f2 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800479e:	6879      	ldr	r1, [r7, #4]
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 f82d 	bl	8004800 <OC1Config>
 80047a6:	4603      	mov	r3, r0
 80047a8:	75fb      	strb	r3, [r7, #23]
      break;
 80047aa:	e023      	b.n	80047f4 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 f8a0 	bl	80048f4 <OC2Config>
 80047b4:	4603      	mov	r3, r0
 80047b6:	75fb      	strb	r3, [r7, #23]
      break;
 80047b8:	e01c      	b.n	80047f4 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 f917 	bl	80049f0 <OC3Config>
 80047c2:	4603      	mov	r3, r0
 80047c4:	75fb      	strb	r3, [r7, #23]
      break;
 80047c6:	e015      	b.n	80047f4 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f98e 	bl	8004aec <OC4Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	75fb      	strb	r3, [r7, #23]
      break;
 80047d4:	e00e      	b.n	80047f4 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 f9ed 	bl	8004bb8 <OC5Config>
 80047de:	4603      	mov	r3, r0
 80047e0:	75fb      	strb	r3, [r7, #23]
      break;
 80047e2:	e007      	b.n	80047f4 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 fa44 	bl	8004c74 <OC6Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	75fb      	strb	r3, [r7, #23]
      break;
 80047f0:	e000      	b.n	80047f4 <LL_TIM_OC_Init+0xb4>
      break;
 80047f2:	bf00      	nop
  }

  return result;
 80047f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	f023 0201 	bic.w	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0303 	bic.w	r3, r3, #3
 800482e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	6812      	ldr	r2, [r2, #0]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f023 0202 	bic.w	r2, r3, #2
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f023 0201 	bic.w	r2, r3, #1
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	4313      	orrs	r3, r2
 800485c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a20      	ldr	r2, [pc, #128]	; (80048e4 <OC1Config+0xe4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00b      	beq.n	800487e <OC1Config+0x7e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a1f      	ldr	r2, [pc, #124]	; (80048e8 <OC1Config+0xe8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d007      	beq.n	800487e <OC1Config+0x7e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a1e      	ldr	r2, [pc, #120]	; (80048ec <OC1Config+0xec>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d003      	beq.n	800487e <OC1Config+0x7e>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a1d      	ldr	r2, [pc, #116]	; (80048f0 <OC1Config+0xf0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d11e      	bne.n	80048bc <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f023 0208 	bic.w	r2, r3, #8
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4313      	orrs	r3, r2
 800488c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f023 0204 	bic.w	r2, r3, #4
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4313      	orrs	r3, r2
 800489c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	4313      	orrs	r3, r2
 80048ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	4619      	mov	r1, r3
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff fe5d 	bl	800458e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40012c00 	.word	0x40012c00
 80048e8:	40014000 	.word	0x40014000
 80048ec:	40014400 	.word	0x40014400
 80048f0:	40014800 	.word	0x40014800

080048f4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	f023 0210 	bic.w	r2, r3, #16
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800492a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	6812      	ldr	r2, [r2, #0]
 8004932:	0212      	lsls	r2, r2, #8
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f023 0220 	bic.w	r2, r3, #32
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	4313      	orrs	r3, r2
 8004946:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f023 0210 	bic.w	r2, r3, #16
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a21      	ldr	r2, [pc, #132]	; (80049e0 <OC2Config+0xec>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00b      	beq.n	8004978 <OC2Config+0x84>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <OC2Config+0xf0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d007      	beq.n	8004978 <OC2Config+0x84>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a1f      	ldr	r2, [pc, #124]	; (80049e8 <OC2Config+0xf4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d003      	beq.n	8004978 <OC2Config+0x84>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a1e      	ldr	r2, [pc, #120]	; (80049ec <OC2Config+0xf8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d11f      	bne.n	80049b8 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	019b      	lsls	r3, r3, #6
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	019b      	lsls	r3, r3, #6
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	4313      	orrs	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	4619      	mov	r1, r3
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff fded 	bl	80045aa <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40012c00 	.word	0x40012c00
 80049e4:	40014000 	.word	0x40014000
 80049e8:	40014400 	.word	0x40014400
 80049ec:	40014800 	.word	0x40014800

080049f0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0303 	bic.w	r3, r3, #3
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	6812      	ldr	r2, [r2, #0]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a21      	ldr	r2, [pc, #132]	; (8004adc <OC3Config+0xec>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00b      	beq.n	8004a72 <OC3Config+0x82>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a20      	ldr	r2, [pc, #128]	; (8004ae0 <OC3Config+0xf0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d007      	beq.n	8004a72 <OC3Config+0x82>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1f      	ldr	r2, [pc, #124]	; (8004ae4 <OC3Config+0xf4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d003      	beq.n	8004a72 <OC3Config+0x82>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1e      	ldr	r2, [pc, #120]	; (8004ae8 <OC3Config+0xf8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d11f      	bne.n	8004ab2 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	029b      	lsls	r3, r3, #10
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	029b      	lsls	r3, r3, #10
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	015b      	lsls	r3, r3, #5
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff fd7e 	bl	80045c6 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	40012c00 	.word	0x40012c00
 8004ae0:	40014000 	.word	0x40014000
 8004ae4:	40014400 	.word	0x40014400
 8004ae8:	40014800 	.word	0x40014800

08004aec <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	0212      	lsls	r2, r2, #8
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	031b      	lsls	r3, r3, #12
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	031b      	lsls	r3, r3, #12
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a15      	ldr	r2, [pc, #84]	; (8004ba8 <OC4Config+0xbc>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00b      	beq.n	8004b70 <OC4Config+0x84>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a14      	ldr	r2, [pc, #80]	; (8004bac <OC4Config+0xc0>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d007      	beq.n	8004b70 <OC4Config+0x84>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a13      	ldr	r2, [pc, #76]	; (8004bb0 <OC4Config+0xc4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d003      	beq.n	8004b70 <OC4Config+0x84>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a12      	ldr	r2, [pc, #72]	; (8004bb4 <OC4Config+0xc8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d107      	bne.n	8004b80 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	019b      	lsls	r3, r3, #6
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	4619      	mov	r1, r3
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff fd25 	bl	80045e2 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40012c00 	.word	0x40012c00
 8004bac:	40014000 	.word	0x40014000
 8004bb0:	40014400 	.word	0x40014400
 8004bb4:	40014800 	.word	0x40014800

08004bb8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	6812      	ldr	r2, [r2, #0]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	041b      	lsls	r3, r3, #16
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	041b      	lsls	r3, r3, #16
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a15      	ldr	r2, [pc, #84]	; (8004c64 <OC5Config+0xac>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00b      	beq.n	8004c2c <OC5Config+0x74>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <OC5Config+0xb0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d007      	beq.n	8004c2c <OC5Config+0x74>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a13      	ldr	r2, [pc, #76]	; (8004c6c <OC5Config+0xb4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <OC5Config+0x74>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a12      	ldr	r2, [pc, #72]	; (8004c70 <OC5Config+0xb8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d109      	bne.n	8004c40 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff fcd6 	bl	80045fe <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	40012c00 	.word	0x40012c00
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	40014400 	.word	0x40014400
 8004c70:	40014800 	.word	0x40014800

08004c74 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c94:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	6812      	ldr	r2, [r2, #0]
 8004ca4:	0212      	lsls	r2, r2, #8
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	051b      	lsls	r3, r3, #20
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	051b      	lsls	r3, r3, #20
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a14      	ldr	r2, [pc, #80]	; (8004d20 <OC6Config+0xac>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00b      	beq.n	8004cea <OC6Config+0x76>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a13      	ldr	r2, [pc, #76]	; (8004d24 <OC6Config+0xb0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d007      	beq.n	8004cea <OC6Config+0x76>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a12      	ldr	r2, [pc, #72]	; (8004d28 <OC6Config+0xb4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d003      	beq.n	8004cea <OC6Config+0x76>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a11      	ldr	r2, [pc, #68]	; (8004d2c <OC6Config+0xb8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d109      	bne.n	8004cfe <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	029b      	lsls	r3, r3, #10
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7ff fc87 	bl	800461e <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40012c00 	.word	0x40012c00
 8004d24:	40014000 	.word	0x40014000
 8004d28:	40014400 	.word	0x40014400
 8004d2c:	40014800 	.word	0x40014800

08004d30 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d42:	4a07      	ldr	r2, [pc, #28]	; (8004d60 <LL_InitTick+0x30>)
 8004d44:	3b01      	subs	r3, #1
 8004d46:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004d48:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <LL_InitTick+0x30>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d4e:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <LL_InitTick+0x30>)
 8004d50:	2205      	movs	r2, #5
 8004d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	e000e010 	.word	0xe000e010

08004d64 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004d6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff ffdd 	bl	8004d30 <LL_InitTick>
}
 8004d76:	bf00      	nop
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
	...

08004d80 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004d88:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <LL_mDelay+0x48>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004d8e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d96:	d00c      	beq.n	8004db2 <LL_mDelay+0x32>
  {
    Delay++;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8004d9e:	e008      	b.n	8004db2 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004da0:	4b09      	ldr	r3, [pc, #36]	; (8004dc8 <LL_mDelay+0x48>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <LL_mDelay+0x32>
    {
      Delay--;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1f3      	bne.n	8004da0 <LL_mDelay+0x20>
    }
  }
}
 8004db8:	bf00      	nop
 8004dba:	bf00      	nop
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	e000e010 	.word	0xe000e010

08004dcc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004dd4:	4a04      	ldr	r2, [pc, #16]	; (8004de8 <LL_SetSystemCoreClock+0x1c>)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6013      	str	r3, [r2, #0]
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	2000000c 	.word	0x2000000c

08004dec <gcvt>:
 8004dec:	b530      	push	{r4, r5, lr}
 8004dee:	2200      	movs	r2, #0
 8004df0:	b085      	sub	sp, #20
 8004df2:	460c      	mov	r4, r1
 8004df4:	4605      	mov	r5, r0
 8004df6:	2300      	movs	r3, #0
 8004df8:	ec51 0b10 	vmov	r0, r1, d0
 8004dfc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004e00:	f7fb fe6c 	bl	8000adc <__aeabi_dcmplt>
 8004e04:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004e08:	4622      	mov	r2, r4
 8004e0a:	b118      	cbz	r0, 8004e14 <gcvt+0x28>
 8004e0c:	232d      	movs	r3, #45	; 0x2d
 8004e0e:	f802 3b01 	strb.w	r3, [r2], #1
 8004e12:	3d01      	subs	r5, #1
 8004e14:	2300      	movs	r3, #0
 8004e16:	4806      	ldr	r0, [pc, #24]	; (8004e30 <gcvt+0x44>)
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	2367      	movs	r3, #103	; 0x67
 8004e1e:	6800      	ldr	r0, [r0, #0]
 8004e20:	f000 f906 	bl	8005030 <_gcvt>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	bf14      	ite	ne
 8004e28:	4620      	movne	r0, r4
 8004e2a:	2000      	moveq	r0, #0
 8004e2c:	b005      	add	sp, #20
 8004e2e:	bd30      	pop	{r4, r5, pc}
 8004e30:	20000010 	.word	0x20000010

08004e34 <__errno>:
 8004e34:	4b01      	ldr	r3, [pc, #4]	; (8004e3c <__errno+0x8>)
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	20000010 	.word	0x20000010

08004e40 <__libc_init_array>:
 8004e40:	b570      	push	{r4, r5, r6, lr}
 8004e42:	4d0d      	ldr	r5, [pc, #52]	; (8004e78 <__libc_init_array+0x38>)
 8004e44:	4c0d      	ldr	r4, [pc, #52]	; (8004e7c <__libc_init_array+0x3c>)
 8004e46:	1b64      	subs	r4, r4, r5
 8004e48:	10a4      	asrs	r4, r4, #2
 8004e4a:	2600      	movs	r6, #0
 8004e4c:	42a6      	cmp	r6, r4
 8004e4e:	d109      	bne.n	8004e64 <__libc_init_array+0x24>
 8004e50:	4d0b      	ldr	r5, [pc, #44]	; (8004e80 <__libc_init_array+0x40>)
 8004e52:	4c0c      	ldr	r4, [pc, #48]	; (8004e84 <__libc_init_array+0x44>)
 8004e54:	f003 fa14 	bl	8008280 <_init>
 8004e58:	1b64      	subs	r4, r4, r5
 8004e5a:	10a4      	asrs	r4, r4, #2
 8004e5c:	2600      	movs	r6, #0
 8004e5e:	42a6      	cmp	r6, r4
 8004e60:	d105      	bne.n	8004e6e <__libc_init_array+0x2e>
 8004e62:	bd70      	pop	{r4, r5, r6, pc}
 8004e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e68:	4798      	blx	r3
 8004e6a:	3601      	adds	r6, #1
 8004e6c:	e7ee      	b.n	8004e4c <__libc_init_array+0xc>
 8004e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e72:	4798      	blx	r3
 8004e74:	3601      	adds	r6, #1
 8004e76:	e7f2      	b.n	8004e5e <__libc_init_array+0x1e>
 8004e78:	080085e4 	.word	0x080085e4
 8004e7c:	080085e4 	.word	0x080085e4
 8004e80:	080085e4 	.word	0x080085e4
 8004e84:	080085e8 	.word	0x080085e8

08004e88 <memset>:
 8004e88:	4402      	add	r2, r0
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d100      	bne.n	8004e92 <memset+0xa>
 8004e90:	4770      	bx	lr
 8004e92:	f803 1b01 	strb.w	r1, [r3], #1
 8004e96:	e7f9      	b.n	8004e8c <memset+0x4>

08004e98 <siprintf>:
 8004e98:	b40e      	push	{r1, r2, r3}
 8004e9a:	b500      	push	{lr}
 8004e9c:	b09c      	sub	sp, #112	; 0x70
 8004e9e:	ab1d      	add	r3, sp, #116	; 0x74
 8004ea0:	9002      	str	r0, [sp, #8]
 8004ea2:	9006      	str	r0, [sp, #24]
 8004ea4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ea8:	4809      	ldr	r0, [pc, #36]	; (8004ed0 <siprintf+0x38>)
 8004eaa:	9107      	str	r1, [sp, #28]
 8004eac:	9104      	str	r1, [sp, #16]
 8004eae:	4909      	ldr	r1, [pc, #36]	; (8004ed4 <siprintf+0x3c>)
 8004eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eb4:	9105      	str	r1, [sp, #20]
 8004eb6:	6800      	ldr	r0, [r0, #0]
 8004eb8:	9301      	str	r3, [sp, #4]
 8004eba:	a902      	add	r1, sp, #8
 8004ebc:	f000 fe00 	bl	8005ac0 <_svfiprintf_r>
 8004ec0:	9b02      	ldr	r3, [sp, #8]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	701a      	strb	r2, [r3, #0]
 8004ec6:	b01c      	add	sp, #112	; 0x70
 8004ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ecc:	b003      	add	sp, #12
 8004ece:	4770      	bx	lr
 8004ed0:	20000010 	.word	0x20000010
 8004ed4:	ffff0208 	.word	0xffff0208

08004ed8 <strcat>:
 8004ed8:	b510      	push	{r4, lr}
 8004eda:	4602      	mov	r2, r0
 8004edc:	7814      	ldrb	r4, [r2, #0]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	3201      	adds	r2, #1
 8004ee2:	2c00      	cmp	r4, #0
 8004ee4:	d1fa      	bne.n	8004edc <strcat+0x4>
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004eec:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ef0:	2a00      	cmp	r2, #0
 8004ef2:	d1f9      	bne.n	8004ee8 <strcat+0x10>
 8004ef4:	bd10      	pop	{r4, pc}

08004ef6 <strncat>:
 8004ef6:	b530      	push	{r4, r5, lr}
 8004ef8:	4604      	mov	r4, r0
 8004efa:	7825      	ldrb	r5, [r4, #0]
 8004efc:	4623      	mov	r3, r4
 8004efe:	3401      	adds	r4, #1
 8004f00:	2d00      	cmp	r5, #0
 8004f02:	d1fa      	bne.n	8004efa <strncat+0x4>
 8004f04:	3a01      	subs	r2, #1
 8004f06:	d304      	bcc.n	8004f12 <strncat+0x1c>
 8004f08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f0c:	f803 4b01 	strb.w	r4, [r3], #1
 8004f10:	b904      	cbnz	r4, 8004f14 <strncat+0x1e>
 8004f12:	bd30      	pop	{r4, r5, pc}
 8004f14:	2a00      	cmp	r2, #0
 8004f16:	d1f5      	bne.n	8004f04 <strncat+0xe>
 8004f18:	701a      	strb	r2, [r3, #0]
 8004f1a:	e7f3      	b.n	8004f04 <strncat+0xe>

08004f1c <strncpy>:
 8004f1c:	b510      	push	{r4, lr}
 8004f1e:	3901      	subs	r1, #1
 8004f20:	4603      	mov	r3, r0
 8004f22:	b132      	cbz	r2, 8004f32 <strncpy+0x16>
 8004f24:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004f28:	f803 4b01 	strb.w	r4, [r3], #1
 8004f2c:	3a01      	subs	r2, #1
 8004f2e:	2c00      	cmp	r4, #0
 8004f30:	d1f7      	bne.n	8004f22 <strncpy+0x6>
 8004f32:	441a      	add	r2, r3
 8004f34:	2100      	movs	r1, #0
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d100      	bne.n	8004f3c <strncpy+0x20>
 8004f3a:	bd10      	pop	{r4, pc}
 8004f3c:	f803 1b01 	strb.w	r1, [r3], #1
 8004f40:	e7f9      	b.n	8004f36 <strncpy+0x1a>

08004f42 <print_e>:
 8004f42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f44:	b087      	sub	sp, #28
 8004f46:	ec43 2b10 	vmov	d0, r2, r3
 8004f4a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004f4c:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8004f50:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004f52:	ab04      	add	r3, sp, #16
 8004f54:	9301      	str	r3, [sp, #4]
 8004f56:	ab03      	add	r3, sp, #12
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	1c62      	adds	r2, r4, #1
 8004f5c:	ab05      	add	r3, sp, #20
 8004f5e:	460f      	mov	r7, r1
 8004f60:	2102      	movs	r1, #2
 8004f62:	f001 f905 	bl	8006170 <_dtoa_r>
 8004f66:	9a05      	ldr	r2, [sp, #20]
 8004f68:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d105      	bne.n	8004f7c <print_e+0x3a>
 8004f70:	4601      	mov	r1, r0
 8004f72:	4638      	mov	r0, r7
 8004f74:	f001 f848 	bl	8006008 <strcpy>
 8004f78:	b007      	add	sp, #28
 8004f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f7c:	463b      	mov	r3, r7
 8004f7e:	7801      	ldrb	r1, [r0, #0]
 8004f80:	f803 1b01 	strb.w	r1, [r3], #1
 8004f84:	2c00      	cmp	r4, #0
 8004f86:	bfc8      	it	gt
 8004f88:	2501      	movgt	r5, #1
 8004f8a:	212e      	movs	r1, #46	; 0x2e
 8004f8c:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8004f90:	b10f      	cbz	r7, 8004f96 <print_e+0x54>
 8004f92:	2c00      	cmp	r4, #0
 8004f94:	dc37      	bgt.n	8005006 <print_e+0xc4>
 8004f96:	2e67      	cmp	r6, #103	; 0x67
 8004f98:	d046      	beq.n	8005028 <print_e+0xe6>
 8004f9a:	2e47      	cmp	r6, #71	; 0x47
 8004f9c:	d046      	beq.n	800502c <print_e+0xea>
 8004f9e:	212e      	movs	r1, #46	; 0x2e
 8004fa0:	2030      	movs	r0, #48	; 0x30
 8004fa2:	2c00      	cmp	r4, #0
 8004fa4:	dc38      	bgt.n	8005018 <print_e+0xd6>
 8004fa6:	1e51      	subs	r1, r2, #1
 8004fa8:	2900      	cmp	r1, #0
 8004faa:	bfb8      	it	lt
 8004fac:	f1c2 0201 	rsblt	r2, r2, #1
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	9105      	str	r1, [sp, #20]
 8004fb4:	bfbc      	itt	lt
 8004fb6:	212d      	movlt	r1, #45	; 0x2d
 8004fb8:	9205      	strlt	r2, [sp, #20]
 8004fba:	f800 6b02 	strb.w	r6, [r0], #2
 8004fbe:	bfb8      	it	lt
 8004fc0:	7059      	strblt	r1, [r3, #1]
 8004fc2:	9905      	ldr	r1, [sp, #20]
 8004fc4:	bfa4      	itt	ge
 8004fc6:	222b      	movge	r2, #43	; 0x2b
 8004fc8:	705a      	strbge	r2, [r3, #1]
 8004fca:	2963      	cmp	r1, #99	; 0x63
 8004fcc:	dd0b      	ble.n	8004fe6 <print_e+0xa4>
 8004fce:	2264      	movs	r2, #100	; 0x64
 8004fd0:	fb91 f2f2 	sdiv	r2, r1, r2
 8004fd4:	f102 0430 	add.w	r4, r2, #48	; 0x30
 8004fd8:	1cd8      	adds	r0, r3, #3
 8004fda:	709c      	strb	r4, [r3, #2]
 8004fdc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8004fe0:	fb03 1202 	mla	r2, r3, r2, r1
 8004fe4:	9205      	str	r2, [sp, #20]
 8004fe6:	9a05      	ldr	r2, [sp, #20]
 8004fe8:	230a      	movs	r3, #10
 8004fea:	fb92 f3f3 	sdiv	r3, r2, r3
 8004fee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004ff2:	7001      	strb	r1, [r0, #0]
 8004ff4:	f06f 0109 	mvn.w	r1, #9
 8004ff8:	fb01 2303 	mla	r3, r1, r3, r2
 8004ffc:	3330      	adds	r3, #48	; 0x30
 8004ffe:	7043      	strb	r3, [r0, #1]
 8005000:	2300      	movs	r3, #0
 8005002:	7083      	strb	r3, [r0, #2]
 8005004:	e7b8      	b.n	8004f78 <print_e+0x36>
 8005006:	b10d      	cbz	r5, 800500c <print_e+0xca>
 8005008:	f803 1b01 	strb.w	r1, [r3], #1
 800500c:	7805      	ldrb	r5, [r0, #0]
 800500e:	f803 5b01 	strb.w	r5, [r3], #1
 8005012:	3c01      	subs	r4, #1
 8005014:	2500      	movs	r5, #0
 8005016:	e7b9      	b.n	8004f8c <print_e+0x4a>
 8005018:	b10d      	cbz	r5, 800501e <print_e+0xdc>
 800501a:	f803 1b01 	strb.w	r1, [r3], #1
 800501e:	f803 0b01 	strb.w	r0, [r3], #1
 8005022:	3c01      	subs	r4, #1
 8005024:	2500      	movs	r5, #0
 8005026:	e7bc      	b.n	8004fa2 <print_e+0x60>
 8005028:	2665      	movs	r6, #101	; 0x65
 800502a:	e7bc      	b.n	8004fa6 <print_e+0x64>
 800502c:	2645      	movs	r6, #69	; 0x45
 800502e:	e7ba      	b.n	8004fa6 <print_e+0x64>

08005030 <_gcvt>:
 8005030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005034:	ec55 4b10 	vmov	r4, r5, d0
 8005038:	b088      	sub	sp, #32
 800503a:	4681      	mov	r9, r0
 800503c:	4688      	mov	r8, r1
 800503e:	4616      	mov	r6, r2
 8005040:	469a      	mov	sl, r3
 8005042:	ee10 0a10 	vmov	r0, s0
 8005046:	2200      	movs	r2, #0
 8005048:	2300      	movs	r3, #0
 800504a:	4629      	mov	r1, r5
 800504c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800504e:	f7fb fd45 	bl	8000adc <__aeabi_dcmplt>
 8005052:	b110      	cbz	r0, 800505a <_gcvt+0x2a>
 8005054:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005058:	461d      	mov	r5, r3
 800505a:	2200      	movs	r2, #0
 800505c:	2300      	movs	r3, #0
 800505e:	4620      	mov	r0, r4
 8005060:	4629      	mov	r1, r5
 8005062:	f7fb fd31 	bl	8000ac8 <__aeabi_dcmpeq>
 8005066:	b138      	cbz	r0, 8005078 <_gcvt+0x48>
 8005068:	2330      	movs	r3, #48	; 0x30
 800506a:	7033      	strb	r3, [r6, #0]
 800506c:	2300      	movs	r3, #0
 800506e:	7073      	strb	r3, [r6, #1]
 8005070:	4630      	mov	r0, r6
 8005072:	b008      	add	sp, #32
 8005074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005078:	a34b      	add	r3, pc, #300	; (adr r3, 80051a8 <_gcvt+0x178>)
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	4620      	mov	r0, r4
 8005080:	4629      	mov	r1, r5
 8005082:	f7fb fd35 	bl	8000af0 <__aeabi_dcmple>
 8005086:	b158      	cbz	r0, 80050a0 <_gcvt+0x70>
 8005088:	f108 31ff 	add.w	r1, r8, #4294967295
 800508c:	9100      	str	r1, [sp, #0]
 800508e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8005092:	4622      	mov	r2, r4
 8005094:	462b      	mov	r3, r5
 8005096:	4631      	mov	r1, r6
 8005098:	4648      	mov	r0, r9
 800509a:	f7ff ff52 	bl	8004f42 <print_e>
 800509e:	e7e7      	b.n	8005070 <_gcvt+0x40>
 80050a0:	4640      	mov	r0, r8
 80050a2:	f000 fc03 	bl	80058ac <_mprec_log10>
 80050a6:	4622      	mov	r2, r4
 80050a8:	ec51 0b10 	vmov	r0, r1, d0
 80050ac:	462b      	mov	r3, r5
 80050ae:	f7fb fd1f 	bl	8000af0 <__aeabi_dcmple>
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d1e8      	bne.n	8005088 <_gcvt+0x58>
 80050b6:	ab07      	add	r3, sp, #28
 80050b8:	9301      	str	r3, [sp, #4]
 80050ba:	ab06      	add	r3, sp, #24
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	4642      	mov	r2, r8
 80050c0:	ab05      	add	r3, sp, #20
 80050c2:	ec45 4b10 	vmov	d0, r4, r5
 80050c6:	2102      	movs	r1, #2
 80050c8:	4648      	mov	r0, r9
 80050ca:	f001 f851 	bl	8006170 <_dtoa_r>
 80050ce:	9a05      	ldr	r2, [sp, #20]
 80050d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d00e      	beq.n	80050f6 <_gcvt+0xc6>
 80050d8:	4633      	mov	r3, r6
 80050da:	44b0      	add	r8, r6
 80050dc:	4604      	mov	r4, r0
 80050de:	f810 5b01 	ldrb.w	r5, [r0], #1
 80050e2:	9905      	ldr	r1, [sp, #20]
 80050e4:	eba8 0203 	sub.w	r2, r8, r3
 80050e8:	b10d      	cbz	r5, 80050ee <_gcvt+0xbe>
 80050ea:	2900      	cmp	r1, #0
 80050ec:	dc08      	bgt.n	8005100 <_gcvt+0xd0>
 80050ee:	2000      	movs	r0, #0
 80050f0:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80050f4:	e00d      	b.n	8005112 <_gcvt+0xe2>
 80050f6:	4601      	mov	r1, r0
 80050f8:	4630      	mov	r0, r6
 80050fa:	f000 ff85 	bl	8006008 <strcpy>
 80050fe:	e7b7      	b.n	8005070 <_gcvt+0x40>
 8005100:	3901      	subs	r1, #1
 8005102:	f803 5b01 	strb.w	r5, [r3], #1
 8005106:	9105      	str	r1, [sp, #20]
 8005108:	e7e8      	b.n	80050dc <_gcvt+0xac>
 800510a:	f803 cb01 	strb.w	ip, [r3], #1
 800510e:	3a01      	subs	r2, #1
 8005110:	2001      	movs	r0, #1
 8005112:	2900      	cmp	r1, #0
 8005114:	460d      	mov	r5, r1
 8005116:	dc2a      	bgt.n	800516e <_gcvt+0x13e>
 8005118:	b100      	cbz	r0, 800511c <_gcvt+0xec>
 800511a:	9105      	str	r1, [sp, #20]
 800511c:	b90f      	cbnz	r7, 8005122 <_gcvt+0xf2>
 800511e:	7821      	ldrb	r1, [r4, #0]
 8005120:	b311      	cbz	r1, 8005168 <_gcvt+0x138>
 8005122:	42b3      	cmp	r3, r6
 8005124:	bf04      	itt	eq
 8005126:	2130      	moveq	r1, #48	; 0x30
 8005128:	f803 1b01 	strbeq.w	r1, [r3], #1
 800512c:	212e      	movs	r1, #46	; 0x2e
 800512e:	7019      	strb	r1, [r3, #0]
 8005130:	9905      	ldr	r1, [sp, #20]
 8005132:	4618      	mov	r0, r3
 8005134:	2500      	movs	r5, #0
 8005136:	eba1 0c03 	sub.w	ip, r1, r3
 800513a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800513e:	eb1c 0f00 	cmn.w	ip, r0
 8005142:	d41c      	bmi.n	800517e <_gcvt+0x14e>
 8005144:	2900      	cmp	r1, #0
 8005146:	f1c1 0000 	rsb	r0, r1, #0
 800514a:	bfc8      	it	gt
 800514c:	2000      	movgt	r0, #0
 800514e:	f100 0c01 	add.w	ip, r0, #1
 8005152:	4463      	add	r3, ip
 8005154:	4401      	add	r1, r0
 8005156:	b105      	cbz	r5, 800515a <_gcvt+0x12a>
 8005158:	9105      	str	r1, [sp, #20]
 800515a:	1e61      	subs	r1, r4, #1
 800515c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005160:	b108      	cbz	r0, 8005166 <_gcvt+0x136>
 8005162:	2a00      	cmp	r2, #0
 8005164:	dc0f      	bgt.n	8005186 <_gcvt+0x156>
 8005166:	b9df      	cbnz	r7, 80051a0 <_gcvt+0x170>
 8005168:	2200      	movs	r2, #0
 800516a:	701a      	strb	r2, [r3, #0]
 800516c:	e780      	b.n	8005070 <_gcvt+0x40>
 800516e:	2a00      	cmp	r2, #0
 8005170:	f101 31ff 	add.w	r1, r1, #4294967295
 8005174:	dcc9      	bgt.n	800510a <_gcvt+0xda>
 8005176:	2800      	cmp	r0, #0
 8005178:	d0d0      	beq.n	800511c <_gcvt+0xec>
 800517a:	9505      	str	r5, [sp, #20]
 800517c:	e7ce      	b.n	800511c <_gcvt+0xec>
 800517e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8005182:	2501      	movs	r5, #1
 8005184:	e7db      	b.n	800513e <_gcvt+0x10e>
 8005186:	f803 0b01 	strb.w	r0, [r3], #1
 800518a:	3a01      	subs	r2, #1
 800518c:	e7e6      	b.n	800515c <_gcvt+0x12c>
 800518e:	f801 5b01 	strb.w	r5, [r1], #1
 8005192:	1a60      	subs	r0, r4, r1
 8005194:	2800      	cmp	r0, #0
 8005196:	dcfa      	bgt.n	800518e <_gcvt+0x15e>
 8005198:	2a00      	cmp	r2, #0
 800519a:	bfa8      	it	ge
 800519c:	189b      	addge	r3, r3, r2
 800519e:	e7e3      	b.n	8005168 <_gcvt+0x138>
 80051a0:	4619      	mov	r1, r3
 80051a2:	189c      	adds	r4, r3, r2
 80051a4:	2530      	movs	r5, #48	; 0x30
 80051a6:	e7f4      	b.n	8005192 <_gcvt+0x162>
 80051a8:	eb1c432d 	.word	0xeb1c432d
 80051ac:	3f1a36e2 	.word	0x3f1a36e2

080051b0 <_Balloc>:
 80051b0:	b570      	push	{r4, r5, r6, lr}
 80051b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80051b4:	4604      	mov	r4, r0
 80051b6:	460d      	mov	r5, r1
 80051b8:	b976      	cbnz	r6, 80051d8 <_Balloc+0x28>
 80051ba:	2010      	movs	r0, #16
 80051bc:	f001 fdd6 	bl	8006d6c <malloc>
 80051c0:	4602      	mov	r2, r0
 80051c2:	6260      	str	r0, [r4, #36]	; 0x24
 80051c4:	b920      	cbnz	r0, 80051d0 <_Balloc+0x20>
 80051c6:	4b18      	ldr	r3, [pc, #96]	; (8005228 <_Balloc+0x78>)
 80051c8:	4818      	ldr	r0, [pc, #96]	; (800522c <_Balloc+0x7c>)
 80051ca:	2166      	movs	r1, #102	; 0x66
 80051cc:	f000 ff24 	bl	8006018 <__assert_func>
 80051d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051d4:	6006      	str	r6, [r0, #0]
 80051d6:	60c6      	str	r6, [r0, #12]
 80051d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80051da:	68f3      	ldr	r3, [r6, #12]
 80051dc:	b183      	cbz	r3, 8005200 <_Balloc+0x50>
 80051de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80051e6:	b9b8      	cbnz	r0, 8005218 <_Balloc+0x68>
 80051e8:	2101      	movs	r1, #1
 80051ea:	fa01 f605 	lsl.w	r6, r1, r5
 80051ee:	1d72      	adds	r2, r6, #5
 80051f0:	0092      	lsls	r2, r2, #2
 80051f2:	4620      	mov	r0, r4
 80051f4:	f000 fb78 	bl	80058e8 <_calloc_r>
 80051f8:	b160      	cbz	r0, 8005214 <_Balloc+0x64>
 80051fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80051fe:	e00e      	b.n	800521e <_Balloc+0x6e>
 8005200:	2221      	movs	r2, #33	; 0x21
 8005202:	2104      	movs	r1, #4
 8005204:	4620      	mov	r0, r4
 8005206:	f000 fb6f 	bl	80058e8 <_calloc_r>
 800520a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800520c:	60f0      	str	r0, [r6, #12]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e4      	bne.n	80051de <_Balloc+0x2e>
 8005214:	2000      	movs	r0, #0
 8005216:	bd70      	pop	{r4, r5, r6, pc}
 8005218:	6802      	ldr	r2, [r0, #0]
 800521a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800521e:	2300      	movs	r3, #0
 8005220:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005224:	e7f7      	b.n	8005216 <_Balloc+0x66>
 8005226:	bf00      	nop
 8005228:	080082fc 	.word	0x080082fc
 800522c:	08008313 	.word	0x08008313

08005230 <_Bfree>:
 8005230:	b570      	push	{r4, r5, r6, lr}
 8005232:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005234:	4605      	mov	r5, r0
 8005236:	460c      	mov	r4, r1
 8005238:	b976      	cbnz	r6, 8005258 <_Bfree+0x28>
 800523a:	2010      	movs	r0, #16
 800523c:	f001 fd96 	bl	8006d6c <malloc>
 8005240:	4602      	mov	r2, r0
 8005242:	6268      	str	r0, [r5, #36]	; 0x24
 8005244:	b920      	cbnz	r0, 8005250 <_Bfree+0x20>
 8005246:	4b09      	ldr	r3, [pc, #36]	; (800526c <_Bfree+0x3c>)
 8005248:	4809      	ldr	r0, [pc, #36]	; (8005270 <_Bfree+0x40>)
 800524a:	218a      	movs	r1, #138	; 0x8a
 800524c:	f000 fee4 	bl	8006018 <__assert_func>
 8005250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005254:	6006      	str	r6, [r0, #0]
 8005256:	60c6      	str	r6, [r0, #12]
 8005258:	b13c      	cbz	r4, 800526a <_Bfree+0x3a>
 800525a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800525c:	6862      	ldr	r2, [r4, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005264:	6021      	str	r1, [r4, #0]
 8005266:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800526a:	bd70      	pop	{r4, r5, r6, pc}
 800526c:	080082fc 	.word	0x080082fc
 8005270:	08008313 	.word	0x08008313

08005274 <__multadd>:
 8005274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005278:	690e      	ldr	r6, [r1, #16]
 800527a:	4607      	mov	r7, r0
 800527c:	4698      	mov	r8, r3
 800527e:	460c      	mov	r4, r1
 8005280:	f101 0014 	add.w	r0, r1, #20
 8005284:	2300      	movs	r3, #0
 8005286:	6805      	ldr	r5, [r0, #0]
 8005288:	b2a9      	uxth	r1, r5
 800528a:	fb02 8101 	mla	r1, r2, r1, r8
 800528e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005292:	0c2d      	lsrs	r5, r5, #16
 8005294:	fb02 c505 	mla	r5, r2, r5, ip
 8005298:	b289      	uxth	r1, r1
 800529a:	3301      	adds	r3, #1
 800529c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80052a0:	429e      	cmp	r6, r3
 80052a2:	f840 1b04 	str.w	r1, [r0], #4
 80052a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80052aa:	dcec      	bgt.n	8005286 <__multadd+0x12>
 80052ac:	f1b8 0f00 	cmp.w	r8, #0
 80052b0:	d022      	beq.n	80052f8 <__multadd+0x84>
 80052b2:	68a3      	ldr	r3, [r4, #8]
 80052b4:	42b3      	cmp	r3, r6
 80052b6:	dc19      	bgt.n	80052ec <__multadd+0x78>
 80052b8:	6861      	ldr	r1, [r4, #4]
 80052ba:	4638      	mov	r0, r7
 80052bc:	3101      	adds	r1, #1
 80052be:	f7ff ff77 	bl	80051b0 <_Balloc>
 80052c2:	4605      	mov	r5, r0
 80052c4:	b928      	cbnz	r0, 80052d2 <__multadd+0x5e>
 80052c6:	4602      	mov	r2, r0
 80052c8:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <__multadd+0x8c>)
 80052ca:	480e      	ldr	r0, [pc, #56]	; (8005304 <__multadd+0x90>)
 80052cc:	21b5      	movs	r1, #181	; 0xb5
 80052ce:	f000 fea3 	bl	8006018 <__assert_func>
 80052d2:	6922      	ldr	r2, [r4, #16]
 80052d4:	3202      	adds	r2, #2
 80052d6:	f104 010c 	add.w	r1, r4, #12
 80052da:	0092      	lsls	r2, r2, #2
 80052dc:	300c      	adds	r0, #12
 80052de:	f001 fd4d 	bl	8006d7c <memcpy>
 80052e2:	4621      	mov	r1, r4
 80052e4:	4638      	mov	r0, r7
 80052e6:	f7ff ffa3 	bl	8005230 <_Bfree>
 80052ea:	462c      	mov	r4, r5
 80052ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80052f0:	3601      	adds	r6, #1
 80052f2:	f8c3 8014 	str.w	r8, [r3, #20]
 80052f6:	6126      	str	r6, [r4, #16]
 80052f8:	4620      	mov	r0, r4
 80052fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052fe:	bf00      	nop
 8005300:	08008373 	.word	0x08008373
 8005304:	08008313 	.word	0x08008313

08005308 <__hi0bits>:
 8005308:	0c03      	lsrs	r3, r0, #16
 800530a:	041b      	lsls	r3, r3, #16
 800530c:	b9d3      	cbnz	r3, 8005344 <__hi0bits+0x3c>
 800530e:	0400      	lsls	r0, r0, #16
 8005310:	2310      	movs	r3, #16
 8005312:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005316:	bf04      	itt	eq
 8005318:	0200      	lsleq	r0, r0, #8
 800531a:	3308      	addeq	r3, #8
 800531c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005320:	bf04      	itt	eq
 8005322:	0100      	lsleq	r0, r0, #4
 8005324:	3304      	addeq	r3, #4
 8005326:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800532a:	bf04      	itt	eq
 800532c:	0080      	lsleq	r0, r0, #2
 800532e:	3302      	addeq	r3, #2
 8005330:	2800      	cmp	r0, #0
 8005332:	db05      	blt.n	8005340 <__hi0bits+0x38>
 8005334:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005338:	f103 0301 	add.w	r3, r3, #1
 800533c:	bf08      	it	eq
 800533e:	2320      	moveq	r3, #32
 8005340:	4618      	mov	r0, r3
 8005342:	4770      	bx	lr
 8005344:	2300      	movs	r3, #0
 8005346:	e7e4      	b.n	8005312 <__hi0bits+0xa>

08005348 <__lo0bits>:
 8005348:	6803      	ldr	r3, [r0, #0]
 800534a:	f013 0207 	ands.w	r2, r3, #7
 800534e:	4601      	mov	r1, r0
 8005350:	d00b      	beq.n	800536a <__lo0bits+0x22>
 8005352:	07da      	lsls	r2, r3, #31
 8005354:	d424      	bmi.n	80053a0 <__lo0bits+0x58>
 8005356:	0798      	lsls	r0, r3, #30
 8005358:	bf49      	itett	mi
 800535a:	085b      	lsrmi	r3, r3, #1
 800535c:	089b      	lsrpl	r3, r3, #2
 800535e:	2001      	movmi	r0, #1
 8005360:	600b      	strmi	r3, [r1, #0]
 8005362:	bf5c      	itt	pl
 8005364:	600b      	strpl	r3, [r1, #0]
 8005366:	2002      	movpl	r0, #2
 8005368:	4770      	bx	lr
 800536a:	b298      	uxth	r0, r3
 800536c:	b9b0      	cbnz	r0, 800539c <__lo0bits+0x54>
 800536e:	0c1b      	lsrs	r3, r3, #16
 8005370:	2010      	movs	r0, #16
 8005372:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005376:	bf04      	itt	eq
 8005378:	0a1b      	lsreq	r3, r3, #8
 800537a:	3008      	addeq	r0, #8
 800537c:	071a      	lsls	r2, r3, #28
 800537e:	bf04      	itt	eq
 8005380:	091b      	lsreq	r3, r3, #4
 8005382:	3004      	addeq	r0, #4
 8005384:	079a      	lsls	r2, r3, #30
 8005386:	bf04      	itt	eq
 8005388:	089b      	lsreq	r3, r3, #2
 800538a:	3002      	addeq	r0, #2
 800538c:	07da      	lsls	r2, r3, #31
 800538e:	d403      	bmi.n	8005398 <__lo0bits+0x50>
 8005390:	085b      	lsrs	r3, r3, #1
 8005392:	f100 0001 	add.w	r0, r0, #1
 8005396:	d005      	beq.n	80053a4 <__lo0bits+0x5c>
 8005398:	600b      	str	r3, [r1, #0]
 800539a:	4770      	bx	lr
 800539c:	4610      	mov	r0, r2
 800539e:	e7e8      	b.n	8005372 <__lo0bits+0x2a>
 80053a0:	2000      	movs	r0, #0
 80053a2:	4770      	bx	lr
 80053a4:	2020      	movs	r0, #32
 80053a6:	4770      	bx	lr

080053a8 <__i2b>:
 80053a8:	b510      	push	{r4, lr}
 80053aa:	460c      	mov	r4, r1
 80053ac:	2101      	movs	r1, #1
 80053ae:	f7ff feff 	bl	80051b0 <_Balloc>
 80053b2:	4602      	mov	r2, r0
 80053b4:	b928      	cbnz	r0, 80053c2 <__i2b+0x1a>
 80053b6:	4b05      	ldr	r3, [pc, #20]	; (80053cc <__i2b+0x24>)
 80053b8:	4805      	ldr	r0, [pc, #20]	; (80053d0 <__i2b+0x28>)
 80053ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80053be:	f000 fe2b 	bl	8006018 <__assert_func>
 80053c2:	2301      	movs	r3, #1
 80053c4:	6144      	str	r4, [r0, #20]
 80053c6:	6103      	str	r3, [r0, #16]
 80053c8:	bd10      	pop	{r4, pc}
 80053ca:	bf00      	nop
 80053cc:	08008373 	.word	0x08008373
 80053d0:	08008313 	.word	0x08008313

080053d4 <__multiply>:
 80053d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d8:	4614      	mov	r4, r2
 80053da:	690a      	ldr	r2, [r1, #16]
 80053dc:	6923      	ldr	r3, [r4, #16]
 80053de:	429a      	cmp	r2, r3
 80053e0:	bfb8      	it	lt
 80053e2:	460b      	movlt	r3, r1
 80053e4:	460d      	mov	r5, r1
 80053e6:	bfbc      	itt	lt
 80053e8:	4625      	movlt	r5, r4
 80053ea:	461c      	movlt	r4, r3
 80053ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80053f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80053f4:	68ab      	ldr	r3, [r5, #8]
 80053f6:	6869      	ldr	r1, [r5, #4]
 80053f8:	eb0a 0709 	add.w	r7, sl, r9
 80053fc:	42bb      	cmp	r3, r7
 80053fe:	b085      	sub	sp, #20
 8005400:	bfb8      	it	lt
 8005402:	3101      	addlt	r1, #1
 8005404:	f7ff fed4 	bl	80051b0 <_Balloc>
 8005408:	b930      	cbnz	r0, 8005418 <__multiply+0x44>
 800540a:	4602      	mov	r2, r0
 800540c:	4b42      	ldr	r3, [pc, #264]	; (8005518 <__multiply+0x144>)
 800540e:	4843      	ldr	r0, [pc, #268]	; (800551c <__multiply+0x148>)
 8005410:	f240 115d 	movw	r1, #349	; 0x15d
 8005414:	f000 fe00 	bl	8006018 <__assert_func>
 8005418:	f100 0614 	add.w	r6, r0, #20
 800541c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005420:	4633      	mov	r3, r6
 8005422:	2200      	movs	r2, #0
 8005424:	4543      	cmp	r3, r8
 8005426:	d31e      	bcc.n	8005466 <__multiply+0x92>
 8005428:	f105 0c14 	add.w	ip, r5, #20
 800542c:	f104 0314 	add.w	r3, r4, #20
 8005430:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005434:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005438:	9202      	str	r2, [sp, #8]
 800543a:	ebac 0205 	sub.w	r2, ip, r5
 800543e:	3a15      	subs	r2, #21
 8005440:	f022 0203 	bic.w	r2, r2, #3
 8005444:	3204      	adds	r2, #4
 8005446:	f105 0115 	add.w	r1, r5, #21
 800544a:	458c      	cmp	ip, r1
 800544c:	bf38      	it	cc
 800544e:	2204      	movcc	r2, #4
 8005450:	9201      	str	r2, [sp, #4]
 8005452:	9a02      	ldr	r2, [sp, #8]
 8005454:	9303      	str	r3, [sp, #12]
 8005456:	429a      	cmp	r2, r3
 8005458:	d808      	bhi.n	800546c <__multiply+0x98>
 800545a:	2f00      	cmp	r7, #0
 800545c:	dc55      	bgt.n	800550a <__multiply+0x136>
 800545e:	6107      	str	r7, [r0, #16]
 8005460:	b005      	add	sp, #20
 8005462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005466:	f843 2b04 	str.w	r2, [r3], #4
 800546a:	e7db      	b.n	8005424 <__multiply+0x50>
 800546c:	f8b3 a000 	ldrh.w	sl, [r3]
 8005470:	f1ba 0f00 	cmp.w	sl, #0
 8005474:	d020      	beq.n	80054b8 <__multiply+0xe4>
 8005476:	f105 0e14 	add.w	lr, r5, #20
 800547a:	46b1      	mov	r9, r6
 800547c:	2200      	movs	r2, #0
 800547e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005482:	f8d9 b000 	ldr.w	fp, [r9]
 8005486:	b2a1      	uxth	r1, r4
 8005488:	fa1f fb8b 	uxth.w	fp, fp
 800548c:	fb0a b101 	mla	r1, sl, r1, fp
 8005490:	4411      	add	r1, r2
 8005492:	f8d9 2000 	ldr.w	r2, [r9]
 8005496:	0c24      	lsrs	r4, r4, #16
 8005498:	0c12      	lsrs	r2, r2, #16
 800549a:	fb0a 2404 	mla	r4, sl, r4, r2
 800549e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80054a2:	b289      	uxth	r1, r1
 80054a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80054a8:	45f4      	cmp	ip, lr
 80054aa:	f849 1b04 	str.w	r1, [r9], #4
 80054ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80054b2:	d8e4      	bhi.n	800547e <__multiply+0xaa>
 80054b4:	9901      	ldr	r1, [sp, #4]
 80054b6:	5072      	str	r2, [r6, r1]
 80054b8:	9a03      	ldr	r2, [sp, #12]
 80054ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80054be:	3304      	adds	r3, #4
 80054c0:	f1b9 0f00 	cmp.w	r9, #0
 80054c4:	d01f      	beq.n	8005506 <__multiply+0x132>
 80054c6:	6834      	ldr	r4, [r6, #0]
 80054c8:	f105 0114 	add.w	r1, r5, #20
 80054cc:	46b6      	mov	lr, r6
 80054ce:	f04f 0a00 	mov.w	sl, #0
 80054d2:	880a      	ldrh	r2, [r1, #0]
 80054d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80054d8:	fb09 b202 	mla	r2, r9, r2, fp
 80054dc:	4492      	add	sl, r2
 80054de:	b2a4      	uxth	r4, r4
 80054e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80054e4:	f84e 4b04 	str.w	r4, [lr], #4
 80054e8:	f851 4b04 	ldr.w	r4, [r1], #4
 80054ec:	f8be 2000 	ldrh.w	r2, [lr]
 80054f0:	0c24      	lsrs	r4, r4, #16
 80054f2:	fb09 2404 	mla	r4, r9, r4, r2
 80054f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80054fa:	458c      	cmp	ip, r1
 80054fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005500:	d8e7      	bhi.n	80054d2 <__multiply+0xfe>
 8005502:	9a01      	ldr	r2, [sp, #4]
 8005504:	50b4      	str	r4, [r6, r2]
 8005506:	3604      	adds	r6, #4
 8005508:	e7a3      	b.n	8005452 <__multiply+0x7e>
 800550a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1a5      	bne.n	800545e <__multiply+0x8a>
 8005512:	3f01      	subs	r7, #1
 8005514:	e7a1      	b.n	800545a <__multiply+0x86>
 8005516:	bf00      	nop
 8005518:	08008373 	.word	0x08008373
 800551c:	08008313 	.word	0x08008313

08005520 <__pow5mult>:
 8005520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005524:	4615      	mov	r5, r2
 8005526:	f012 0203 	ands.w	r2, r2, #3
 800552a:	4606      	mov	r6, r0
 800552c:	460f      	mov	r7, r1
 800552e:	d007      	beq.n	8005540 <__pow5mult+0x20>
 8005530:	4c25      	ldr	r4, [pc, #148]	; (80055c8 <__pow5mult+0xa8>)
 8005532:	3a01      	subs	r2, #1
 8005534:	2300      	movs	r3, #0
 8005536:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800553a:	f7ff fe9b 	bl	8005274 <__multadd>
 800553e:	4607      	mov	r7, r0
 8005540:	10ad      	asrs	r5, r5, #2
 8005542:	d03d      	beq.n	80055c0 <__pow5mult+0xa0>
 8005544:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005546:	b97c      	cbnz	r4, 8005568 <__pow5mult+0x48>
 8005548:	2010      	movs	r0, #16
 800554a:	f001 fc0f 	bl	8006d6c <malloc>
 800554e:	4602      	mov	r2, r0
 8005550:	6270      	str	r0, [r6, #36]	; 0x24
 8005552:	b928      	cbnz	r0, 8005560 <__pow5mult+0x40>
 8005554:	4b1d      	ldr	r3, [pc, #116]	; (80055cc <__pow5mult+0xac>)
 8005556:	481e      	ldr	r0, [pc, #120]	; (80055d0 <__pow5mult+0xb0>)
 8005558:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800555c:	f000 fd5c 	bl	8006018 <__assert_func>
 8005560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005564:	6004      	str	r4, [r0, #0]
 8005566:	60c4      	str	r4, [r0, #12]
 8005568:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800556c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005570:	b94c      	cbnz	r4, 8005586 <__pow5mult+0x66>
 8005572:	f240 2171 	movw	r1, #625	; 0x271
 8005576:	4630      	mov	r0, r6
 8005578:	f7ff ff16 	bl	80053a8 <__i2b>
 800557c:	2300      	movs	r3, #0
 800557e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005582:	4604      	mov	r4, r0
 8005584:	6003      	str	r3, [r0, #0]
 8005586:	f04f 0900 	mov.w	r9, #0
 800558a:	07eb      	lsls	r3, r5, #31
 800558c:	d50a      	bpl.n	80055a4 <__pow5mult+0x84>
 800558e:	4639      	mov	r1, r7
 8005590:	4622      	mov	r2, r4
 8005592:	4630      	mov	r0, r6
 8005594:	f7ff ff1e 	bl	80053d4 <__multiply>
 8005598:	4639      	mov	r1, r7
 800559a:	4680      	mov	r8, r0
 800559c:	4630      	mov	r0, r6
 800559e:	f7ff fe47 	bl	8005230 <_Bfree>
 80055a2:	4647      	mov	r7, r8
 80055a4:	106d      	asrs	r5, r5, #1
 80055a6:	d00b      	beq.n	80055c0 <__pow5mult+0xa0>
 80055a8:	6820      	ldr	r0, [r4, #0]
 80055aa:	b938      	cbnz	r0, 80055bc <__pow5mult+0x9c>
 80055ac:	4622      	mov	r2, r4
 80055ae:	4621      	mov	r1, r4
 80055b0:	4630      	mov	r0, r6
 80055b2:	f7ff ff0f 	bl	80053d4 <__multiply>
 80055b6:	6020      	str	r0, [r4, #0]
 80055b8:	f8c0 9000 	str.w	r9, [r0]
 80055bc:	4604      	mov	r4, r0
 80055be:	e7e4      	b.n	800558a <__pow5mult+0x6a>
 80055c0:	4638      	mov	r0, r7
 80055c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055c6:	bf00      	nop
 80055c8:	08008478 	.word	0x08008478
 80055cc:	080082fc 	.word	0x080082fc
 80055d0:	08008313 	.word	0x08008313

080055d4 <__lshift>:
 80055d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d8:	460c      	mov	r4, r1
 80055da:	6849      	ldr	r1, [r1, #4]
 80055dc:	6923      	ldr	r3, [r4, #16]
 80055de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80055e2:	68a3      	ldr	r3, [r4, #8]
 80055e4:	4607      	mov	r7, r0
 80055e6:	4691      	mov	r9, r2
 80055e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80055ec:	f108 0601 	add.w	r6, r8, #1
 80055f0:	42b3      	cmp	r3, r6
 80055f2:	db0b      	blt.n	800560c <__lshift+0x38>
 80055f4:	4638      	mov	r0, r7
 80055f6:	f7ff fddb 	bl	80051b0 <_Balloc>
 80055fa:	4605      	mov	r5, r0
 80055fc:	b948      	cbnz	r0, 8005612 <__lshift+0x3e>
 80055fe:	4602      	mov	r2, r0
 8005600:	4b28      	ldr	r3, [pc, #160]	; (80056a4 <__lshift+0xd0>)
 8005602:	4829      	ldr	r0, [pc, #164]	; (80056a8 <__lshift+0xd4>)
 8005604:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005608:	f000 fd06 	bl	8006018 <__assert_func>
 800560c:	3101      	adds	r1, #1
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	e7ee      	b.n	80055f0 <__lshift+0x1c>
 8005612:	2300      	movs	r3, #0
 8005614:	f100 0114 	add.w	r1, r0, #20
 8005618:	f100 0210 	add.w	r2, r0, #16
 800561c:	4618      	mov	r0, r3
 800561e:	4553      	cmp	r3, sl
 8005620:	db33      	blt.n	800568a <__lshift+0xb6>
 8005622:	6920      	ldr	r0, [r4, #16]
 8005624:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005628:	f104 0314 	add.w	r3, r4, #20
 800562c:	f019 091f 	ands.w	r9, r9, #31
 8005630:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005634:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005638:	d02b      	beq.n	8005692 <__lshift+0xbe>
 800563a:	f1c9 0e20 	rsb	lr, r9, #32
 800563e:	468a      	mov	sl, r1
 8005640:	2200      	movs	r2, #0
 8005642:	6818      	ldr	r0, [r3, #0]
 8005644:	fa00 f009 	lsl.w	r0, r0, r9
 8005648:	4302      	orrs	r2, r0
 800564a:	f84a 2b04 	str.w	r2, [sl], #4
 800564e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005652:	459c      	cmp	ip, r3
 8005654:	fa22 f20e 	lsr.w	r2, r2, lr
 8005658:	d8f3      	bhi.n	8005642 <__lshift+0x6e>
 800565a:	ebac 0304 	sub.w	r3, ip, r4
 800565e:	3b15      	subs	r3, #21
 8005660:	f023 0303 	bic.w	r3, r3, #3
 8005664:	3304      	adds	r3, #4
 8005666:	f104 0015 	add.w	r0, r4, #21
 800566a:	4584      	cmp	ip, r0
 800566c:	bf38      	it	cc
 800566e:	2304      	movcc	r3, #4
 8005670:	50ca      	str	r2, [r1, r3]
 8005672:	b10a      	cbz	r2, 8005678 <__lshift+0xa4>
 8005674:	f108 0602 	add.w	r6, r8, #2
 8005678:	3e01      	subs	r6, #1
 800567a:	4638      	mov	r0, r7
 800567c:	612e      	str	r6, [r5, #16]
 800567e:	4621      	mov	r1, r4
 8005680:	f7ff fdd6 	bl	8005230 <_Bfree>
 8005684:	4628      	mov	r0, r5
 8005686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800568a:	f842 0f04 	str.w	r0, [r2, #4]!
 800568e:	3301      	adds	r3, #1
 8005690:	e7c5      	b.n	800561e <__lshift+0x4a>
 8005692:	3904      	subs	r1, #4
 8005694:	f853 2b04 	ldr.w	r2, [r3], #4
 8005698:	f841 2f04 	str.w	r2, [r1, #4]!
 800569c:	459c      	cmp	ip, r3
 800569e:	d8f9      	bhi.n	8005694 <__lshift+0xc0>
 80056a0:	e7ea      	b.n	8005678 <__lshift+0xa4>
 80056a2:	bf00      	nop
 80056a4:	08008373 	.word	0x08008373
 80056a8:	08008313 	.word	0x08008313

080056ac <__mcmp>:
 80056ac:	b530      	push	{r4, r5, lr}
 80056ae:	6902      	ldr	r2, [r0, #16]
 80056b0:	690c      	ldr	r4, [r1, #16]
 80056b2:	1b12      	subs	r2, r2, r4
 80056b4:	d10e      	bne.n	80056d4 <__mcmp+0x28>
 80056b6:	f100 0314 	add.w	r3, r0, #20
 80056ba:	3114      	adds	r1, #20
 80056bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80056c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80056c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80056c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80056cc:	42a5      	cmp	r5, r4
 80056ce:	d003      	beq.n	80056d8 <__mcmp+0x2c>
 80056d0:	d305      	bcc.n	80056de <__mcmp+0x32>
 80056d2:	2201      	movs	r2, #1
 80056d4:	4610      	mov	r0, r2
 80056d6:	bd30      	pop	{r4, r5, pc}
 80056d8:	4283      	cmp	r3, r0
 80056da:	d3f3      	bcc.n	80056c4 <__mcmp+0x18>
 80056dc:	e7fa      	b.n	80056d4 <__mcmp+0x28>
 80056de:	f04f 32ff 	mov.w	r2, #4294967295
 80056e2:	e7f7      	b.n	80056d4 <__mcmp+0x28>

080056e4 <__mdiff>:
 80056e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e8:	460c      	mov	r4, r1
 80056ea:	4606      	mov	r6, r0
 80056ec:	4611      	mov	r1, r2
 80056ee:	4620      	mov	r0, r4
 80056f0:	4617      	mov	r7, r2
 80056f2:	f7ff ffdb 	bl	80056ac <__mcmp>
 80056f6:	1e05      	subs	r5, r0, #0
 80056f8:	d110      	bne.n	800571c <__mdiff+0x38>
 80056fa:	4629      	mov	r1, r5
 80056fc:	4630      	mov	r0, r6
 80056fe:	f7ff fd57 	bl	80051b0 <_Balloc>
 8005702:	b930      	cbnz	r0, 8005712 <__mdiff+0x2e>
 8005704:	4b39      	ldr	r3, [pc, #228]	; (80057ec <__mdiff+0x108>)
 8005706:	4602      	mov	r2, r0
 8005708:	f240 2132 	movw	r1, #562	; 0x232
 800570c:	4838      	ldr	r0, [pc, #224]	; (80057f0 <__mdiff+0x10c>)
 800570e:	f000 fc83 	bl	8006018 <__assert_func>
 8005712:	2301      	movs	r3, #1
 8005714:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005718:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800571c:	bfa4      	itt	ge
 800571e:	463b      	movge	r3, r7
 8005720:	4627      	movge	r7, r4
 8005722:	4630      	mov	r0, r6
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	bfa6      	itte	ge
 8005728:	461c      	movge	r4, r3
 800572a:	2500      	movge	r5, #0
 800572c:	2501      	movlt	r5, #1
 800572e:	f7ff fd3f 	bl	80051b0 <_Balloc>
 8005732:	b920      	cbnz	r0, 800573e <__mdiff+0x5a>
 8005734:	4b2d      	ldr	r3, [pc, #180]	; (80057ec <__mdiff+0x108>)
 8005736:	4602      	mov	r2, r0
 8005738:	f44f 7110 	mov.w	r1, #576	; 0x240
 800573c:	e7e6      	b.n	800570c <__mdiff+0x28>
 800573e:	693e      	ldr	r6, [r7, #16]
 8005740:	60c5      	str	r5, [r0, #12]
 8005742:	6925      	ldr	r5, [r4, #16]
 8005744:	f107 0114 	add.w	r1, r7, #20
 8005748:	f104 0914 	add.w	r9, r4, #20
 800574c:	f100 0e14 	add.w	lr, r0, #20
 8005750:	f107 0210 	add.w	r2, r7, #16
 8005754:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005758:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800575c:	46f2      	mov	sl, lr
 800575e:	2700      	movs	r7, #0
 8005760:	f859 3b04 	ldr.w	r3, [r9], #4
 8005764:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005768:	fa1f f883 	uxth.w	r8, r3
 800576c:	fa17 f78b 	uxtah	r7, r7, fp
 8005770:	0c1b      	lsrs	r3, r3, #16
 8005772:	eba7 0808 	sub.w	r8, r7, r8
 8005776:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800577a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800577e:	fa1f f888 	uxth.w	r8, r8
 8005782:	141f      	asrs	r7, r3, #16
 8005784:	454d      	cmp	r5, r9
 8005786:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800578a:	f84a 3b04 	str.w	r3, [sl], #4
 800578e:	d8e7      	bhi.n	8005760 <__mdiff+0x7c>
 8005790:	1b2b      	subs	r3, r5, r4
 8005792:	3b15      	subs	r3, #21
 8005794:	f023 0303 	bic.w	r3, r3, #3
 8005798:	3304      	adds	r3, #4
 800579a:	3415      	adds	r4, #21
 800579c:	42a5      	cmp	r5, r4
 800579e:	bf38      	it	cc
 80057a0:	2304      	movcc	r3, #4
 80057a2:	4419      	add	r1, r3
 80057a4:	4473      	add	r3, lr
 80057a6:	469e      	mov	lr, r3
 80057a8:	460d      	mov	r5, r1
 80057aa:	4565      	cmp	r5, ip
 80057ac:	d30e      	bcc.n	80057cc <__mdiff+0xe8>
 80057ae:	f10c 0203 	add.w	r2, ip, #3
 80057b2:	1a52      	subs	r2, r2, r1
 80057b4:	f022 0203 	bic.w	r2, r2, #3
 80057b8:	3903      	subs	r1, #3
 80057ba:	458c      	cmp	ip, r1
 80057bc:	bf38      	it	cc
 80057be:	2200      	movcc	r2, #0
 80057c0:	441a      	add	r2, r3
 80057c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80057c6:	b17b      	cbz	r3, 80057e8 <__mdiff+0x104>
 80057c8:	6106      	str	r6, [r0, #16]
 80057ca:	e7a5      	b.n	8005718 <__mdiff+0x34>
 80057cc:	f855 8b04 	ldr.w	r8, [r5], #4
 80057d0:	fa17 f488 	uxtah	r4, r7, r8
 80057d4:	1422      	asrs	r2, r4, #16
 80057d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80057da:	b2a4      	uxth	r4, r4
 80057dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80057e0:	f84e 4b04 	str.w	r4, [lr], #4
 80057e4:	1417      	asrs	r7, r2, #16
 80057e6:	e7e0      	b.n	80057aa <__mdiff+0xc6>
 80057e8:	3e01      	subs	r6, #1
 80057ea:	e7ea      	b.n	80057c2 <__mdiff+0xde>
 80057ec:	08008373 	.word	0x08008373
 80057f0:	08008313 	.word	0x08008313

080057f4 <__d2b>:
 80057f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80057f8:	4689      	mov	r9, r1
 80057fa:	2101      	movs	r1, #1
 80057fc:	ec57 6b10 	vmov	r6, r7, d0
 8005800:	4690      	mov	r8, r2
 8005802:	f7ff fcd5 	bl	80051b0 <_Balloc>
 8005806:	4604      	mov	r4, r0
 8005808:	b930      	cbnz	r0, 8005818 <__d2b+0x24>
 800580a:	4602      	mov	r2, r0
 800580c:	4b25      	ldr	r3, [pc, #148]	; (80058a4 <__d2b+0xb0>)
 800580e:	4826      	ldr	r0, [pc, #152]	; (80058a8 <__d2b+0xb4>)
 8005810:	f240 310a 	movw	r1, #778	; 0x30a
 8005814:	f000 fc00 	bl	8006018 <__assert_func>
 8005818:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800581c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005820:	bb35      	cbnz	r5, 8005870 <__d2b+0x7c>
 8005822:	2e00      	cmp	r6, #0
 8005824:	9301      	str	r3, [sp, #4]
 8005826:	d028      	beq.n	800587a <__d2b+0x86>
 8005828:	4668      	mov	r0, sp
 800582a:	9600      	str	r6, [sp, #0]
 800582c:	f7ff fd8c 	bl	8005348 <__lo0bits>
 8005830:	9900      	ldr	r1, [sp, #0]
 8005832:	b300      	cbz	r0, 8005876 <__d2b+0x82>
 8005834:	9a01      	ldr	r2, [sp, #4]
 8005836:	f1c0 0320 	rsb	r3, r0, #32
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
 800583e:	430b      	orrs	r3, r1
 8005840:	40c2      	lsrs	r2, r0
 8005842:	6163      	str	r3, [r4, #20]
 8005844:	9201      	str	r2, [sp, #4]
 8005846:	9b01      	ldr	r3, [sp, #4]
 8005848:	61a3      	str	r3, [r4, #24]
 800584a:	2b00      	cmp	r3, #0
 800584c:	bf14      	ite	ne
 800584e:	2202      	movne	r2, #2
 8005850:	2201      	moveq	r2, #1
 8005852:	6122      	str	r2, [r4, #16]
 8005854:	b1d5      	cbz	r5, 800588c <__d2b+0x98>
 8005856:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800585a:	4405      	add	r5, r0
 800585c:	f8c9 5000 	str.w	r5, [r9]
 8005860:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005864:	f8c8 0000 	str.w	r0, [r8]
 8005868:	4620      	mov	r0, r4
 800586a:	b003      	add	sp, #12
 800586c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005874:	e7d5      	b.n	8005822 <__d2b+0x2e>
 8005876:	6161      	str	r1, [r4, #20]
 8005878:	e7e5      	b.n	8005846 <__d2b+0x52>
 800587a:	a801      	add	r0, sp, #4
 800587c:	f7ff fd64 	bl	8005348 <__lo0bits>
 8005880:	9b01      	ldr	r3, [sp, #4]
 8005882:	6163      	str	r3, [r4, #20]
 8005884:	2201      	movs	r2, #1
 8005886:	6122      	str	r2, [r4, #16]
 8005888:	3020      	adds	r0, #32
 800588a:	e7e3      	b.n	8005854 <__d2b+0x60>
 800588c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005890:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005894:	f8c9 0000 	str.w	r0, [r9]
 8005898:	6918      	ldr	r0, [r3, #16]
 800589a:	f7ff fd35 	bl	8005308 <__hi0bits>
 800589e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80058a2:	e7df      	b.n	8005864 <__d2b+0x70>
 80058a4:	08008373 	.word	0x08008373
 80058a8:	08008313 	.word	0x08008313

080058ac <_mprec_log10>:
 80058ac:	2817      	cmp	r0, #23
 80058ae:	b5d0      	push	{r4, r6, r7, lr}
 80058b0:	4604      	mov	r4, r0
 80058b2:	dc07      	bgt.n	80058c4 <_mprec_log10+0x18>
 80058b4:	4809      	ldr	r0, [pc, #36]	; (80058dc <_mprec_log10+0x30>)
 80058b6:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80058ba:	e9d4 0100 	ldrd	r0, r1, [r4]
 80058be:	ec41 0b10 	vmov	d0, r0, r1
 80058c2:	bdd0      	pop	{r4, r6, r7, pc}
 80058c4:	4906      	ldr	r1, [pc, #24]	; (80058e0 <_mprec_log10+0x34>)
 80058c6:	4f07      	ldr	r7, [pc, #28]	; (80058e4 <_mprec_log10+0x38>)
 80058c8:	2000      	movs	r0, #0
 80058ca:	2600      	movs	r6, #0
 80058cc:	4632      	mov	r2, r6
 80058ce:	463b      	mov	r3, r7
 80058d0:	f7fa fe92 	bl	80005f8 <__aeabi_dmul>
 80058d4:	3c01      	subs	r4, #1
 80058d6:	d1f9      	bne.n	80058cc <_mprec_log10+0x20>
 80058d8:	e7f1      	b.n	80058be <_mprec_log10+0x12>
 80058da:	bf00      	nop
 80058dc:	080083b0 	.word	0x080083b0
 80058e0:	3ff00000 	.word	0x3ff00000
 80058e4:	40240000 	.word	0x40240000

080058e8 <_calloc_r>:
 80058e8:	b513      	push	{r0, r1, r4, lr}
 80058ea:	434a      	muls	r2, r1
 80058ec:	4611      	mov	r1, r2
 80058ee:	9201      	str	r2, [sp, #4]
 80058f0:	f000 f80a 	bl	8005908 <_malloc_r>
 80058f4:	4604      	mov	r4, r0
 80058f6:	b118      	cbz	r0, 8005900 <_calloc_r+0x18>
 80058f8:	9a01      	ldr	r2, [sp, #4]
 80058fa:	2100      	movs	r1, #0
 80058fc:	f7ff fac4 	bl	8004e88 <memset>
 8005900:	4620      	mov	r0, r4
 8005902:	b002      	add	sp, #8
 8005904:	bd10      	pop	{r4, pc}
	...

08005908 <_malloc_r>:
 8005908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590a:	1ccd      	adds	r5, r1, #3
 800590c:	f025 0503 	bic.w	r5, r5, #3
 8005910:	3508      	adds	r5, #8
 8005912:	2d0c      	cmp	r5, #12
 8005914:	bf38      	it	cc
 8005916:	250c      	movcc	r5, #12
 8005918:	2d00      	cmp	r5, #0
 800591a:	4606      	mov	r6, r0
 800591c:	db01      	blt.n	8005922 <_malloc_r+0x1a>
 800591e:	42a9      	cmp	r1, r5
 8005920:	d903      	bls.n	800592a <_malloc_r+0x22>
 8005922:	230c      	movs	r3, #12
 8005924:	6033      	str	r3, [r6, #0]
 8005926:	2000      	movs	r0, #0
 8005928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800592a:	f001 fa4f 	bl	8006dcc <__malloc_lock>
 800592e:	4921      	ldr	r1, [pc, #132]	; (80059b4 <_malloc_r+0xac>)
 8005930:	680a      	ldr	r2, [r1, #0]
 8005932:	4614      	mov	r4, r2
 8005934:	b99c      	cbnz	r4, 800595e <_malloc_r+0x56>
 8005936:	4f20      	ldr	r7, [pc, #128]	; (80059b8 <_malloc_r+0xb0>)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	b923      	cbnz	r3, 8005946 <_malloc_r+0x3e>
 800593c:	4621      	mov	r1, r4
 800593e:	4630      	mov	r0, r6
 8005940:	f000 fb52 	bl	8005fe8 <_sbrk_r>
 8005944:	6038      	str	r0, [r7, #0]
 8005946:	4629      	mov	r1, r5
 8005948:	4630      	mov	r0, r6
 800594a:	f000 fb4d 	bl	8005fe8 <_sbrk_r>
 800594e:	1c43      	adds	r3, r0, #1
 8005950:	d123      	bne.n	800599a <_malloc_r+0x92>
 8005952:	230c      	movs	r3, #12
 8005954:	6033      	str	r3, [r6, #0]
 8005956:	4630      	mov	r0, r6
 8005958:	f001 fa3e 	bl	8006dd8 <__malloc_unlock>
 800595c:	e7e3      	b.n	8005926 <_malloc_r+0x1e>
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	1b5b      	subs	r3, r3, r5
 8005962:	d417      	bmi.n	8005994 <_malloc_r+0x8c>
 8005964:	2b0b      	cmp	r3, #11
 8005966:	d903      	bls.n	8005970 <_malloc_r+0x68>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	441c      	add	r4, r3
 800596c:	6025      	str	r5, [r4, #0]
 800596e:	e004      	b.n	800597a <_malloc_r+0x72>
 8005970:	6863      	ldr	r3, [r4, #4]
 8005972:	42a2      	cmp	r2, r4
 8005974:	bf0c      	ite	eq
 8005976:	600b      	streq	r3, [r1, #0]
 8005978:	6053      	strne	r3, [r2, #4]
 800597a:	4630      	mov	r0, r6
 800597c:	f001 fa2c 	bl	8006dd8 <__malloc_unlock>
 8005980:	f104 000b 	add.w	r0, r4, #11
 8005984:	1d23      	adds	r3, r4, #4
 8005986:	f020 0007 	bic.w	r0, r0, #7
 800598a:	1ac2      	subs	r2, r0, r3
 800598c:	d0cc      	beq.n	8005928 <_malloc_r+0x20>
 800598e:	1a1b      	subs	r3, r3, r0
 8005990:	50a3      	str	r3, [r4, r2]
 8005992:	e7c9      	b.n	8005928 <_malloc_r+0x20>
 8005994:	4622      	mov	r2, r4
 8005996:	6864      	ldr	r4, [r4, #4]
 8005998:	e7cc      	b.n	8005934 <_malloc_r+0x2c>
 800599a:	1cc4      	adds	r4, r0, #3
 800599c:	f024 0403 	bic.w	r4, r4, #3
 80059a0:	42a0      	cmp	r0, r4
 80059a2:	d0e3      	beq.n	800596c <_malloc_r+0x64>
 80059a4:	1a21      	subs	r1, r4, r0
 80059a6:	4630      	mov	r0, r6
 80059a8:	f000 fb1e 	bl	8005fe8 <_sbrk_r>
 80059ac:	3001      	adds	r0, #1
 80059ae:	d1dd      	bne.n	800596c <_malloc_r+0x64>
 80059b0:	e7cf      	b.n	8005952 <_malloc_r+0x4a>
 80059b2:	bf00      	nop
 80059b4:	200000a0 	.word	0x200000a0
 80059b8:	200000a4 	.word	0x200000a4

080059bc <_realloc_r>:
 80059bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059be:	4607      	mov	r7, r0
 80059c0:	4614      	mov	r4, r2
 80059c2:	460e      	mov	r6, r1
 80059c4:	b921      	cbnz	r1, 80059d0 <_realloc_r+0x14>
 80059c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80059ca:	4611      	mov	r1, r2
 80059cc:	f7ff bf9c 	b.w	8005908 <_malloc_r>
 80059d0:	b922      	cbnz	r2, 80059dc <_realloc_r+0x20>
 80059d2:	f001 fa07 	bl	8006de4 <_free_r>
 80059d6:	4625      	mov	r5, r4
 80059d8:	4628      	mov	r0, r5
 80059da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059dc:	f001 fa52 	bl	8006e84 <_malloc_usable_size_r>
 80059e0:	42a0      	cmp	r0, r4
 80059e2:	d20f      	bcs.n	8005a04 <_realloc_r+0x48>
 80059e4:	4621      	mov	r1, r4
 80059e6:	4638      	mov	r0, r7
 80059e8:	f7ff ff8e 	bl	8005908 <_malloc_r>
 80059ec:	4605      	mov	r5, r0
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d0f2      	beq.n	80059d8 <_realloc_r+0x1c>
 80059f2:	4631      	mov	r1, r6
 80059f4:	4622      	mov	r2, r4
 80059f6:	f001 f9c1 	bl	8006d7c <memcpy>
 80059fa:	4631      	mov	r1, r6
 80059fc:	4638      	mov	r0, r7
 80059fe:	f001 f9f1 	bl	8006de4 <_free_r>
 8005a02:	e7e9      	b.n	80059d8 <_realloc_r+0x1c>
 8005a04:	4635      	mov	r5, r6
 8005a06:	e7e7      	b.n	80059d8 <_realloc_r+0x1c>

08005a08 <__ssputs_r>:
 8005a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a0c:	688e      	ldr	r6, [r1, #8]
 8005a0e:	429e      	cmp	r6, r3
 8005a10:	4682      	mov	sl, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	4690      	mov	r8, r2
 8005a16:	461f      	mov	r7, r3
 8005a18:	d838      	bhi.n	8005a8c <__ssputs_r+0x84>
 8005a1a:	898a      	ldrh	r2, [r1, #12]
 8005a1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a20:	d032      	beq.n	8005a88 <__ssputs_r+0x80>
 8005a22:	6825      	ldr	r5, [r4, #0]
 8005a24:	6909      	ldr	r1, [r1, #16]
 8005a26:	eba5 0901 	sub.w	r9, r5, r1
 8005a2a:	6965      	ldr	r5, [r4, #20]
 8005a2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a34:	3301      	adds	r3, #1
 8005a36:	444b      	add	r3, r9
 8005a38:	106d      	asrs	r5, r5, #1
 8005a3a:	429d      	cmp	r5, r3
 8005a3c:	bf38      	it	cc
 8005a3e:	461d      	movcc	r5, r3
 8005a40:	0553      	lsls	r3, r2, #21
 8005a42:	d531      	bpl.n	8005aa8 <__ssputs_r+0xa0>
 8005a44:	4629      	mov	r1, r5
 8005a46:	f7ff ff5f 	bl	8005908 <_malloc_r>
 8005a4a:	4606      	mov	r6, r0
 8005a4c:	b950      	cbnz	r0, 8005a64 <__ssputs_r+0x5c>
 8005a4e:	230c      	movs	r3, #12
 8005a50:	f8ca 3000 	str.w	r3, [sl]
 8005a54:	89a3      	ldrh	r3, [r4, #12]
 8005a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a5a:	81a3      	strh	r3, [r4, #12]
 8005a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a64:	6921      	ldr	r1, [r4, #16]
 8005a66:	464a      	mov	r2, r9
 8005a68:	f001 f988 	bl	8006d7c <memcpy>
 8005a6c:	89a3      	ldrh	r3, [r4, #12]
 8005a6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a76:	81a3      	strh	r3, [r4, #12]
 8005a78:	6126      	str	r6, [r4, #16]
 8005a7a:	6165      	str	r5, [r4, #20]
 8005a7c:	444e      	add	r6, r9
 8005a7e:	eba5 0509 	sub.w	r5, r5, r9
 8005a82:	6026      	str	r6, [r4, #0]
 8005a84:	60a5      	str	r5, [r4, #8]
 8005a86:	463e      	mov	r6, r7
 8005a88:	42be      	cmp	r6, r7
 8005a8a:	d900      	bls.n	8005a8e <__ssputs_r+0x86>
 8005a8c:	463e      	mov	r6, r7
 8005a8e:	4632      	mov	r2, r6
 8005a90:	6820      	ldr	r0, [r4, #0]
 8005a92:	4641      	mov	r1, r8
 8005a94:	f001 f980 	bl	8006d98 <memmove>
 8005a98:	68a3      	ldr	r3, [r4, #8]
 8005a9a:	6822      	ldr	r2, [r4, #0]
 8005a9c:	1b9b      	subs	r3, r3, r6
 8005a9e:	4432      	add	r2, r6
 8005aa0:	60a3      	str	r3, [r4, #8]
 8005aa2:	6022      	str	r2, [r4, #0]
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	e7db      	b.n	8005a60 <__ssputs_r+0x58>
 8005aa8:	462a      	mov	r2, r5
 8005aaa:	f7ff ff87 	bl	80059bc <_realloc_r>
 8005aae:	4606      	mov	r6, r0
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	d1e1      	bne.n	8005a78 <__ssputs_r+0x70>
 8005ab4:	6921      	ldr	r1, [r4, #16]
 8005ab6:	4650      	mov	r0, sl
 8005ab8:	f001 f994 	bl	8006de4 <_free_r>
 8005abc:	e7c7      	b.n	8005a4e <__ssputs_r+0x46>
	...

08005ac0 <_svfiprintf_r>:
 8005ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac4:	4698      	mov	r8, r3
 8005ac6:	898b      	ldrh	r3, [r1, #12]
 8005ac8:	061b      	lsls	r3, r3, #24
 8005aca:	b09d      	sub	sp, #116	; 0x74
 8005acc:	4607      	mov	r7, r0
 8005ace:	460d      	mov	r5, r1
 8005ad0:	4614      	mov	r4, r2
 8005ad2:	d50e      	bpl.n	8005af2 <_svfiprintf_r+0x32>
 8005ad4:	690b      	ldr	r3, [r1, #16]
 8005ad6:	b963      	cbnz	r3, 8005af2 <_svfiprintf_r+0x32>
 8005ad8:	2140      	movs	r1, #64	; 0x40
 8005ada:	f7ff ff15 	bl	8005908 <_malloc_r>
 8005ade:	6028      	str	r0, [r5, #0]
 8005ae0:	6128      	str	r0, [r5, #16]
 8005ae2:	b920      	cbnz	r0, 8005aee <_svfiprintf_r+0x2e>
 8005ae4:	230c      	movs	r3, #12
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aec:	e0d1      	b.n	8005c92 <_svfiprintf_r+0x1d2>
 8005aee:	2340      	movs	r3, #64	; 0x40
 8005af0:	616b      	str	r3, [r5, #20]
 8005af2:	2300      	movs	r3, #0
 8005af4:	9309      	str	r3, [sp, #36]	; 0x24
 8005af6:	2320      	movs	r3, #32
 8005af8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005afc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b00:	2330      	movs	r3, #48	; 0x30
 8005b02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005cac <_svfiprintf_r+0x1ec>
 8005b06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b0a:	f04f 0901 	mov.w	r9, #1
 8005b0e:	4623      	mov	r3, r4
 8005b10:	469a      	mov	sl, r3
 8005b12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b16:	b10a      	cbz	r2, 8005b1c <_svfiprintf_r+0x5c>
 8005b18:	2a25      	cmp	r2, #37	; 0x25
 8005b1a:	d1f9      	bne.n	8005b10 <_svfiprintf_r+0x50>
 8005b1c:	ebba 0b04 	subs.w	fp, sl, r4
 8005b20:	d00b      	beq.n	8005b3a <_svfiprintf_r+0x7a>
 8005b22:	465b      	mov	r3, fp
 8005b24:	4622      	mov	r2, r4
 8005b26:	4629      	mov	r1, r5
 8005b28:	4638      	mov	r0, r7
 8005b2a:	f7ff ff6d 	bl	8005a08 <__ssputs_r>
 8005b2e:	3001      	adds	r0, #1
 8005b30:	f000 80aa 	beq.w	8005c88 <_svfiprintf_r+0x1c8>
 8005b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b36:	445a      	add	r2, fp
 8005b38:	9209      	str	r2, [sp, #36]	; 0x24
 8005b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 80a2 	beq.w	8005c88 <_svfiprintf_r+0x1c8>
 8005b44:	2300      	movs	r3, #0
 8005b46:	f04f 32ff 	mov.w	r2, #4294967295
 8005b4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b4e:	f10a 0a01 	add.w	sl, sl, #1
 8005b52:	9304      	str	r3, [sp, #16]
 8005b54:	9307      	str	r3, [sp, #28]
 8005b56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b5a:	931a      	str	r3, [sp, #104]	; 0x68
 8005b5c:	4654      	mov	r4, sl
 8005b5e:	2205      	movs	r2, #5
 8005b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b64:	4851      	ldr	r0, [pc, #324]	; (8005cac <_svfiprintf_r+0x1ec>)
 8005b66:	f7fa fb3b 	bl	80001e0 <memchr>
 8005b6a:	9a04      	ldr	r2, [sp, #16]
 8005b6c:	b9d8      	cbnz	r0, 8005ba6 <_svfiprintf_r+0xe6>
 8005b6e:	06d0      	lsls	r0, r2, #27
 8005b70:	bf44      	itt	mi
 8005b72:	2320      	movmi	r3, #32
 8005b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b78:	0711      	lsls	r1, r2, #28
 8005b7a:	bf44      	itt	mi
 8005b7c:	232b      	movmi	r3, #43	; 0x2b
 8005b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b82:	f89a 3000 	ldrb.w	r3, [sl]
 8005b86:	2b2a      	cmp	r3, #42	; 0x2a
 8005b88:	d015      	beq.n	8005bb6 <_svfiprintf_r+0xf6>
 8005b8a:	9a07      	ldr	r2, [sp, #28]
 8005b8c:	4654      	mov	r4, sl
 8005b8e:	2000      	movs	r0, #0
 8005b90:	f04f 0c0a 	mov.w	ip, #10
 8005b94:	4621      	mov	r1, r4
 8005b96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b9a:	3b30      	subs	r3, #48	; 0x30
 8005b9c:	2b09      	cmp	r3, #9
 8005b9e:	d94e      	bls.n	8005c3e <_svfiprintf_r+0x17e>
 8005ba0:	b1b0      	cbz	r0, 8005bd0 <_svfiprintf_r+0x110>
 8005ba2:	9207      	str	r2, [sp, #28]
 8005ba4:	e014      	b.n	8005bd0 <_svfiprintf_r+0x110>
 8005ba6:	eba0 0308 	sub.w	r3, r0, r8
 8005baa:	fa09 f303 	lsl.w	r3, r9, r3
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	9304      	str	r3, [sp, #16]
 8005bb2:	46a2      	mov	sl, r4
 8005bb4:	e7d2      	b.n	8005b5c <_svfiprintf_r+0x9c>
 8005bb6:	9b03      	ldr	r3, [sp, #12]
 8005bb8:	1d19      	adds	r1, r3, #4
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	9103      	str	r1, [sp, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	bfbb      	ittet	lt
 8005bc2:	425b      	neglt	r3, r3
 8005bc4:	f042 0202 	orrlt.w	r2, r2, #2
 8005bc8:	9307      	strge	r3, [sp, #28]
 8005bca:	9307      	strlt	r3, [sp, #28]
 8005bcc:	bfb8      	it	lt
 8005bce:	9204      	strlt	r2, [sp, #16]
 8005bd0:	7823      	ldrb	r3, [r4, #0]
 8005bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8005bd4:	d10c      	bne.n	8005bf0 <_svfiprintf_r+0x130>
 8005bd6:	7863      	ldrb	r3, [r4, #1]
 8005bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8005bda:	d135      	bne.n	8005c48 <_svfiprintf_r+0x188>
 8005bdc:	9b03      	ldr	r3, [sp, #12]
 8005bde:	1d1a      	adds	r2, r3, #4
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	9203      	str	r2, [sp, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	bfb8      	it	lt
 8005be8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bec:	3402      	adds	r4, #2
 8005bee:	9305      	str	r3, [sp, #20]
 8005bf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005cbc <_svfiprintf_r+0x1fc>
 8005bf4:	7821      	ldrb	r1, [r4, #0]
 8005bf6:	2203      	movs	r2, #3
 8005bf8:	4650      	mov	r0, sl
 8005bfa:	f7fa faf1 	bl	80001e0 <memchr>
 8005bfe:	b140      	cbz	r0, 8005c12 <_svfiprintf_r+0x152>
 8005c00:	2340      	movs	r3, #64	; 0x40
 8005c02:	eba0 000a 	sub.w	r0, r0, sl
 8005c06:	fa03 f000 	lsl.w	r0, r3, r0
 8005c0a:	9b04      	ldr	r3, [sp, #16]
 8005c0c:	4303      	orrs	r3, r0
 8005c0e:	3401      	adds	r4, #1
 8005c10:	9304      	str	r3, [sp, #16]
 8005c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c16:	4826      	ldr	r0, [pc, #152]	; (8005cb0 <_svfiprintf_r+0x1f0>)
 8005c18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c1c:	2206      	movs	r2, #6
 8005c1e:	f7fa fadf 	bl	80001e0 <memchr>
 8005c22:	2800      	cmp	r0, #0
 8005c24:	d038      	beq.n	8005c98 <_svfiprintf_r+0x1d8>
 8005c26:	4b23      	ldr	r3, [pc, #140]	; (8005cb4 <_svfiprintf_r+0x1f4>)
 8005c28:	bb1b      	cbnz	r3, 8005c72 <_svfiprintf_r+0x1b2>
 8005c2a:	9b03      	ldr	r3, [sp, #12]
 8005c2c:	3307      	adds	r3, #7
 8005c2e:	f023 0307 	bic.w	r3, r3, #7
 8005c32:	3308      	adds	r3, #8
 8005c34:	9303      	str	r3, [sp, #12]
 8005c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c38:	4433      	add	r3, r6
 8005c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c3c:	e767      	b.n	8005b0e <_svfiprintf_r+0x4e>
 8005c3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c42:	460c      	mov	r4, r1
 8005c44:	2001      	movs	r0, #1
 8005c46:	e7a5      	b.n	8005b94 <_svfiprintf_r+0xd4>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	3401      	adds	r4, #1
 8005c4c:	9305      	str	r3, [sp, #20]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	f04f 0c0a 	mov.w	ip, #10
 8005c54:	4620      	mov	r0, r4
 8005c56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c5a:	3a30      	subs	r2, #48	; 0x30
 8005c5c:	2a09      	cmp	r2, #9
 8005c5e:	d903      	bls.n	8005c68 <_svfiprintf_r+0x1a8>
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0c5      	beq.n	8005bf0 <_svfiprintf_r+0x130>
 8005c64:	9105      	str	r1, [sp, #20]
 8005c66:	e7c3      	b.n	8005bf0 <_svfiprintf_r+0x130>
 8005c68:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e7f0      	b.n	8005c54 <_svfiprintf_r+0x194>
 8005c72:	ab03      	add	r3, sp, #12
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	462a      	mov	r2, r5
 8005c78:	4b0f      	ldr	r3, [pc, #60]	; (8005cb8 <_svfiprintf_r+0x1f8>)
 8005c7a:	a904      	add	r1, sp, #16
 8005c7c:	4638      	mov	r0, r7
 8005c7e:	f3af 8000 	nop.w
 8005c82:	1c42      	adds	r2, r0, #1
 8005c84:	4606      	mov	r6, r0
 8005c86:	d1d6      	bne.n	8005c36 <_svfiprintf_r+0x176>
 8005c88:	89ab      	ldrh	r3, [r5, #12]
 8005c8a:	065b      	lsls	r3, r3, #25
 8005c8c:	f53f af2c 	bmi.w	8005ae8 <_svfiprintf_r+0x28>
 8005c90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c92:	b01d      	add	sp, #116	; 0x74
 8005c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c98:	ab03      	add	r3, sp, #12
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	462a      	mov	r2, r5
 8005c9e:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <_svfiprintf_r+0x1f8>)
 8005ca0:	a904      	add	r1, sp, #16
 8005ca2:	4638      	mov	r0, r7
 8005ca4:	f000 f87a 	bl	8005d9c <_printf_i>
 8005ca8:	e7eb      	b.n	8005c82 <_svfiprintf_r+0x1c2>
 8005caa:	bf00      	nop
 8005cac:	08008484 	.word	0x08008484
 8005cb0:	0800848e 	.word	0x0800848e
 8005cb4:	00000000 	.word	0x00000000
 8005cb8:	08005a09 	.word	0x08005a09
 8005cbc:	0800848a 	.word	0x0800848a

08005cc0 <_printf_common>:
 8005cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc4:	4616      	mov	r6, r2
 8005cc6:	4699      	mov	r9, r3
 8005cc8:	688a      	ldr	r2, [r1, #8]
 8005cca:	690b      	ldr	r3, [r1, #16]
 8005ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	bfb8      	it	lt
 8005cd4:	4613      	movlt	r3, r2
 8005cd6:	6033      	str	r3, [r6, #0]
 8005cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cdc:	4607      	mov	r7, r0
 8005cde:	460c      	mov	r4, r1
 8005ce0:	b10a      	cbz	r2, 8005ce6 <_printf_common+0x26>
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	6033      	str	r3, [r6, #0]
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	0699      	lsls	r1, r3, #26
 8005cea:	bf42      	ittt	mi
 8005cec:	6833      	ldrmi	r3, [r6, #0]
 8005cee:	3302      	addmi	r3, #2
 8005cf0:	6033      	strmi	r3, [r6, #0]
 8005cf2:	6825      	ldr	r5, [r4, #0]
 8005cf4:	f015 0506 	ands.w	r5, r5, #6
 8005cf8:	d106      	bne.n	8005d08 <_printf_common+0x48>
 8005cfa:	f104 0a19 	add.w	sl, r4, #25
 8005cfe:	68e3      	ldr	r3, [r4, #12]
 8005d00:	6832      	ldr	r2, [r6, #0]
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	42ab      	cmp	r3, r5
 8005d06:	dc26      	bgt.n	8005d56 <_printf_common+0x96>
 8005d08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d0c:	1e13      	subs	r3, r2, #0
 8005d0e:	6822      	ldr	r2, [r4, #0]
 8005d10:	bf18      	it	ne
 8005d12:	2301      	movne	r3, #1
 8005d14:	0692      	lsls	r2, r2, #26
 8005d16:	d42b      	bmi.n	8005d70 <_printf_common+0xb0>
 8005d18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d1c:	4649      	mov	r1, r9
 8005d1e:	4638      	mov	r0, r7
 8005d20:	47c0      	blx	r8
 8005d22:	3001      	adds	r0, #1
 8005d24:	d01e      	beq.n	8005d64 <_printf_common+0xa4>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	68e5      	ldr	r5, [r4, #12]
 8005d2a:	6832      	ldr	r2, [r6, #0]
 8005d2c:	f003 0306 	and.w	r3, r3, #6
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	bf08      	it	eq
 8005d34:	1aad      	subeq	r5, r5, r2
 8005d36:	68a3      	ldr	r3, [r4, #8]
 8005d38:	6922      	ldr	r2, [r4, #16]
 8005d3a:	bf0c      	ite	eq
 8005d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d40:	2500      	movne	r5, #0
 8005d42:	4293      	cmp	r3, r2
 8005d44:	bfc4      	itt	gt
 8005d46:	1a9b      	subgt	r3, r3, r2
 8005d48:	18ed      	addgt	r5, r5, r3
 8005d4a:	2600      	movs	r6, #0
 8005d4c:	341a      	adds	r4, #26
 8005d4e:	42b5      	cmp	r5, r6
 8005d50:	d11a      	bne.n	8005d88 <_printf_common+0xc8>
 8005d52:	2000      	movs	r0, #0
 8005d54:	e008      	b.n	8005d68 <_printf_common+0xa8>
 8005d56:	2301      	movs	r3, #1
 8005d58:	4652      	mov	r2, sl
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	47c0      	blx	r8
 8005d60:	3001      	adds	r0, #1
 8005d62:	d103      	bne.n	8005d6c <_printf_common+0xac>
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295
 8005d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d6c:	3501      	adds	r5, #1
 8005d6e:	e7c6      	b.n	8005cfe <_printf_common+0x3e>
 8005d70:	18e1      	adds	r1, r4, r3
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	2030      	movs	r0, #48	; 0x30
 8005d76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d7a:	4422      	add	r2, r4
 8005d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d84:	3302      	adds	r3, #2
 8005d86:	e7c7      	b.n	8005d18 <_printf_common+0x58>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	4622      	mov	r2, r4
 8005d8c:	4649      	mov	r1, r9
 8005d8e:	4638      	mov	r0, r7
 8005d90:	47c0      	blx	r8
 8005d92:	3001      	adds	r0, #1
 8005d94:	d0e6      	beq.n	8005d64 <_printf_common+0xa4>
 8005d96:	3601      	adds	r6, #1
 8005d98:	e7d9      	b.n	8005d4e <_printf_common+0x8e>
	...

08005d9c <_printf_i>:
 8005d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005da0:	460c      	mov	r4, r1
 8005da2:	4691      	mov	r9, r2
 8005da4:	7e27      	ldrb	r7, [r4, #24]
 8005da6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005da8:	2f78      	cmp	r7, #120	; 0x78
 8005daa:	4680      	mov	r8, r0
 8005dac:	469a      	mov	sl, r3
 8005dae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005db2:	d807      	bhi.n	8005dc4 <_printf_i+0x28>
 8005db4:	2f62      	cmp	r7, #98	; 0x62
 8005db6:	d80a      	bhi.n	8005dce <_printf_i+0x32>
 8005db8:	2f00      	cmp	r7, #0
 8005dba:	f000 80d8 	beq.w	8005f6e <_printf_i+0x1d2>
 8005dbe:	2f58      	cmp	r7, #88	; 0x58
 8005dc0:	f000 80a3 	beq.w	8005f0a <_printf_i+0x16e>
 8005dc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005dc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005dcc:	e03a      	b.n	8005e44 <_printf_i+0xa8>
 8005dce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005dd2:	2b15      	cmp	r3, #21
 8005dd4:	d8f6      	bhi.n	8005dc4 <_printf_i+0x28>
 8005dd6:	a001      	add	r0, pc, #4	; (adr r0, 8005ddc <_printf_i+0x40>)
 8005dd8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ddc:	08005e35 	.word	0x08005e35
 8005de0:	08005e49 	.word	0x08005e49
 8005de4:	08005dc5 	.word	0x08005dc5
 8005de8:	08005dc5 	.word	0x08005dc5
 8005dec:	08005dc5 	.word	0x08005dc5
 8005df0:	08005dc5 	.word	0x08005dc5
 8005df4:	08005e49 	.word	0x08005e49
 8005df8:	08005dc5 	.word	0x08005dc5
 8005dfc:	08005dc5 	.word	0x08005dc5
 8005e00:	08005dc5 	.word	0x08005dc5
 8005e04:	08005dc5 	.word	0x08005dc5
 8005e08:	08005f55 	.word	0x08005f55
 8005e0c:	08005e79 	.word	0x08005e79
 8005e10:	08005f37 	.word	0x08005f37
 8005e14:	08005dc5 	.word	0x08005dc5
 8005e18:	08005dc5 	.word	0x08005dc5
 8005e1c:	08005f77 	.word	0x08005f77
 8005e20:	08005dc5 	.word	0x08005dc5
 8005e24:	08005e79 	.word	0x08005e79
 8005e28:	08005dc5 	.word	0x08005dc5
 8005e2c:	08005dc5 	.word	0x08005dc5
 8005e30:	08005f3f 	.word	0x08005f3f
 8005e34:	680b      	ldr	r3, [r1, #0]
 8005e36:	1d1a      	adds	r2, r3, #4
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	600a      	str	r2, [r1, #0]
 8005e3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e44:	2301      	movs	r3, #1
 8005e46:	e0a3      	b.n	8005f90 <_printf_i+0x1f4>
 8005e48:	6825      	ldr	r5, [r4, #0]
 8005e4a:	6808      	ldr	r0, [r1, #0]
 8005e4c:	062e      	lsls	r6, r5, #24
 8005e4e:	f100 0304 	add.w	r3, r0, #4
 8005e52:	d50a      	bpl.n	8005e6a <_printf_i+0xce>
 8005e54:	6805      	ldr	r5, [r0, #0]
 8005e56:	600b      	str	r3, [r1, #0]
 8005e58:	2d00      	cmp	r5, #0
 8005e5a:	da03      	bge.n	8005e64 <_printf_i+0xc8>
 8005e5c:	232d      	movs	r3, #45	; 0x2d
 8005e5e:	426d      	negs	r5, r5
 8005e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e64:	485e      	ldr	r0, [pc, #376]	; (8005fe0 <_printf_i+0x244>)
 8005e66:	230a      	movs	r3, #10
 8005e68:	e019      	b.n	8005e9e <_printf_i+0x102>
 8005e6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005e6e:	6805      	ldr	r5, [r0, #0]
 8005e70:	600b      	str	r3, [r1, #0]
 8005e72:	bf18      	it	ne
 8005e74:	b22d      	sxthne	r5, r5
 8005e76:	e7ef      	b.n	8005e58 <_printf_i+0xbc>
 8005e78:	680b      	ldr	r3, [r1, #0]
 8005e7a:	6825      	ldr	r5, [r4, #0]
 8005e7c:	1d18      	adds	r0, r3, #4
 8005e7e:	6008      	str	r0, [r1, #0]
 8005e80:	0628      	lsls	r0, r5, #24
 8005e82:	d501      	bpl.n	8005e88 <_printf_i+0xec>
 8005e84:	681d      	ldr	r5, [r3, #0]
 8005e86:	e002      	b.n	8005e8e <_printf_i+0xf2>
 8005e88:	0669      	lsls	r1, r5, #25
 8005e8a:	d5fb      	bpl.n	8005e84 <_printf_i+0xe8>
 8005e8c:	881d      	ldrh	r5, [r3, #0]
 8005e8e:	4854      	ldr	r0, [pc, #336]	; (8005fe0 <_printf_i+0x244>)
 8005e90:	2f6f      	cmp	r7, #111	; 0x6f
 8005e92:	bf0c      	ite	eq
 8005e94:	2308      	moveq	r3, #8
 8005e96:	230a      	movne	r3, #10
 8005e98:	2100      	movs	r1, #0
 8005e9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e9e:	6866      	ldr	r6, [r4, #4]
 8005ea0:	60a6      	str	r6, [r4, #8]
 8005ea2:	2e00      	cmp	r6, #0
 8005ea4:	bfa2      	ittt	ge
 8005ea6:	6821      	ldrge	r1, [r4, #0]
 8005ea8:	f021 0104 	bicge.w	r1, r1, #4
 8005eac:	6021      	strge	r1, [r4, #0]
 8005eae:	b90d      	cbnz	r5, 8005eb4 <_printf_i+0x118>
 8005eb0:	2e00      	cmp	r6, #0
 8005eb2:	d04d      	beq.n	8005f50 <_printf_i+0x1b4>
 8005eb4:	4616      	mov	r6, r2
 8005eb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005eba:	fb03 5711 	mls	r7, r3, r1, r5
 8005ebe:	5dc7      	ldrb	r7, [r0, r7]
 8005ec0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ec4:	462f      	mov	r7, r5
 8005ec6:	42bb      	cmp	r3, r7
 8005ec8:	460d      	mov	r5, r1
 8005eca:	d9f4      	bls.n	8005eb6 <_printf_i+0x11a>
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	d10b      	bne.n	8005ee8 <_printf_i+0x14c>
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	07df      	lsls	r7, r3, #31
 8005ed4:	d508      	bpl.n	8005ee8 <_printf_i+0x14c>
 8005ed6:	6923      	ldr	r3, [r4, #16]
 8005ed8:	6861      	ldr	r1, [r4, #4]
 8005eda:	4299      	cmp	r1, r3
 8005edc:	bfde      	ittt	le
 8005ede:	2330      	movle	r3, #48	; 0x30
 8005ee0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ee4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ee8:	1b92      	subs	r2, r2, r6
 8005eea:	6122      	str	r2, [r4, #16]
 8005eec:	f8cd a000 	str.w	sl, [sp]
 8005ef0:	464b      	mov	r3, r9
 8005ef2:	aa03      	add	r2, sp, #12
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	4640      	mov	r0, r8
 8005ef8:	f7ff fee2 	bl	8005cc0 <_printf_common>
 8005efc:	3001      	adds	r0, #1
 8005efe:	d14c      	bne.n	8005f9a <_printf_i+0x1fe>
 8005f00:	f04f 30ff 	mov.w	r0, #4294967295
 8005f04:	b004      	add	sp, #16
 8005f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0a:	4835      	ldr	r0, [pc, #212]	; (8005fe0 <_printf_i+0x244>)
 8005f0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	680e      	ldr	r6, [r1, #0]
 8005f14:	061f      	lsls	r7, r3, #24
 8005f16:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f1a:	600e      	str	r6, [r1, #0]
 8005f1c:	d514      	bpl.n	8005f48 <_printf_i+0x1ac>
 8005f1e:	07d9      	lsls	r1, r3, #31
 8005f20:	bf44      	itt	mi
 8005f22:	f043 0320 	orrmi.w	r3, r3, #32
 8005f26:	6023      	strmi	r3, [r4, #0]
 8005f28:	b91d      	cbnz	r5, 8005f32 <_printf_i+0x196>
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	f023 0320 	bic.w	r3, r3, #32
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	2310      	movs	r3, #16
 8005f34:	e7b0      	b.n	8005e98 <_printf_i+0xfc>
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	f043 0320 	orr.w	r3, r3, #32
 8005f3c:	6023      	str	r3, [r4, #0]
 8005f3e:	2378      	movs	r3, #120	; 0x78
 8005f40:	4828      	ldr	r0, [pc, #160]	; (8005fe4 <_printf_i+0x248>)
 8005f42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f46:	e7e3      	b.n	8005f10 <_printf_i+0x174>
 8005f48:	065e      	lsls	r6, r3, #25
 8005f4a:	bf48      	it	mi
 8005f4c:	b2ad      	uxthmi	r5, r5
 8005f4e:	e7e6      	b.n	8005f1e <_printf_i+0x182>
 8005f50:	4616      	mov	r6, r2
 8005f52:	e7bb      	b.n	8005ecc <_printf_i+0x130>
 8005f54:	680b      	ldr	r3, [r1, #0]
 8005f56:	6826      	ldr	r6, [r4, #0]
 8005f58:	6960      	ldr	r0, [r4, #20]
 8005f5a:	1d1d      	adds	r5, r3, #4
 8005f5c:	600d      	str	r5, [r1, #0]
 8005f5e:	0635      	lsls	r5, r6, #24
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	d501      	bpl.n	8005f68 <_printf_i+0x1cc>
 8005f64:	6018      	str	r0, [r3, #0]
 8005f66:	e002      	b.n	8005f6e <_printf_i+0x1d2>
 8005f68:	0671      	lsls	r1, r6, #25
 8005f6a:	d5fb      	bpl.n	8005f64 <_printf_i+0x1c8>
 8005f6c:	8018      	strh	r0, [r3, #0]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	6123      	str	r3, [r4, #16]
 8005f72:	4616      	mov	r6, r2
 8005f74:	e7ba      	b.n	8005eec <_printf_i+0x150>
 8005f76:	680b      	ldr	r3, [r1, #0]
 8005f78:	1d1a      	adds	r2, r3, #4
 8005f7a:	600a      	str	r2, [r1, #0]
 8005f7c:	681e      	ldr	r6, [r3, #0]
 8005f7e:	6862      	ldr	r2, [r4, #4]
 8005f80:	2100      	movs	r1, #0
 8005f82:	4630      	mov	r0, r6
 8005f84:	f7fa f92c 	bl	80001e0 <memchr>
 8005f88:	b108      	cbz	r0, 8005f8e <_printf_i+0x1f2>
 8005f8a:	1b80      	subs	r0, r0, r6
 8005f8c:	6060      	str	r0, [r4, #4]
 8005f8e:	6863      	ldr	r3, [r4, #4]
 8005f90:	6123      	str	r3, [r4, #16]
 8005f92:	2300      	movs	r3, #0
 8005f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f98:	e7a8      	b.n	8005eec <_printf_i+0x150>
 8005f9a:	6923      	ldr	r3, [r4, #16]
 8005f9c:	4632      	mov	r2, r6
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	4640      	mov	r0, r8
 8005fa2:	47d0      	blx	sl
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d0ab      	beq.n	8005f00 <_printf_i+0x164>
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	079b      	lsls	r3, r3, #30
 8005fac:	d413      	bmi.n	8005fd6 <_printf_i+0x23a>
 8005fae:	68e0      	ldr	r0, [r4, #12]
 8005fb0:	9b03      	ldr	r3, [sp, #12]
 8005fb2:	4298      	cmp	r0, r3
 8005fb4:	bfb8      	it	lt
 8005fb6:	4618      	movlt	r0, r3
 8005fb8:	e7a4      	b.n	8005f04 <_printf_i+0x168>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	4632      	mov	r2, r6
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	4640      	mov	r0, r8
 8005fc2:	47d0      	blx	sl
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	d09b      	beq.n	8005f00 <_printf_i+0x164>
 8005fc8:	3501      	adds	r5, #1
 8005fca:	68e3      	ldr	r3, [r4, #12]
 8005fcc:	9903      	ldr	r1, [sp, #12]
 8005fce:	1a5b      	subs	r3, r3, r1
 8005fd0:	42ab      	cmp	r3, r5
 8005fd2:	dcf2      	bgt.n	8005fba <_printf_i+0x21e>
 8005fd4:	e7eb      	b.n	8005fae <_printf_i+0x212>
 8005fd6:	2500      	movs	r5, #0
 8005fd8:	f104 0619 	add.w	r6, r4, #25
 8005fdc:	e7f5      	b.n	8005fca <_printf_i+0x22e>
 8005fde:	bf00      	nop
 8005fe0:	08008495 	.word	0x08008495
 8005fe4:	080084a6 	.word	0x080084a6

08005fe8 <_sbrk_r>:
 8005fe8:	b538      	push	{r3, r4, r5, lr}
 8005fea:	4d06      	ldr	r5, [pc, #24]	; (8006004 <_sbrk_r+0x1c>)
 8005fec:	2300      	movs	r3, #0
 8005fee:	4604      	mov	r4, r0
 8005ff0:	4608      	mov	r0, r1
 8005ff2:	602b      	str	r3, [r5, #0]
 8005ff4:	f7fd fc1c 	bl	8003830 <_sbrk>
 8005ff8:	1c43      	adds	r3, r0, #1
 8005ffa:	d102      	bne.n	8006002 <_sbrk_r+0x1a>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	b103      	cbz	r3, 8006002 <_sbrk_r+0x1a>
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	bd38      	pop	{r3, r4, r5, pc}
 8006004:	200000e4 	.word	0x200000e4

08006008 <strcpy>:
 8006008:	4603      	mov	r3, r0
 800600a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800600e:	f803 2b01 	strb.w	r2, [r3], #1
 8006012:	2a00      	cmp	r2, #0
 8006014:	d1f9      	bne.n	800600a <strcpy+0x2>
 8006016:	4770      	bx	lr

08006018 <__assert_func>:
 8006018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800601a:	4614      	mov	r4, r2
 800601c:	461a      	mov	r2, r3
 800601e:	4b09      	ldr	r3, [pc, #36]	; (8006044 <__assert_func+0x2c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4605      	mov	r5, r0
 8006024:	68d8      	ldr	r0, [r3, #12]
 8006026:	b14c      	cbz	r4, 800603c <__assert_func+0x24>
 8006028:	4b07      	ldr	r3, [pc, #28]	; (8006048 <__assert_func+0x30>)
 800602a:	9100      	str	r1, [sp, #0]
 800602c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006030:	4906      	ldr	r1, [pc, #24]	; (800604c <__assert_func+0x34>)
 8006032:	462b      	mov	r3, r5
 8006034:	f000 fe88 	bl	8006d48 <fiprintf>
 8006038:	f001 f946 	bl	80072c8 <abort>
 800603c:	4b04      	ldr	r3, [pc, #16]	; (8006050 <__assert_func+0x38>)
 800603e:	461c      	mov	r4, r3
 8006040:	e7f3      	b.n	800602a <__assert_func+0x12>
 8006042:	bf00      	nop
 8006044:	20000010 	.word	0x20000010
 8006048:	080084b7 	.word	0x080084b7
 800604c:	080084c4 	.word	0x080084c4
 8006050:	080084f2 	.word	0x080084f2

08006054 <quorem>:
 8006054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006058:	6903      	ldr	r3, [r0, #16]
 800605a:	690c      	ldr	r4, [r1, #16]
 800605c:	42a3      	cmp	r3, r4
 800605e:	4607      	mov	r7, r0
 8006060:	f2c0 8081 	blt.w	8006166 <quorem+0x112>
 8006064:	3c01      	subs	r4, #1
 8006066:	f101 0814 	add.w	r8, r1, #20
 800606a:	f100 0514 	add.w	r5, r0, #20
 800606e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006072:	9301      	str	r3, [sp, #4]
 8006074:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006078:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800607c:	3301      	adds	r3, #1
 800607e:	429a      	cmp	r2, r3
 8006080:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006084:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006088:	fbb2 f6f3 	udiv	r6, r2, r3
 800608c:	d331      	bcc.n	80060f2 <quorem+0x9e>
 800608e:	f04f 0e00 	mov.w	lr, #0
 8006092:	4640      	mov	r0, r8
 8006094:	46ac      	mov	ip, r5
 8006096:	46f2      	mov	sl, lr
 8006098:	f850 2b04 	ldr.w	r2, [r0], #4
 800609c:	b293      	uxth	r3, r2
 800609e:	fb06 e303 	mla	r3, r6, r3, lr
 80060a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	ebaa 0303 	sub.w	r3, sl, r3
 80060ac:	0c12      	lsrs	r2, r2, #16
 80060ae:	f8dc a000 	ldr.w	sl, [ip]
 80060b2:	fb06 e202 	mla	r2, r6, r2, lr
 80060b6:	fa13 f38a 	uxtah	r3, r3, sl
 80060ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80060be:	fa1f fa82 	uxth.w	sl, r2
 80060c2:	f8dc 2000 	ldr.w	r2, [ip]
 80060c6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80060ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060d4:	4581      	cmp	r9, r0
 80060d6:	f84c 3b04 	str.w	r3, [ip], #4
 80060da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060de:	d2db      	bcs.n	8006098 <quorem+0x44>
 80060e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80060e4:	b92b      	cbnz	r3, 80060f2 <quorem+0x9e>
 80060e6:	9b01      	ldr	r3, [sp, #4]
 80060e8:	3b04      	subs	r3, #4
 80060ea:	429d      	cmp	r5, r3
 80060ec:	461a      	mov	r2, r3
 80060ee:	d32e      	bcc.n	800614e <quorem+0xfa>
 80060f0:	613c      	str	r4, [r7, #16]
 80060f2:	4638      	mov	r0, r7
 80060f4:	f7ff fada 	bl	80056ac <__mcmp>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	db24      	blt.n	8006146 <quorem+0xf2>
 80060fc:	3601      	adds	r6, #1
 80060fe:	4628      	mov	r0, r5
 8006100:	f04f 0c00 	mov.w	ip, #0
 8006104:	f858 2b04 	ldr.w	r2, [r8], #4
 8006108:	f8d0 e000 	ldr.w	lr, [r0]
 800610c:	b293      	uxth	r3, r2
 800610e:	ebac 0303 	sub.w	r3, ip, r3
 8006112:	0c12      	lsrs	r2, r2, #16
 8006114:	fa13 f38e 	uxtah	r3, r3, lr
 8006118:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800611c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006120:	b29b      	uxth	r3, r3
 8006122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006126:	45c1      	cmp	r9, r8
 8006128:	f840 3b04 	str.w	r3, [r0], #4
 800612c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006130:	d2e8      	bcs.n	8006104 <quorem+0xb0>
 8006132:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800613a:	b922      	cbnz	r2, 8006146 <quorem+0xf2>
 800613c:	3b04      	subs	r3, #4
 800613e:	429d      	cmp	r5, r3
 8006140:	461a      	mov	r2, r3
 8006142:	d30a      	bcc.n	800615a <quorem+0x106>
 8006144:	613c      	str	r4, [r7, #16]
 8006146:	4630      	mov	r0, r6
 8006148:	b003      	add	sp, #12
 800614a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800614e:	6812      	ldr	r2, [r2, #0]
 8006150:	3b04      	subs	r3, #4
 8006152:	2a00      	cmp	r2, #0
 8006154:	d1cc      	bne.n	80060f0 <quorem+0x9c>
 8006156:	3c01      	subs	r4, #1
 8006158:	e7c7      	b.n	80060ea <quorem+0x96>
 800615a:	6812      	ldr	r2, [r2, #0]
 800615c:	3b04      	subs	r3, #4
 800615e:	2a00      	cmp	r2, #0
 8006160:	d1f0      	bne.n	8006144 <quorem+0xf0>
 8006162:	3c01      	subs	r4, #1
 8006164:	e7eb      	b.n	800613e <quorem+0xea>
 8006166:	2000      	movs	r0, #0
 8006168:	e7ee      	b.n	8006148 <quorem+0xf4>
 800616a:	0000      	movs	r0, r0
 800616c:	0000      	movs	r0, r0
	...

08006170 <_dtoa_r>:
 8006170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006174:	ed2d 8b02 	vpush	{d8}
 8006178:	ec57 6b10 	vmov	r6, r7, d0
 800617c:	b095      	sub	sp, #84	; 0x54
 800617e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006180:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006184:	9105      	str	r1, [sp, #20]
 8006186:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800618a:	4604      	mov	r4, r0
 800618c:	9209      	str	r2, [sp, #36]	; 0x24
 800618e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006190:	b975      	cbnz	r5, 80061b0 <_dtoa_r+0x40>
 8006192:	2010      	movs	r0, #16
 8006194:	f000 fdea 	bl	8006d6c <malloc>
 8006198:	4602      	mov	r2, r0
 800619a:	6260      	str	r0, [r4, #36]	; 0x24
 800619c:	b920      	cbnz	r0, 80061a8 <_dtoa_r+0x38>
 800619e:	4bb2      	ldr	r3, [pc, #712]	; (8006468 <_dtoa_r+0x2f8>)
 80061a0:	21ea      	movs	r1, #234	; 0xea
 80061a2:	48b2      	ldr	r0, [pc, #712]	; (800646c <_dtoa_r+0x2fc>)
 80061a4:	f7ff ff38 	bl	8006018 <__assert_func>
 80061a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80061ac:	6005      	str	r5, [r0, #0]
 80061ae:	60c5      	str	r5, [r0, #12]
 80061b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061b2:	6819      	ldr	r1, [r3, #0]
 80061b4:	b151      	cbz	r1, 80061cc <_dtoa_r+0x5c>
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	604a      	str	r2, [r1, #4]
 80061ba:	2301      	movs	r3, #1
 80061bc:	4093      	lsls	r3, r2
 80061be:	608b      	str	r3, [r1, #8]
 80061c0:	4620      	mov	r0, r4
 80061c2:	f7ff f835 	bl	8005230 <_Bfree>
 80061c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	1e3b      	subs	r3, r7, #0
 80061ce:	bfb9      	ittee	lt
 80061d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80061d4:	9303      	strlt	r3, [sp, #12]
 80061d6:	2300      	movge	r3, #0
 80061d8:	f8c8 3000 	strge.w	r3, [r8]
 80061dc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80061e0:	4ba3      	ldr	r3, [pc, #652]	; (8006470 <_dtoa_r+0x300>)
 80061e2:	bfbc      	itt	lt
 80061e4:	2201      	movlt	r2, #1
 80061e6:	f8c8 2000 	strlt.w	r2, [r8]
 80061ea:	ea33 0309 	bics.w	r3, r3, r9
 80061ee:	d11b      	bne.n	8006228 <_dtoa_r+0xb8>
 80061f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80061f6:	6013      	str	r3, [r2, #0]
 80061f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061fc:	4333      	orrs	r3, r6
 80061fe:	f000 857a 	beq.w	8006cf6 <_dtoa_r+0xb86>
 8006202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006204:	b963      	cbnz	r3, 8006220 <_dtoa_r+0xb0>
 8006206:	4b9b      	ldr	r3, [pc, #620]	; (8006474 <_dtoa_r+0x304>)
 8006208:	e024      	b.n	8006254 <_dtoa_r+0xe4>
 800620a:	4b9b      	ldr	r3, [pc, #620]	; (8006478 <_dtoa_r+0x308>)
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	3308      	adds	r3, #8
 8006210:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	9800      	ldr	r0, [sp, #0]
 8006216:	b015      	add	sp, #84	; 0x54
 8006218:	ecbd 8b02 	vpop	{d8}
 800621c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006220:	4b94      	ldr	r3, [pc, #592]	; (8006474 <_dtoa_r+0x304>)
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	3303      	adds	r3, #3
 8006226:	e7f3      	b.n	8006210 <_dtoa_r+0xa0>
 8006228:	ed9d 7b02 	vldr	d7, [sp, #8]
 800622c:	2200      	movs	r2, #0
 800622e:	ec51 0b17 	vmov	r0, r1, d7
 8006232:	2300      	movs	r3, #0
 8006234:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006238:	f7fa fc46 	bl	8000ac8 <__aeabi_dcmpeq>
 800623c:	4680      	mov	r8, r0
 800623e:	b158      	cbz	r0, 8006258 <_dtoa_r+0xe8>
 8006240:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006242:	2301      	movs	r3, #1
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 8551 	beq.w	8006cf0 <_dtoa_r+0xb80>
 800624e:	488b      	ldr	r0, [pc, #556]	; (800647c <_dtoa_r+0x30c>)
 8006250:	6018      	str	r0, [r3, #0]
 8006252:	1e43      	subs	r3, r0, #1
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	e7dd      	b.n	8006214 <_dtoa_r+0xa4>
 8006258:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800625c:	aa12      	add	r2, sp, #72	; 0x48
 800625e:	a913      	add	r1, sp, #76	; 0x4c
 8006260:	4620      	mov	r0, r4
 8006262:	f7ff fac7 	bl	80057f4 <__d2b>
 8006266:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800626a:	4683      	mov	fp, r0
 800626c:	2d00      	cmp	r5, #0
 800626e:	d07c      	beq.n	800636a <_dtoa_r+0x1fa>
 8006270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006272:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800627a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800627e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006282:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006286:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800628a:	4b7d      	ldr	r3, [pc, #500]	; (8006480 <_dtoa_r+0x310>)
 800628c:	2200      	movs	r2, #0
 800628e:	4630      	mov	r0, r6
 8006290:	4639      	mov	r1, r7
 8006292:	f7f9 fff9 	bl	8000288 <__aeabi_dsub>
 8006296:	a36e      	add	r3, pc, #440	; (adr r3, 8006450 <_dtoa_r+0x2e0>)
 8006298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629c:	f7fa f9ac 	bl	80005f8 <__aeabi_dmul>
 80062a0:	a36d      	add	r3, pc, #436	; (adr r3, 8006458 <_dtoa_r+0x2e8>)
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	f7f9 fff1 	bl	800028c <__adddf3>
 80062aa:	4606      	mov	r6, r0
 80062ac:	4628      	mov	r0, r5
 80062ae:	460f      	mov	r7, r1
 80062b0:	f7fa f938 	bl	8000524 <__aeabi_i2d>
 80062b4:	a36a      	add	r3, pc, #424	; (adr r3, 8006460 <_dtoa_r+0x2f0>)
 80062b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ba:	f7fa f99d 	bl	80005f8 <__aeabi_dmul>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	4630      	mov	r0, r6
 80062c4:	4639      	mov	r1, r7
 80062c6:	f7f9 ffe1 	bl	800028c <__adddf3>
 80062ca:	4606      	mov	r6, r0
 80062cc:	460f      	mov	r7, r1
 80062ce:	f7fa fc2d 	bl	8000b2c <__aeabi_d2iz>
 80062d2:	2200      	movs	r2, #0
 80062d4:	4682      	mov	sl, r0
 80062d6:	2300      	movs	r3, #0
 80062d8:	4630      	mov	r0, r6
 80062da:	4639      	mov	r1, r7
 80062dc:	f7fa fbfe 	bl	8000adc <__aeabi_dcmplt>
 80062e0:	b148      	cbz	r0, 80062f6 <_dtoa_r+0x186>
 80062e2:	4650      	mov	r0, sl
 80062e4:	f7fa f91e 	bl	8000524 <__aeabi_i2d>
 80062e8:	4632      	mov	r2, r6
 80062ea:	463b      	mov	r3, r7
 80062ec:	f7fa fbec 	bl	8000ac8 <__aeabi_dcmpeq>
 80062f0:	b908      	cbnz	r0, 80062f6 <_dtoa_r+0x186>
 80062f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062f6:	f1ba 0f16 	cmp.w	sl, #22
 80062fa:	d854      	bhi.n	80063a6 <_dtoa_r+0x236>
 80062fc:	4b61      	ldr	r3, [pc, #388]	; (8006484 <_dtoa_r+0x314>)
 80062fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800630a:	f7fa fbe7 	bl	8000adc <__aeabi_dcmplt>
 800630e:	2800      	cmp	r0, #0
 8006310:	d04b      	beq.n	80063aa <_dtoa_r+0x23a>
 8006312:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006316:	2300      	movs	r3, #0
 8006318:	930e      	str	r3, [sp, #56]	; 0x38
 800631a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800631c:	1b5d      	subs	r5, r3, r5
 800631e:	1e6b      	subs	r3, r5, #1
 8006320:	9304      	str	r3, [sp, #16]
 8006322:	bf43      	ittte	mi
 8006324:	2300      	movmi	r3, #0
 8006326:	f1c5 0801 	rsbmi	r8, r5, #1
 800632a:	9304      	strmi	r3, [sp, #16]
 800632c:	f04f 0800 	movpl.w	r8, #0
 8006330:	f1ba 0f00 	cmp.w	sl, #0
 8006334:	db3b      	blt.n	80063ae <_dtoa_r+0x23e>
 8006336:	9b04      	ldr	r3, [sp, #16]
 8006338:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800633c:	4453      	add	r3, sl
 800633e:	9304      	str	r3, [sp, #16]
 8006340:	2300      	movs	r3, #0
 8006342:	9306      	str	r3, [sp, #24]
 8006344:	9b05      	ldr	r3, [sp, #20]
 8006346:	2b09      	cmp	r3, #9
 8006348:	d869      	bhi.n	800641e <_dtoa_r+0x2ae>
 800634a:	2b05      	cmp	r3, #5
 800634c:	bfc4      	itt	gt
 800634e:	3b04      	subgt	r3, #4
 8006350:	9305      	strgt	r3, [sp, #20]
 8006352:	9b05      	ldr	r3, [sp, #20]
 8006354:	f1a3 0302 	sub.w	r3, r3, #2
 8006358:	bfcc      	ite	gt
 800635a:	2500      	movgt	r5, #0
 800635c:	2501      	movle	r5, #1
 800635e:	2b03      	cmp	r3, #3
 8006360:	d869      	bhi.n	8006436 <_dtoa_r+0x2c6>
 8006362:	e8df f003 	tbb	[pc, r3]
 8006366:	4e2c      	.short	0x4e2c
 8006368:	5a4c      	.short	0x5a4c
 800636a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800636e:	441d      	add	r5, r3
 8006370:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006374:	2b20      	cmp	r3, #32
 8006376:	bfc1      	itttt	gt
 8006378:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800637c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006380:	fa09 f303 	lslgt.w	r3, r9, r3
 8006384:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006388:	bfda      	itte	le
 800638a:	f1c3 0320 	rsble	r3, r3, #32
 800638e:	fa06 f003 	lslle.w	r0, r6, r3
 8006392:	4318      	orrgt	r0, r3
 8006394:	f7fa f8b6 	bl	8000504 <__aeabi_ui2d>
 8006398:	2301      	movs	r3, #1
 800639a:	4606      	mov	r6, r0
 800639c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80063a0:	3d01      	subs	r5, #1
 80063a2:	9310      	str	r3, [sp, #64]	; 0x40
 80063a4:	e771      	b.n	800628a <_dtoa_r+0x11a>
 80063a6:	2301      	movs	r3, #1
 80063a8:	e7b6      	b.n	8006318 <_dtoa_r+0x1a8>
 80063aa:	900e      	str	r0, [sp, #56]	; 0x38
 80063ac:	e7b5      	b.n	800631a <_dtoa_r+0x1aa>
 80063ae:	f1ca 0300 	rsb	r3, sl, #0
 80063b2:	9306      	str	r3, [sp, #24]
 80063b4:	2300      	movs	r3, #0
 80063b6:	eba8 080a 	sub.w	r8, r8, sl
 80063ba:	930d      	str	r3, [sp, #52]	; 0x34
 80063bc:	e7c2      	b.n	8006344 <_dtoa_r+0x1d4>
 80063be:	2300      	movs	r3, #0
 80063c0:	9308      	str	r3, [sp, #32]
 80063c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	dc39      	bgt.n	800643c <_dtoa_r+0x2cc>
 80063c8:	f04f 0901 	mov.w	r9, #1
 80063cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80063d0:	464b      	mov	r3, r9
 80063d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80063d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80063d8:	2200      	movs	r2, #0
 80063da:	6042      	str	r2, [r0, #4]
 80063dc:	2204      	movs	r2, #4
 80063de:	f102 0614 	add.w	r6, r2, #20
 80063e2:	429e      	cmp	r6, r3
 80063e4:	6841      	ldr	r1, [r0, #4]
 80063e6:	d92f      	bls.n	8006448 <_dtoa_r+0x2d8>
 80063e8:	4620      	mov	r0, r4
 80063ea:	f7fe fee1 	bl	80051b0 <_Balloc>
 80063ee:	9000      	str	r0, [sp, #0]
 80063f0:	2800      	cmp	r0, #0
 80063f2:	d14b      	bne.n	800648c <_dtoa_r+0x31c>
 80063f4:	4b24      	ldr	r3, [pc, #144]	; (8006488 <_dtoa_r+0x318>)
 80063f6:	4602      	mov	r2, r0
 80063f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80063fc:	e6d1      	b.n	80061a2 <_dtoa_r+0x32>
 80063fe:	2301      	movs	r3, #1
 8006400:	e7de      	b.n	80063c0 <_dtoa_r+0x250>
 8006402:	2300      	movs	r3, #0
 8006404:	9308      	str	r3, [sp, #32]
 8006406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006408:	eb0a 0903 	add.w	r9, sl, r3
 800640c:	f109 0301 	add.w	r3, r9, #1
 8006410:	2b01      	cmp	r3, #1
 8006412:	9301      	str	r3, [sp, #4]
 8006414:	bfb8      	it	lt
 8006416:	2301      	movlt	r3, #1
 8006418:	e7dd      	b.n	80063d6 <_dtoa_r+0x266>
 800641a:	2301      	movs	r3, #1
 800641c:	e7f2      	b.n	8006404 <_dtoa_r+0x294>
 800641e:	2501      	movs	r5, #1
 8006420:	2300      	movs	r3, #0
 8006422:	9305      	str	r3, [sp, #20]
 8006424:	9508      	str	r5, [sp, #32]
 8006426:	f04f 39ff 	mov.w	r9, #4294967295
 800642a:	2200      	movs	r2, #0
 800642c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006430:	2312      	movs	r3, #18
 8006432:	9209      	str	r2, [sp, #36]	; 0x24
 8006434:	e7cf      	b.n	80063d6 <_dtoa_r+0x266>
 8006436:	2301      	movs	r3, #1
 8006438:	9308      	str	r3, [sp, #32]
 800643a:	e7f4      	b.n	8006426 <_dtoa_r+0x2b6>
 800643c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006440:	f8cd 9004 	str.w	r9, [sp, #4]
 8006444:	464b      	mov	r3, r9
 8006446:	e7c6      	b.n	80063d6 <_dtoa_r+0x266>
 8006448:	3101      	adds	r1, #1
 800644a:	6041      	str	r1, [r0, #4]
 800644c:	0052      	lsls	r2, r2, #1
 800644e:	e7c6      	b.n	80063de <_dtoa_r+0x26e>
 8006450:	636f4361 	.word	0x636f4361
 8006454:	3fd287a7 	.word	0x3fd287a7
 8006458:	8b60c8b3 	.word	0x8b60c8b3
 800645c:	3fc68a28 	.word	0x3fc68a28
 8006460:	509f79fb 	.word	0x509f79fb
 8006464:	3fd34413 	.word	0x3fd34413
 8006468:	080082fc 	.word	0x080082fc
 800646c:	08008502 	.word	0x08008502
 8006470:	7ff00000 	.word	0x7ff00000
 8006474:	080084fc 	.word	0x080084fc
 8006478:	080084f3 	.word	0x080084f3
 800647c:	08008501 	.word	0x08008501
 8006480:	3ff80000 	.word	0x3ff80000
 8006484:	080083b0 	.word	0x080083b0
 8006488:	08008373 	.word	0x08008373
 800648c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800648e:	9a00      	ldr	r2, [sp, #0]
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	9b01      	ldr	r3, [sp, #4]
 8006494:	2b0e      	cmp	r3, #14
 8006496:	f200 80ad 	bhi.w	80065f4 <_dtoa_r+0x484>
 800649a:	2d00      	cmp	r5, #0
 800649c:	f000 80aa 	beq.w	80065f4 <_dtoa_r+0x484>
 80064a0:	f1ba 0f00 	cmp.w	sl, #0
 80064a4:	dd36      	ble.n	8006514 <_dtoa_r+0x3a4>
 80064a6:	4ac3      	ldr	r2, [pc, #780]	; (80067b4 <_dtoa_r+0x644>)
 80064a8:	f00a 030f 	and.w	r3, sl, #15
 80064ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80064b0:	ed93 7b00 	vldr	d7, [r3]
 80064b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80064b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80064bc:	eeb0 8a47 	vmov.f32	s16, s14
 80064c0:	eef0 8a67 	vmov.f32	s17, s15
 80064c4:	d016      	beq.n	80064f4 <_dtoa_r+0x384>
 80064c6:	4bbc      	ldr	r3, [pc, #752]	; (80067b8 <_dtoa_r+0x648>)
 80064c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064d0:	f7fa f9bc 	bl	800084c <__aeabi_ddiv>
 80064d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064d8:	f007 070f 	and.w	r7, r7, #15
 80064dc:	2503      	movs	r5, #3
 80064de:	4eb6      	ldr	r6, [pc, #728]	; (80067b8 <_dtoa_r+0x648>)
 80064e0:	b957      	cbnz	r7, 80064f8 <_dtoa_r+0x388>
 80064e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064e6:	ec53 2b18 	vmov	r2, r3, d8
 80064ea:	f7fa f9af 	bl	800084c <__aeabi_ddiv>
 80064ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064f2:	e029      	b.n	8006548 <_dtoa_r+0x3d8>
 80064f4:	2502      	movs	r5, #2
 80064f6:	e7f2      	b.n	80064de <_dtoa_r+0x36e>
 80064f8:	07f9      	lsls	r1, r7, #31
 80064fa:	d508      	bpl.n	800650e <_dtoa_r+0x39e>
 80064fc:	ec51 0b18 	vmov	r0, r1, d8
 8006500:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006504:	f7fa f878 	bl	80005f8 <__aeabi_dmul>
 8006508:	ec41 0b18 	vmov	d8, r0, r1
 800650c:	3501      	adds	r5, #1
 800650e:	107f      	asrs	r7, r7, #1
 8006510:	3608      	adds	r6, #8
 8006512:	e7e5      	b.n	80064e0 <_dtoa_r+0x370>
 8006514:	f000 80a6 	beq.w	8006664 <_dtoa_r+0x4f4>
 8006518:	f1ca 0600 	rsb	r6, sl, #0
 800651c:	4ba5      	ldr	r3, [pc, #660]	; (80067b4 <_dtoa_r+0x644>)
 800651e:	4fa6      	ldr	r7, [pc, #664]	; (80067b8 <_dtoa_r+0x648>)
 8006520:	f006 020f 	and.w	r2, r6, #15
 8006524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006530:	f7fa f862 	bl	80005f8 <__aeabi_dmul>
 8006534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006538:	1136      	asrs	r6, r6, #4
 800653a:	2300      	movs	r3, #0
 800653c:	2502      	movs	r5, #2
 800653e:	2e00      	cmp	r6, #0
 8006540:	f040 8085 	bne.w	800664e <_dtoa_r+0x4de>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1d2      	bne.n	80064ee <_dtoa_r+0x37e>
 8006548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 808c 	beq.w	8006668 <_dtoa_r+0x4f8>
 8006550:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006554:	4b99      	ldr	r3, [pc, #612]	; (80067bc <_dtoa_r+0x64c>)
 8006556:	2200      	movs	r2, #0
 8006558:	4630      	mov	r0, r6
 800655a:	4639      	mov	r1, r7
 800655c:	f7fa fabe 	bl	8000adc <__aeabi_dcmplt>
 8006560:	2800      	cmp	r0, #0
 8006562:	f000 8081 	beq.w	8006668 <_dtoa_r+0x4f8>
 8006566:	9b01      	ldr	r3, [sp, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d07d      	beq.n	8006668 <_dtoa_r+0x4f8>
 800656c:	f1b9 0f00 	cmp.w	r9, #0
 8006570:	dd3c      	ble.n	80065ec <_dtoa_r+0x47c>
 8006572:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006576:	9307      	str	r3, [sp, #28]
 8006578:	2200      	movs	r2, #0
 800657a:	4b91      	ldr	r3, [pc, #580]	; (80067c0 <_dtoa_r+0x650>)
 800657c:	4630      	mov	r0, r6
 800657e:	4639      	mov	r1, r7
 8006580:	f7fa f83a 	bl	80005f8 <__aeabi_dmul>
 8006584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006588:	3501      	adds	r5, #1
 800658a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800658e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006592:	4628      	mov	r0, r5
 8006594:	f7f9 ffc6 	bl	8000524 <__aeabi_i2d>
 8006598:	4632      	mov	r2, r6
 800659a:	463b      	mov	r3, r7
 800659c:	f7fa f82c 	bl	80005f8 <__aeabi_dmul>
 80065a0:	4b88      	ldr	r3, [pc, #544]	; (80067c4 <_dtoa_r+0x654>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	f7f9 fe72 	bl	800028c <__adddf3>
 80065a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80065ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065b0:	9303      	str	r3, [sp, #12]
 80065b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d15c      	bne.n	8006672 <_dtoa_r+0x502>
 80065b8:	4b83      	ldr	r3, [pc, #524]	; (80067c8 <_dtoa_r+0x658>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	4630      	mov	r0, r6
 80065be:	4639      	mov	r1, r7
 80065c0:	f7f9 fe62 	bl	8000288 <__aeabi_dsub>
 80065c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065c8:	4606      	mov	r6, r0
 80065ca:	460f      	mov	r7, r1
 80065cc:	f7fa faa4 	bl	8000b18 <__aeabi_dcmpgt>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	f040 8296 	bne.w	8006b02 <_dtoa_r+0x992>
 80065d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80065da:	4630      	mov	r0, r6
 80065dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065e0:	4639      	mov	r1, r7
 80065e2:	f7fa fa7b 	bl	8000adc <__aeabi_dcmplt>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	f040 8288 	bne.w	8006afc <_dtoa_r+0x98c>
 80065ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f2c0 8158 	blt.w	80068ac <_dtoa_r+0x73c>
 80065fc:	f1ba 0f0e 	cmp.w	sl, #14
 8006600:	f300 8154 	bgt.w	80068ac <_dtoa_r+0x73c>
 8006604:	4b6b      	ldr	r3, [pc, #428]	; (80067b4 <_dtoa_r+0x644>)
 8006606:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800660a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800660e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006610:	2b00      	cmp	r3, #0
 8006612:	f280 80e3 	bge.w	80067dc <_dtoa_r+0x66c>
 8006616:	9b01      	ldr	r3, [sp, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	f300 80df 	bgt.w	80067dc <_dtoa_r+0x66c>
 800661e:	f040 826d 	bne.w	8006afc <_dtoa_r+0x98c>
 8006622:	4b69      	ldr	r3, [pc, #420]	; (80067c8 <_dtoa_r+0x658>)
 8006624:	2200      	movs	r2, #0
 8006626:	4640      	mov	r0, r8
 8006628:	4649      	mov	r1, r9
 800662a:	f7f9 ffe5 	bl	80005f8 <__aeabi_dmul>
 800662e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006632:	f7fa fa67 	bl	8000b04 <__aeabi_dcmpge>
 8006636:	9e01      	ldr	r6, [sp, #4]
 8006638:	4637      	mov	r7, r6
 800663a:	2800      	cmp	r0, #0
 800663c:	f040 8243 	bne.w	8006ac6 <_dtoa_r+0x956>
 8006640:	9d00      	ldr	r5, [sp, #0]
 8006642:	2331      	movs	r3, #49	; 0x31
 8006644:	f805 3b01 	strb.w	r3, [r5], #1
 8006648:	f10a 0a01 	add.w	sl, sl, #1
 800664c:	e23f      	b.n	8006ace <_dtoa_r+0x95e>
 800664e:	07f2      	lsls	r2, r6, #31
 8006650:	d505      	bpl.n	800665e <_dtoa_r+0x4ee>
 8006652:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006656:	f7f9 ffcf 	bl	80005f8 <__aeabi_dmul>
 800665a:	3501      	adds	r5, #1
 800665c:	2301      	movs	r3, #1
 800665e:	1076      	asrs	r6, r6, #1
 8006660:	3708      	adds	r7, #8
 8006662:	e76c      	b.n	800653e <_dtoa_r+0x3ce>
 8006664:	2502      	movs	r5, #2
 8006666:	e76f      	b.n	8006548 <_dtoa_r+0x3d8>
 8006668:	9b01      	ldr	r3, [sp, #4]
 800666a:	f8cd a01c 	str.w	sl, [sp, #28]
 800666e:	930c      	str	r3, [sp, #48]	; 0x30
 8006670:	e78d      	b.n	800658e <_dtoa_r+0x41e>
 8006672:	9900      	ldr	r1, [sp, #0]
 8006674:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006678:	4b4e      	ldr	r3, [pc, #312]	; (80067b4 <_dtoa_r+0x644>)
 800667a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800667e:	4401      	add	r1, r0
 8006680:	9102      	str	r1, [sp, #8]
 8006682:	9908      	ldr	r1, [sp, #32]
 8006684:	eeb0 8a47 	vmov.f32	s16, s14
 8006688:	eef0 8a67 	vmov.f32	s17, s15
 800668c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006690:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006694:	2900      	cmp	r1, #0
 8006696:	d045      	beq.n	8006724 <_dtoa_r+0x5b4>
 8006698:	494c      	ldr	r1, [pc, #304]	; (80067cc <_dtoa_r+0x65c>)
 800669a:	2000      	movs	r0, #0
 800669c:	f7fa f8d6 	bl	800084c <__aeabi_ddiv>
 80066a0:	ec53 2b18 	vmov	r2, r3, d8
 80066a4:	f7f9 fdf0 	bl	8000288 <__aeabi_dsub>
 80066a8:	9d00      	ldr	r5, [sp, #0]
 80066aa:	ec41 0b18 	vmov	d8, r0, r1
 80066ae:	4639      	mov	r1, r7
 80066b0:	4630      	mov	r0, r6
 80066b2:	f7fa fa3b 	bl	8000b2c <__aeabi_d2iz>
 80066b6:	900c      	str	r0, [sp, #48]	; 0x30
 80066b8:	f7f9 ff34 	bl	8000524 <__aeabi_i2d>
 80066bc:	4602      	mov	r2, r0
 80066be:	460b      	mov	r3, r1
 80066c0:	4630      	mov	r0, r6
 80066c2:	4639      	mov	r1, r7
 80066c4:	f7f9 fde0 	bl	8000288 <__aeabi_dsub>
 80066c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066ca:	3330      	adds	r3, #48	; 0x30
 80066cc:	f805 3b01 	strb.w	r3, [r5], #1
 80066d0:	ec53 2b18 	vmov	r2, r3, d8
 80066d4:	4606      	mov	r6, r0
 80066d6:	460f      	mov	r7, r1
 80066d8:	f7fa fa00 	bl	8000adc <__aeabi_dcmplt>
 80066dc:	2800      	cmp	r0, #0
 80066de:	d165      	bne.n	80067ac <_dtoa_r+0x63c>
 80066e0:	4632      	mov	r2, r6
 80066e2:	463b      	mov	r3, r7
 80066e4:	4935      	ldr	r1, [pc, #212]	; (80067bc <_dtoa_r+0x64c>)
 80066e6:	2000      	movs	r0, #0
 80066e8:	f7f9 fdce 	bl	8000288 <__aeabi_dsub>
 80066ec:	ec53 2b18 	vmov	r2, r3, d8
 80066f0:	f7fa f9f4 	bl	8000adc <__aeabi_dcmplt>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	f040 80b9 	bne.w	800686c <_dtoa_r+0x6fc>
 80066fa:	9b02      	ldr	r3, [sp, #8]
 80066fc:	429d      	cmp	r5, r3
 80066fe:	f43f af75 	beq.w	80065ec <_dtoa_r+0x47c>
 8006702:	4b2f      	ldr	r3, [pc, #188]	; (80067c0 <_dtoa_r+0x650>)
 8006704:	ec51 0b18 	vmov	r0, r1, d8
 8006708:	2200      	movs	r2, #0
 800670a:	f7f9 ff75 	bl	80005f8 <__aeabi_dmul>
 800670e:	4b2c      	ldr	r3, [pc, #176]	; (80067c0 <_dtoa_r+0x650>)
 8006710:	ec41 0b18 	vmov	d8, r0, r1
 8006714:	2200      	movs	r2, #0
 8006716:	4630      	mov	r0, r6
 8006718:	4639      	mov	r1, r7
 800671a:	f7f9 ff6d 	bl	80005f8 <__aeabi_dmul>
 800671e:	4606      	mov	r6, r0
 8006720:	460f      	mov	r7, r1
 8006722:	e7c4      	b.n	80066ae <_dtoa_r+0x53e>
 8006724:	ec51 0b17 	vmov	r0, r1, d7
 8006728:	f7f9 ff66 	bl	80005f8 <__aeabi_dmul>
 800672c:	9b02      	ldr	r3, [sp, #8]
 800672e:	9d00      	ldr	r5, [sp, #0]
 8006730:	930c      	str	r3, [sp, #48]	; 0x30
 8006732:	ec41 0b18 	vmov	d8, r0, r1
 8006736:	4639      	mov	r1, r7
 8006738:	4630      	mov	r0, r6
 800673a:	f7fa f9f7 	bl	8000b2c <__aeabi_d2iz>
 800673e:	9011      	str	r0, [sp, #68]	; 0x44
 8006740:	f7f9 fef0 	bl	8000524 <__aeabi_i2d>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	4630      	mov	r0, r6
 800674a:	4639      	mov	r1, r7
 800674c:	f7f9 fd9c 	bl	8000288 <__aeabi_dsub>
 8006750:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006752:	3330      	adds	r3, #48	; 0x30
 8006754:	f805 3b01 	strb.w	r3, [r5], #1
 8006758:	9b02      	ldr	r3, [sp, #8]
 800675a:	429d      	cmp	r5, r3
 800675c:	4606      	mov	r6, r0
 800675e:	460f      	mov	r7, r1
 8006760:	f04f 0200 	mov.w	r2, #0
 8006764:	d134      	bne.n	80067d0 <_dtoa_r+0x660>
 8006766:	4b19      	ldr	r3, [pc, #100]	; (80067cc <_dtoa_r+0x65c>)
 8006768:	ec51 0b18 	vmov	r0, r1, d8
 800676c:	f7f9 fd8e 	bl	800028c <__adddf3>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	4630      	mov	r0, r6
 8006776:	4639      	mov	r1, r7
 8006778:	f7fa f9ce 	bl	8000b18 <__aeabi_dcmpgt>
 800677c:	2800      	cmp	r0, #0
 800677e:	d175      	bne.n	800686c <_dtoa_r+0x6fc>
 8006780:	ec53 2b18 	vmov	r2, r3, d8
 8006784:	4911      	ldr	r1, [pc, #68]	; (80067cc <_dtoa_r+0x65c>)
 8006786:	2000      	movs	r0, #0
 8006788:	f7f9 fd7e 	bl	8000288 <__aeabi_dsub>
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	4630      	mov	r0, r6
 8006792:	4639      	mov	r1, r7
 8006794:	f7fa f9a2 	bl	8000adc <__aeabi_dcmplt>
 8006798:	2800      	cmp	r0, #0
 800679a:	f43f af27 	beq.w	80065ec <_dtoa_r+0x47c>
 800679e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067a0:	1e6b      	subs	r3, r5, #1
 80067a2:	930c      	str	r3, [sp, #48]	; 0x30
 80067a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067a8:	2b30      	cmp	r3, #48	; 0x30
 80067aa:	d0f8      	beq.n	800679e <_dtoa_r+0x62e>
 80067ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80067b0:	e04a      	b.n	8006848 <_dtoa_r+0x6d8>
 80067b2:	bf00      	nop
 80067b4:	080083b0 	.word	0x080083b0
 80067b8:	08008388 	.word	0x08008388
 80067bc:	3ff00000 	.word	0x3ff00000
 80067c0:	40240000 	.word	0x40240000
 80067c4:	401c0000 	.word	0x401c0000
 80067c8:	40140000 	.word	0x40140000
 80067cc:	3fe00000 	.word	0x3fe00000
 80067d0:	4baf      	ldr	r3, [pc, #700]	; (8006a90 <_dtoa_r+0x920>)
 80067d2:	f7f9 ff11 	bl	80005f8 <__aeabi_dmul>
 80067d6:	4606      	mov	r6, r0
 80067d8:	460f      	mov	r7, r1
 80067da:	e7ac      	b.n	8006736 <_dtoa_r+0x5c6>
 80067dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80067e0:	9d00      	ldr	r5, [sp, #0]
 80067e2:	4642      	mov	r2, r8
 80067e4:	464b      	mov	r3, r9
 80067e6:	4630      	mov	r0, r6
 80067e8:	4639      	mov	r1, r7
 80067ea:	f7fa f82f 	bl	800084c <__aeabi_ddiv>
 80067ee:	f7fa f99d 	bl	8000b2c <__aeabi_d2iz>
 80067f2:	9002      	str	r0, [sp, #8]
 80067f4:	f7f9 fe96 	bl	8000524 <__aeabi_i2d>
 80067f8:	4642      	mov	r2, r8
 80067fa:	464b      	mov	r3, r9
 80067fc:	f7f9 fefc 	bl	80005f8 <__aeabi_dmul>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	4630      	mov	r0, r6
 8006806:	4639      	mov	r1, r7
 8006808:	f7f9 fd3e 	bl	8000288 <__aeabi_dsub>
 800680c:	9e02      	ldr	r6, [sp, #8]
 800680e:	9f01      	ldr	r7, [sp, #4]
 8006810:	3630      	adds	r6, #48	; 0x30
 8006812:	f805 6b01 	strb.w	r6, [r5], #1
 8006816:	9e00      	ldr	r6, [sp, #0]
 8006818:	1bae      	subs	r6, r5, r6
 800681a:	42b7      	cmp	r7, r6
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	d137      	bne.n	8006892 <_dtoa_r+0x722>
 8006822:	f7f9 fd33 	bl	800028c <__adddf3>
 8006826:	4642      	mov	r2, r8
 8006828:	464b      	mov	r3, r9
 800682a:	4606      	mov	r6, r0
 800682c:	460f      	mov	r7, r1
 800682e:	f7fa f973 	bl	8000b18 <__aeabi_dcmpgt>
 8006832:	b9c8      	cbnz	r0, 8006868 <_dtoa_r+0x6f8>
 8006834:	4642      	mov	r2, r8
 8006836:	464b      	mov	r3, r9
 8006838:	4630      	mov	r0, r6
 800683a:	4639      	mov	r1, r7
 800683c:	f7fa f944 	bl	8000ac8 <__aeabi_dcmpeq>
 8006840:	b110      	cbz	r0, 8006848 <_dtoa_r+0x6d8>
 8006842:	9b02      	ldr	r3, [sp, #8]
 8006844:	07d9      	lsls	r1, r3, #31
 8006846:	d40f      	bmi.n	8006868 <_dtoa_r+0x6f8>
 8006848:	4620      	mov	r0, r4
 800684a:	4659      	mov	r1, fp
 800684c:	f7fe fcf0 	bl	8005230 <_Bfree>
 8006850:	2300      	movs	r3, #0
 8006852:	702b      	strb	r3, [r5, #0]
 8006854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006856:	f10a 0001 	add.w	r0, sl, #1
 800685a:	6018      	str	r0, [r3, #0]
 800685c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800685e:	2b00      	cmp	r3, #0
 8006860:	f43f acd8 	beq.w	8006214 <_dtoa_r+0xa4>
 8006864:	601d      	str	r5, [r3, #0]
 8006866:	e4d5      	b.n	8006214 <_dtoa_r+0xa4>
 8006868:	f8cd a01c 	str.w	sl, [sp, #28]
 800686c:	462b      	mov	r3, r5
 800686e:	461d      	mov	r5, r3
 8006870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006874:	2a39      	cmp	r2, #57	; 0x39
 8006876:	d108      	bne.n	800688a <_dtoa_r+0x71a>
 8006878:	9a00      	ldr	r2, [sp, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d1f7      	bne.n	800686e <_dtoa_r+0x6fe>
 800687e:	9a07      	ldr	r2, [sp, #28]
 8006880:	9900      	ldr	r1, [sp, #0]
 8006882:	3201      	adds	r2, #1
 8006884:	9207      	str	r2, [sp, #28]
 8006886:	2230      	movs	r2, #48	; 0x30
 8006888:	700a      	strb	r2, [r1, #0]
 800688a:	781a      	ldrb	r2, [r3, #0]
 800688c:	3201      	adds	r2, #1
 800688e:	701a      	strb	r2, [r3, #0]
 8006890:	e78c      	b.n	80067ac <_dtoa_r+0x63c>
 8006892:	4b7f      	ldr	r3, [pc, #508]	; (8006a90 <_dtoa_r+0x920>)
 8006894:	2200      	movs	r2, #0
 8006896:	f7f9 feaf 	bl	80005f8 <__aeabi_dmul>
 800689a:	2200      	movs	r2, #0
 800689c:	2300      	movs	r3, #0
 800689e:	4606      	mov	r6, r0
 80068a0:	460f      	mov	r7, r1
 80068a2:	f7fa f911 	bl	8000ac8 <__aeabi_dcmpeq>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d09b      	beq.n	80067e2 <_dtoa_r+0x672>
 80068aa:	e7cd      	b.n	8006848 <_dtoa_r+0x6d8>
 80068ac:	9a08      	ldr	r2, [sp, #32]
 80068ae:	2a00      	cmp	r2, #0
 80068b0:	f000 80c4 	beq.w	8006a3c <_dtoa_r+0x8cc>
 80068b4:	9a05      	ldr	r2, [sp, #20]
 80068b6:	2a01      	cmp	r2, #1
 80068b8:	f300 80a8 	bgt.w	8006a0c <_dtoa_r+0x89c>
 80068bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068be:	2a00      	cmp	r2, #0
 80068c0:	f000 80a0 	beq.w	8006a04 <_dtoa_r+0x894>
 80068c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068c8:	9e06      	ldr	r6, [sp, #24]
 80068ca:	4645      	mov	r5, r8
 80068cc:	9a04      	ldr	r2, [sp, #16]
 80068ce:	2101      	movs	r1, #1
 80068d0:	441a      	add	r2, r3
 80068d2:	4620      	mov	r0, r4
 80068d4:	4498      	add	r8, r3
 80068d6:	9204      	str	r2, [sp, #16]
 80068d8:	f7fe fd66 	bl	80053a8 <__i2b>
 80068dc:	4607      	mov	r7, r0
 80068de:	2d00      	cmp	r5, #0
 80068e0:	dd0b      	ble.n	80068fa <_dtoa_r+0x78a>
 80068e2:	9b04      	ldr	r3, [sp, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	dd08      	ble.n	80068fa <_dtoa_r+0x78a>
 80068e8:	42ab      	cmp	r3, r5
 80068ea:	9a04      	ldr	r2, [sp, #16]
 80068ec:	bfa8      	it	ge
 80068ee:	462b      	movge	r3, r5
 80068f0:	eba8 0803 	sub.w	r8, r8, r3
 80068f4:	1aed      	subs	r5, r5, r3
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	9304      	str	r3, [sp, #16]
 80068fa:	9b06      	ldr	r3, [sp, #24]
 80068fc:	b1fb      	cbz	r3, 800693e <_dtoa_r+0x7ce>
 80068fe:	9b08      	ldr	r3, [sp, #32]
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 809f 	beq.w	8006a44 <_dtoa_r+0x8d4>
 8006906:	2e00      	cmp	r6, #0
 8006908:	dd11      	ble.n	800692e <_dtoa_r+0x7be>
 800690a:	4639      	mov	r1, r7
 800690c:	4632      	mov	r2, r6
 800690e:	4620      	mov	r0, r4
 8006910:	f7fe fe06 	bl	8005520 <__pow5mult>
 8006914:	465a      	mov	r2, fp
 8006916:	4601      	mov	r1, r0
 8006918:	4607      	mov	r7, r0
 800691a:	4620      	mov	r0, r4
 800691c:	f7fe fd5a 	bl	80053d4 <__multiply>
 8006920:	4659      	mov	r1, fp
 8006922:	9007      	str	r0, [sp, #28]
 8006924:	4620      	mov	r0, r4
 8006926:	f7fe fc83 	bl	8005230 <_Bfree>
 800692a:	9b07      	ldr	r3, [sp, #28]
 800692c:	469b      	mov	fp, r3
 800692e:	9b06      	ldr	r3, [sp, #24]
 8006930:	1b9a      	subs	r2, r3, r6
 8006932:	d004      	beq.n	800693e <_dtoa_r+0x7ce>
 8006934:	4659      	mov	r1, fp
 8006936:	4620      	mov	r0, r4
 8006938:	f7fe fdf2 	bl	8005520 <__pow5mult>
 800693c:	4683      	mov	fp, r0
 800693e:	2101      	movs	r1, #1
 8006940:	4620      	mov	r0, r4
 8006942:	f7fe fd31 	bl	80053a8 <__i2b>
 8006946:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006948:	2b00      	cmp	r3, #0
 800694a:	4606      	mov	r6, r0
 800694c:	dd7c      	ble.n	8006a48 <_dtoa_r+0x8d8>
 800694e:	461a      	mov	r2, r3
 8006950:	4601      	mov	r1, r0
 8006952:	4620      	mov	r0, r4
 8006954:	f7fe fde4 	bl	8005520 <__pow5mult>
 8006958:	9b05      	ldr	r3, [sp, #20]
 800695a:	2b01      	cmp	r3, #1
 800695c:	4606      	mov	r6, r0
 800695e:	dd76      	ble.n	8006a4e <_dtoa_r+0x8de>
 8006960:	2300      	movs	r3, #0
 8006962:	9306      	str	r3, [sp, #24]
 8006964:	6933      	ldr	r3, [r6, #16]
 8006966:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800696a:	6918      	ldr	r0, [r3, #16]
 800696c:	f7fe fccc 	bl	8005308 <__hi0bits>
 8006970:	f1c0 0020 	rsb	r0, r0, #32
 8006974:	9b04      	ldr	r3, [sp, #16]
 8006976:	4418      	add	r0, r3
 8006978:	f010 001f 	ands.w	r0, r0, #31
 800697c:	f000 8086 	beq.w	8006a8c <_dtoa_r+0x91c>
 8006980:	f1c0 0320 	rsb	r3, r0, #32
 8006984:	2b04      	cmp	r3, #4
 8006986:	dd7f      	ble.n	8006a88 <_dtoa_r+0x918>
 8006988:	f1c0 001c 	rsb	r0, r0, #28
 800698c:	9b04      	ldr	r3, [sp, #16]
 800698e:	4403      	add	r3, r0
 8006990:	4480      	add	r8, r0
 8006992:	4405      	add	r5, r0
 8006994:	9304      	str	r3, [sp, #16]
 8006996:	f1b8 0f00 	cmp.w	r8, #0
 800699a:	dd05      	ble.n	80069a8 <_dtoa_r+0x838>
 800699c:	4659      	mov	r1, fp
 800699e:	4642      	mov	r2, r8
 80069a0:	4620      	mov	r0, r4
 80069a2:	f7fe fe17 	bl	80055d4 <__lshift>
 80069a6:	4683      	mov	fp, r0
 80069a8:	9b04      	ldr	r3, [sp, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	dd05      	ble.n	80069ba <_dtoa_r+0x84a>
 80069ae:	4631      	mov	r1, r6
 80069b0:	461a      	mov	r2, r3
 80069b2:	4620      	mov	r0, r4
 80069b4:	f7fe fe0e 	bl	80055d4 <__lshift>
 80069b8:	4606      	mov	r6, r0
 80069ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d069      	beq.n	8006a94 <_dtoa_r+0x924>
 80069c0:	4631      	mov	r1, r6
 80069c2:	4658      	mov	r0, fp
 80069c4:	f7fe fe72 	bl	80056ac <__mcmp>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	da63      	bge.n	8006a94 <_dtoa_r+0x924>
 80069cc:	2300      	movs	r3, #0
 80069ce:	4659      	mov	r1, fp
 80069d0:	220a      	movs	r2, #10
 80069d2:	4620      	mov	r0, r4
 80069d4:	f7fe fc4e 	bl	8005274 <__multadd>
 80069d8:	9b08      	ldr	r3, [sp, #32]
 80069da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069de:	4683      	mov	fp, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 818f 	beq.w	8006d04 <_dtoa_r+0xb94>
 80069e6:	4639      	mov	r1, r7
 80069e8:	2300      	movs	r3, #0
 80069ea:	220a      	movs	r2, #10
 80069ec:	4620      	mov	r0, r4
 80069ee:	f7fe fc41 	bl	8005274 <__multadd>
 80069f2:	f1b9 0f00 	cmp.w	r9, #0
 80069f6:	4607      	mov	r7, r0
 80069f8:	f300 808e 	bgt.w	8006b18 <_dtoa_r+0x9a8>
 80069fc:	9b05      	ldr	r3, [sp, #20]
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	dc50      	bgt.n	8006aa4 <_dtoa_r+0x934>
 8006a02:	e089      	b.n	8006b18 <_dtoa_r+0x9a8>
 8006a04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a0a:	e75d      	b.n	80068c8 <_dtoa_r+0x758>
 8006a0c:	9b01      	ldr	r3, [sp, #4]
 8006a0e:	1e5e      	subs	r6, r3, #1
 8006a10:	9b06      	ldr	r3, [sp, #24]
 8006a12:	42b3      	cmp	r3, r6
 8006a14:	bfbf      	itttt	lt
 8006a16:	9b06      	ldrlt	r3, [sp, #24]
 8006a18:	9606      	strlt	r6, [sp, #24]
 8006a1a:	1af2      	sublt	r2, r6, r3
 8006a1c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006a1e:	bfb6      	itet	lt
 8006a20:	189b      	addlt	r3, r3, r2
 8006a22:	1b9e      	subge	r6, r3, r6
 8006a24:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006a26:	9b01      	ldr	r3, [sp, #4]
 8006a28:	bfb8      	it	lt
 8006a2a:	2600      	movlt	r6, #0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	bfb5      	itete	lt
 8006a30:	eba8 0503 	sublt.w	r5, r8, r3
 8006a34:	9b01      	ldrge	r3, [sp, #4]
 8006a36:	2300      	movlt	r3, #0
 8006a38:	4645      	movge	r5, r8
 8006a3a:	e747      	b.n	80068cc <_dtoa_r+0x75c>
 8006a3c:	9e06      	ldr	r6, [sp, #24]
 8006a3e:	9f08      	ldr	r7, [sp, #32]
 8006a40:	4645      	mov	r5, r8
 8006a42:	e74c      	b.n	80068de <_dtoa_r+0x76e>
 8006a44:	9a06      	ldr	r2, [sp, #24]
 8006a46:	e775      	b.n	8006934 <_dtoa_r+0x7c4>
 8006a48:	9b05      	ldr	r3, [sp, #20]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	dc18      	bgt.n	8006a80 <_dtoa_r+0x910>
 8006a4e:	9b02      	ldr	r3, [sp, #8]
 8006a50:	b9b3      	cbnz	r3, 8006a80 <_dtoa_r+0x910>
 8006a52:	9b03      	ldr	r3, [sp, #12]
 8006a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a58:	b9a3      	cbnz	r3, 8006a84 <_dtoa_r+0x914>
 8006a5a:	9b03      	ldr	r3, [sp, #12]
 8006a5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a60:	0d1b      	lsrs	r3, r3, #20
 8006a62:	051b      	lsls	r3, r3, #20
 8006a64:	b12b      	cbz	r3, 8006a72 <_dtoa_r+0x902>
 8006a66:	9b04      	ldr	r3, [sp, #16]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	9304      	str	r3, [sp, #16]
 8006a6c:	f108 0801 	add.w	r8, r8, #1
 8006a70:	2301      	movs	r3, #1
 8006a72:	9306      	str	r3, [sp, #24]
 8006a74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f47f af74 	bne.w	8006964 <_dtoa_r+0x7f4>
 8006a7c:	2001      	movs	r0, #1
 8006a7e:	e779      	b.n	8006974 <_dtoa_r+0x804>
 8006a80:	2300      	movs	r3, #0
 8006a82:	e7f6      	b.n	8006a72 <_dtoa_r+0x902>
 8006a84:	9b02      	ldr	r3, [sp, #8]
 8006a86:	e7f4      	b.n	8006a72 <_dtoa_r+0x902>
 8006a88:	d085      	beq.n	8006996 <_dtoa_r+0x826>
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	301c      	adds	r0, #28
 8006a8e:	e77d      	b.n	800698c <_dtoa_r+0x81c>
 8006a90:	40240000 	.word	0x40240000
 8006a94:	9b01      	ldr	r3, [sp, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	dc38      	bgt.n	8006b0c <_dtoa_r+0x99c>
 8006a9a:	9b05      	ldr	r3, [sp, #20]
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	dd35      	ble.n	8006b0c <_dtoa_r+0x99c>
 8006aa0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006aa4:	f1b9 0f00 	cmp.w	r9, #0
 8006aa8:	d10d      	bne.n	8006ac6 <_dtoa_r+0x956>
 8006aaa:	4631      	mov	r1, r6
 8006aac:	464b      	mov	r3, r9
 8006aae:	2205      	movs	r2, #5
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f7fe fbdf 	bl	8005274 <__multadd>
 8006ab6:	4601      	mov	r1, r0
 8006ab8:	4606      	mov	r6, r0
 8006aba:	4658      	mov	r0, fp
 8006abc:	f7fe fdf6 	bl	80056ac <__mcmp>
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	f73f adbd 	bgt.w	8006640 <_dtoa_r+0x4d0>
 8006ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac8:	9d00      	ldr	r5, [sp, #0]
 8006aca:	ea6f 0a03 	mvn.w	sl, r3
 8006ace:	f04f 0800 	mov.w	r8, #0
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f7fe fbab 	bl	8005230 <_Bfree>
 8006ada:	2f00      	cmp	r7, #0
 8006adc:	f43f aeb4 	beq.w	8006848 <_dtoa_r+0x6d8>
 8006ae0:	f1b8 0f00 	cmp.w	r8, #0
 8006ae4:	d005      	beq.n	8006af2 <_dtoa_r+0x982>
 8006ae6:	45b8      	cmp	r8, r7
 8006ae8:	d003      	beq.n	8006af2 <_dtoa_r+0x982>
 8006aea:	4641      	mov	r1, r8
 8006aec:	4620      	mov	r0, r4
 8006aee:	f7fe fb9f 	bl	8005230 <_Bfree>
 8006af2:	4639      	mov	r1, r7
 8006af4:	4620      	mov	r0, r4
 8006af6:	f7fe fb9b 	bl	8005230 <_Bfree>
 8006afa:	e6a5      	b.n	8006848 <_dtoa_r+0x6d8>
 8006afc:	2600      	movs	r6, #0
 8006afe:	4637      	mov	r7, r6
 8006b00:	e7e1      	b.n	8006ac6 <_dtoa_r+0x956>
 8006b02:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006b04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006b08:	4637      	mov	r7, r6
 8006b0a:	e599      	b.n	8006640 <_dtoa_r+0x4d0>
 8006b0c:	9b08      	ldr	r3, [sp, #32]
 8006b0e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 80fd 	beq.w	8006d12 <_dtoa_r+0xba2>
 8006b18:	2d00      	cmp	r5, #0
 8006b1a:	dd05      	ble.n	8006b28 <_dtoa_r+0x9b8>
 8006b1c:	4639      	mov	r1, r7
 8006b1e:	462a      	mov	r2, r5
 8006b20:	4620      	mov	r0, r4
 8006b22:	f7fe fd57 	bl	80055d4 <__lshift>
 8006b26:	4607      	mov	r7, r0
 8006b28:	9b06      	ldr	r3, [sp, #24]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d05c      	beq.n	8006be8 <_dtoa_r+0xa78>
 8006b2e:	6879      	ldr	r1, [r7, #4]
 8006b30:	4620      	mov	r0, r4
 8006b32:	f7fe fb3d 	bl	80051b0 <_Balloc>
 8006b36:	4605      	mov	r5, r0
 8006b38:	b928      	cbnz	r0, 8006b46 <_dtoa_r+0x9d6>
 8006b3a:	4b80      	ldr	r3, [pc, #512]	; (8006d3c <_dtoa_r+0xbcc>)
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006b42:	f7ff bb2e 	b.w	80061a2 <_dtoa_r+0x32>
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	3202      	adds	r2, #2
 8006b4a:	0092      	lsls	r2, r2, #2
 8006b4c:	f107 010c 	add.w	r1, r7, #12
 8006b50:	300c      	adds	r0, #12
 8006b52:	f000 f913 	bl	8006d7c <memcpy>
 8006b56:	2201      	movs	r2, #1
 8006b58:	4629      	mov	r1, r5
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f7fe fd3a 	bl	80055d4 <__lshift>
 8006b60:	9b00      	ldr	r3, [sp, #0]
 8006b62:	3301      	adds	r3, #1
 8006b64:	9301      	str	r3, [sp, #4]
 8006b66:	9b00      	ldr	r3, [sp, #0]
 8006b68:	444b      	add	r3, r9
 8006b6a:	9307      	str	r3, [sp, #28]
 8006b6c:	9b02      	ldr	r3, [sp, #8]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	46b8      	mov	r8, r7
 8006b74:	9306      	str	r3, [sp, #24]
 8006b76:	4607      	mov	r7, r0
 8006b78:	9b01      	ldr	r3, [sp, #4]
 8006b7a:	4631      	mov	r1, r6
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	4658      	mov	r0, fp
 8006b80:	9302      	str	r3, [sp, #8]
 8006b82:	f7ff fa67 	bl	8006054 <quorem>
 8006b86:	4603      	mov	r3, r0
 8006b88:	3330      	adds	r3, #48	; 0x30
 8006b8a:	9004      	str	r0, [sp, #16]
 8006b8c:	4641      	mov	r1, r8
 8006b8e:	4658      	mov	r0, fp
 8006b90:	9308      	str	r3, [sp, #32]
 8006b92:	f7fe fd8b 	bl	80056ac <__mcmp>
 8006b96:	463a      	mov	r2, r7
 8006b98:	4681      	mov	r9, r0
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f7fe fda1 	bl	80056e4 <__mdiff>
 8006ba2:	68c2      	ldr	r2, [r0, #12]
 8006ba4:	9b08      	ldr	r3, [sp, #32]
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	bb02      	cbnz	r2, 8006bec <_dtoa_r+0xa7c>
 8006baa:	4601      	mov	r1, r0
 8006bac:	4658      	mov	r0, fp
 8006bae:	f7fe fd7d 	bl	80056ac <__mcmp>
 8006bb2:	9b08      	ldr	r3, [sp, #32]
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	4620      	mov	r0, r4
 8006bba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006bbe:	f7fe fb37 	bl	8005230 <_Bfree>
 8006bc2:	9b05      	ldr	r3, [sp, #20]
 8006bc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bc6:	9d01      	ldr	r5, [sp, #4]
 8006bc8:	ea43 0102 	orr.w	r1, r3, r2
 8006bcc:	9b06      	ldr	r3, [sp, #24]
 8006bce:	430b      	orrs	r3, r1
 8006bd0:	9b08      	ldr	r3, [sp, #32]
 8006bd2:	d10d      	bne.n	8006bf0 <_dtoa_r+0xa80>
 8006bd4:	2b39      	cmp	r3, #57	; 0x39
 8006bd6:	d029      	beq.n	8006c2c <_dtoa_r+0xabc>
 8006bd8:	f1b9 0f00 	cmp.w	r9, #0
 8006bdc:	dd01      	ble.n	8006be2 <_dtoa_r+0xa72>
 8006bde:	9b04      	ldr	r3, [sp, #16]
 8006be0:	3331      	adds	r3, #49	; 0x31
 8006be2:	9a02      	ldr	r2, [sp, #8]
 8006be4:	7013      	strb	r3, [r2, #0]
 8006be6:	e774      	b.n	8006ad2 <_dtoa_r+0x962>
 8006be8:	4638      	mov	r0, r7
 8006bea:	e7b9      	b.n	8006b60 <_dtoa_r+0x9f0>
 8006bec:	2201      	movs	r2, #1
 8006bee:	e7e2      	b.n	8006bb6 <_dtoa_r+0xa46>
 8006bf0:	f1b9 0f00 	cmp.w	r9, #0
 8006bf4:	db06      	blt.n	8006c04 <_dtoa_r+0xa94>
 8006bf6:	9905      	ldr	r1, [sp, #20]
 8006bf8:	ea41 0909 	orr.w	r9, r1, r9
 8006bfc:	9906      	ldr	r1, [sp, #24]
 8006bfe:	ea59 0101 	orrs.w	r1, r9, r1
 8006c02:	d120      	bne.n	8006c46 <_dtoa_r+0xad6>
 8006c04:	2a00      	cmp	r2, #0
 8006c06:	ddec      	ble.n	8006be2 <_dtoa_r+0xa72>
 8006c08:	4659      	mov	r1, fp
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	9301      	str	r3, [sp, #4]
 8006c10:	f7fe fce0 	bl	80055d4 <__lshift>
 8006c14:	4631      	mov	r1, r6
 8006c16:	4683      	mov	fp, r0
 8006c18:	f7fe fd48 	bl	80056ac <__mcmp>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	9b01      	ldr	r3, [sp, #4]
 8006c20:	dc02      	bgt.n	8006c28 <_dtoa_r+0xab8>
 8006c22:	d1de      	bne.n	8006be2 <_dtoa_r+0xa72>
 8006c24:	07da      	lsls	r2, r3, #31
 8006c26:	d5dc      	bpl.n	8006be2 <_dtoa_r+0xa72>
 8006c28:	2b39      	cmp	r3, #57	; 0x39
 8006c2a:	d1d8      	bne.n	8006bde <_dtoa_r+0xa6e>
 8006c2c:	9a02      	ldr	r2, [sp, #8]
 8006c2e:	2339      	movs	r3, #57	; 0x39
 8006c30:	7013      	strb	r3, [r2, #0]
 8006c32:	462b      	mov	r3, r5
 8006c34:	461d      	mov	r5, r3
 8006c36:	3b01      	subs	r3, #1
 8006c38:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006c3c:	2a39      	cmp	r2, #57	; 0x39
 8006c3e:	d050      	beq.n	8006ce2 <_dtoa_r+0xb72>
 8006c40:	3201      	adds	r2, #1
 8006c42:	701a      	strb	r2, [r3, #0]
 8006c44:	e745      	b.n	8006ad2 <_dtoa_r+0x962>
 8006c46:	2a00      	cmp	r2, #0
 8006c48:	dd03      	ble.n	8006c52 <_dtoa_r+0xae2>
 8006c4a:	2b39      	cmp	r3, #57	; 0x39
 8006c4c:	d0ee      	beq.n	8006c2c <_dtoa_r+0xabc>
 8006c4e:	3301      	adds	r3, #1
 8006c50:	e7c7      	b.n	8006be2 <_dtoa_r+0xa72>
 8006c52:	9a01      	ldr	r2, [sp, #4]
 8006c54:	9907      	ldr	r1, [sp, #28]
 8006c56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c5a:	428a      	cmp	r2, r1
 8006c5c:	d02a      	beq.n	8006cb4 <_dtoa_r+0xb44>
 8006c5e:	4659      	mov	r1, fp
 8006c60:	2300      	movs	r3, #0
 8006c62:	220a      	movs	r2, #10
 8006c64:	4620      	mov	r0, r4
 8006c66:	f7fe fb05 	bl	8005274 <__multadd>
 8006c6a:	45b8      	cmp	r8, r7
 8006c6c:	4683      	mov	fp, r0
 8006c6e:	f04f 0300 	mov.w	r3, #0
 8006c72:	f04f 020a 	mov.w	r2, #10
 8006c76:	4641      	mov	r1, r8
 8006c78:	4620      	mov	r0, r4
 8006c7a:	d107      	bne.n	8006c8c <_dtoa_r+0xb1c>
 8006c7c:	f7fe fafa 	bl	8005274 <__multadd>
 8006c80:	4680      	mov	r8, r0
 8006c82:	4607      	mov	r7, r0
 8006c84:	9b01      	ldr	r3, [sp, #4]
 8006c86:	3301      	adds	r3, #1
 8006c88:	9301      	str	r3, [sp, #4]
 8006c8a:	e775      	b.n	8006b78 <_dtoa_r+0xa08>
 8006c8c:	f7fe faf2 	bl	8005274 <__multadd>
 8006c90:	4639      	mov	r1, r7
 8006c92:	4680      	mov	r8, r0
 8006c94:	2300      	movs	r3, #0
 8006c96:	220a      	movs	r2, #10
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f7fe faeb 	bl	8005274 <__multadd>
 8006c9e:	4607      	mov	r7, r0
 8006ca0:	e7f0      	b.n	8006c84 <_dtoa_r+0xb14>
 8006ca2:	f1b9 0f00 	cmp.w	r9, #0
 8006ca6:	9a00      	ldr	r2, [sp, #0]
 8006ca8:	bfcc      	ite	gt
 8006caa:	464d      	movgt	r5, r9
 8006cac:	2501      	movle	r5, #1
 8006cae:	4415      	add	r5, r2
 8006cb0:	f04f 0800 	mov.w	r8, #0
 8006cb4:	4659      	mov	r1, fp
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	4620      	mov	r0, r4
 8006cba:	9301      	str	r3, [sp, #4]
 8006cbc:	f7fe fc8a 	bl	80055d4 <__lshift>
 8006cc0:	4631      	mov	r1, r6
 8006cc2:	4683      	mov	fp, r0
 8006cc4:	f7fe fcf2 	bl	80056ac <__mcmp>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	dcb2      	bgt.n	8006c32 <_dtoa_r+0xac2>
 8006ccc:	d102      	bne.n	8006cd4 <_dtoa_r+0xb64>
 8006cce:	9b01      	ldr	r3, [sp, #4]
 8006cd0:	07db      	lsls	r3, r3, #31
 8006cd2:	d4ae      	bmi.n	8006c32 <_dtoa_r+0xac2>
 8006cd4:	462b      	mov	r3, r5
 8006cd6:	461d      	mov	r5, r3
 8006cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cdc:	2a30      	cmp	r2, #48	; 0x30
 8006cde:	d0fa      	beq.n	8006cd6 <_dtoa_r+0xb66>
 8006ce0:	e6f7      	b.n	8006ad2 <_dtoa_r+0x962>
 8006ce2:	9a00      	ldr	r2, [sp, #0]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d1a5      	bne.n	8006c34 <_dtoa_r+0xac4>
 8006ce8:	f10a 0a01 	add.w	sl, sl, #1
 8006cec:	2331      	movs	r3, #49	; 0x31
 8006cee:	e779      	b.n	8006be4 <_dtoa_r+0xa74>
 8006cf0:	4b13      	ldr	r3, [pc, #76]	; (8006d40 <_dtoa_r+0xbd0>)
 8006cf2:	f7ff baaf 	b.w	8006254 <_dtoa_r+0xe4>
 8006cf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f47f aa86 	bne.w	800620a <_dtoa_r+0x9a>
 8006cfe:	4b11      	ldr	r3, [pc, #68]	; (8006d44 <_dtoa_r+0xbd4>)
 8006d00:	f7ff baa8 	b.w	8006254 <_dtoa_r+0xe4>
 8006d04:	f1b9 0f00 	cmp.w	r9, #0
 8006d08:	dc03      	bgt.n	8006d12 <_dtoa_r+0xba2>
 8006d0a:	9b05      	ldr	r3, [sp, #20]
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	f73f aec9 	bgt.w	8006aa4 <_dtoa_r+0x934>
 8006d12:	9d00      	ldr	r5, [sp, #0]
 8006d14:	4631      	mov	r1, r6
 8006d16:	4658      	mov	r0, fp
 8006d18:	f7ff f99c 	bl	8006054 <quorem>
 8006d1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006d20:	f805 3b01 	strb.w	r3, [r5], #1
 8006d24:	9a00      	ldr	r2, [sp, #0]
 8006d26:	1aaa      	subs	r2, r5, r2
 8006d28:	4591      	cmp	r9, r2
 8006d2a:	ddba      	ble.n	8006ca2 <_dtoa_r+0xb32>
 8006d2c:	4659      	mov	r1, fp
 8006d2e:	2300      	movs	r3, #0
 8006d30:	220a      	movs	r2, #10
 8006d32:	4620      	mov	r0, r4
 8006d34:	f7fe fa9e 	bl	8005274 <__multadd>
 8006d38:	4683      	mov	fp, r0
 8006d3a:	e7eb      	b.n	8006d14 <_dtoa_r+0xba4>
 8006d3c:	08008373 	.word	0x08008373
 8006d40:	08008500 	.word	0x08008500
 8006d44:	080084f3 	.word	0x080084f3

08006d48 <fiprintf>:
 8006d48:	b40e      	push	{r1, r2, r3}
 8006d4a:	b503      	push	{r0, r1, lr}
 8006d4c:	4601      	mov	r1, r0
 8006d4e:	ab03      	add	r3, sp, #12
 8006d50:	4805      	ldr	r0, [pc, #20]	; (8006d68 <fiprintf+0x20>)
 8006d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d56:	6800      	ldr	r0, [r0, #0]
 8006d58:	9301      	str	r3, [sp, #4]
 8006d5a:	f000 f8c5 	bl	8006ee8 <_vfiprintf_r>
 8006d5e:	b002      	add	sp, #8
 8006d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d64:	b003      	add	sp, #12
 8006d66:	4770      	bx	lr
 8006d68:	20000010 	.word	0x20000010

08006d6c <malloc>:
 8006d6c:	4b02      	ldr	r3, [pc, #8]	; (8006d78 <malloc+0xc>)
 8006d6e:	4601      	mov	r1, r0
 8006d70:	6818      	ldr	r0, [r3, #0]
 8006d72:	f7fe bdc9 	b.w	8005908 <_malloc_r>
 8006d76:	bf00      	nop
 8006d78:	20000010 	.word	0x20000010

08006d7c <memcpy>:
 8006d7c:	440a      	add	r2, r1
 8006d7e:	4291      	cmp	r1, r2
 8006d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d84:	d100      	bne.n	8006d88 <memcpy+0xc>
 8006d86:	4770      	bx	lr
 8006d88:	b510      	push	{r4, lr}
 8006d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d92:	4291      	cmp	r1, r2
 8006d94:	d1f9      	bne.n	8006d8a <memcpy+0xe>
 8006d96:	bd10      	pop	{r4, pc}

08006d98 <memmove>:
 8006d98:	4288      	cmp	r0, r1
 8006d9a:	b510      	push	{r4, lr}
 8006d9c:	eb01 0402 	add.w	r4, r1, r2
 8006da0:	d902      	bls.n	8006da8 <memmove+0x10>
 8006da2:	4284      	cmp	r4, r0
 8006da4:	4623      	mov	r3, r4
 8006da6:	d807      	bhi.n	8006db8 <memmove+0x20>
 8006da8:	1e43      	subs	r3, r0, #1
 8006daa:	42a1      	cmp	r1, r4
 8006dac:	d008      	beq.n	8006dc0 <memmove+0x28>
 8006dae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006db2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006db6:	e7f8      	b.n	8006daa <memmove+0x12>
 8006db8:	4402      	add	r2, r0
 8006dba:	4601      	mov	r1, r0
 8006dbc:	428a      	cmp	r2, r1
 8006dbe:	d100      	bne.n	8006dc2 <memmove+0x2a>
 8006dc0:	bd10      	pop	{r4, pc}
 8006dc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006dca:	e7f7      	b.n	8006dbc <memmove+0x24>

08006dcc <__malloc_lock>:
 8006dcc:	4801      	ldr	r0, [pc, #4]	; (8006dd4 <__malloc_lock+0x8>)
 8006dce:	f000 bc3b 	b.w	8007648 <__retarget_lock_acquire_recursive>
 8006dd2:	bf00      	nop
 8006dd4:	200000ec 	.word	0x200000ec

08006dd8 <__malloc_unlock>:
 8006dd8:	4801      	ldr	r0, [pc, #4]	; (8006de0 <__malloc_unlock+0x8>)
 8006dda:	f000 bc36 	b.w	800764a <__retarget_lock_release_recursive>
 8006dde:	bf00      	nop
 8006de0:	200000ec 	.word	0x200000ec

08006de4 <_free_r>:
 8006de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006de6:	2900      	cmp	r1, #0
 8006de8:	d048      	beq.n	8006e7c <_free_r+0x98>
 8006dea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dee:	9001      	str	r0, [sp, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f1a1 0404 	sub.w	r4, r1, #4
 8006df6:	bfb8      	it	lt
 8006df8:	18e4      	addlt	r4, r4, r3
 8006dfa:	f7ff ffe7 	bl	8006dcc <__malloc_lock>
 8006dfe:	4a20      	ldr	r2, [pc, #128]	; (8006e80 <_free_r+0x9c>)
 8006e00:	9801      	ldr	r0, [sp, #4]
 8006e02:	6813      	ldr	r3, [r2, #0]
 8006e04:	4615      	mov	r5, r2
 8006e06:	b933      	cbnz	r3, 8006e16 <_free_r+0x32>
 8006e08:	6063      	str	r3, [r4, #4]
 8006e0a:	6014      	str	r4, [r2, #0]
 8006e0c:	b003      	add	sp, #12
 8006e0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e12:	f7ff bfe1 	b.w	8006dd8 <__malloc_unlock>
 8006e16:	42a3      	cmp	r3, r4
 8006e18:	d90b      	bls.n	8006e32 <_free_r+0x4e>
 8006e1a:	6821      	ldr	r1, [r4, #0]
 8006e1c:	1862      	adds	r2, r4, r1
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	bf04      	itt	eq
 8006e22:	681a      	ldreq	r2, [r3, #0]
 8006e24:	685b      	ldreq	r3, [r3, #4]
 8006e26:	6063      	str	r3, [r4, #4]
 8006e28:	bf04      	itt	eq
 8006e2a:	1852      	addeq	r2, r2, r1
 8006e2c:	6022      	streq	r2, [r4, #0]
 8006e2e:	602c      	str	r4, [r5, #0]
 8006e30:	e7ec      	b.n	8006e0c <_free_r+0x28>
 8006e32:	461a      	mov	r2, r3
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	b10b      	cbz	r3, 8006e3c <_free_r+0x58>
 8006e38:	42a3      	cmp	r3, r4
 8006e3a:	d9fa      	bls.n	8006e32 <_free_r+0x4e>
 8006e3c:	6811      	ldr	r1, [r2, #0]
 8006e3e:	1855      	adds	r5, r2, r1
 8006e40:	42a5      	cmp	r5, r4
 8006e42:	d10b      	bne.n	8006e5c <_free_r+0x78>
 8006e44:	6824      	ldr	r4, [r4, #0]
 8006e46:	4421      	add	r1, r4
 8006e48:	1854      	adds	r4, r2, r1
 8006e4a:	42a3      	cmp	r3, r4
 8006e4c:	6011      	str	r1, [r2, #0]
 8006e4e:	d1dd      	bne.n	8006e0c <_free_r+0x28>
 8006e50:	681c      	ldr	r4, [r3, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	6053      	str	r3, [r2, #4]
 8006e56:	4421      	add	r1, r4
 8006e58:	6011      	str	r1, [r2, #0]
 8006e5a:	e7d7      	b.n	8006e0c <_free_r+0x28>
 8006e5c:	d902      	bls.n	8006e64 <_free_r+0x80>
 8006e5e:	230c      	movs	r3, #12
 8006e60:	6003      	str	r3, [r0, #0]
 8006e62:	e7d3      	b.n	8006e0c <_free_r+0x28>
 8006e64:	6825      	ldr	r5, [r4, #0]
 8006e66:	1961      	adds	r1, r4, r5
 8006e68:	428b      	cmp	r3, r1
 8006e6a:	bf04      	itt	eq
 8006e6c:	6819      	ldreq	r1, [r3, #0]
 8006e6e:	685b      	ldreq	r3, [r3, #4]
 8006e70:	6063      	str	r3, [r4, #4]
 8006e72:	bf04      	itt	eq
 8006e74:	1949      	addeq	r1, r1, r5
 8006e76:	6021      	streq	r1, [r4, #0]
 8006e78:	6054      	str	r4, [r2, #4]
 8006e7a:	e7c7      	b.n	8006e0c <_free_r+0x28>
 8006e7c:	b003      	add	sp, #12
 8006e7e:	bd30      	pop	{r4, r5, pc}
 8006e80:	200000a0 	.word	0x200000a0

08006e84 <_malloc_usable_size_r>:
 8006e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e88:	1f18      	subs	r0, r3, #4
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	bfbc      	itt	lt
 8006e8e:	580b      	ldrlt	r3, [r1, r0]
 8006e90:	18c0      	addlt	r0, r0, r3
 8006e92:	4770      	bx	lr

08006e94 <__sfputc_r>:
 8006e94:	6893      	ldr	r3, [r2, #8]
 8006e96:	3b01      	subs	r3, #1
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	b410      	push	{r4}
 8006e9c:	6093      	str	r3, [r2, #8]
 8006e9e:	da08      	bge.n	8006eb2 <__sfputc_r+0x1e>
 8006ea0:	6994      	ldr	r4, [r2, #24]
 8006ea2:	42a3      	cmp	r3, r4
 8006ea4:	db01      	blt.n	8006eaa <__sfputc_r+0x16>
 8006ea6:	290a      	cmp	r1, #10
 8006ea8:	d103      	bne.n	8006eb2 <__sfputc_r+0x1e>
 8006eaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eae:	f000 b94b 	b.w	8007148 <__swbuf_r>
 8006eb2:	6813      	ldr	r3, [r2, #0]
 8006eb4:	1c58      	adds	r0, r3, #1
 8006eb6:	6010      	str	r0, [r2, #0]
 8006eb8:	7019      	strb	r1, [r3, #0]
 8006eba:	4608      	mov	r0, r1
 8006ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <__sfputs_r>:
 8006ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec4:	4606      	mov	r6, r0
 8006ec6:	460f      	mov	r7, r1
 8006ec8:	4614      	mov	r4, r2
 8006eca:	18d5      	adds	r5, r2, r3
 8006ecc:	42ac      	cmp	r4, r5
 8006ece:	d101      	bne.n	8006ed4 <__sfputs_r+0x12>
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	e007      	b.n	8006ee4 <__sfputs_r+0x22>
 8006ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed8:	463a      	mov	r2, r7
 8006eda:	4630      	mov	r0, r6
 8006edc:	f7ff ffda 	bl	8006e94 <__sfputc_r>
 8006ee0:	1c43      	adds	r3, r0, #1
 8006ee2:	d1f3      	bne.n	8006ecc <__sfputs_r+0xa>
 8006ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ee8 <_vfiprintf_r>:
 8006ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eec:	460d      	mov	r5, r1
 8006eee:	b09d      	sub	sp, #116	; 0x74
 8006ef0:	4614      	mov	r4, r2
 8006ef2:	4698      	mov	r8, r3
 8006ef4:	4606      	mov	r6, r0
 8006ef6:	b118      	cbz	r0, 8006f00 <_vfiprintf_r+0x18>
 8006ef8:	6983      	ldr	r3, [r0, #24]
 8006efa:	b90b      	cbnz	r3, 8006f00 <_vfiprintf_r+0x18>
 8006efc:	f000 fb06 	bl	800750c <__sinit>
 8006f00:	4b89      	ldr	r3, [pc, #548]	; (8007128 <_vfiprintf_r+0x240>)
 8006f02:	429d      	cmp	r5, r3
 8006f04:	d11b      	bne.n	8006f3e <_vfiprintf_r+0x56>
 8006f06:	6875      	ldr	r5, [r6, #4]
 8006f08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f0a:	07d9      	lsls	r1, r3, #31
 8006f0c:	d405      	bmi.n	8006f1a <_vfiprintf_r+0x32>
 8006f0e:	89ab      	ldrh	r3, [r5, #12]
 8006f10:	059a      	lsls	r2, r3, #22
 8006f12:	d402      	bmi.n	8006f1a <_vfiprintf_r+0x32>
 8006f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f16:	f000 fb97 	bl	8007648 <__retarget_lock_acquire_recursive>
 8006f1a:	89ab      	ldrh	r3, [r5, #12]
 8006f1c:	071b      	lsls	r3, r3, #28
 8006f1e:	d501      	bpl.n	8006f24 <_vfiprintf_r+0x3c>
 8006f20:	692b      	ldr	r3, [r5, #16]
 8006f22:	b9eb      	cbnz	r3, 8006f60 <_vfiprintf_r+0x78>
 8006f24:	4629      	mov	r1, r5
 8006f26:	4630      	mov	r0, r6
 8006f28:	f000 f960 	bl	80071ec <__swsetup_r>
 8006f2c:	b1c0      	cbz	r0, 8006f60 <_vfiprintf_r+0x78>
 8006f2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f30:	07dc      	lsls	r4, r3, #31
 8006f32:	d50e      	bpl.n	8006f52 <_vfiprintf_r+0x6a>
 8006f34:	f04f 30ff 	mov.w	r0, #4294967295
 8006f38:	b01d      	add	sp, #116	; 0x74
 8006f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f3e:	4b7b      	ldr	r3, [pc, #492]	; (800712c <_vfiprintf_r+0x244>)
 8006f40:	429d      	cmp	r5, r3
 8006f42:	d101      	bne.n	8006f48 <_vfiprintf_r+0x60>
 8006f44:	68b5      	ldr	r5, [r6, #8]
 8006f46:	e7df      	b.n	8006f08 <_vfiprintf_r+0x20>
 8006f48:	4b79      	ldr	r3, [pc, #484]	; (8007130 <_vfiprintf_r+0x248>)
 8006f4a:	429d      	cmp	r5, r3
 8006f4c:	bf08      	it	eq
 8006f4e:	68f5      	ldreq	r5, [r6, #12]
 8006f50:	e7da      	b.n	8006f08 <_vfiprintf_r+0x20>
 8006f52:	89ab      	ldrh	r3, [r5, #12]
 8006f54:	0598      	lsls	r0, r3, #22
 8006f56:	d4ed      	bmi.n	8006f34 <_vfiprintf_r+0x4c>
 8006f58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f5a:	f000 fb76 	bl	800764a <__retarget_lock_release_recursive>
 8006f5e:	e7e9      	b.n	8006f34 <_vfiprintf_r+0x4c>
 8006f60:	2300      	movs	r3, #0
 8006f62:	9309      	str	r3, [sp, #36]	; 0x24
 8006f64:	2320      	movs	r3, #32
 8006f66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f6e:	2330      	movs	r3, #48	; 0x30
 8006f70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007134 <_vfiprintf_r+0x24c>
 8006f74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f78:	f04f 0901 	mov.w	r9, #1
 8006f7c:	4623      	mov	r3, r4
 8006f7e:	469a      	mov	sl, r3
 8006f80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f84:	b10a      	cbz	r2, 8006f8a <_vfiprintf_r+0xa2>
 8006f86:	2a25      	cmp	r2, #37	; 0x25
 8006f88:	d1f9      	bne.n	8006f7e <_vfiprintf_r+0x96>
 8006f8a:	ebba 0b04 	subs.w	fp, sl, r4
 8006f8e:	d00b      	beq.n	8006fa8 <_vfiprintf_r+0xc0>
 8006f90:	465b      	mov	r3, fp
 8006f92:	4622      	mov	r2, r4
 8006f94:	4629      	mov	r1, r5
 8006f96:	4630      	mov	r0, r6
 8006f98:	f7ff ff93 	bl	8006ec2 <__sfputs_r>
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	f000 80aa 	beq.w	80070f6 <_vfiprintf_r+0x20e>
 8006fa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fa4:	445a      	add	r2, fp
 8006fa6:	9209      	str	r2, [sp, #36]	; 0x24
 8006fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 80a2 	beq.w	80070f6 <_vfiprintf_r+0x20e>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fbc:	f10a 0a01 	add.w	sl, sl, #1
 8006fc0:	9304      	str	r3, [sp, #16]
 8006fc2:	9307      	str	r3, [sp, #28]
 8006fc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fc8:	931a      	str	r3, [sp, #104]	; 0x68
 8006fca:	4654      	mov	r4, sl
 8006fcc:	2205      	movs	r2, #5
 8006fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fd2:	4858      	ldr	r0, [pc, #352]	; (8007134 <_vfiprintf_r+0x24c>)
 8006fd4:	f7f9 f904 	bl	80001e0 <memchr>
 8006fd8:	9a04      	ldr	r2, [sp, #16]
 8006fda:	b9d8      	cbnz	r0, 8007014 <_vfiprintf_r+0x12c>
 8006fdc:	06d1      	lsls	r1, r2, #27
 8006fde:	bf44      	itt	mi
 8006fe0:	2320      	movmi	r3, #32
 8006fe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fe6:	0713      	lsls	r3, r2, #28
 8006fe8:	bf44      	itt	mi
 8006fea:	232b      	movmi	r3, #43	; 0x2b
 8006fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ff0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ff6:	d015      	beq.n	8007024 <_vfiprintf_r+0x13c>
 8006ff8:	9a07      	ldr	r2, [sp, #28]
 8006ffa:	4654      	mov	r4, sl
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	f04f 0c0a 	mov.w	ip, #10
 8007002:	4621      	mov	r1, r4
 8007004:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007008:	3b30      	subs	r3, #48	; 0x30
 800700a:	2b09      	cmp	r3, #9
 800700c:	d94e      	bls.n	80070ac <_vfiprintf_r+0x1c4>
 800700e:	b1b0      	cbz	r0, 800703e <_vfiprintf_r+0x156>
 8007010:	9207      	str	r2, [sp, #28]
 8007012:	e014      	b.n	800703e <_vfiprintf_r+0x156>
 8007014:	eba0 0308 	sub.w	r3, r0, r8
 8007018:	fa09 f303 	lsl.w	r3, r9, r3
 800701c:	4313      	orrs	r3, r2
 800701e:	9304      	str	r3, [sp, #16]
 8007020:	46a2      	mov	sl, r4
 8007022:	e7d2      	b.n	8006fca <_vfiprintf_r+0xe2>
 8007024:	9b03      	ldr	r3, [sp, #12]
 8007026:	1d19      	adds	r1, r3, #4
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	9103      	str	r1, [sp, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	bfbb      	ittet	lt
 8007030:	425b      	neglt	r3, r3
 8007032:	f042 0202 	orrlt.w	r2, r2, #2
 8007036:	9307      	strge	r3, [sp, #28]
 8007038:	9307      	strlt	r3, [sp, #28]
 800703a:	bfb8      	it	lt
 800703c:	9204      	strlt	r2, [sp, #16]
 800703e:	7823      	ldrb	r3, [r4, #0]
 8007040:	2b2e      	cmp	r3, #46	; 0x2e
 8007042:	d10c      	bne.n	800705e <_vfiprintf_r+0x176>
 8007044:	7863      	ldrb	r3, [r4, #1]
 8007046:	2b2a      	cmp	r3, #42	; 0x2a
 8007048:	d135      	bne.n	80070b6 <_vfiprintf_r+0x1ce>
 800704a:	9b03      	ldr	r3, [sp, #12]
 800704c:	1d1a      	adds	r2, r3, #4
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	9203      	str	r2, [sp, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	bfb8      	it	lt
 8007056:	f04f 33ff 	movlt.w	r3, #4294967295
 800705a:	3402      	adds	r4, #2
 800705c:	9305      	str	r3, [sp, #20]
 800705e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007144 <_vfiprintf_r+0x25c>
 8007062:	7821      	ldrb	r1, [r4, #0]
 8007064:	2203      	movs	r2, #3
 8007066:	4650      	mov	r0, sl
 8007068:	f7f9 f8ba 	bl	80001e0 <memchr>
 800706c:	b140      	cbz	r0, 8007080 <_vfiprintf_r+0x198>
 800706e:	2340      	movs	r3, #64	; 0x40
 8007070:	eba0 000a 	sub.w	r0, r0, sl
 8007074:	fa03 f000 	lsl.w	r0, r3, r0
 8007078:	9b04      	ldr	r3, [sp, #16]
 800707a:	4303      	orrs	r3, r0
 800707c:	3401      	adds	r4, #1
 800707e:	9304      	str	r3, [sp, #16]
 8007080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007084:	482c      	ldr	r0, [pc, #176]	; (8007138 <_vfiprintf_r+0x250>)
 8007086:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800708a:	2206      	movs	r2, #6
 800708c:	f7f9 f8a8 	bl	80001e0 <memchr>
 8007090:	2800      	cmp	r0, #0
 8007092:	d03f      	beq.n	8007114 <_vfiprintf_r+0x22c>
 8007094:	4b29      	ldr	r3, [pc, #164]	; (800713c <_vfiprintf_r+0x254>)
 8007096:	bb1b      	cbnz	r3, 80070e0 <_vfiprintf_r+0x1f8>
 8007098:	9b03      	ldr	r3, [sp, #12]
 800709a:	3307      	adds	r3, #7
 800709c:	f023 0307 	bic.w	r3, r3, #7
 80070a0:	3308      	adds	r3, #8
 80070a2:	9303      	str	r3, [sp, #12]
 80070a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a6:	443b      	add	r3, r7
 80070a8:	9309      	str	r3, [sp, #36]	; 0x24
 80070aa:	e767      	b.n	8006f7c <_vfiprintf_r+0x94>
 80070ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80070b0:	460c      	mov	r4, r1
 80070b2:	2001      	movs	r0, #1
 80070b4:	e7a5      	b.n	8007002 <_vfiprintf_r+0x11a>
 80070b6:	2300      	movs	r3, #0
 80070b8:	3401      	adds	r4, #1
 80070ba:	9305      	str	r3, [sp, #20]
 80070bc:	4619      	mov	r1, r3
 80070be:	f04f 0c0a 	mov.w	ip, #10
 80070c2:	4620      	mov	r0, r4
 80070c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070c8:	3a30      	subs	r2, #48	; 0x30
 80070ca:	2a09      	cmp	r2, #9
 80070cc:	d903      	bls.n	80070d6 <_vfiprintf_r+0x1ee>
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d0c5      	beq.n	800705e <_vfiprintf_r+0x176>
 80070d2:	9105      	str	r1, [sp, #20]
 80070d4:	e7c3      	b.n	800705e <_vfiprintf_r+0x176>
 80070d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80070da:	4604      	mov	r4, r0
 80070dc:	2301      	movs	r3, #1
 80070de:	e7f0      	b.n	80070c2 <_vfiprintf_r+0x1da>
 80070e0:	ab03      	add	r3, sp, #12
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	462a      	mov	r2, r5
 80070e6:	4b16      	ldr	r3, [pc, #88]	; (8007140 <_vfiprintf_r+0x258>)
 80070e8:	a904      	add	r1, sp, #16
 80070ea:	4630      	mov	r0, r6
 80070ec:	f3af 8000 	nop.w
 80070f0:	4607      	mov	r7, r0
 80070f2:	1c78      	adds	r0, r7, #1
 80070f4:	d1d6      	bne.n	80070a4 <_vfiprintf_r+0x1bc>
 80070f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070f8:	07d9      	lsls	r1, r3, #31
 80070fa:	d405      	bmi.n	8007108 <_vfiprintf_r+0x220>
 80070fc:	89ab      	ldrh	r3, [r5, #12]
 80070fe:	059a      	lsls	r2, r3, #22
 8007100:	d402      	bmi.n	8007108 <_vfiprintf_r+0x220>
 8007102:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007104:	f000 faa1 	bl	800764a <__retarget_lock_release_recursive>
 8007108:	89ab      	ldrh	r3, [r5, #12]
 800710a:	065b      	lsls	r3, r3, #25
 800710c:	f53f af12 	bmi.w	8006f34 <_vfiprintf_r+0x4c>
 8007110:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007112:	e711      	b.n	8006f38 <_vfiprintf_r+0x50>
 8007114:	ab03      	add	r3, sp, #12
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	462a      	mov	r2, r5
 800711a:	4b09      	ldr	r3, [pc, #36]	; (8007140 <_vfiprintf_r+0x258>)
 800711c:	a904      	add	r1, sp, #16
 800711e:	4630      	mov	r0, r6
 8007120:	f7fe fe3c 	bl	8005d9c <_printf_i>
 8007124:	e7e4      	b.n	80070f0 <_vfiprintf_r+0x208>
 8007126:	bf00      	nop
 8007128:	08008584 	.word	0x08008584
 800712c:	080085a4 	.word	0x080085a4
 8007130:	08008564 	.word	0x08008564
 8007134:	08008484 	.word	0x08008484
 8007138:	0800848e 	.word	0x0800848e
 800713c:	00000000 	.word	0x00000000
 8007140:	08006ec3 	.word	0x08006ec3
 8007144:	0800848a 	.word	0x0800848a

08007148 <__swbuf_r>:
 8007148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714a:	460e      	mov	r6, r1
 800714c:	4614      	mov	r4, r2
 800714e:	4605      	mov	r5, r0
 8007150:	b118      	cbz	r0, 800715a <__swbuf_r+0x12>
 8007152:	6983      	ldr	r3, [r0, #24]
 8007154:	b90b      	cbnz	r3, 800715a <__swbuf_r+0x12>
 8007156:	f000 f9d9 	bl	800750c <__sinit>
 800715a:	4b21      	ldr	r3, [pc, #132]	; (80071e0 <__swbuf_r+0x98>)
 800715c:	429c      	cmp	r4, r3
 800715e:	d12b      	bne.n	80071b8 <__swbuf_r+0x70>
 8007160:	686c      	ldr	r4, [r5, #4]
 8007162:	69a3      	ldr	r3, [r4, #24]
 8007164:	60a3      	str	r3, [r4, #8]
 8007166:	89a3      	ldrh	r3, [r4, #12]
 8007168:	071a      	lsls	r2, r3, #28
 800716a:	d52f      	bpl.n	80071cc <__swbuf_r+0x84>
 800716c:	6923      	ldr	r3, [r4, #16]
 800716e:	b36b      	cbz	r3, 80071cc <__swbuf_r+0x84>
 8007170:	6923      	ldr	r3, [r4, #16]
 8007172:	6820      	ldr	r0, [r4, #0]
 8007174:	1ac0      	subs	r0, r0, r3
 8007176:	6963      	ldr	r3, [r4, #20]
 8007178:	b2f6      	uxtb	r6, r6
 800717a:	4283      	cmp	r3, r0
 800717c:	4637      	mov	r7, r6
 800717e:	dc04      	bgt.n	800718a <__swbuf_r+0x42>
 8007180:	4621      	mov	r1, r4
 8007182:	4628      	mov	r0, r5
 8007184:	f000 f92e 	bl	80073e4 <_fflush_r>
 8007188:	bb30      	cbnz	r0, 80071d8 <__swbuf_r+0x90>
 800718a:	68a3      	ldr	r3, [r4, #8]
 800718c:	3b01      	subs	r3, #1
 800718e:	60a3      	str	r3, [r4, #8]
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	1c5a      	adds	r2, r3, #1
 8007194:	6022      	str	r2, [r4, #0]
 8007196:	701e      	strb	r6, [r3, #0]
 8007198:	6963      	ldr	r3, [r4, #20]
 800719a:	3001      	adds	r0, #1
 800719c:	4283      	cmp	r3, r0
 800719e:	d004      	beq.n	80071aa <__swbuf_r+0x62>
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	07db      	lsls	r3, r3, #31
 80071a4:	d506      	bpl.n	80071b4 <__swbuf_r+0x6c>
 80071a6:	2e0a      	cmp	r6, #10
 80071a8:	d104      	bne.n	80071b4 <__swbuf_r+0x6c>
 80071aa:	4621      	mov	r1, r4
 80071ac:	4628      	mov	r0, r5
 80071ae:	f000 f919 	bl	80073e4 <_fflush_r>
 80071b2:	b988      	cbnz	r0, 80071d8 <__swbuf_r+0x90>
 80071b4:	4638      	mov	r0, r7
 80071b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071b8:	4b0a      	ldr	r3, [pc, #40]	; (80071e4 <__swbuf_r+0x9c>)
 80071ba:	429c      	cmp	r4, r3
 80071bc:	d101      	bne.n	80071c2 <__swbuf_r+0x7a>
 80071be:	68ac      	ldr	r4, [r5, #8]
 80071c0:	e7cf      	b.n	8007162 <__swbuf_r+0x1a>
 80071c2:	4b09      	ldr	r3, [pc, #36]	; (80071e8 <__swbuf_r+0xa0>)
 80071c4:	429c      	cmp	r4, r3
 80071c6:	bf08      	it	eq
 80071c8:	68ec      	ldreq	r4, [r5, #12]
 80071ca:	e7ca      	b.n	8007162 <__swbuf_r+0x1a>
 80071cc:	4621      	mov	r1, r4
 80071ce:	4628      	mov	r0, r5
 80071d0:	f000 f80c 	bl	80071ec <__swsetup_r>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d0cb      	beq.n	8007170 <__swbuf_r+0x28>
 80071d8:	f04f 37ff 	mov.w	r7, #4294967295
 80071dc:	e7ea      	b.n	80071b4 <__swbuf_r+0x6c>
 80071de:	bf00      	nop
 80071e0:	08008584 	.word	0x08008584
 80071e4:	080085a4 	.word	0x080085a4
 80071e8:	08008564 	.word	0x08008564

080071ec <__swsetup_r>:
 80071ec:	4b32      	ldr	r3, [pc, #200]	; (80072b8 <__swsetup_r+0xcc>)
 80071ee:	b570      	push	{r4, r5, r6, lr}
 80071f0:	681d      	ldr	r5, [r3, #0]
 80071f2:	4606      	mov	r6, r0
 80071f4:	460c      	mov	r4, r1
 80071f6:	b125      	cbz	r5, 8007202 <__swsetup_r+0x16>
 80071f8:	69ab      	ldr	r3, [r5, #24]
 80071fa:	b913      	cbnz	r3, 8007202 <__swsetup_r+0x16>
 80071fc:	4628      	mov	r0, r5
 80071fe:	f000 f985 	bl	800750c <__sinit>
 8007202:	4b2e      	ldr	r3, [pc, #184]	; (80072bc <__swsetup_r+0xd0>)
 8007204:	429c      	cmp	r4, r3
 8007206:	d10f      	bne.n	8007228 <__swsetup_r+0x3c>
 8007208:	686c      	ldr	r4, [r5, #4]
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007210:	0719      	lsls	r1, r3, #28
 8007212:	d42c      	bmi.n	800726e <__swsetup_r+0x82>
 8007214:	06dd      	lsls	r5, r3, #27
 8007216:	d411      	bmi.n	800723c <__swsetup_r+0x50>
 8007218:	2309      	movs	r3, #9
 800721a:	6033      	str	r3, [r6, #0]
 800721c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007220:	81a3      	strh	r3, [r4, #12]
 8007222:	f04f 30ff 	mov.w	r0, #4294967295
 8007226:	e03e      	b.n	80072a6 <__swsetup_r+0xba>
 8007228:	4b25      	ldr	r3, [pc, #148]	; (80072c0 <__swsetup_r+0xd4>)
 800722a:	429c      	cmp	r4, r3
 800722c:	d101      	bne.n	8007232 <__swsetup_r+0x46>
 800722e:	68ac      	ldr	r4, [r5, #8]
 8007230:	e7eb      	b.n	800720a <__swsetup_r+0x1e>
 8007232:	4b24      	ldr	r3, [pc, #144]	; (80072c4 <__swsetup_r+0xd8>)
 8007234:	429c      	cmp	r4, r3
 8007236:	bf08      	it	eq
 8007238:	68ec      	ldreq	r4, [r5, #12]
 800723a:	e7e6      	b.n	800720a <__swsetup_r+0x1e>
 800723c:	0758      	lsls	r0, r3, #29
 800723e:	d512      	bpl.n	8007266 <__swsetup_r+0x7a>
 8007240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007242:	b141      	cbz	r1, 8007256 <__swsetup_r+0x6a>
 8007244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007248:	4299      	cmp	r1, r3
 800724a:	d002      	beq.n	8007252 <__swsetup_r+0x66>
 800724c:	4630      	mov	r0, r6
 800724e:	f7ff fdc9 	bl	8006de4 <_free_r>
 8007252:	2300      	movs	r3, #0
 8007254:	6363      	str	r3, [r4, #52]	; 0x34
 8007256:	89a3      	ldrh	r3, [r4, #12]
 8007258:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800725c:	81a3      	strh	r3, [r4, #12]
 800725e:	2300      	movs	r3, #0
 8007260:	6063      	str	r3, [r4, #4]
 8007262:	6923      	ldr	r3, [r4, #16]
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	f043 0308 	orr.w	r3, r3, #8
 800726c:	81a3      	strh	r3, [r4, #12]
 800726e:	6923      	ldr	r3, [r4, #16]
 8007270:	b94b      	cbnz	r3, 8007286 <__swsetup_r+0x9a>
 8007272:	89a3      	ldrh	r3, [r4, #12]
 8007274:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800727c:	d003      	beq.n	8007286 <__swsetup_r+0x9a>
 800727e:	4621      	mov	r1, r4
 8007280:	4630      	mov	r0, r6
 8007282:	f000 fa07 	bl	8007694 <__smakebuf_r>
 8007286:	89a0      	ldrh	r0, [r4, #12]
 8007288:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800728c:	f010 0301 	ands.w	r3, r0, #1
 8007290:	d00a      	beq.n	80072a8 <__swsetup_r+0xbc>
 8007292:	2300      	movs	r3, #0
 8007294:	60a3      	str	r3, [r4, #8]
 8007296:	6963      	ldr	r3, [r4, #20]
 8007298:	425b      	negs	r3, r3
 800729a:	61a3      	str	r3, [r4, #24]
 800729c:	6923      	ldr	r3, [r4, #16]
 800729e:	b943      	cbnz	r3, 80072b2 <__swsetup_r+0xc6>
 80072a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80072a4:	d1ba      	bne.n	800721c <__swsetup_r+0x30>
 80072a6:	bd70      	pop	{r4, r5, r6, pc}
 80072a8:	0781      	lsls	r1, r0, #30
 80072aa:	bf58      	it	pl
 80072ac:	6963      	ldrpl	r3, [r4, #20]
 80072ae:	60a3      	str	r3, [r4, #8]
 80072b0:	e7f4      	b.n	800729c <__swsetup_r+0xb0>
 80072b2:	2000      	movs	r0, #0
 80072b4:	e7f7      	b.n	80072a6 <__swsetup_r+0xba>
 80072b6:	bf00      	nop
 80072b8:	20000010 	.word	0x20000010
 80072bc:	08008584 	.word	0x08008584
 80072c0:	080085a4 	.word	0x080085a4
 80072c4:	08008564 	.word	0x08008564

080072c8 <abort>:
 80072c8:	b508      	push	{r3, lr}
 80072ca:	2006      	movs	r0, #6
 80072cc:	f000 fa4a 	bl	8007764 <raise>
 80072d0:	2001      	movs	r0, #1
 80072d2:	f7fc fa36 	bl	8003742 <_exit>
	...

080072d8 <__sflush_r>:
 80072d8:	898a      	ldrh	r2, [r1, #12]
 80072da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072de:	4605      	mov	r5, r0
 80072e0:	0710      	lsls	r0, r2, #28
 80072e2:	460c      	mov	r4, r1
 80072e4:	d458      	bmi.n	8007398 <__sflush_r+0xc0>
 80072e6:	684b      	ldr	r3, [r1, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	dc05      	bgt.n	80072f8 <__sflush_r+0x20>
 80072ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	dc02      	bgt.n	80072f8 <__sflush_r+0x20>
 80072f2:	2000      	movs	r0, #0
 80072f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072fa:	2e00      	cmp	r6, #0
 80072fc:	d0f9      	beq.n	80072f2 <__sflush_r+0x1a>
 80072fe:	2300      	movs	r3, #0
 8007300:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007304:	682f      	ldr	r7, [r5, #0]
 8007306:	602b      	str	r3, [r5, #0]
 8007308:	d032      	beq.n	8007370 <__sflush_r+0x98>
 800730a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800730c:	89a3      	ldrh	r3, [r4, #12]
 800730e:	075a      	lsls	r2, r3, #29
 8007310:	d505      	bpl.n	800731e <__sflush_r+0x46>
 8007312:	6863      	ldr	r3, [r4, #4]
 8007314:	1ac0      	subs	r0, r0, r3
 8007316:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007318:	b10b      	cbz	r3, 800731e <__sflush_r+0x46>
 800731a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800731c:	1ac0      	subs	r0, r0, r3
 800731e:	2300      	movs	r3, #0
 8007320:	4602      	mov	r2, r0
 8007322:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007324:	6a21      	ldr	r1, [r4, #32]
 8007326:	4628      	mov	r0, r5
 8007328:	47b0      	blx	r6
 800732a:	1c43      	adds	r3, r0, #1
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	d106      	bne.n	800733e <__sflush_r+0x66>
 8007330:	6829      	ldr	r1, [r5, #0]
 8007332:	291d      	cmp	r1, #29
 8007334:	d82c      	bhi.n	8007390 <__sflush_r+0xb8>
 8007336:	4a2a      	ldr	r2, [pc, #168]	; (80073e0 <__sflush_r+0x108>)
 8007338:	40ca      	lsrs	r2, r1
 800733a:	07d6      	lsls	r6, r2, #31
 800733c:	d528      	bpl.n	8007390 <__sflush_r+0xb8>
 800733e:	2200      	movs	r2, #0
 8007340:	6062      	str	r2, [r4, #4]
 8007342:	04d9      	lsls	r1, r3, #19
 8007344:	6922      	ldr	r2, [r4, #16]
 8007346:	6022      	str	r2, [r4, #0]
 8007348:	d504      	bpl.n	8007354 <__sflush_r+0x7c>
 800734a:	1c42      	adds	r2, r0, #1
 800734c:	d101      	bne.n	8007352 <__sflush_r+0x7a>
 800734e:	682b      	ldr	r3, [r5, #0]
 8007350:	b903      	cbnz	r3, 8007354 <__sflush_r+0x7c>
 8007352:	6560      	str	r0, [r4, #84]	; 0x54
 8007354:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007356:	602f      	str	r7, [r5, #0]
 8007358:	2900      	cmp	r1, #0
 800735a:	d0ca      	beq.n	80072f2 <__sflush_r+0x1a>
 800735c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007360:	4299      	cmp	r1, r3
 8007362:	d002      	beq.n	800736a <__sflush_r+0x92>
 8007364:	4628      	mov	r0, r5
 8007366:	f7ff fd3d 	bl	8006de4 <_free_r>
 800736a:	2000      	movs	r0, #0
 800736c:	6360      	str	r0, [r4, #52]	; 0x34
 800736e:	e7c1      	b.n	80072f4 <__sflush_r+0x1c>
 8007370:	6a21      	ldr	r1, [r4, #32]
 8007372:	2301      	movs	r3, #1
 8007374:	4628      	mov	r0, r5
 8007376:	47b0      	blx	r6
 8007378:	1c41      	adds	r1, r0, #1
 800737a:	d1c7      	bne.n	800730c <__sflush_r+0x34>
 800737c:	682b      	ldr	r3, [r5, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d0c4      	beq.n	800730c <__sflush_r+0x34>
 8007382:	2b1d      	cmp	r3, #29
 8007384:	d001      	beq.n	800738a <__sflush_r+0xb2>
 8007386:	2b16      	cmp	r3, #22
 8007388:	d101      	bne.n	800738e <__sflush_r+0xb6>
 800738a:	602f      	str	r7, [r5, #0]
 800738c:	e7b1      	b.n	80072f2 <__sflush_r+0x1a>
 800738e:	89a3      	ldrh	r3, [r4, #12]
 8007390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007394:	81a3      	strh	r3, [r4, #12]
 8007396:	e7ad      	b.n	80072f4 <__sflush_r+0x1c>
 8007398:	690f      	ldr	r7, [r1, #16]
 800739a:	2f00      	cmp	r7, #0
 800739c:	d0a9      	beq.n	80072f2 <__sflush_r+0x1a>
 800739e:	0793      	lsls	r3, r2, #30
 80073a0:	680e      	ldr	r6, [r1, #0]
 80073a2:	bf08      	it	eq
 80073a4:	694b      	ldreq	r3, [r1, #20]
 80073a6:	600f      	str	r7, [r1, #0]
 80073a8:	bf18      	it	ne
 80073aa:	2300      	movne	r3, #0
 80073ac:	eba6 0807 	sub.w	r8, r6, r7
 80073b0:	608b      	str	r3, [r1, #8]
 80073b2:	f1b8 0f00 	cmp.w	r8, #0
 80073b6:	dd9c      	ble.n	80072f2 <__sflush_r+0x1a>
 80073b8:	6a21      	ldr	r1, [r4, #32]
 80073ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073bc:	4643      	mov	r3, r8
 80073be:	463a      	mov	r2, r7
 80073c0:	4628      	mov	r0, r5
 80073c2:	47b0      	blx	r6
 80073c4:	2800      	cmp	r0, #0
 80073c6:	dc06      	bgt.n	80073d6 <__sflush_r+0xfe>
 80073c8:	89a3      	ldrh	r3, [r4, #12]
 80073ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073ce:	81a3      	strh	r3, [r4, #12]
 80073d0:	f04f 30ff 	mov.w	r0, #4294967295
 80073d4:	e78e      	b.n	80072f4 <__sflush_r+0x1c>
 80073d6:	4407      	add	r7, r0
 80073d8:	eba8 0800 	sub.w	r8, r8, r0
 80073dc:	e7e9      	b.n	80073b2 <__sflush_r+0xda>
 80073de:	bf00      	nop
 80073e0:	20400001 	.word	0x20400001

080073e4 <_fflush_r>:
 80073e4:	b538      	push	{r3, r4, r5, lr}
 80073e6:	690b      	ldr	r3, [r1, #16]
 80073e8:	4605      	mov	r5, r0
 80073ea:	460c      	mov	r4, r1
 80073ec:	b913      	cbnz	r3, 80073f4 <_fflush_r+0x10>
 80073ee:	2500      	movs	r5, #0
 80073f0:	4628      	mov	r0, r5
 80073f2:	bd38      	pop	{r3, r4, r5, pc}
 80073f4:	b118      	cbz	r0, 80073fe <_fflush_r+0x1a>
 80073f6:	6983      	ldr	r3, [r0, #24]
 80073f8:	b90b      	cbnz	r3, 80073fe <_fflush_r+0x1a>
 80073fa:	f000 f887 	bl	800750c <__sinit>
 80073fe:	4b14      	ldr	r3, [pc, #80]	; (8007450 <_fflush_r+0x6c>)
 8007400:	429c      	cmp	r4, r3
 8007402:	d11b      	bne.n	800743c <_fflush_r+0x58>
 8007404:	686c      	ldr	r4, [r5, #4]
 8007406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d0ef      	beq.n	80073ee <_fflush_r+0xa>
 800740e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007410:	07d0      	lsls	r0, r2, #31
 8007412:	d404      	bmi.n	800741e <_fflush_r+0x3a>
 8007414:	0599      	lsls	r1, r3, #22
 8007416:	d402      	bmi.n	800741e <_fflush_r+0x3a>
 8007418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800741a:	f000 f915 	bl	8007648 <__retarget_lock_acquire_recursive>
 800741e:	4628      	mov	r0, r5
 8007420:	4621      	mov	r1, r4
 8007422:	f7ff ff59 	bl	80072d8 <__sflush_r>
 8007426:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007428:	07da      	lsls	r2, r3, #31
 800742a:	4605      	mov	r5, r0
 800742c:	d4e0      	bmi.n	80073f0 <_fflush_r+0xc>
 800742e:	89a3      	ldrh	r3, [r4, #12]
 8007430:	059b      	lsls	r3, r3, #22
 8007432:	d4dd      	bmi.n	80073f0 <_fflush_r+0xc>
 8007434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007436:	f000 f908 	bl	800764a <__retarget_lock_release_recursive>
 800743a:	e7d9      	b.n	80073f0 <_fflush_r+0xc>
 800743c:	4b05      	ldr	r3, [pc, #20]	; (8007454 <_fflush_r+0x70>)
 800743e:	429c      	cmp	r4, r3
 8007440:	d101      	bne.n	8007446 <_fflush_r+0x62>
 8007442:	68ac      	ldr	r4, [r5, #8]
 8007444:	e7df      	b.n	8007406 <_fflush_r+0x22>
 8007446:	4b04      	ldr	r3, [pc, #16]	; (8007458 <_fflush_r+0x74>)
 8007448:	429c      	cmp	r4, r3
 800744a:	bf08      	it	eq
 800744c:	68ec      	ldreq	r4, [r5, #12]
 800744e:	e7da      	b.n	8007406 <_fflush_r+0x22>
 8007450:	08008584 	.word	0x08008584
 8007454:	080085a4 	.word	0x080085a4
 8007458:	08008564 	.word	0x08008564

0800745c <std>:
 800745c:	2300      	movs	r3, #0
 800745e:	b510      	push	{r4, lr}
 8007460:	4604      	mov	r4, r0
 8007462:	e9c0 3300 	strd	r3, r3, [r0]
 8007466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800746a:	6083      	str	r3, [r0, #8]
 800746c:	8181      	strh	r1, [r0, #12]
 800746e:	6643      	str	r3, [r0, #100]	; 0x64
 8007470:	81c2      	strh	r2, [r0, #14]
 8007472:	6183      	str	r3, [r0, #24]
 8007474:	4619      	mov	r1, r3
 8007476:	2208      	movs	r2, #8
 8007478:	305c      	adds	r0, #92	; 0x5c
 800747a:	f7fd fd05 	bl	8004e88 <memset>
 800747e:	4b05      	ldr	r3, [pc, #20]	; (8007494 <std+0x38>)
 8007480:	6263      	str	r3, [r4, #36]	; 0x24
 8007482:	4b05      	ldr	r3, [pc, #20]	; (8007498 <std+0x3c>)
 8007484:	62a3      	str	r3, [r4, #40]	; 0x28
 8007486:	4b05      	ldr	r3, [pc, #20]	; (800749c <std+0x40>)
 8007488:	62e3      	str	r3, [r4, #44]	; 0x2c
 800748a:	4b05      	ldr	r3, [pc, #20]	; (80074a0 <std+0x44>)
 800748c:	6224      	str	r4, [r4, #32]
 800748e:	6323      	str	r3, [r4, #48]	; 0x30
 8007490:	bd10      	pop	{r4, pc}
 8007492:	bf00      	nop
 8007494:	0800779d 	.word	0x0800779d
 8007498:	080077bf 	.word	0x080077bf
 800749c:	080077f7 	.word	0x080077f7
 80074a0:	0800781b 	.word	0x0800781b

080074a4 <_cleanup_r>:
 80074a4:	4901      	ldr	r1, [pc, #4]	; (80074ac <_cleanup_r+0x8>)
 80074a6:	f000 b8af 	b.w	8007608 <_fwalk_reent>
 80074aa:	bf00      	nop
 80074ac:	080073e5 	.word	0x080073e5

080074b0 <__sfmoreglue>:
 80074b0:	b570      	push	{r4, r5, r6, lr}
 80074b2:	1e4a      	subs	r2, r1, #1
 80074b4:	2568      	movs	r5, #104	; 0x68
 80074b6:	4355      	muls	r5, r2
 80074b8:	460e      	mov	r6, r1
 80074ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074be:	f7fe fa23 	bl	8005908 <_malloc_r>
 80074c2:	4604      	mov	r4, r0
 80074c4:	b140      	cbz	r0, 80074d8 <__sfmoreglue+0x28>
 80074c6:	2100      	movs	r1, #0
 80074c8:	e9c0 1600 	strd	r1, r6, [r0]
 80074cc:	300c      	adds	r0, #12
 80074ce:	60a0      	str	r0, [r4, #8]
 80074d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80074d4:	f7fd fcd8 	bl	8004e88 <memset>
 80074d8:	4620      	mov	r0, r4
 80074da:	bd70      	pop	{r4, r5, r6, pc}

080074dc <__sfp_lock_acquire>:
 80074dc:	4801      	ldr	r0, [pc, #4]	; (80074e4 <__sfp_lock_acquire+0x8>)
 80074de:	f000 b8b3 	b.w	8007648 <__retarget_lock_acquire_recursive>
 80074e2:	bf00      	nop
 80074e4:	200000f0 	.word	0x200000f0

080074e8 <__sfp_lock_release>:
 80074e8:	4801      	ldr	r0, [pc, #4]	; (80074f0 <__sfp_lock_release+0x8>)
 80074ea:	f000 b8ae 	b.w	800764a <__retarget_lock_release_recursive>
 80074ee:	bf00      	nop
 80074f0:	200000f0 	.word	0x200000f0

080074f4 <__sinit_lock_acquire>:
 80074f4:	4801      	ldr	r0, [pc, #4]	; (80074fc <__sinit_lock_acquire+0x8>)
 80074f6:	f000 b8a7 	b.w	8007648 <__retarget_lock_acquire_recursive>
 80074fa:	bf00      	nop
 80074fc:	200000eb 	.word	0x200000eb

08007500 <__sinit_lock_release>:
 8007500:	4801      	ldr	r0, [pc, #4]	; (8007508 <__sinit_lock_release+0x8>)
 8007502:	f000 b8a2 	b.w	800764a <__retarget_lock_release_recursive>
 8007506:	bf00      	nop
 8007508:	200000eb 	.word	0x200000eb

0800750c <__sinit>:
 800750c:	b510      	push	{r4, lr}
 800750e:	4604      	mov	r4, r0
 8007510:	f7ff fff0 	bl	80074f4 <__sinit_lock_acquire>
 8007514:	69a3      	ldr	r3, [r4, #24]
 8007516:	b11b      	cbz	r3, 8007520 <__sinit+0x14>
 8007518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800751c:	f7ff bff0 	b.w	8007500 <__sinit_lock_release>
 8007520:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007524:	6523      	str	r3, [r4, #80]	; 0x50
 8007526:	4b13      	ldr	r3, [pc, #76]	; (8007574 <__sinit+0x68>)
 8007528:	4a13      	ldr	r2, [pc, #76]	; (8007578 <__sinit+0x6c>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	62a2      	str	r2, [r4, #40]	; 0x28
 800752e:	42a3      	cmp	r3, r4
 8007530:	bf04      	itt	eq
 8007532:	2301      	moveq	r3, #1
 8007534:	61a3      	streq	r3, [r4, #24]
 8007536:	4620      	mov	r0, r4
 8007538:	f000 f820 	bl	800757c <__sfp>
 800753c:	6060      	str	r0, [r4, #4]
 800753e:	4620      	mov	r0, r4
 8007540:	f000 f81c 	bl	800757c <__sfp>
 8007544:	60a0      	str	r0, [r4, #8]
 8007546:	4620      	mov	r0, r4
 8007548:	f000 f818 	bl	800757c <__sfp>
 800754c:	2200      	movs	r2, #0
 800754e:	60e0      	str	r0, [r4, #12]
 8007550:	2104      	movs	r1, #4
 8007552:	6860      	ldr	r0, [r4, #4]
 8007554:	f7ff ff82 	bl	800745c <std>
 8007558:	68a0      	ldr	r0, [r4, #8]
 800755a:	2201      	movs	r2, #1
 800755c:	2109      	movs	r1, #9
 800755e:	f7ff ff7d 	bl	800745c <std>
 8007562:	68e0      	ldr	r0, [r4, #12]
 8007564:	2202      	movs	r2, #2
 8007566:	2112      	movs	r1, #18
 8007568:	f7ff ff78 	bl	800745c <std>
 800756c:	2301      	movs	r3, #1
 800756e:	61a3      	str	r3, [r4, #24]
 8007570:	e7d2      	b.n	8007518 <__sinit+0xc>
 8007572:	bf00      	nop
 8007574:	080082f8 	.word	0x080082f8
 8007578:	080074a5 	.word	0x080074a5

0800757c <__sfp>:
 800757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757e:	4607      	mov	r7, r0
 8007580:	f7ff ffac 	bl	80074dc <__sfp_lock_acquire>
 8007584:	4b1e      	ldr	r3, [pc, #120]	; (8007600 <__sfp+0x84>)
 8007586:	681e      	ldr	r6, [r3, #0]
 8007588:	69b3      	ldr	r3, [r6, #24]
 800758a:	b913      	cbnz	r3, 8007592 <__sfp+0x16>
 800758c:	4630      	mov	r0, r6
 800758e:	f7ff ffbd 	bl	800750c <__sinit>
 8007592:	3648      	adds	r6, #72	; 0x48
 8007594:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007598:	3b01      	subs	r3, #1
 800759a:	d503      	bpl.n	80075a4 <__sfp+0x28>
 800759c:	6833      	ldr	r3, [r6, #0]
 800759e:	b30b      	cbz	r3, 80075e4 <__sfp+0x68>
 80075a0:	6836      	ldr	r6, [r6, #0]
 80075a2:	e7f7      	b.n	8007594 <__sfp+0x18>
 80075a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075a8:	b9d5      	cbnz	r5, 80075e0 <__sfp+0x64>
 80075aa:	4b16      	ldr	r3, [pc, #88]	; (8007604 <__sfp+0x88>)
 80075ac:	60e3      	str	r3, [r4, #12]
 80075ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075b2:	6665      	str	r5, [r4, #100]	; 0x64
 80075b4:	f000 f847 	bl	8007646 <__retarget_lock_init_recursive>
 80075b8:	f7ff ff96 	bl	80074e8 <__sfp_lock_release>
 80075bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80075c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80075c4:	6025      	str	r5, [r4, #0]
 80075c6:	61a5      	str	r5, [r4, #24]
 80075c8:	2208      	movs	r2, #8
 80075ca:	4629      	mov	r1, r5
 80075cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075d0:	f7fd fc5a 	bl	8004e88 <memset>
 80075d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80075d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80075dc:	4620      	mov	r0, r4
 80075de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075e0:	3468      	adds	r4, #104	; 0x68
 80075e2:	e7d9      	b.n	8007598 <__sfp+0x1c>
 80075e4:	2104      	movs	r1, #4
 80075e6:	4638      	mov	r0, r7
 80075e8:	f7ff ff62 	bl	80074b0 <__sfmoreglue>
 80075ec:	4604      	mov	r4, r0
 80075ee:	6030      	str	r0, [r6, #0]
 80075f0:	2800      	cmp	r0, #0
 80075f2:	d1d5      	bne.n	80075a0 <__sfp+0x24>
 80075f4:	f7ff ff78 	bl	80074e8 <__sfp_lock_release>
 80075f8:	230c      	movs	r3, #12
 80075fa:	603b      	str	r3, [r7, #0]
 80075fc:	e7ee      	b.n	80075dc <__sfp+0x60>
 80075fe:	bf00      	nop
 8007600:	080082f8 	.word	0x080082f8
 8007604:	ffff0001 	.word	0xffff0001

08007608 <_fwalk_reent>:
 8007608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800760c:	4606      	mov	r6, r0
 800760e:	4688      	mov	r8, r1
 8007610:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007614:	2700      	movs	r7, #0
 8007616:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800761a:	f1b9 0901 	subs.w	r9, r9, #1
 800761e:	d505      	bpl.n	800762c <_fwalk_reent+0x24>
 8007620:	6824      	ldr	r4, [r4, #0]
 8007622:	2c00      	cmp	r4, #0
 8007624:	d1f7      	bne.n	8007616 <_fwalk_reent+0xe>
 8007626:	4638      	mov	r0, r7
 8007628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800762c:	89ab      	ldrh	r3, [r5, #12]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d907      	bls.n	8007642 <_fwalk_reent+0x3a>
 8007632:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007636:	3301      	adds	r3, #1
 8007638:	d003      	beq.n	8007642 <_fwalk_reent+0x3a>
 800763a:	4629      	mov	r1, r5
 800763c:	4630      	mov	r0, r6
 800763e:	47c0      	blx	r8
 8007640:	4307      	orrs	r7, r0
 8007642:	3568      	adds	r5, #104	; 0x68
 8007644:	e7e9      	b.n	800761a <_fwalk_reent+0x12>

08007646 <__retarget_lock_init_recursive>:
 8007646:	4770      	bx	lr

08007648 <__retarget_lock_acquire_recursive>:
 8007648:	4770      	bx	lr

0800764a <__retarget_lock_release_recursive>:
 800764a:	4770      	bx	lr

0800764c <__swhatbuf_r>:
 800764c:	b570      	push	{r4, r5, r6, lr}
 800764e:	460e      	mov	r6, r1
 8007650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007654:	2900      	cmp	r1, #0
 8007656:	b096      	sub	sp, #88	; 0x58
 8007658:	4614      	mov	r4, r2
 800765a:	461d      	mov	r5, r3
 800765c:	da07      	bge.n	800766e <__swhatbuf_r+0x22>
 800765e:	2300      	movs	r3, #0
 8007660:	602b      	str	r3, [r5, #0]
 8007662:	89b3      	ldrh	r3, [r6, #12]
 8007664:	061a      	lsls	r2, r3, #24
 8007666:	d410      	bmi.n	800768a <__swhatbuf_r+0x3e>
 8007668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800766c:	e00e      	b.n	800768c <__swhatbuf_r+0x40>
 800766e:	466a      	mov	r2, sp
 8007670:	f000 f8fa 	bl	8007868 <_fstat_r>
 8007674:	2800      	cmp	r0, #0
 8007676:	dbf2      	blt.n	800765e <__swhatbuf_r+0x12>
 8007678:	9a01      	ldr	r2, [sp, #4]
 800767a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800767e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007682:	425a      	negs	r2, r3
 8007684:	415a      	adcs	r2, r3
 8007686:	602a      	str	r2, [r5, #0]
 8007688:	e7ee      	b.n	8007668 <__swhatbuf_r+0x1c>
 800768a:	2340      	movs	r3, #64	; 0x40
 800768c:	2000      	movs	r0, #0
 800768e:	6023      	str	r3, [r4, #0]
 8007690:	b016      	add	sp, #88	; 0x58
 8007692:	bd70      	pop	{r4, r5, r6, pc}

08007694 <__smakebuf_r>:
 8007694:	898b      	ldrh	r3, [r1, #12]
 8007696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007698:	079d      	lsls	r5, r3, #30
 800769a:	4606      	mov	r6, r0
 800769c:	460c      	mov	r4, r1
 800769e:	d507      	bpl.n	80076b0 <__smakebuf_r+0x1c>
 80076a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076a4:	6023      	str	r3, [r4, #0]
 80076a6:	6123      	str	r3, [r4, #16]
 80076a8:	2301      	movs	r3, #1
 80076aa:	6163      	str	r3, [r4, #20]
 80076ac:	b002      	add	sp, #8
 80076ae:	bd70      	pop	{r4, r5, r6, pc}
 80076b0:	ab01      	add	r3, sp, #4
 80076b2:	466a      	mov	r2, sp
 80076b4:	f7ff ffca 	bl	800764c <__swhatbuf_r>
 80076b8:	9900      	ldr	r1, [sp, #0]
 80076ba:	4605      	mov	r5, r0
 80076bc:	4630      	mov	r0, r6
 80076be:	f7fe f923 	bl	8005908 <_malloc_r>
 80076c2:	b948      	cbnz	r0, 80076d8 <__smakebuf_r+0x44>
 80076c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076c8:	059a      	lsls	r2, r3, #22
 80076ca:	d4ef      	bmi.n	80076ac <__smakebuf_r+0x18>
 80076cc:	f023 0303 	bic.w	r3, r3, #3
 80076d0:	f043 0302 	orr.w	r3, r3, #2
 80076d4:	81a3      	strh	r3, [r4, #12]
 80076d6:	e7e3      	b.n	80076a0 <__smakebuf_r+0xc>
 80076d8:	4b0d      	ldr	r3, [pc, #52]	; (8007710 <__smakebuf_r+0x7c>)
 80076da:	62b3      	str	r3, [r6, #40]	; 0x28
 80076dc:	89a3      	ldrh	r3, [r4, #12]
 80076de:	6020      	str	r0, [r4, #0]
 80076e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076e4:	81a3      	strh	r3, [r4, #12]
 80076e6:	9b00      	ldr	r3, [sp, #0]
 80076e8:	6163      	str	r3, [r4, #20]
 80076ea:	9b01      	ldr	r3, [sp, #4]
 80076ec:	6120      	str	r0, [r4, #16]
 80076ee:	b15b      	cbz	r3, 8007708 <__smakebuf_r+0x74>
 80076f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076f4:	4630      	mov	r0, r6
 80076f6:	f000 f8c9 	bl	800788c <_isatty_r>
 80076fa:	b128      	cbz	r0, 8007708 <__smakebuf_r+0x74>
 80076fc:	89a3      	ldrh	r3, [r4, #12]
 80076fe:	f023 0303 	bic.w	r3, r3, #3
 8007702:	f043 0301 	orr.w	r3, r3, #1
 8007706:	81a3      	strh	r3, [r4, #12]
 8007708:	89a0      	ldrh	r0, [r4, #12]
 800770a:	4305      	orrs	r5, r0
 800770c:	81a5      	strh	r5, [r4, #12]
 800770e:	e7cd      	b.n	80076ac <__smakebuf_r+0x18>
 8007710:	080074a5 	.word	0x080074a5

08007714 <_raise_r>:
 8007714:	291f      	cmp	r1, #31
 8007716:	b538      	push	{r3, r4, r5, lr}
 8007718:	4604      	mov	r4, r0
 800771a:	460d      	mov	r5, r1
 800771c:	d904      	bls.n	8007728 <_raise_r+0x14>
 800771e:	2316      	movs	r3, #22
 8007720:	6003      	str	r3, [r0, #0]
 8007722:	f04f 30ff 	mov.w	r0, #4294967295
 8007726:	bd38      	pop	{r3, r4, r5, pc}
 8007728:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800772a:	b112      	cbz	r2, 8007732 <_raise_r+0x1e>
 800772c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007730:	b94b      	cbnz	r3, 8007746 <_raise_r+0x32>
 8007732:	4620      	mov	r0, r4
 8007734:	f000 f830 	bl	8007798 <_getpid_r>
 8007738:	462a      	mov	r2, r5
 800773a:	4601      	mov	r1, r0
 800773c:	4620      	mov	r0, r4
 800773e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007742:	f000 b817 	b.w	8007774 <_kill_r>
 8007746:	2b01      	cmp	r3, #1
 8007748:	d00a      	beq.n	8007760 <_raise_r+0x4c>
 800774a:	1c59      	adds	r1, r3, #1
 800774c:	d103      	bne.n	8007756 <_raise_r+0x42>
 800774e:	2316      	movs	r3, #22
 8007750:	6003      	str	r3, [r0, #0]
 8007752:	2001      	movs	r0, #1
 8007754:	e7e7      	b.n	8007726 <_raise_r+0x12>
 8007756:	2400      	movs	r4, #0
 8007758:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800775c:	4628      	mov	r0, r5
 800775e:	4798      	blx	r3
 8007760:	2000      	movs	r0, #0
 8007762:	e7e0      	b.n	8007726 <_raise_r+0x12>

08007764 <raise>:
 8007764:	4b02      	ldr	r3, [pc, #8]	; (8007770 <raise+0xc>)
 8007766:	4601      	mov	r1, r0
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	f7ff bfd3 	b.w	8007714 <_raise_r>
 800776e:	bf00      	nop
 8007770:	20000010 	.word	0x20000010

08007774 <_kill_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4d07      	ldr	r5, [pc, #28]	; (8007794 <_kill_r+0x20>)
 8007778:	2300      	movs	r3, #0
 800777a:	4604      	mov	r4, r0
 800777c:	4608      	mov	r0, r1
 800777e:	4611      	mov	r1, r2
 8007780:	602b      	str	r3, [r5, #0]
 8007782:	f7fb ffce 	bl	8003722 <_kill>
 8007786:	1c43      	adds	r3, r0, #1
 8007788:	d102      	bne.n	8007790 <_kill_r+0x1c>
 800778a:	682b      	ldr	r3, [r5, #0]
 800778c:	b103      	cbz	r3, 8007790 <_kill_r+0x1c>
 800778e:	6023      	str	r3, [r4, #0]
 8007790:	bd38      	pop	{r3, r4, r5, pc}
 8007792:	bf00      	nop
 8007794:	200000e4 	.word	0x200000e4

08007798 <_getpid_r>:
 8007798:	f7fb bfbb 	b.w	8003712 <_getpid>

0800779c <__sread>:
 800779c:	b510      	push	{r4, lr}
 800779e:	460c      	mov	r4, r1
 80077a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a4:	f000 f894 	bl	80078d0 <_read_r>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	bfab      	itete	ge
 80077ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077ae:	89a3      	ldrhlt	r3, [r4, #12]
 80077b0:	181b      	addge	r3, r3, r0
 80077b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077b6:	bfac      	ite	ge
 80077b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80077ba:	81a3      	strhlt	r3, [r4, #12]
 80077bc:	bd10      	pop	{r4, pc}

080077be <__swrite>:
 80077be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c2:	461f      	mov	r7, r3
 80077c4:	898b      	ldrh	r3, [r1, #12]
 80077c6:	05db      	lsls	r3, r3, #23
 80077c8:	4605      	mov	r5, r0
 80077ca:	460c      	mov	r4, r1
 80077cc:	4616      	mov	r6, r2
 80077ce:	d505      	bpl.n	80077dc <__swrite+0x1e>
 80077d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077d4:	2302      	movs	r3, #2
 80077d6:	2200      	movs	r2, #0
 80077d8:	f000 f868 	bl	80078ac <_lseek_r>
 80077dc:	89a3      	ldrh	r3, [r4, #12]
 80077de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077e6:	81a3      	strh	r3, [r4, #12]
 80077e8:	4632      	mov	r2, r6
 80077ea:	463b      	mov	r3, r7
 80077ec:	4628      	mov	r0, r5
 80077ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077f2:	f000 b817 	b.w	8007824 <_write_r>

080077f6 <__sseek>:
 80077f6:	b510      	push	{r4, lr}
 80077f8:	460c      	mov	r4, r1
 80077fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077fe:	f000 f855 	bl	80078ac <_lseek_r>
 8007802:	1c43      	adds	r3, r0, #1
 8007804:	89a3      	ldrh	r3, [r4, #12]
 8007806:	bf15      	itete	ne
 8007808:	6560      	strne	r0, [r4, #84]	; 0x54
 800780a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800780e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007812:	81a3      	strheq	r3, [r4, #12]
 8007814:	bf18      	it	ne
 8007816:	81a3      	strhne	r3, [r4, #12]
 8007818:	bd10      	pop	{r4, pc}

0800781a <__sclose>:
 800781a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800781e:	f000 b813 	b.w	8007848 <_close_r>
	...

08007824 <_write_r>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	4d07      	ldr	r5, [pc, #28]	; (8007844 <_write_r+0x20>)
 8007828:	4604      	mov	r4, r0
 800782a:	4608      	mov	r0, r1
 800782c:	4611      	mov	r1, r2
 800782e:	2200      	movs	r2, #0
 8007830:	602a      	str	r2, [r5, #0]
 8007832:	461a      	mov	r2, r3
 8007834:	f7fb ffac 	bl	8003790 <_write>
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d102      	bne.n	8007842 <_write_r+0x1e>
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	b103      	cbz	r3, 8007842 <_write_r+0x1e>
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	200000e4 	.word	0x200000e4

08007848 <_close_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	4d06      	ldr	r5, [pc, #24]	; (8007864 <_close_r+0x1c>)
 800784c:	2300      	movs	r3, #0
 800784e:	4604      	mov	r4, r0
 8007850:	4608      	mov	r0, r1
 8007852:	602b      	str	r3, [r5, #0]
 8007854:	f7fb ffb8 	bl	80037c8 <_close>
 8007858:	1c43      	adds	r3, r0, #1
 800785a:	d102      	bne.n	8007862 <_close_r+0x1a>
 800785c:	682b      	ldr	r3, [r5, #0]
 800785e:	b103      	cbz	r3, 8007862 <_close_r+0x1a>
 8007860:	6023      	str	r3, [r4, #0]
 8007862:	bd38      	pop	{r3, r4, r5, pc}
 8007864:	200000e4 	.word	0x200000e4

08007868 <_fstat_r>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	4d07      	ldr	r5, [pc, #28]	; (8007888 <_fstat_r+0x20>)
 800786c:	2300      	movs	r3, #0
 800786e:	4604      	mov	r4, r0
 8007870:	4608      	mov	r0, r1
 8007872:	4611      	mov	r1, r2
 8007874:	602b      	str	r3, [r5, #0]
 8007876:	f7fb ffb3 	bl	80037e0 <_fstat>
 800787a:	1c43      	adds	r3, r0, #1
 800787c:	d102      	bne.n	8007884 <_fstat_r+0x1c>
 800787e:	682b      	ldr	r3, [r5, #0]
 8007880:	b103      	cbz	r3, 8007884 <_fstat_r+0x1c>
 8007882:	6023      	str	r3, [r4, #0]
 8007884:	bd38      	pop	{r3, r4, r5, pc}
 8007886:	bf00      	nop
 8007888:	200000e4 	.word	0x200000e4

0800788c <_isatty_r>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	4d06      	ldr	r5, [pc, #24]	; (80078a8 <_isatty_r+0x1c>)
 8007890:	2300      	movs	r3, #0
 8007892:	4604      	mov	r4, r0
 8007894:	4608      	mov	r0, r1
 8007896:	602b      	str	r3, [r5, #0]
 8007898:	f7fb ffb2 	bl	8003800 <_isatty>
 800789c:	1c43      	adds	r3, r0, #1
 800789e:	d102      	bne.n	80078a6 <_isatty_r+0x1a>
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	b103      	cbz	r3, 80078a6 <_isatty_r+0x1a>
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	bd38      	pop	{r3, r4, r5, pc}
 80078a8:	200000e4 	.word	0x200000e4

080078ac <_lseek_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4d07      	ldr	r5, [pc, #28]	; (80078cc <_lseek_r+0x20>)
 80078b0:	4604      	mov	r4, r0
 80078b2:	4608      	mov	r0, r1
 80078b4:	4611      	mov	r1, r2
 80078b6:	2200      	movs	r2, #0
 80078b8:	602a      	str	r2, [r5, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	f7fb ffab 	bl	8003816 <_lseek>
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	d102      	bne.n	80078ca <_lseek_r+0x1e>
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	b103      	cbz	r3, 80078ca <_lseek_r+0x1e>
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	bd38      	pop	{r3, r4, r5, pc}
 80078cc:	200000e4 	.word	0x200000e4

080078d0 <_read_r>:
 80078d0:	b538      	push	{r3, r4, r5, lr}
 80078d2:	4d07      	ldr	r5, [pc, #28]	; (80078f0 <_read_r+0x20>)
 80078d4:	4604      	mov	r4, r0
 80078d6:	4608      	mov	r0, r1
 80078d8:	4611      	mov	r1, r2
 80078da:	2200      	movs	r2, #0
 80078dc:	602a      	str	r2, [r5, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	f7fb ff39 	bl	8003756 <_read>
 80078e4:	1c43      	adds	r3, r0, #1
 80078e6:	d102      	bne.n	80078ee <_read_r+0x1e>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	b103      	cbz	r3, 80078ee <_read_r+0x1e>
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	bd38      	pop	{r3, r4, r5, pc}
 80078f0:	200000e4 	.word	0x200000e4
 80078f4:	00000000 	.word	0x00000000

080078f8 <floor>:
 80078f8:	ec51 0b10 	vmov	r0, r1, d0
 80078fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007900:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007904:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007908:	2e13      	cmp	r6, #19
 800790a:	ee10 5a10 	vmov	r5, s0
 800790e:	ee10 8a10 	vmov	r8, s0
 8007912:	460c      	mov	r4, r1
 8007914:	dc32      	bgt.n	800797c <floor+0x84>
 8007916:	2e00      	cmp	r6, #0
 8007918:	da14      	bge.n	8007944 <floor+0x4c>
 800791a:	a333      	add	r3, pc, #204	; (adr r3, 80079e8 <floor+0xf0>)
 800791c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007920:	f7f8 fcb4 	bl	800028c <__adddf3>
 8007924:	2200      	movs	r2, #0
 8007926:	2300      	movs	r3, #0
 8007928:	f7f9 f8f6 	bl	8000b18 <__aeabi_dcmpgt>
 800792c:	b138      	cbz	r0, 800793e <floor+0x46>
 800792e:	2c00      	cmp	r4, #0
 8007930:	da57      	bge.n	80079e2 <floor+0xea>
 8007932:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007936:	431d      	orrs	r5, r3
 8007938:	d001      	beq.n	800793e <floor+0x46>
 800793a:	4c2d      	ldr	r4, [pc, #180]	; (80079f0 <floor+0xf8>)
 800793c:	2500      	movs	r5, #0
 800793e:	4621      	mov	r1, r4
 8007940:	4628      	mov	r0, r5
 8007942:	e025      	b.n	8007990 <floor+0x98>
 8007944:	4f2b      	ldr	r7, [pc, #172]	; (80079f4 <floor+0xfc>)
 8007946:	4137      	asrs	r7, r6
 8007948:	ea01 0307 	and.w	r3, r1, r7
 800794c:	4303      	orrs	r3, r0
 800794e:	d01f      	beq.n	8007990 <floor+0x98>
 8007950:	a325      	add	r3, pc, #148	; (adr r3, 80079e8 <floor+0xf0>)
 8007952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007956:	f7f8 fc99 	bl	800028c <__adddf3>
 800795a:	2200      	movs	r2, #0
 800795c:	2300      	movs	r3, #0
 800795e:	f7f9 f8db 	bl	8000b18 <__aeabi_dcmpgt>
 8007962:	2800      	cmp	r0, #0
 8007964:	d0eb      	beq.n	800793e <floor+0x46>
 8007966:	2c00      	cmp	r4, #0
 8007968:	bfbe      	ittt	lt
 800796a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800796e:	fa43 f606 	asrlt.w	r6, r3, r6
 8007972:	19a4      	addlt	r4, r4, r6
 8007974:	ea24 0407 	bic.w	r4, r4, r7
 8007978:	2500      	movs	r5, #0
 800797a:	e7e0      	b.n	800793e <floor+0x46>
 800797c:	2e33      	cmp	r6, #51	; 0x33
 800797e:	dd0b      	ble.n	8007998 <floor+0xa0>
 8007980:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007984:	d104      	bne.n	8007990 <floor+0x98>
 8007986:	ee10 2a10 	vmov	r2, s0
 800798a:	460b      	mov	r3, r1
 800798c:	f7f8 fc7e 	bl	800028c <__adddf3>
 8007990:	ec41 0b10 	vmov	d0, r0, r1
 8007994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007998:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800799c:	f04f 33ff 	mov.w	r3, #4294967295
 80079a0:	fa23 f707 	lsr.w	r7, r3, r7
 80079a4:	4207      	tst	r7, r0
 80079a6:	d0f3      	beq.n	8007990 <floor+0x98>
 80079a8:	a30f      	add	r3, pc, #60	; (adr r3, 80079e8 <floor+0xf0>)
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	f7f8 fc6d 	bl	800028c <__adddf3>
 80079b2:	2200      	movs	r2, #0
 80079b4:	2300      	movs	r3, #0
 80079b6:	f7f9 f8af 	bl	8000b18 <__aeabi_dcmpgt>
 80079ba:	2800      	cmp	r0, #0
 80079bc:	d0bf      	beq.n	800793e <floor+0x46>
 80079be:	2c00      	cmp	r4, #0
 80079c0:	da02      	bge.n	80079c8 <floor+0xd0>
 80079c2:	2e14      	cmp	r6, #20
 80079c4:	d103      	bne.n	80079ce <floor+0xd6>
 80079c6:	3401      	adds	r4, #1
 80079c8:	ea25 0507 	bic.w	r5, r5, r7
 80079cc:	e7b7      	b.n	800793e <floor+0x46>
 80079ce:	2301      	movs	r3, #1
 80079d0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80079d4:	fa03 f606 	lsl.w	r6, r3, r6
 80079d8:	4435      	add	r5, r6
 80079da:	4545      	cmp	r5, r8
 80079dc:	bf38      	it	cc
 80079de:	18e4      	addcc	r4, r4, r3
 80079e0:	e7f2      	b.n	80079c8 <floor+0xd0>
 80079e2:	2500      	movs	r5, #0
 80079e4:	462c      	mov	r4, r5
 80079e6:	e7aa      	b.n	800793e <floor+0x46>
 80079e8:	8800759c 	.word	0x8800759c
 80079ec:	7e37e43c 	.word	0x7e37e43c
 80079f0:	bff00000 	.word	0xbff00000
 80079f4:	000fffff 	.word	0x000fffff

080079f8 <powf>:
 80079f8:	b508      	push	{r3, lr}
 80079fa:	ed2d 8b04 	vpush	{d8-d9}
 80079fe:	eeb0 9a40 	vmov.f32	s18, s0
 8007a02:	eef0 8a60 	vmov.f32	s17, s1
 8007a06:	f000 f88f 	bl	8007b28 <__ieee754_powf>
 8007a0a:	4b43      	ldr	r3, [pc, #268]	; (8007b18 <powf+0x120>)
 8007a0c:	f993 3000 	ldrsb.w	r3, [r3]
 8007a10:	3301      	adds	r3, #1
 8007a12:	eeb0 8a40 	vmov.f32	s16, s0
 8007a16:	d012      	beq.n	8007a3e <powf+0x46>
 8007a18:	eef4 8a68 	vcmp.f32	s17, s17
 8007a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a20:	d60d      	bvs.n	8007a3e <powf+0x46>
 8007a22:	eeb4 9a49 	vcmp.f32	s18, s18
 8007a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a2a:	d70d      	bvc.n	8007a48 <powf+0x50>
 8007a2c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007a38:	bf08      	it	eq
 8007a3a:	eeb0 8a67 	vmoveq.f32	s16, s15
 8007a3e:	eeb0 0a48 	vmov.f32	s0, s16
 8007a42:	ecbd 8b04 	vpop	{d8-d9}
 8007a46:	bd08      	pop	{r3, pc}
 8007a48:	eddf 9a34 	vldr	s19, [pc, #208]	; 8007b1c <powf+0x124>
 8007a4c:	eeb4 9a69 	vcmp.f32	s18, s19
 8007a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a54:	d116      	bne.n	8007a84 <powf+0x8c>
 8007a56:	eef4 8a69 	vcmp.f32	s17, s19
 8007a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a5e:	d057      	beq.n	8007b10 <powf+0x118>
 8007a60:	eeb0 0a68 	vmov.f32	s0, s17
 8007a64:	f000 fb2a 	bl	80080bc <finitef>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d0e8      	beq.n	8007a3e <powf+0x46>
 8007a6c:	eef4 8ae9 	vcmpe.f32	s17, s19
 8007a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a74:	d5e3      	bpl.n	8007a3e <powf+0x46>
 8007a76:	f7fd f9dd 	bl	8004e34 <__errno>
 8007a7a:	2321      	movs	r3, #33	; 0x21
 8007a7c:	6003      	str	r3, [r0, #0]
 8007a7e:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8007b20 <powf+0x128>
 8007a82:	e7dc      	b.n	8007a3e <powf+0x46>
 8007a84:	f000 fb1a 	bl	80080bc <finitef>
 8007a88:	bb50      	cbnz	r0, 8007ae0 <powf+0xe8>
 8007a8a:	eeb0 0a49 	vmov.f32	s0, s18
 8007a8e:	f000 fb15 	bl	80080bc <finitef>
 8007a92:	b328      	cbz	r0, 8007ae0 <powf+0xe8>
 8007a94:	eeb0 0a68 	vmov.f32	s0, s17
 8007a98:	f000 fb10 	bl	80080bc <finitef>
 8007a9c:	b300      	cbz	r0, 8007ae0 <powf+0xe8>
 8007a9e:	eeb4 8a48 	vcmp.f32	s16, s16
 8007aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa6:	d706      	bvc.n	8007ab6 <powf+0xbe>
 8007aa8:	f7fd f9c4 	bl	8004e34 <__errno>
 8007aac:	2321      	movs	r3, #33	; 0x21
 8007aae:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8007ab2:	6003      	str	r3, [r0, #0]
 8007ab4:	e7c3      	b.n	8007a3e <powf+0x46>
 8007ab6:	f7fd f9bd 	bl	8004e34 <__errno>
 8007aba:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8007abe:	2322      	movs	r3, #34	; 0x22
 8007ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac4:	6003      	str	r3, [r0, #0]
 8007ac6:	d508      	bpl.n	8007ada <powf+0xe2>
 8007ac8:	eeb0 0a68 	vmov.f32	s0, s17
 8007acc:	f000 fb0a 	bl	80080e4 <rintf>
 8007ad0:	eeb4 0a68 	vcmp.f32	s0, s17
 8007ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad8:	d1d1      	bne.n	8007a7e <powf+0x86>
 8007ada:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8007b24 <powf+0x12c>
 8007ade:	e7ae      	b.n	8007a3e <powf+0x46>
 8007ae0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae8:	d1a9      	bne.n	8007a3e <powf+0x46>
 8007aea:	eeb0 0a49 	vmov.f32	s0, s18
 8007aee:	f000 fae5 	bl	80080bc <finitef>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d0a3      	beq.n	8007a3e <powf+0x46>
 8007af6:	eeb0 0a68 	vmov.f32	s0, s17
 8007afa:	f000 fadf 	bl	80080bc <finitef>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	d09d      	beq.n	8007a3e <powf+0x46>
 8007b02:	f7fd f997 	bl	8004e34 <__errno>
 8007b06:	2322      	movs	r3, #34	; 0x22
 8007b08:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8007b1c <powf+0x124>
 8007b0c:	6003      	str	r3, [r0, #0]
 8007b0e:	e796      	b.n	8007a3e <powf+0x46>
 8007b10:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007b14:	e793      	b.n	8007a3e <powf+0x46>
 8007b16:	bf00      	nop
 8007b18:	20000074 	.word	0x20000074
 8007b1c:	00000000 	.word	0x00000000
 8007b20:	ff800000 	.word	0xff800000
 8007b24:	7f800000 	.word	0x7f800000

08007b28 <__ieee754_powf>:
 8007b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b2c:	ee10 5a90 	vmov	r5, s1
 8007b30:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8007b34:	ed2d 8b02 	vpush	{d8}
 8007b38:	eeb0 8a40 	vmov.f32	s16, s0
 8007b3c:	eef0 8a60 	vmov.f32	s17, s1
 8007b40:	f000 8291 	beq.w	8008066 <__ieee754_powf+0x53e>
 8007b44:	ee10 8a10 	vmov	r8, s0
 8007b48:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8007b4c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007b50:	dc06      	bgt.n	8007b60 <__ieee754_powf+0x38>
 8007b52:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007b56:	dd0a      	ble.n	8007b6e <__ieee754_powf+0x46>
 8007b58:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007b5c:	f000 8283 	beq.w	8008066 <__ieee754_powf+0x53e>
 8007b60:	ecbd 8b02 	vpop	{d8}
 8007b64:	48d8      	ldr	r0, [pc, #864]	; (8007ec8 <__ieee754_powf+0x3a0>)
 8007b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6a:	f000 bab5 	b.w	80080d8 <nanf>
 8007b6e:	f1b8 0f00 	cmp.w	r8, #0
 8007b72:	da1f      	bge.n	8007bb4 <__ieee754_powf+0x8c>
 8007b74:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8007b78:	da2e      	bge.n	8007bd8 <__ieee754_powf+0xb0>
 8007b7a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007b7e:	f2c0 827b 	blt.w	8008078 <__ieee754_powf+0x550>
 8007b82:	15fb      	asrs	r3, r7, #23
 8007b84:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007b88:	fa47 f603 	asr.w	r6, r7, r3
 8007b8c:	fa06 f303 	lsl.w	r3, r6, r3
 8007b90:	42bb      	cmp	r3, r7
 8007b92:	f040 8271 	bne.w	8008078 <__ieee754_powf+0x550>
 8007b96:	f006 0601 	and.w	r6, r6, #1
 8007b9a:	f1c6 0602 	rsb	r6, r6, #2
 8007b9e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007ba2:	d120      	bne.n	8007be6 <__ieee754_powf+0xbe>
 8007ba4:	2d00      	cmp	r5, #0
 8007ba6:	f280 8264 	bge.w	8008072 <__ieee754_powf+0x54a>
 8007baa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007bae:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007bb2:	e00d      	b.n	8007bd0 <__ieee754_powf+0xa8>
 8007bb4:	2600      	movs	r6, #0
 8007bb6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007bba:	d1f0      	bne.n	8007b9e <__ieee754_powf+0x76>
 8007bbc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007bc0:	f000 8251 	beq.w	8008066 <__ieee754_powf+0x53e>
 8007bc4:	dd0a      	ble.n	8007bdc <__ieee754_powf+0xb4>
 8007bc6:	2d00      	cmp	r5, #0
 8007bc8:	f280 8250 	bge.w	800806c <__ieee754_powf+0x544>
 8007bcc:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8007ecc <__ieee754_powf+0x3a4>
 8007bd0:	ecbd 8b02 	vpop	{d8}
 8007bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd8:	2602      	movs	r6, #2
 8007bda:	e7ec      	b.n	8007bb6 <__ieee754_powf+0x8e>
 8007bdc:	2d00      	cmp	r5, #0
 8007bde:	daf5      	bge.n	8007bcc <__ieee754_powf+0xa4>
 8007be0:	eeb1 0a68 	vneg.f32	s0, s17
 8007be4:	e7f4      	b.n	8007bd0 <__ieee754_powf+0xa8>
 8007be6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8007bea:	d102      	bne.n	8007bf2 <__ieee754_powf+0xca>
 8007bec:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007bf0:	e7ee      	b.n	8007bd0 <__ieee754_powf+0xa8>
 8007bf2:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8007bf6:	eeb0 0a48 	vmov.f32	s0, s16
 8007bfa:	d108      	bne.n	8007c0e <__ieee754_powf+0xe6>
 8007bfc:	f1b8 0f00 	cmp.w	r8, #0
 8007c00:	db05      	blt.n	8007c0e <__ieee754_powf+0xe6>
 8007c02:	ecbd 8b02 	vpop	{d8}
 8007c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0a:	f000 ba4d 	b.w	80080a8 <__ieee754_sqrtf>
 8007c0e:	f000 fa4e 	bl	80080ae <fabsf>
 8007c12:	b124      	cbz	r4, 8007c1e <__ieee754_powf+0xf6>
 8007c14:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8007c18:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007c1c:	d117      	bne.n	8007c4e <__ieee754_powf+0x126>
 8007c1e:	2d00      	cmp	r5, #0
 8007c20:	bfbc      	itt	lt
 8007c22:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8007c26:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007c2a:	f1b8 0f00 	cmp.w	r8, #0
 8007c2e:	dacf      	bge.n	8007bd0 <__ieee754_powf+0xa8>
 8007c30:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8007c34:	ea54 0306 	orrs.w	r3, r4, r6
 8007c38:	d104      	bne.n	8007c44 <__ieee754_powf+0x11c>
 8007c3a:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007c3e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007c42:	e7c5      	b.n	8007bd0 <__ieee754_powf+0xa8>
 8007c44:	2e01      	cmp	r6, #1
 8007c46:	d1c3      	bne.n	8007bd0 <__ieee754_powf+0xa8>
 8007c48:	eeb1 0a40 	vneg.f32	s0, s0
 8007c4c:	e7c0      	b.n	8007bd0 <__ieee754_powf+0xa8>
 8007c4e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8007c52:	3801      	subs	r0, #1
 8007c54:	ea56 0300 	orrs.w	r3, r6, r0
 8007c58:	d104      	bne.n	8007c64 <__ieee754_powf+0x13c>
 8007c5a:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007c5e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007c62:	e7b5      	b.n	8007bd0 <__ieee754_powf+0xa8>
 8007c64:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8007c68:	dd6b      	ble.n	8007d42 <__ieee754_powf+0x21a>
 8007c6a:	4b99      	ldr	r3, [pc, #612]	; (8007ed0 <__ieee754_powf+0x3a8>)
 8007c6c:	429c      	cmp	r4, r3
 8007c6e:	dc06      	bgt.n	8007c7e <__ieee754_powf+0x156>
 8007c70:	2d00      	cmp	r5, #0
 8007c72:	daab      	bge.n	8007bcc <__ieee754_powf+0xa4>
 8007c74:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8007ed4 <__ieee754_powf+0x3ac>
 8007c78:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007c7c:	e7a8      	b.n	8007bd0 <__ieee754_powf+0xa8>
 8007c7e:	4b96      	ldr	r3, [pc, #600]	; (8007ed8 <__ieee754_powf+0x3b0>)
 8007c80:	429c      	cmp	r4, r3
 8007c82:	dd02      	ble.n	8007c8a <__ieee754_powf+0x162>
 8007c84:	2d00      	cmp	r5, #0
 8007c86:	dcf5      	bgt.n	8007c74 <__ieee754_powf+0x14c>
 8007c88:	e7a0      	b.n	8007bcc <__ieee754_powf+0xa4>
 8007c8a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007c8e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007c92:	eddf 6a92 	vldr	s13, [pc, #584]	; 8007edc <__ieee754_powf+0x3b4>
 8007c96:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8007c9a:	eee0 6a67 	vfms.f32	s13, s0, s15
 8007c9e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007ca2:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8007ca6:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cae:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8007ee0 <__ieee754_powf+0x3b8>
 8007cb2:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8007cb6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8007ee4 <__ieee754_powf+0x3bc>
 8007cba:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007cbe:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8007ee8 <__ieee754_powf+0x3c0>
 8007cc2:	eef0 6a67 	vmov.f32	s13, s15
 8007cc6:	eee0 6a07 	vfma.f32	s13, s0, s14
 8007cca:	ee16 3a90 	vmov	r3, s13
 8007cce:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007cd2:	f023 030f 	bic.w	r3, r3, #15
 8007cd6:	ee00 3a90 	vmov	s1, r3
 8007cda:	eee0 0a47 	vfms.f32	s1, s0, s14
 8007cde:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007ce2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8007ce6:	f025 050f 	bic.w	r5, r5, #15
 8007cea:	ee07 5a10 	vmov	s14, r5
 8007cee:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8007cf2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8007cf6:	ee07 3a90 	vmov	s15, r3
 8007cfa:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007cfe:	3e01      	subs	r6, #1
 8007d00:	ea56 0200 	orrs.w	r2, r6, r0
 8007d04:	ee07 5a10 	vmov	s14, r5
 8007d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d0c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007d10:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007d14:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007d18:	ee17 4a10 	vmov	r4, s14
 8007d1c:	bf08      	it	eq
 8007d1e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8007d22:	2c00      	cmp	r4, #0
 8007d24:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007d28:	f340 8184 	ble.w	8008034 <__ieee754_powf+0x50c>
 8007d2c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007d30:	f340 80fc 	ble.w	8007f2c <__ieee754_powf+0x404>
 8007d34:	eddf 7a67 	vldr	s15, [pc, #412]	; 8007ed4 <__ieee754_powf+0x3ac>
 8007d38:	ee28 0a27 	vmul.f32	s0, s16, s15
 8007d3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007d40:	e746      	b.n	8007bd0 <__ieee754_powf+0xa8>
 8007d42:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8007d46:	bf01      	itttt	eq
 8007d48:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8007eec <__ieee754_powf+0x3c4>
 8007d4c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8007d50:	f06f 0217 	mvneq.w	r2, #23
 8007d54:	ee17 4a90 	vmoveq	r4, s15
 8007d58:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8007d5c:	bf18      	it	ne
 8007d5e:	2200      	movne	r2, #0
 8007d60:	3b7f      	subs	r3, #127	; 0x7f
 8007d62:	4413      	add	r3, r2
 8007d64:	4a62      	ldr	r2, [pc, #392]	; (8007ef0 <__ieee754_powf+0x3c8>)
 8007d66:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8007d6a:	4294      	cmp	r4, r2
 8007d6c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8007d70:	dd06      	ble.n	8007d80 <__ieee754_powf+0x258>
 8007d72:	4a60      	ldr	r2, [pc, #384]	; (8007ef4 <__ieee754_powf+0x3cc>)
 8007d74:	4294      	cmp	r4, r2
 8007d76:	f340 80a4 	ble.w	8007ec2 <__ieee754_powf+0x39a>
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8007d80:	2400      	movs	r4, #0
 8007d82:	4a5d      	ldr	r2, [pc, #372]	; (8007ef8 <__ieee754_powf+0x3d0>)
 8007d84:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007d88:	ee07 1a90 	vmov	s15, r1
 8007d8c:	ed92 7a00 	vldr	s14, [r2]
 8007d90:	4a5a      	ldr	r2, [pc, #360]	; (8007efc <__ieee754_powf+0x3d4>)
 8007d92:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007d96:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007d9a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8007d9e:	1049      	asrs	r1, r1, #1
 8007da0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007da4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007da8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8007dac:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8007db0:	ee06 1a10 	vmov	s12, r1
 8007db4:	ee65 4a26 	vmul.f32	s9, s10, s13
 8007db8:	ee36 7a47 	vsub.f32	s14, s12, s14
 8007dbc:	ee14 7a90 	vmov	r7, s9
 8007dc0:	4017      	ands	r7, r2
 8007dc2:	ee05 7a90 	vmov	s11, r7
 8007dc6:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8007dca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007dce:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007f00 <__ieee754_powf+0x3d8>
 8007dd2:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8007dd6:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8007dda:	ee25 6a26 	vmul.f32	s12, s10, s13
 8007dde:	eddf 6a49 	vldr	s13, [pc, #292]	; 8007f04 <__ieee754_powf+0x3dc>
 8007de2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007de6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007f08 <__ieee754_powf+0x3e0>
 8007dea:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007dee:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007edc <__ieee754_powf+0x3b4>
 8007df2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007df6:	eddf 6a45 	vldr	s13, [pc, #276]	; 8007f0c <__ieee754_powf+0x3e4>
 8007dfa:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007dfe:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007f10 <__ieee754_powf+0x3e8>
 8007e02:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e06:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8007e0a:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8007e0e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007e12:	eee5 6a07 	vfma.f32	s13, s10, s14
 8007e16:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8007e1a:	eef0 7a45 	vmov.f32	s15, s10
 8007e1e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8007e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e26:	ee17 1a90 	vmov	r1, s15
 8007e2a:	4011      	ands	r1, r2
 8007e2c:	ee07 1a90 	vmov	s15, r1
 8007e30:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8007e34:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8007e38:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007e3c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8007e40:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007e44:	eeb0 6a47 	vmov.f32	s12, s14
 8007e48:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8007e4c:	ee16 1a10 	vmov	r1, s12
 8007e50:	4011      	ands	r1, r2
 8007e52:	ee06 1a90 	vmov	s13, r1
 8007e56:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8007e5a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8007f14 <__ieee754_powf+0x3ec>
 8007e5e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007f18 <__ieee754_powf+0x3f0>
 8007e62:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007e66:	ee06 1a10 	vmov	s12, r1
 8007e6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007e6e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007f1c <__ieee754_powf+0x3f4>
 8007e72:	492b      	ldr	r1, [pc, #172]	; (8007f20 <__ieee754_powf+0x3f8>)
 8007e74:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007e78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e7c:	edd1 7a00 	vldr	s15, [r1]
 8007e80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007e84:	ee07 3a90 	vmov	s15, r3
 8007e88:	4b26      	ldr	r3, [pc, #152]	; (8007f24 <__ieee754_powf+0x3fc>)
 8007e8a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007e8e:	eef0 7a47 	vmov.f32	s15, s14
 8007e92:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007e96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007e9a:	edd4 0a00 	vldr	s1, [r4]
 8007e9e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ea6:	ee17 3a90 	vmov	r3, s15
 8007eaa:	4013      	ands	r3, r2
 8007eac:	ee07 3a90 	vmov	s15, r3
 8007eb0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8007eb4:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8007eb8:	eee6 6a65 	vfms.f32	s13, s12, s11
 8007ebc:	ee77 7a66 	vsub.f32	s15, s14, s13
 8007ec0:	e70f      	b.n	8007ce2 <__ieee754_powf+0x1ba>
 8007ec2:	2401      	movs	r4, #1
 8007ec4:	e75d      	b.n	8007d82 <__ieee754_powf+0x25a>
 8007ec6:	bf00      	nop
 8007ec8:	080084f2 	.word	0x080084f2
 8007ecc:	00000000 	.word	0x00000000
 8007ed0:	3f7ffff7 	.word	0x3f7ffff7
 8007ed4:	7149f2ca 	.word	0x7149f2ca
 8007ed8:	3f800007 	.word	0x3f800007
 8007edc:	3eaaaaab 	.word	0x3eaaaaab
 8007ee0:	3fb8aa3b 	.word	0x3fb8aa3b
 8007ee4:	36eca570 	.word	0x36eca570
 8007ee8:	3fb8aa00 	.word	0x3fb8aa00
 8007eec:	4b800000 	.word	0x4b800000
 8007ef0:	001cc471 	.word	0x001cc471
 8007ef4:	005db3d6 	.word	0x005db3d6
 8007ef8:	080085c4 	.word	0x080085c4
 8007efc:	fffff000 	.word	0xfffff000
 8007f00:	3e6c3255 	.word	0x3e6c3255
 8007f04:	3e53f142 	.word	0x3e53f142
 8007f08:	3e8ba305 	.word	0x3e8ba305
 8007f0c:	3edb6db7 	.word	0x3edb6db7
 8007f10:	3f19999a 	.word	0x3f19999a
 8007f14:	3f76384f 	.word	0x3f76384f
 8007f18:	3f763800 	.word	0x3f763800
 8007f1c:	369dc3a0 	.word	0x369dc3a0
 8007f20:	080085d4 	.word	0x080085d4
 8007f24:	080085cc 	.word	0x080085cc
 8007f28:	3338aa3c 	.word	0x3338aa3c
 8007f2c:	f040 8092 	bne.w	8008054 <__ieee754_powf+0x52c>
 8007f30:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8007f28 <__ieee754_powf+0x400>
 8007f34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007f38:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8007f3c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f44:	f73f aef6 	bgt.w	8007d34 <__ieee754_powf+0x20c>
 8007f48:	15db      	asrs	r3, r3, #23
 8007f4a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8007f4e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007f52:	4103      	asrs	r3, r0
 8007f54:	4423      	add	r3, r4
 8007f56:	4949      	ldr	r1, [pc, #292]	; (800807c <__ieee754_powf+0x554>)
 8007f58:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007f5c:	3a7f      	subs	r2, #127	; 0x7f
 8007f5e:	4111      	asrs	r1, r2
 8007f60:	ea23 0101 	bic.w	r1, r3, r1
 8007f64:	ee07 1a10 	vmov	s14, r1
 8007f68:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007f6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007f70:	f1c2 0217 	rsb	r2, r2, #23
 8007f74:	4110      	asrs	r0, r2
 8007f76:	2c00      	cmp	r4, #0
 8007f78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f7c:	bfb8      	it	lt
 8007f7e:	4240      	neglt	r0, r0
 8007f80:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8007f84:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8008080 <__ieee754_powf+0x558>
 8007f88:	ee17 3a10 	vmov	r3, s14
 8007f8c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007f90:	f023 030f 	bic.w	r3, r3, #15
 8007f94:	ee07 3a10 	vmov	s14, r3
 8007f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f9c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007fa0:	eddf 7a38 	vldr	s15, [pc, #224]	; 8008084 <__ieee754_powf+0x55c>
 8007fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8007fac:	eddf 6a36 	vldr	s13, [pc, #216]	; 8008088 <__ieee754_powf+0x560>
 8007fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8007fb4:	eea7 0a26 	vfma.f32	s0, s14, s13
 8007fb8:	eeb0 6a40 	vmov.f32	s12, s0
 8007fbc:	eea7 6a66 	vfms.f32	s12, s14, s13
 8007fc0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007fc4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007fc8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800808c <__ieee754_powf+0x564>
 8007fcc:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8008090 <__ieee754_powf+0x568>
 8007fd0:	eea7 6a26 	vfma.f32	s12, s14, s13
 8007fd4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8008094 <__ieee754_powf+0x56c>
 8007fd8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007fdc:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8008098 <__ieee754_powf+0x570>
 8007fe0:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007fe4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800809c <__ieee754_powf+0x574>
 8007fe8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007fec:	eeb0 6a40 	vmov.f32	s12, s0
 8007ff0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8007ff4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007ff8:	eeb0 7a46 	vmov.f32	s14, s12
 8007ffc:	ee77 6a66 	vsub.f32	s13, s14, s13
 8008000:	ee20 6a06 	vmul.f32	s12, s0, s12
 8008004:	eee0 7a27 	vfma.f32	s15, s0, s15
 8008008:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800800c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008010:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008014:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008018:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800801c:	ee10 3a10 	vmov	r3, s0
 8008020:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8008024:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008028:	da1a      	bge.n	8008060 <__ieee754_powf+0x538>
 800802a:	f000 f8b7 	bl	800819c <scalbnf>
 800802e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8008032:	e5cd      	b.n	8007bd0 <__ieee754_powf+0xa8>
 8008034:	4a1a      	ldr	r2, [pc, #104]	; (80080a0 <__ieee754_powf+0x578>)
 8008036:	4293      	cmp	r3, r2
 8008038:	dd02      	ble.n	8008040 <__ieee754_powf+0x518>
 800803a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80080a4 <__ieee754_powf+0x57c>
 800803e:	e67b      	b.n	8007d38 <__ieee754_powf+0x210>
 8008040:	d108      	bne.n	8008054 <__ieee754_powf+0x52c>
 8008042:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008046:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800804a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800804e:	f6ff af7b 	blt.w	8007f48 <__ieee754_powf+0x420>
 8008052:	e7f2      	b.n	800803a <__ieee754_powf+0x512>
 8008054:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8008058:	f73f af76 	bgt.w	8007f48 <__ieee754_powf+0x420>
 800805c:	2000      	movs	r0, #0
 800805e:	e78f      	b.n	8007f80 <__ieee754_powf+0x458>
 8008060:	ee00 3a10 	vmov	s0, r3
 8008064:	e7e3      	b.n	800802e <__ieee754_powf+0x506>
 8008066:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800806a:	e5b1      	b.n	8007bd0 <__ieee754_powf+0xa8>
 800806c:	eeb0 0a68 	vmov.f32	s0, s17
 8008070:	e5ae      	b.n	8007bd0 <__ieee754_powf+0xa8>
 8008072:	eeb0 0a48 	vmov.f32	s0, s16
 8008076:	e5ab      	b.n	8007bd0 <__ieee754_powf+0xa8>
 8008078:	2600      	movs	r6, #0
 800807a:	e590      	b.n	8007b9e <__ieee754_powf+0x76>
 800807c:	007fffff 	.word	0x007fffff
 8008080:	3f317218 	.word	0x3f317218
 8008084:	35bfbe8c 	.word	0x35bfbe8c
 8008088:	3f317200 	.word	0x3f317200
 800808c:	3331bb4c 	.word	0x3331bb4c
 8008090:	b5ddea0e 	.word	0xb5ddea0e
 8008094:	388ab355 	.word	0x388ab355
 8008098:	bb360b61 	.word	0xbb360b61
 800809c:	3e2aaaab 	.word	0x3e2aaaab
 80080a0:	43160000 	.word	0x43160000
 80080a4:	0da24260 	.word	0x0da24260

080080a8 <__ieee754_sqrtf>:
 80080a8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80080ac:	4770      	bx	lr

080080ae <fabsf>:
 80080ae:	ee10 3a10 	vmov	r3, s0
 80080b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080b6:	ee00 3a10 	vmov	s0, r3
 80080ba:	4770      	bx	lr

080080bc <finitef>:
 80080bc:	b082      	sub	sp, #8
 80080be:	ed8d 0a01 	vstr	s0, [sp, #4]
 80080c2:	9801      	ldr	r0, [sp, #4]
 80080c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80080c8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80080cc:	bfac      	ite	ge
 80080ce:	2000      	movge	r0, #0
 80080d0:	2001      	movlt	r0, #1
 80080d2:	b002      	add	sp, #8
 80080d4:	4770      	bx	lr
	...

080080d8 <nanf>:
 80080d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80080e0 <nanf+0x8>
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	7fc00000 	.word	0x7fc00000

080080e4 <rintf>:
 80080e4:	ee10 2a10 	vmov	r2, s0
 80080e8:	b513      	push	{r0, r1, r4, lr}
 80080ea:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80080ee:	397f      	subs	r1, #127	; 0x7f
 80080f0:	2916      	cmp	r1, #22
 80080f2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80080f6:	dc47      	bgt.n	8008188 <rintf+0xa4>
 80080f8:	b32b      	cbz	r3, 8008146 <rintf+0x62>
 80080fa:	2900      	cmp	r1, #0
 80080fc:	ee10 3a10 	vmov	r3, s0
 8008100:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8008104:	da21      	bge.n	800814a <rintf+0x66>
 8008106:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800810a:	425b      	negs	r3, r3
 800810c:	4921      	ldr	r1, [pc, #132]	; (8008194 <rintf+0xb0>)
 800810e:	0a5b      	lsrs	r3, r3, #9
 8008110:	0d12      	lsrs	r2, r2, #20
 8008112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008116:	0512      	lsls	r2, r2, #20
 8008118:	4313      	orrs	r3, r2
 800811a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800811e:	ee07 3a90 	vmov	s15, r3
 8008122:	edd1 6a00 	vldr	s13, [r1]
 8008126:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800812a:	ed8d 7a01 	vstr	s14, [sp, #4]
 800812e:	eddd 7a01 	vldr	s15, [sp, #4]
 8008132:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008136:	ee17 3a90 	vmov	r3, s15
 800813a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800813e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8008142:	ee00 3a10 	vmov	s0, r3
 8008146:	b002      	add	sp, #8
 8008148:	bd10      	pop	{r4, pc}
 800814a:	4a13      	ldr	r2, [pc, #76]	; (8008198 <rintf+0xb4>)
 800814c:	410a      	asrs	r2, r1
 800814e:	4213      	tst	r3, r2
 8008150:	d0f9      	beq.n	8008146 <rintf+0x62>
 8008152:	0854      	lsrs	r4, r2, #1
 8008154:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8008158:	d006      	beq.n	8008168 <rintf+0x84>
 800815a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800815e:	ea23 0304 	bic.w	r3, r3, r4
 8008162:	fa42 f101 	asr.w	r1, r2, r1
 8008166:	430b      	orrs	r3, r1
 8008168:	4a0a      	ldr	r2, [pc, #40]	; (8008194 <rintf+0xb0>)
 800816a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800816e:	ed90 7a00 	vldr	s14, [r0]
 8008172:	ee07 3a90 	vmov	s15, r3
 8008176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800817a:	edcd 7a01 	vstr	s15, [sp, #4]
 800817e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8008182:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008186:	e7de      	b.n	8008146 <rintf+0x62>
 8008188:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800818c:	d3db      	bcc.n	8008146 <rintf+0x62>
 800818e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008192:	e7d8      	b.n	8008146 <rintf+0x62>
 8008194:	080085dc 	.word	0x080085dc
 8008198:	007fffff 	.word	0x007fffff

0800819c <scalbnf>:
 800819c:	ee10 3a10 	vmov	r3, s0
 80081a0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80081a4:	d025      	beq.n	80081f2 <scalbnf+0x56>
 80081a6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80081aa:	d302      	bcc.n	80081b2 <scalbnf+0x16>
 80081ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 80081b0:	4770      	bx	lr
 80081b2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80081b6:	d122      	bne.n	80081fe <scalbnf+0x62>
 80081b8:	4b2a      	ldr	r3, [pc, #168]	; (8008264 <scalbnf+0xc8>)
 80081ba:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008268 <scalbnf+0xcc>
 80081be:	4298      	cmp	r0, r3
 80081c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80081c4:	db16      	blt.n	80081f4 <scalbnf+0x58>
 80081c6:	ee10 3a10 	vmov	r3, s0
 80081ca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80081ce:	3a19      	subs	r2, #25
 80081d0:	4402      	add	r2, r0
 80081d2:	2afe      	cmp	r2, #254	; 0xfe
 80081d4:	dd15      	ble.n	8008202 <scalbnf+0x66>
 80081d6:	ee10 3a10 	vmov	r3, s0
 80081da:	eddf 7a24 	vldr	s15, [pc, #144]	; 800826c <scalbnf+0xd0>
 80081de:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008270 <scalbnf+0xd4>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	eeb0 7a67 	vmov.f32	s14, s15
 80081e8:	bfb8      	it	lt
 80081ea:	eef0 7a66 	vmovlt.f32	s15, s13
 80081ee:	ee27 0a27 	vmul.f32	s0, s14, s15
 80081f2:	4770      	bx	lr
 80081f4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008274 <scalbnf+0xd8>
 80081f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80081fc:	4770      	bx	lr
 80081fe:	0dd2      	lsrs	r2, r2, #23
 8008200:	e7e6      	b.n	80081d0 <scalbnf+0x34>
 8008202:	2a00      	cmp	r2, #0
 8008204:	dd06      	ble.n	8008214 <scalbnf+0x78>
 8008206:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800820a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800820e:	ee00 3a10 	vmov	s0, r3
 8008212:	4770      	bx	lr
 8008214:	f112 0f16 	cmn.w	r2, #22
 8008218:	da1a      	bge.n	8008250 <scalbnf+0xb4>
 800821a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800821e:	4298      	cmp	r0, r3
 8008220:	ee10 3a10 	vmov	r3, s0
 8008224:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008228:	dd0a      	ble.n	8008240 <scalbnf+0xa4>
 800822a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800826c <scalbnf+0xd0>
 800822e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008270 <scalbnf+0xd4>
 8008232:	eef0 7a40 	vmov.f32	s15, s0
 8008236:	2b00      	cmp	r3, #0
 8008238:	bf18      	it	ne
 800823a:	eeb0 0a47 	vmovne.f32	s0, s14
 800823e:	e7db      	b.n	80081f8 <scalbnf+0x5c>
 8008240:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008274 <scalbnf+0xd8>
 8008244:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008278 <scalbnf+0xdc>
 8008248:	eef0 7a40 	vmov.f32	s15, s0
 800824c:	2b00      	cmp	r3, #0
 800824e:	e7f3      	b.n	8008238 <scalbnf+0x9c>
 8008250:	3219      	adds	r2, #25
 8008252:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008256:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800825a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800827c <scalbnf+0xe0>
 800825e:	ee07 3a10 	vmov	s14, r3
 8008262:	e7c4      	b.n	80081ee <scalbnf+0x52>
 8008264:	ffff3cb0 	.word	0xffff3cb0
 8008268:	4c000000 	.word	0x4c000000
 800826c:	7149f2ca 	.word	0x7149f2ca
 8008270:	f149f2ca 	.word	0xf149f2ca
 8008274:	0da24260 	.word	0x0da24260
 8008278:	8da24260 	.word	0x8da24260
 800827c:	33000000 	.word	0x33000000

08008280 <_init>:
 8008280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008282:	bf00      	nop
 8008284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008286:	bc08      	pop	{r3}
 8008288:	469e      	mov	lr, r3
 800828a:	4770      	bx	lr

0800828c <_fini>:
 800828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828e:	bf00      	nop
 8008290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008292:	bc08      	pop	{r3}
 8008294:	469e      	mov	lr, r3
 8008296:	4770      	bx	lr
