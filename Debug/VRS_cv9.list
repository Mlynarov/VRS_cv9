
VRS_cv9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004ef4  08004ef4  00014ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f7c  08004f7c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004f7c  08004f7c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f7c  08004f7c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f7c  08004f7c  00014f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f80  08004f80  00014f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000007c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000985b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ff6  00000000  00000000  000298fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b0  00000000  00000000  0002b8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a8  00000000  00000000  0002c2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017851  00000000  00000000  0002cb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008142  00000000  00000000  000443a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007ada5  00000000  00000000  0004c4e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c7288  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b0c  00000000  00000000  000c72dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004edc 	.word	0x08004edc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004edc 	.word	0x08004edc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <altPress_read_byte>:
#include <math.h>

uint8_t LPS_addres = LPS_DEVICE_ADDRESS	;

uint8_t altPress_read_byte(uint8_t reg_addr)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af02      	add	r7, sp, #8
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, LPS_addres, 0));
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <altPress_read_byte+0x30>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	79fa      	ldrb	r2, [r7, #7]
 8000294:	f107 000f 	add.w	r0, r7, #15
 8000298:	2100      	movs	r1, #0
 800029a:	9100      	str	r1, [sp, #0]
 800029c:	2101      	movs	r1, #1
 800029e:	f001 fed1 	bl	8002044 <i2c_master_read>
 80002a2:	4603      	mov	r3, r0
 80002a4:	781b      	ldrb	r3, [r3, #0]
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3710      	adds	r7, #16
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000000 	.word	0x20000000

080002b4 <altPress_write_byte>:
{
	i2c_master_read(data, length, reg, LPS_addres, 1);
}

void altPress_write_byte(uint8_t reg_addr, uint8_t value)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	460a      	mov	r2, r1
 80002be:	71fb      	strb	r3, [r7, #7]
 80002c0:	4613      	mov	r3, r2
 80002c2:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, LPS_addres, 0);
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <altPress_write_byte+0x28>)
 80002c6:	781a      	ldrb	r2, [r3, #0]
 80002c8:	79f9      	ldrb	r1, [r7, #7]
 80002ca:	79b8      	ldrb	r0, [r7, #6]
 80002cc:	2300      	movs	r3, #0
 80002ce:	f001 fe75 	bl	8001fbc <i2c_master_write>
}
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000000 	.word	0x20000000

080002e0 <pressure_init>:

uint8_t pressure_init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 80002e6:	2301      	movs	r3, #1
 80002e8:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 80002ea:	2064      	movs	r0, #100	; 0x64
 80002ec:	f003 fcf6 	bl	8003cdc <LL_mDelay>

	uint8_t val = altPress_read_byte(LPS_WHO_AM_I);
 80002f0:	200f      	movs	r0, #15
 80002f2:	f7ff ffc5 	bl	8000280 <altPress_read_byte>
 80002f6:	4603      	mov	r3, r0
 80002f8:	71bb      	strb	r3, [r7, #6]

	if(val == LPS_WHO_AM_I_DEFAULT)
 80002fa:	79bb      	ldrb	r3, [r7, #6]
 80002fc:	2bbd      	cmp	r3, #189	; 0xbd
 80002fe:	d102      	bne.n	8000306 <pressure_init+0x26>
	{
		status = 1;
 8000300:	2301      	movs	r3, #1
 8000302:	71fb      	strb	r3, [r7, #7]
 8000304:	e001      	b.n	800030a <pressure_init+0x2a>
	}
	else			//if the device is not found on one address, try another one
	{
			status = 0;
 8000306:	2300      	movs	r3, #0
 8000308:	71fb      	strb	r3, [r7, #7]
			//return status;
	}

	//acc device init

	altPress_write_byte(LPS_CTRL_REG1, LPS_CTRL_REG1_SETUP);
 800030a:	2190      	movs	r1, #144	; 0x90
 800030c:	2020      	movs	r0, #32
 800030e:	f7ff ffd1 	bl	80002b4 <altPress_write_byte>

	return status;
 8000312:	79fb      	ldrb	r3, [r7, #7]
}
 8000314:	4618      	mov	r0, r3
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <get_pressure>:

float get_pressure()
{
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 uint8_t pressure_low,pressure_mid,pressure_high;
 float pressure,tmp=0;
 8000322:	f04f 0300 	mov.w	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]

 pressure_low=LPS_PRESS_OUT_XL;
 8000328:	2328      	movs	r3, #40	; 0x28
 800032a:	72fb      	strb	r3, [r7, #11]
 pressure_mid= LPS_PRESS_OUT_L;
 800032c:	2329      	movs	r3, #41	; 0x29
 800032e:	72bb      	strb	r3, [r7, #10]
 pressure_high=LPS_PRESS_OUT_H;
 8000330:	232a      	movs	r3, #42	; 0x2a
 8000332:	727b      	strb	r3, [r7, #9]

 //vypocitanie tlaku strana 15 v datasheete uvedenom v altitudePressure.h
 tmp=pressure_high << 16|pressure_mid<<8|pressure_low;
 8000334:	7a7b      	ldrb	r3, [r7, #9]
 8000336:	041a      	lsls	r2, r3, #16
 8000338:	7abb      	ldrb	r3, [r7, #10]
 800033a:	021b      	lsls	r3, r3, #8
 800033c:	431a      	orrs	r2, r3
 800033e:	7afb      	ldrb	r3, [r7, #11]
 8000340:	4313      	orrs	r3, r2
 8000342:	ee07 3a90 	vmov	s15, r3
 8000346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800034a:	edc7 7a03 	vstr	s15, [r7, #12]
 pressure=tmp/4096;
 800034e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000352:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000374 <get_pressure+0x58>
 8000356:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800035a:	edc7 7a01 	vstr	s15, [r7, #4]

 return pressure;
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	ee07 3a90 	vmov	s15, r3
}
 8000364:	eeb0 0a67 	vmov.f32	s0, s15
 8000368:	3714      	adds	r7, #20
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	45800000 	.word	0x45800000

08000378 <get_altitude>:

int16_t get_altitude(){
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
	//H = altitude (m)
	//P = measured pressure (Pa) from the sensor
	//p0 = reference pressure at sea level (e.g. 1013.25hPa)
	//altitude = 44330 *(1 - (P/p0)^(1/5.255));

	float p0=1013.25;
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <get_altitude+0x5c>)
 8000380:	60fb      	str	r3, [r7, #12]
	float P=get_pressure();
 8000382:	f7ff ffcb 	bl	800031c <get_pressure>
 8000386:	ed87 0a02 	vstr	s0, [r7, #8]
	float altitude;
	float result;

	result=powf((P/p0),(1/5.255));// powf mocnitel floatu neviem ale ci nebude lepsie to prehodit na int a normalne to umocnit
 800038a:	ed97 7a02 	vldr	s14, [r7, #8]
 800038e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000392:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000396:	eddf 0a10 	vldr	s1, [pc, #64]	; 80003d8 <get_altitude+0x60>
 800039a:	eeb0 0a66 	vmov.f32	s0, s13
 800039e:	f004 f959 	bl	8004654 <powf>
 80003a2:	ed87 0a01 	vstr	s0, [r7, #4]


	altitude = 44330 *(1 - result);
 80003a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80003aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80003ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80003b2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80003dc <get_altitude+0x64>
 80003b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80003ba:	edc7 7a00 	vstr	s15, [r7]

	return altitude;
 80003be:	edd7 7a00 	vldr	s15, [r7]
 80003c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80003c6:	ee17 3a90 	vmov	r3, s15
 80003ca:	b21b      	sxth	r3, r3
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3710      	adds	r7, #16
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	447d5000 	.word	0x447d5000
 80003d8:	3e42dcae 	.word	0x3e42dcae
 80003dc:	472d2a00 	.word	0x472d2a00

080003e0 <temperature_read_byte>:
#include "hts.h"

uint8_t hts221_addres = HTS_ADDRESS;

uint8_t temperature_read_byte(uint8_t reg_addr)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af02      	add	r7, sp, #8
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, hts221_addres, 0));
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <temperature_read_byte+0x30>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	79fa      	ldrb	r2, [r7, #7]
 80003f4:	f107 000f 	add.w	r0, r7, #15
 80003f8:	2100      	movs	r1, #0
 80003fa:	9100      	str	r1, [sp, #0]
 80003fc:	2101      	movs	r1, #1
 80003fe:	f001 fe21 	bl	8002044 <i2c_master_read>
 8000402:	4603      	mov	r3, r0
 8000404:	781b      	ldrb	r3, [r3, #0]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3710      	adds	r7, #16
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000001 	.word	0x20000001

08000414 <temperature_readArray>:


void temperature_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af02      	add	r7, sp, #8
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	460b      	mov	r3, r1
 800041e:	70fb      	strb	r3, [r7, #3]
 8000420:	4613      	mov	r3, r2
 8000422:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, hts221_addres, 1);
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <temperature_readArray+0x2c>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	78fa      	ldrb	r2, [r7, #3]
 800042a:	78b9      	ldrb	r1, [r7, #2]
 800042c:	2001      	movs	r0, #1
 800042e:	9000      	str	r0, [sp, #0]
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f001 fe07 	bl	8002044 <i2c_master_read>
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000001 	.word	0x20000001

08000444 <temperature_write_byte>:

void temperature_write_byte(uint8_t reg_addr, uint8_t value)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	460a      	mov	r2, r1
 800044e:	71fb      	strb	r3, [r7, #7]
 8000450:	4613      	mov	r3, r2
 8000452:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, hts221_addres, 0);
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <temperature_write_byte+0x28>)
 8000456:	781a      	ldrb	r2, [r3, #0]
 8000458:	79f9      	ldrb	r1, [r7, #7]
 800045a:	79b8      	ldrb	r0, [r7, #6]
 800045c:	2300      	movs	r3, #0
 800045e:	f001 fdad 	bl	8001fbc <i2c_master_write>
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000001 	.word	0x20000001

08000470 <temperature_init>:

uint8_t temperature_init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8000476:	2301      	movs	r3, #1
 8000478:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 800047a:	2064      	movs	r0, #100	; 0x64
 800047c:	f003 fc2e 	bl	8003cdc <LL_mDelay>

	uint8_t val = temperature_read_byte(HTS_WHO_AM_I	);
 8000480:	200f      	movs	r0, #15
 8000482:	f7ff ffad 	bl	80003e0 <temperature_read_byte>
 8000486:	4603      	mov	r3, r0
 8000488:	71bb      	strb	r3, [r7, #6]

	if(val == HTS_WHO_AM_I_DEFAULT)
 800048a:	79bb      	ldrb	r3, [r7, #6]
 800048c:	2bbc      	cmp	r3, #188	; 0xbc
 800048e:	d102      	bne.n	8000496 <temperature_init+0x26>
	{
		status = 1;
 8000490:	2301      	movs	r3, #1
 8000492:	71fb      	strb	r3, [r7, #7]
 8000494:	e001      	b.n	800049a <temperature_init+0x2a>
	}
	else			//if the device is not found on one address, try another one
	{
			status = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	71fb      	strb	r3, [r7, #7]
			//return status;
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 800049a:	2380      	movs	r3, #128	; 0x80
 800049c:	717b      	strb	r3, [r7, #5]
	temperature_write_byte(HTS_CTRL_REG1, ctrl1);
 800049e:	797b      	ldrb	r3, [r7, #5]
 80004a0:	4619      	mov	r1, r3
 80004a2:	2020      	movs	r0, #32
 80004a4:	f7ff ffce 	bl	8000444 <temperature_write_byte>

	return status;
 80004a8:	79fb      	ldrb	r3, [r7, #7]
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <HTS221_Get_Temperature>:

int16_t HTS221_Get_Temperature()
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b088      	sub	sp, #32
 80004b6:	af00      	add	r7, sp, #0
 int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
 int16_t T0_degC, T1_degC, value;
 uint8_t buffer[4], tmp,sign;
 int32_t tmp32;

 sign=00000001;
 80004b8:	2301      	movs	r3, #1
 80004ba:	777b      	strb	r3, [r7, #29]

/*1. Read from 0x32 & 0x33 registers the value of coefficients T0_degC_x8 and T1_degC_x8*/
 temperature_readArray(buffer,HTS_TO_DEGC_REG,2);
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	2202      	movs	r2, #2
 80004c0:	2132      	movs	r1, #50	; 0x32
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff ffa6 	bl	8000414 <temperature_readArray>

/*2. Read from 0x35 register the value of the MSB bits of T1_degC and T0_degC */
 tmp=temperature_read_byte(HTS_MSB_T1_T0);
 80004c8:	2035      	movs	r0, #53	; 0x35
 80004ca:	f7ff ff89 	bl	80003e0 <temperature_read_byte>
 80004ce:	4603      	mov	r3, r0
 80004d0:	773b      	strb	r3, [r7, #28]


/*Calculate the T0_degC and T1_degC values*/
 T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80004d2:	7f3b      	ldrb	r3, [r7, #28]
 80004d4:	021b      	lsls	r3, r3, #8
 80004d6:	b21b      	sxth	r3, r3
 80004d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80004dc:	b21a      	sxth	r2, r3
 80004de:	793b      	ldrb	r3, [r7, #4]
 80004e0:	b21b      	sxth	r3, r3
 80004e2:	4313      	orrs	r3, r2
 80004e4:	837b      	strh	r3, [r7, #26]
 T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80004e6:	7f3b      	ldrb	r3, [r7, #28]
 80004e8:	019b      	lsls	r3, r3, #6
 80004ea:	b21b      	sxth	r3, r3
 80004ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80004f0:	b21a      	sxth	r2, r3
 80004f2:	797b      	ldrb	r3, [r7, #5]
 80004f4:	b21b      	sxth	r3, r3
 80004f6:	4313      	orrs	r3, r2
 80004f8:	833b      	strh	r3, [r7, #24]
 T0_degC = T0_degC_x8_u16>>3;
 80004fa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80004fe:	10db      	asrs	r3, r3, #3
 8000500:	82fb      	strh	r3, [r7, #22]
 T1_degC = T1_degC_x8_u16>>3;
 8000502:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000506:	10db      	asrs	r3, r3, #3
 8000508:	82bb      	strh	r3, [r7, #20]

/*3. Read from 0x3C & 0x3D registers the value of T0_OUT*/
 temperature_readArray(buffer,HTS_T0_OUT,4 );
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2204      	movs	r2, #4
 800050e:	213c      	movs	r1, #60	; 0x3c
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff ff7f 	bl	8000414 <temperature_readArray>
 T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8000516:	797b      	ldrb	r3, [r7, #5]
 8000518:	021b      	lsls	r3, r3, #8
 800051a:	b21a      	sxth	r2, r3
 800051c:	793b      	ldrb	r3, [r7, #4]
 800051e:	b21b      	sxth	r3, r3
 8000520:	4313      	orrs	r3, r2
 8000522:	827b      	strh	r3, [r7, #18]

 /*4. Read from 0x3E & 0x3F registers the value of T1_OUT*/
 temperature_readArray(buffer,HTS_T1_OUT,4 );
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2204      	movs	r2, #4
 8000528:	213e      	movs	r1, #62	; 0x3e
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff ff72 	bl	8000414 <temperature_readArray>
 T1_out = (((uint16_t)buffer[3])<<8) | (uint16_t)buffer[2];
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	021b      	lsls	r3, r3, #8
 8000534:	b21a      	sxth	r2, r3
 8000536:	79bb      	ldrb	r3, [r7, #6]
 8000538:	b21b      	sxth	r3, r3
 800053a:	4313      	orrs	r3, r2
 800053c:	823b      	strh	r3, [r7, #16]

/* 5.Read from 0x2A & 0x2B registers the value T_OUT (ADC_OUT).*/
 temperature_readArray(buffer,HTS_T0_OUT,2 );
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2202      	movs	r2, #2
 8000542:	213c      	movs	r1, #60	; 0x3c
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff ff65 	bl	8000414 <temperature_readArray>
 T_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 800054a:	797b      	ldrb	r3, [r7, #5]
 800054c:	021b      	lsls	r3, r3, #8
 800054e:	b21a      	sxth	r2, r3
 8000550:	793b      	ldrb	r3, [r7, #4]
 8000552:	b21b      	sxth	r3, r3
 8000554:	4313      	orrs	r3, r2
 8000556:	81fb      	strh	r3, [r7, #14]


/* 6. Compute the Temperature value by linear interpolation*/
 tmp32 = ((int32_t)(T_out - T0_out)) * ((int32_t)(T1_degC - T0_degC)*10);
 8000558:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800055c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000566:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800056a:	1a8a      	subs	r2, r1, r2
 800056c:	fb02 f203 	mul.w	r2, r2, r3
 8000570:	4613      	mov	r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	4413      	add	r3, r2
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	60bb      	str	r3, [r7, #8]
 value = tmp32 /(T1_out - T0_out) + T0_degC*10;
 800057a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800057e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000582:	1ad3      	subs	r3, r2, r3
 8000584:	68ba      	ldr	r2, [r7, #8]
 8000586:	fb92 f3f3 	sdiv	r3, r2, r3
 800058a:	b29a      	uxth	r2, r3
 800058c:	8afb      	ldrh	r3, [r7, #22]
 800058e:	4619      	mov	r1, r3
 8000590:	0089      	lsls	r1, r1, #2
 8000592:	440b      	add	r3, r1
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	b29b      	uxth	r3, r3
 8000598:	4413      	add	r3, r2
 800059a:	b29b      	uxth	r3, r3
 800059c:	83fb      	strh	r3, [r7, #30]

// temperature_write_byte(HTS221_CTRL_REG1,value);//neni som si isty reg_addresou

 //podmienka pre zistenie ci je teplota kladna alebo zaporna
 if(HTS_T_OUT_High==sign){
 800059e:	7f7b      	ldrb	r3, [r7, #29]
 80005a0:	2b2b      	cmp	r3, #43	; 0x2b
 80005a2:	d103      	bne.n	80005ac <HTS221_Get_Temperature+0xfa>
	 value = value*(-1);
 80005a4:	8bfb      	ldrh	r3, [r7, #30]
 80005a6:	425b      	negs	r3, r3
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	83fb      	strh	r3, [r7, #30]
 }


 return value;
 80005ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3720      	adds	r7, #32
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	619a      	str	r2, [r3, #24]
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <setDisplayText>:
uint8_t displayTextPos = 0;
uint8_t direction = 0;
uint16_t counter = 0;
char displayString[15];

void setDisplayText(char text[15]){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	strncpy(displayString, &text[0],15);
 80005f8:	220f      	movs	r2, #15
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <setDisplayText+0x20>)
 80005fe:	f003 fc08 	bl	8003e12 <strncpy>
	int x=0;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
}
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	200000a0 	.word	0x200000a0

08000614 <updateDisplay>:

void updateDisplay(){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
	for(int i = 1; i<5; i++){
 800061a:	2301      	movs	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	e063      	b.n	80006e8 <updateDisplay+0xd4>
		switch(updateDigit){
 8000620:	4b3c      	ldr	r3, [pc, #240]	; (8000714 <updateDisplay+0x100>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	3b01      	subs	r3, #1
 8000626:	2b03      	cmp	r3, #3
 8000628:	d84a      	bhi.n	80006c0 <updateDisplay+0xac>
 800062a:	a201      	add	r2, pc, #4	; (adr r2, 8000630 <updateDisplay+0x1c>)
 800062c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000630:	08000641 	.word	0x08000641
 8000634:	0800065f 	.word	0x0800065f
 8000638:	0800067f 	.word	0x0800067f
 800063c:	080006a1 	.word	0x080006a1
				case 1:
					DIGIT_1_ON;
 8000640:	2101      	movs	r1, #1
 8000642:	4835      	ldr	r0, [pc, #212]	; (8000718 <updateDisplay+0x104>)
 8000644:	f7ff ffb8 	bl	80005b8 <LL_GPIO_SetOutputPin>
					resetAllSegments();
 8000648:	f000 fa16 	bl	8000a78 <resetAllSegments>
					displayLetter(displayString[displayTextPos]);
 800064c:	4b33      	ldr	r3, [pc, #204]	; (800071c <updateDisplay+0x108>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	4b33      	ldr	r3, [pc, #204]	; (8000720 <updateDisplay+0x10c>)
 8000654:	5c9b      	ldrb	r3, [r3, r2]
 8000656:	4618      	mov	r0, r3
 8000658:	f000 f8c0 	bl	80007dc <displayLetter>
					break;
 800065c:	e030      	b.n	80006c0 <updateDisplay+0xac>
				case 2:
					DIGIT_2_ON;
 800065e:	2110      	movs	r1, #16
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f7ff ffa8 	bl	80005b8 <LL_GPIO_SetOutputPin>
					resetAllSegments();
 8000668:	f000 fa06 	bl	8000a78 <resetAllSegments>
					displayLetter(displayString[displayTextPos+1]);
 800066c:	4b2b      	ldr	r3, [pc, #172]	; (800071c <updateDisplay+0x108>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	3301      	adds	r3, #1
 8000672:	4a2b      	ldr	r2, [pc, #172]	; (8000720 <updateDisplay+0x10c>)
 8000674:	5cd3      	ldrb	r3, [r2, r3]
 8000676:	4618      	mov	r0, r3
 8000678:	f000 f8b0 	bl	80007dc <displayLetter>
					break;
 800067c:	e020      	b.n	80006c0 <updateDisplay+0xac>
				case 3:
					DIGIT_3_ON;
 800067e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000686:	f7ff ff97 	bl	80005b8 <LL_GPIO_SetOutputPin>
					resetAllSegments();
 800068a:	f000 f9f5 	bl	8000a78 <resetAllSegments>
					displayLetter(displayString[displayTextPos+2]);
 800068e:	4b23      	ldr	r3, [pc, #140]	; (800071c <updateDisplay+0x108>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	3302      	adds	r3, #2
 8000694:	4a22      	ldr	r2, [pc, #136]	; (8000720 <updateDisplay+0x10c>)
 8000696:	5cd3      	ldrb	r3, [r2, r3]
 8000698:	4618      	mov	r0, r3
 800069a:	f000 f89f 	bl	80007dc <displayLetter>
					break;
 800069e:	e00f      	b.n	80006c0 <updateDisplay+0xac>
				case 4:
					DIGIT_4_ON;
 80006a0:	2104      	movs	r1, #4
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a6:	f7ff ff87 	bl	80005b8 <LL_GPIO_SetOutputPin>
					resetAllSegments();
 80006aa:	f000 f9e5 	bl	8000a78 <resetAllSegments>
					displayLetter(displayString[displayTextPos+3]);
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <updateDisplay+0x108>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	3303      	adds	r3, #3
 80006b4:	4a1a      	ldr	r2, [pc, #104]	; (8000720 <updateDisplay+0x10c>)
 80006b6:	5cd3      	ldrb	r3, [r2, r3]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f88f 	bl	80007dc <displayLetter>
					break;
 80006be:	bf00      	nop
			}
			updateDigit = (updateDigit < 4) ? updateDigit+1 : 1;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <updateDisplay+0x100>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b03      	cmp	r3, #3
 80006c6:	d804      	bhi.n	80006d2 <updateDisplay+0xbe>
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <updateDisplay+0x100>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	e000      	b.n	80006d4 <updateDisplay+0xc0>
 80006d2:	2301      	movs	r3, #1
 80006d4:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <updateDisplay+0x100>)
 80006d6:	7013      	strb	r3, [r2, #0]
			LL_mDelay(2);
 80006d8:	2002      	movs	r0, #2
 80006da:	f003 faff 	bl	8003cdc <LL_mDelay>
			resetAllDigits();
 80006de:	f000 f9f9 	bl	8000ad4 <resetAllDigits>
	for(int i = 1; i<5; i++){
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3301      	adds	r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	dd98      	ble.n	8000620 <updateDisplay+0xc>
	}
	counter +=1;
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <updateDisplay+0x110>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <updateDisplay+0x110>)
 80006f8:	801a      	strh	r2, [r3, #0]
	if(counter >= 100){
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <updateDisplay+0x110>)
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	2b63      	cmp	r3, #99	; 0x63
 8000700:	d904      	bls.n	800070c <updateDisplay+0xf8>
		shiftDisplayText();
 8000702:	f000 f811 	bl	8000728 <shiftDisplayText>
		counter = 0;
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <updateDisplay+0x110>)
 8000708:	2200      	movs	r2, #0
 800070a:	801a      	strh	r2, [r3, #0]
	}

}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000002 	.word	0x20000002
 8000718:	48000400 	.word	0x48000400
 800071c:	2000008c 	.word	0x2000008c
 8000720:	200000a0 	.word	0x200000a0
 8000724:	2000008e 	.word	0x2000008e

08000728 <shiftDisplayText>:

void shiftDisplayText(){
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
		displayTextPos = displayTextPos+1;
	}
	else if(displayTextPos > 0 && direction == 1){
		displayTextPos = displayTextPos-1;
	}*/
	if(displayString[0] != '\0'){
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <shiftDisplayText+0xa8>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d047      	beq.n	80007c4 <shiftDisplayText+0x9c>
		if(direction == 0 && displayString[displayTextPos+4] != '\0'){
 8000734:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <shiftDisplayText+0xac>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d10d      	bne.n	8000758 <shiftDisplayText+0x30>
 800073c:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <shiftDisplayText+0xb0>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	3304      	adds	r3, #4
 8000742:	4a23      	ldr	r2, [pc, #140]	; (80007d0 <shiftDisplayText+0xa8>)
 8000744:	5cd3      	ldrb	r3, [r2, r3]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d006      	beq.n	8000758 <shiftDisplayText+0x30>
			displayTextPos = displayTextPos+1;
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <shiftDisplayText+0xb0>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <shiftDisplayText+0xb0>)
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	e035      	b.n	80007c4 <shiftDisplayText+0x9c>
		}
		else if(direction == 0 && displayString[displayTextPos+4] == '\0'){
 8000758:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <shiftDisplayText+0xac>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d110      	bne.n	8000782 <shiftDisplayText+0x5a>
 8000760:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <shiftDisplayText+0xb0>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	3304      	adds	r3, #4
 8000766:	4a1a      	ldr	r2, [pc, #104]	; (80007d0 <shiftDisplayText+0xa8>)
 8000768:	5cd3      	ldrb	r3, [r2, r3]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d109      	bne.n	8000782 <shiftDisplayText+0x5a>
			direction = 1;
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <shiftDisplayText+0xac>)
 8000770:	2201      	movs	r2, #1
 8000772:	701a      	strb	r2, [r3, #0]
			displayTextPos = displayTextPos-1;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <shiftDisplayText+0xb0>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	3b01      	subs	r3, #1
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <shiftDisplayText+0xb0>)
 800077e:	701a      	strb	r2, [r3, #0]
 8000780:	e020      	b.n	80007c4 <shiftDisplayText+0x9c>
		}
		else if(displayTextPos <= 0 && direction == 1){
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <shiftDisplayText+0xb0>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d10d      	bne.n	80007a6 <shiftDisplayText+0x7e>
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <shiftDisplayText+0xac>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d109      	bne.n	80007a6 <shiftDisplayText+0x7e>
			direction = 0;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <shiftDisplayText+0xac>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
			displayTextPos = displayTextPos+1;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <shiftDisplayText+0xb0>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <shiftDisplayText+0xb0>)
 80007a2:	701a      	strb	r2, [r3, #0]
 80007a4:	e00e      	b.n	80007c4 <shiftDisplayText+0x9c>
		}
		else if(displayTextPos > 0 && direction == 1){
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <shiftDisplayText+0xb0>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d00a      	beq.n	80007c4 <shiftDisplayText+0x9c>
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <shiftDisplayText+0xac>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d106      	bne.n	80007c4 <shiftDisplayText+0x9c>
			displayTextPos = displayTextPos-1;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <shiftDisplayText+0xb0>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <shiftDisplayText+0xb0>)
 80007c0:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80007c2:	e7ff      	b.n	80007c4 <shiftDisplayText+0x9c>
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	200000a0 	.word	0x200000a0
 80007d4:	2000008d 	.word	0x2000008d
 80007d8:	2000008c 	.word	0x2000008c

080007dc <displayLetter>:

void displayLetter(char letter){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
	switch(letter){
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	3b20      	subs	r3, #32
 80007ea:	2b59      	cmp	r3, #89	; 0x59
 80007ec:	f200 813c 	bhi.w	8000a68 <displayLetter+0x28c>
 80007f0:	a201      	add	r2, pc, #4	; (adr r2, 80007f8 <displayLetter+0x1c>)
 80007f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f6:	bf00      	nop
 80007f8:	08000a1b 	.word	0x08000a1b
 80007fc:	08000a69 	.word	0x08000a69
 8000800:	08000a69 	.word	0x08000a69
 8000804:	08000a69 	.word	0x08000a69
 8000808:	08000a69 	.word	0x08000a69
 800080c:	08000a69 	.word	0x08000a69
 8000810:	08000a69 	.word	0x08000a69
 8000814:	08000a69 	.word	0x08000a69
 8000818:	08000a69 	.word	0x08000a69
 800081c:	08000a69 	.word	0x08000a69
 8000820:	08000a69 	.word	0x08000a69
 8000824:	08000a69 	.word	0x08000a69
 8000828:	08000a69 	.word	0x08000a69
 800082c:	08000a27 	.word	0x08000a27
 8000830:	08000a69 	.word	0x08000a69
 8000834:	08000a69 	.word	0x08000a69
 8000838:	08000a63 	.word	0x08000a63
 800083c:	08000a2d 	.word	0x08000a2d
 8000840:	08000a33 	.word	0x08000a33
 8000844:	08000a39 	.word	0x08000a39
 8000848:	08000a3f 	.word	0x08000a3f
 800084c:	08000a45 	.word	0x08000a45
 8000850:	08000a4b 	.word	0x08000a4b
 8000854:	08000a51 	.word	0x08000a51
 8000858:	08000a57 	.word	0x08000a57
 800085c:	08000a5d 	.word	0x08000a5d
 8000860:	08000a69 	.word	0x08000a69
 8000864:	08000a69 	.word	0x08000a69
 8000868:	08000a69 	.word	0x08000a69
 800086c:	08000a69 	.word	0x08000a69
 8000870:	08000a69 	.word	0x08000a69
 8000874:	08000a69 	.word	0x08000a69
 8000878:	08000a69 	.word	0x08000a69
 800087c:	08000961 	.word	0x08000961
 8000880:	08000a69 	.word	0x08000a69
 8000884:	08000973 	.word	0x08000973
 8000888:	08000a69 	.word	0x08000a69
 800088c:	08000985 	.word	0x08000985
 8000890:	0800098b 	.word	0x0800098b
 8000894:	08000991 	.word	0x08000991
 8000898:	08000997 	.word	0x08000997
 800089c:	080009a3 	.word	0x080009a3
 80008a0:	080009a9 	.word	0x080009a9
 80008a4:	080009af 	.word	0x080009af
 80008a8:	080009b5 	.word	0x080009b5
 80008ac:	080009bb 	.word	0x080009bb
 80008b0:	08000a69 	.word	0x08000a69
 80008b4:	080009c7 	.word	0x080009c7
 80008b8:	080009d3 	.word	0x080009d3
 80008bc:	08000a69 	.word	0x08000a69
 80008c0:	08000a69 	.word	0x08000a69
 80008c4:	080009e5 	.word	0x080009e5
 80008c8:	08000a69 	.word	0x08000a69
 80008cc:	080009f1 	.word	0x080009f1
 80008d0:	080009fd 	.word	0x080009fd
 80008d4:	08000a03 	.word	0x08000a03
 80008d8:	08000a09 	.word	0x08000a09
 80008dc:	08000a69 	.word	0x08000a69
 80008e0:	08000a15 	.word	0x08000a15
 80008e4:	08000a69 	.word	0x08000a69
 80008e8:	08000a69 	.word	0x08000a69
 80008ec:	08000a69 	.word	0x08000a69
 80008f0:	08000a69 	.word	0x08000a69
 80008f4:	08000a21 	.word	0x08000a21
 80008f8:	08000a69 	.word	0x08000a69
 80008fc:	08000967 	.word	0x08000967
 8000900:	0800096d 	.word	0x0800096d
 8000904:	08000979 	.word	0x08000979
 8000908:	0800097f 	.word	0x0800097f
 800090c:	08000a69 	.word	0x08000a69
 8000910:	08000a69 	.word	0x08000a69
 8000914:	08000a69 	.word	0x08000a69
 8000918:	0800099d 	.word	0x0800099d
 800091c:	08000a69 	.word	0x08000a69
 8000920:	08000a69 	.word	0x08000a69
 8000924:	08000a69 	.word	0x08000a69
 8000928:	08000a69 	.word	0x08000a69
 800092c:	08000a69 	.word	0x08000a69
 8000930:	080009c1 	.word	0x080009c1
 8000934:	080009cd 	.word	0x080009cd
 8000938:	08000a69 	.word	0x08000a69
 800093c:	080009d9 	.word	0x080009d9
 8000940:	080009df 	.word	0x080009df
 8000944:	08000a69 	.word	0x08000a69
 8000948:	080009eb 	.word	0x080009eb
 800094c:	080009f7 	.word	0x080009f7
 8000950:	08000a69 	.word	0x08000a69
 8000954:	08000a69 	.word	0x08000a69
 8000958:	08000a69 	.word	0x08000a69
 800095c:	08000a0f 	.word	0x08000a0f
		case 'A':
			setA();
 8000960:	f000 f8d8 	bl	8000b14 <setA>
			break;
 8000964:	e083      	b.n	8000a6e <displayLetter+0x292>
		case 'a':
			seta();
 8000966:	f000 f8ff 	bl	8000b68 <seta>
			break;
 800096a:	e080      	b.n	8000a6e <displayLetter+0x292>
		case 'b':
			setb();
 800096c:	f000 f926 	bl	8000bbc <setb>
			break;
 8000970:	e07d      	b.n	8000a6e <displayLetter+0x292>
		case 'C':
			setC();
 8000972:	f000 f94d 	bl	8000c10 <setC>
			break;
 8000976:	e07a      	b.n	8000a6e <displayLetter+0x292>
		case 'c':
			setc();
 8000978:	f000 f974 	bl	8000c64 <setc>
			break;
 800097c:	e077      	b.n	8000a6e <displayLetter+0x292>
		case 'd':
			setd();
 800097e:	f000 f99b 	bl	8000cb8 <setd>
			break;
 8000982:	e074      	b.n	8000a6e <displayLetter+0x292>
		case 'E':
			setE();
 8000984:	f000 f9c2 	bl	8000d0c <setE>
			break;
 8000988:	e071      	b.n	8000a6e <displayLetter+0x292>
		case 'F':
			setF();
 800098a:	f000 f9e9 	bl	8000d60 <setF>
			break;
 800098e:	e06e      	b.n	8000a6e <displayLetter+0x292>
		case 'G':
			setG();
 8000990:	f000 fa10 	bl	8000db4 <setG>
			break;
 8000994:	e06b      	b.n	8000a6e <displayLetter+0x292>
		case 'H':
			setH();
 8000996:	f000 fa37 	bl	8000e08 <setH>
			break;
 800099a:	e068      	b.n	8000a6e <displayLetter+0x292>
		case 'h':
			seth();
 800099c:	f000 fa5e 	bl	8000e5c <seth>
			break;
 80009a0:	e065      	b.n	8000a6e <displayLetter+0x292>
		case 'I':
			setI();
 80009a2:	f000 fa85 	bl	8000eb0 <setI>
			break;
 80009a6:	e062      	b.n	8000a6e <displayLetter+0x292>
		case 'J':
			setJ();
 80009a8:	f000 faac 	bl	8000f04 <setJ>
			break;
 80009ac:	e05f      	b.n	8000a6e <displayLetter+0x292>
		case 'K':
			setK();
 80009ae:	f000 fccb 	bl	8001348 <setK>
			break;
 80009b2:	e05c      	b.n	8000a6e <displayLetter+0x292>
		case 'L':
			setL();
 80009b4:	f000 fad0 	bl	8000f58 <setL>
			break;
 80009b8:	e059      	b.n	8000a6e <displayLetter+0x292>
		case 'M':
			setM();
 80009ba:	f000 fcef 	bl	800139c <setM>
			break;
 80009be:	e056      	b.n	8000a6e <displayLetter+0x292>
		case 'n':
			setn();
 80009c0:	f000 faf4 	bl	8000fac <setn>
			break;
 80009c4:	e053      	b.n	8000a6e <displayLetter+0x292>
		case 'O':
			setO();
 80009c6:	f000 fb1b 	bl	8001000 <setO>
			break;
 80009ca:	e050      	b.n	8000a6e <displayLetter+0x292>
		case 'o':
			seto();
 80009cc:	f000 fb42 	bl	8001054 <seto>
			break;
 80009d0:	e04d      	b.n	8000a6e <displayLetter+0x292>
		case 'P':
			setP();
 80009d2:	f000 fb69 	bl	80010a8 <setP>
			break;
 80009d6:	e04a      	b.n	8000a6e <displayLetter+0x292>
		case 'q':
			setq();
 80009d8:	f000 fb90 	bl	80010fc <setq>
			break;
 80009dc:	e047      	b.n	8000a6e <displayLetter+0x292>
		case 'r':
			setr();
 80009de:	f000 fbb7 	bl	8001150 <setr>
			break;
 80009e2:	e044      	b.n	8000a6e <displayLetter+0x292>
		case 'S':
			setS();
 80009e4:	f000 fbde 	bl	80011a4 <setS>
			break;
 80009e8:	e041      	b.n	8000a6e <displayLetter+0x292>
		case 't':
			sett();
 80009ea:	f000 fc05 	bl	80011f8 <sett>
			break;
 80009ee:	e03e      	b.n	8000a6e <displayLetter+0x292>
		case 'U':
			setU();
 80009f0:	f000 fc2c 	bl	800124c <setU>
			break;
 80009f4:	e03b      	b.n	8000a6e <displayLetter+0x292>
		case 'u':
			setu();
 80009f6:	f000 fc53 	bl	80012a0 <setu>
			break;
 80009fa:	e038      	b.n	8000a6e <displayLetter+0x292>
		case 'V':
			setV();
 80009fc:	f000 fcf4 	bl	80013e8 <setV>
			break;
 8000a00:	e035      	b.n	8000a6e <displayLetter+0x292>
		case 'W':
			setW();
 8000a02:	f000 fd1b 	bl	800143c <setW>
			break;
 8000a06:	e032      	b.n	8000a6e <displayLetter+0x292>
		case 'X':
			setX();
 8000a08:	f000 fd42 	bl	8001490 <setX>
			break;
 8000a0c:	e02f      	b.n	8000a6e <displayLetter+0x292>
		case 'y':
			sety();
 8000a0e:	f000 fc71 	bl	80012f4 <sety>
			break;
 8000a12:	e02c      	b.n	8000a6e <displayLetter+0x292>
		case 'Z':
			setZ();
 8000a14:	f000 fd66 	bl	80014e4 <setZ>
			break;
 8000a18:	e029      	b.n	8000a6e <displayLetter+0x292>
		case ' ':
			resetAllSegments();
 8000a1a:	f000 f82d 	bl	8000a78 <resetAllSegments>
			break;
 8000a1e:	e026      	b.n	8000a6e <displayLetter+0x292>
		case '_':
			setLine();
 8000a20:	f000 ff2e 	bl	8001880 <setLine>
			break;
 8000a24:	e023      	b.n	8000a6e <displayLetter+0x292>
		case '-':
			setDash();
 8000a26:	f000 ff63 	bl	80018f0 <setDash>
			break;
 8000a2a:	e020      	b.n	8000a6e <displayLetter+0x292>


		case '1':
			setOne();
 8000a2c:	f000 fd84 	bl	8001538 <setOne>
			break;
 8000a30:	e01d      	b.n	8000a6e <displayLetter+0x292>
		case '2':
			setTwo();
 8000a32:	f000 fdab 	bl	800158c <setTwo>
			break;
 8000a36:	e01a      	b.n	8000a6e <displayLetter+0x292>
		case '3':
			setThree();
 8000a38:	f000 fdd2 	bl	80015e0 <setThree>
			break;
 8000a3c:	e017      	b.n	8000a6e <displayLetter+0x292>
		case '4':
			setFour();
 8000a3e:	f000 fdf9 	bl	8001634 <setFour>
			break;
 8000a42:	e014      	b.n	8000a6e <displayLetter+0x292>
		case '5':
			setFive();
 8000a44:	f000 fe20 	bl	8001688 <setFive>
			break;
 8000a48:	e011      	b.n	8000a6e <displayLetter+0x292>
		case '6':
			setSix();
 8000a4a:	f000 fe47 	bl	80016dc <setSix>
			break;
 8000a4e:	e00e      	b.n	8000a6e <displayLetter+0x292>
		case '7':
			setSeven();
 8000a50:	f000 fe6e 	bl	8001730 <setSeven>
			break;
 8000a54:	e00b      	b.n	8000a6e <displayLetter+0x292>
		case '8':
			setEight();
 8000a56:	f000 fe95 	bl	8001784 <setEight>
			break;
 8000a5a:	e008      	b.n	8000a6e <displayLetter+0x292>
		case '9':
			setNine();
 8000a5c:	f000 febc 	bl	80017d8 <setNine>
			break;
 8000a60:	e005      	b.n	8000a6e <displayLetter+0x292>
		case '0':
			setZero();
 8000a62:	f000 fee3 	bl	800182c <setZero>
			break;
 8000a66:	e002      	b.n	8000a6e <displayLetter+0x292>
		default:
			setDot();
 8000a68:	f000 ff38 	bl	80018dc <setDot>
			break;
 8000a6c:	bf00      	nop
	}
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop

08000a78 <resetAllSegments>:
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
}

void resetAllSegments(void){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a82:	f7ff fd99 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000a86:	2101      	movs	r1, #1
 8000a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8c:	f7ff fd94 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000a90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a98:	f7ff fd8e 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000a9c:	2120      	movs	r1, #32
 8000a9e:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <resetAllSegments+0x58>)
 8000aa0:	f7ff fd8a 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8000aa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aac:	f7ff fd84 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000ab0:	2108      	movs	r1, #8
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab6:	f7ff fd7f 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000aba:	2110      	movs	r1, #16
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <resetAllSegments+0x58>)
 8000abe:	f7ff fd7b 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentDP_Pin);
 8000ac2:	2102      	movs	r1, #2
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <resetAllSegments+0x58>)
 8000ac6:	f7ff fd77 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	48000400 	.word	0x48000400

08000ad4 <resetAllDigits>:

void resetAllDigits(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, digit1_Pin);
 8000ad8:	2101      	movs	r1, #1
 8000ada:	480d      	ldr	r0, [pc, #52]	; (8000b10 <resetAllDigits+0x3c>)
 8000adc:	f7ff fd7a 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, digit2_Pin);
 8000ae0:	2110      	movs	r1, #16
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae6:	f7ff fd75 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, digit3_Pin);
 8000aea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af2:	f7ff fd6f 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, digit4_Pin);
 8000af6:	2104      	movs	r1, #4
 8000af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afc:	f7ff fd6a 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, digitTime_Pin);
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b06:	f7ff fd65 	bl	80005d4 <LL_GPIO_ResetOutputPin>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	48000400 	.word	0x48000400

08000b14 <setA>:

void setA(void){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000b18:	2102      	movs	r1, #2
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1e:	f7ff fd59 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000b22:	2101      	movs	r1, #1
 8000b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b28:	f7ff fd54 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b34:	f7ff fd4e 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000b38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b40:	f7ff fd48 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000b44:	2108      	movs	r1, #8
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f7ff fd43 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000b4e:	2110      	movs	r1, #16
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <setA+0x50>)
 8000b52:	f7ff fd3f 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	// reset D
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000b56:	2120      	movs	r1, #32
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <setA+0x50>)
 8000b5a:	f7ff fd2d 	bl	80005b8 <LL_GPIO_SetOutputPin>

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	48000400 	.word	0x48000400

08000b68 <seta>:
void seta(void){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b72:	f7ff fd2f 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000b76:	2101      	movs	r1, #1
 8000b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7c:	f7ff fd2a 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000b80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f7ff fd24 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000b8c:	2120      	movs	r1, #32
 8000b8e:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <seta+0x50>)
 8000b90:	f7ff fd20 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000b94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9c:	f7ff fd1a 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000ba0:	2110      	movs	r1, #16
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <seta+0x50>)
 8000ba4:	f7ff fd16 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	// reset f
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000ba8:	2108      	movs	r1, #8
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bae:	f7ff fd03 	bl	80005b8 <LL_GPIO_SetOutputPin>

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	48000400 	.word	0x48000400

08000bbc <setb>:
void setb(void){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc8:	f7ff fd04 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000bcc:	2120      	movs	r1, #32
 8000bce:	480f      	ldr	r0, [pc, #60]	; (8000c0c <setb+0x50>)
 8000bd0:	f7ff fd00 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000bd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bdc:	f7ff fcfa 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000be0:	2108      	movs	r1, #8
 8000be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be6:	f7ff fcf5 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000bea:	2110      	movs	r1, #16
 8000bec:	4807      	ldr	r0, [pc, #28]	; (8000c0c <setb+0x50>)
 8000bee:	f7ff fcf1 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	// reset a,b
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf8:	f7ff fcde 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c02:	f7ff fcd9 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	48000400 	.word	0x48000400

08000c10 <setC>:
void setC(void){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000c14:	2102      	movs	r1, #2
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1a:	f7ff fcdb 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000c1e:	2120      	movs	r1, #32
 8000c20:	480f      	ldr	r0, [pc, #60]	; (8000c60 <setC+0x50>)
 8000c22:	f7ff fcd7 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000c26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2e:	f7ff fcd1 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000c32:	2108      	movs	r1, #8
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c38:	f7ff fccc 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	// reset B,C,G
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c42:	f7ff fcb9 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000c46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4e:	f7ff fcb3 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000c52:	2110      	movs	r1, #16
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <setC+0x50>)
 8000c56:	f7ff fcaf 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	48000400 	.word	0x48000400

08000c64 <setc>:
void setc(void){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000c68:	2120      	movs	r1, #32
 8000c6a:	4812      	ldr	r0, [pc, #72]	; (8000cb4 <setc+0x50>)
 8000c6c:	f7ff fcb2 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000c70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c78:	f7ff fcac 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000c7c:	2110      	movs	r1, #16
 8000c7e:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <setc+0x50>)
 8000c80:	f7ff fca8 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000c84:	2102      	movs	r1, #2
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f7ff fc95 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000c8e:	2101      	movs	r1, #1
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c94:	f7ff fc90 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000c98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca0:	f7ff fc8a 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000ca4:	2108      	movs	r1, #8
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000caa:	f7ff fc85 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	48000400 	.word	0x48000400

08000cb8 <setd>:
void setd(void){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc2:	f7ff fc87 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000cc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cce:	f7ff fc81 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000cd2:	2120      	movs	r1, #32
 8000cd4:	480c      	ldr	r0, [pc, #48]	; (8000d08 <setd+0x50>)
 8000cd6:	f7ff fc7d 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000cda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce2:	f7ff fc77 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000ce6:	2110      	movs	r1, #16
 8000ce8:	4807      	ldr	r0, [pc, #28]	; (8000d08 <setd+0x50>)
 8000cea:	f7ff fc73 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000cee:	2102      	movs	r1, #2
 8000cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf4:	f7ff fc60 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000cf8:	2108      	movs	r1, #8
 8000cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfe:	f7ff fc5b 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	48000400 	.word	0x48000400

08000d0c <setE>:
void setE(void){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000d10:	2102      	movs	r1, #2
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d16:	f7ff fc5d 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000d1a:	2120      	movs	r1, #32
 8000d1c:	480f      	ldr	r0, [pc, #60]	; (8000d5c <setE+0x50>)
 8000d1e:	f7ff fc59 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000d22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2a:	f7ff fc53 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000d2e:	2108      	movs	r1, #8
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d34:	f7ff fc4e 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000d38:	2110      	movs	r1, #16
 8000d3a:	4808      	ldr	r0, [pc, #32]	; (8000d5c <setE+0x50>)
 8000d3c:	f7ff fc4a 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000d40:	2101      	movs	r1, #1
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d46:	f7ff fc37 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000d4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d52:	f7ff fc31 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	48000400 	.word	0x48000400

08000d60 <setF>:
void setF(void){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000d64:	2102      	movs	r1, #2
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6a:	f7ff fc33 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000d6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d76:	f7ff fc2d 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000d7a:	2108      	movs	r1, #8
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d80:	f7ff fc28 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000d84:	2110      	movs	r1, #16
 8000d86:	480a      	ldr	r0, [pc, #40]	; (8000db0 <setF+0x50>)
 8000d88:	f7ff fc24 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d92:	f7ff fc11 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9e:	f7ff fc0b 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000da2:	2120      	movs	r1, #32
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <setF+0x50>)
 8000da6:	f7ff fc07 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	48000400 	.word	0x48000400

08000db4 <setG>:
void setG(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8000db8:	2102      	movs	r1, #2
 8000dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbe:	f7ff fc09 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000dc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dca:	f7ff fc03 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000dce:	2120      	movs	r1, #32
 8000dd0:	480c      	ldr	r0, [pc, #48]	; (8000e04 <setG+0x50>)
 8000dd2:	f7ff fbff 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000dd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dde:	f7ff fbf9 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000de2:	2108      	movs	r1, #8
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de8:	f7ff fbf4 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000dec:	2101      	movs	r1, #1
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f7ff fbe1 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000df6:	2110      	movs	r1, #16
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <setG+0x50>)
 8000dfa:	f7ff fbdd 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	48000400 	.word	0x48000400

08000e08 <setH>:
void setH(void){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e12:	f7ff fbdf 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000e16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1e:	f7ff fbd9 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000e22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2a:	f7ff fbd3 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000e2e:	2108      	movs	r1, #8
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e34:	f7ff fbce 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4807      	ldr	r0, [pc, #28]	; (8000e58 <setH+0x50>)
 8000e3c:	f7ff fbca 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000e40:	2102      	movs	r1, #2
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e46:	f7ff fbb7 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <setH+0x50>)
 8000e4e:	f7ff fbb3 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	48000400 	.word	0x48000400

08000e5c <seth>:
void seth(void){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e68:	f7ff fbb4 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000e6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e74:	f7ff fbae 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000e78:	2108      	movs	r1, #8
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7e:	f7ff fba9 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000e82:	2110      	movs	r1, #16
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <seth+0x50>)
 8000e86:	f7ff fba5 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e90:	f7ff fb92 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000e94:	2101      	movs	r1, #1
 8000e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9a:	f7ff fb8d 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000e9e:	2120      	movs	r1, #32
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <seth+0x50>)
 8000ea2:	f7ff fb89 	bl	80005b8 <LL_GPIO_SetOutputPin>

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	48000400 	.word	0x48000400

08000eb0 <setI>:
void setI(void){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000eb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebc:	f7ff fb8a 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000ec0:	2108      	movs	r1, #8
 8000ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec6:	f7ff fb85 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000eca:	2102      	movs	r1, #2
 8000ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed0:	f7ff fb72 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eda:	f7ff fb6d 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000ede:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee6:	f7ff fb67 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000eea:	2120      	movs	r1, #32
 8000eec:	4804      	ldr	r0, [pc, #16]	; (8000f00 <setI+0x50>)
 8000eee:	f7ff fb63 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000ef2:	2110      	movs	r1, #16
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <setI+0x50>)
 8000ef6:	f7ff fb5f 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	48000400 	.word	0x48000400

08000f04 <setJ>:
void setJ(void){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8000f08:	2101      	movs	r1, #1
 8000f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0e:	f7ff fb61 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000f12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1a:	f7ff fb5b 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000f1e:	2120      	movs	r1, #32
 8000f20:	480c      	ldr	r0, [pc, #48]	; (8000f54 <setJ+0x50>)
 8000f22:	f7ff fb57 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000f26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2e:	f7ff fb51 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000f32:	2102      	movs	r1, #2
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f38:	f7ff fb3e 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000f3c:	2108      	movs	r1, #8
 8000f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f42:	f7ff fb39 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000f46:	2110      	movs	r1, #16
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <setJ+0x50>)
 8000f4a:	f7ff fb35 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	48000400 	.word	0x48000400

08000f58 <setL>:
void setL(void){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	4812      	ldr	r0, [pc, #72]	; (8000fa8 <setL+0x50>)
 8000f60:	f7ff fb38 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6c:	f7ff fb32 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8000f70:	2108      	movs	r1, #8
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f76:	f7ff fb2d 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f80:	f7ff fb1a 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000f84:	2101      	movs	r1, #1
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8a:	f7ff fb15 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8000f8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f7ff fb0f 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8000f9a:	2110      	movs	r1, #16
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <setL+0x50>)
 8000f9e:	f7ff fb0b 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	48000400 	.word	0x48000400

08000fac <setn>:
void setn(void){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8000fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f7ff fb0c 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8000fbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc4:	f7ff fb06 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8000fc8:	2110      	movs	r1, #16
 8000fca:	480c      	ldr	r0, [pc, #48]	; (8000ffc <setn+0x50>)
 8000fcc:	f7ff fb02 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd6:	f7ff faef 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8000fda:	2101      	movs	r1, #1
 8000fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe0:	f7ff faea 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8000fe4:	2120      	movs	r1, #32
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <setn+0x50>)
 8000fe8:	f7ff fae6 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8000fec:	2108      	movs	r1, #8
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff2:	f7ff fae1 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	48000400 	.word	0x48000400

08001000 <setO>:
void setO(void){
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001004:	2102      	movs	r1, #2
 8001006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100a:	f7ff fae3 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800100e:	2101      	movs	r1, #1
 8001010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001014:	f7ff fade 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001018:	f44f 7180 	mov.w	r1, #256	; 0x100
 800101c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001020:	f7ff fad8 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001024:	2120      	movs	r1, #32
 8001026:	480a      	ldr	r0, [pc, #40]	; (8001050 <setO+0x50>)
 8001028:	f7ff fad4 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800102c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001034:	f7ff face 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001038:	2108      	movs	r1, #8
 800103a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103e:	f7ff fac9 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001042:	2110      	movs	r1, #16
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <setO+0x50>)
 8001046:	f7ff fab7 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	48000400 	.word	0x48000400

08001054 <seto>:
void seto(void){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001060:	f7ff fab8 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001064:	2120      	movs	r1, #32
 8001066:	480f      	ldr	r0, [pc, #60]	; (80010a4 <seto+0x50>)
 8001068:	f7ff fab4 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800106c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f7ff faae 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001078:	2110      	movs	r1, #16
 800107a:	480a      	ldr	r0, [pc, #40]	; (80010a4 <seto+0x50>)
 800107c:	f7ff faaa 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001080:	2102      	movs	r1, #2
 8001082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001086:	f7ff fa97 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800108a:	2101      	movs	r1, #1
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001090:	f7ff fa92 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001094:	2108      	movs	r1, #8
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f7ff fa8d 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	48000400 	.word	0x48000400

080010a8 <setP>:
void setP(void){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80010ac:	2102      	movs	r1, #2
 80010ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b2:	f7ff fa8f 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80010b6:	2101      	movs	r1, #1
 80010b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010bc:	f7ff fa8a 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80010c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c8:	f7ff fa84 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80010cc:	2108      	movs	r1, #8
 80010ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d2:	f7ff fa7f 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80010d6:	2110      	movs	r1, #16
 80010d8:	4807      	ldr	r0, [pc, #28]	; (80010f8 <setP+0x50>)
 80010da:	f7ff fa7b 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80010de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e6:	f7ff fa67 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 80010ea:	2120      	movs	r1, #32
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <setP+0x50>)
 80010ee:	f7ff fa63 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	48000400 	.word	0x48000400

080010fc <setq>:
void setq(void){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001100:	2102      	movs	r1, #2
 8001102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001106:	f7ff fa65 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800110a:	2101      	movs	r1, #1
 800110c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001110:	f7ff fa60 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001114:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111c:	f7ff fa5a 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001120:	2108      	movs	r1, #8
 8001122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001126:	f7ff fa55 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800112a:	2110      	movs	r1, #16
 800112c:	4807      	ldr	r0, [pc, #28]	; (800114c <setq+0x50>)
 800112e:	f7ff fa51 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001132:	2120      	movs	r1, #32
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <setq+0x50>)
 8001136:	f7ff fa3f 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800113a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800113e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001142:	f7ff fa39 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	48000400 	.word	0x48000400

08001150 <setr>:
void setr(void){
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001154:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f7ff fa3a 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001160:	2110      	movs	r1, #16
 8001162:	480f      	ldr	r0, [pc, #60]	; (80011a0 <setr+0x50>)
 8001164:	f7ff fa36 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001168:	2102      	movs	r1, #2
 800116a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116e:	f7ff fa23 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001172:	2101      	movs	r1, #1
 8001174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001178:	f7ff fa1e 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 800117c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001184:	f7ff fa18 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001188:	2120      	movs	r1, #32
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <setr+0x50>)
 800118c:	f7ff fa14 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001190:	2108      	movs	r1, #8
 8001192:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001196:	f7ff fa0f 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	48000400 	.word	0x48000400

080011a4 <setS>:
void setS(void){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80011a8:	2102      	movs	r1, #2
 80011aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ae:	f7ff fa11 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80011b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ba:	f7ff fa0b 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80011be:	2120      	movs	r1, #32
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <setS+0x50>)
 80011c2:	f7ff fa07 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80011c6:	2108      	movs	r1, #8
 80011c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011cc:	f7ff fa02 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80011d0:	2110      	movs	r1, #16
 80011d2:	4808      	ldr	r0, [pc, #32]	; (80011f4 <setS+0x50>)
 80011d4:	f7ff f9fe 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80011d8:	2101      	movs	r1, #1
 80011da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011de:	f7ff f9eb 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80011e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ea:	f7ff f9e5 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	48000400 	.word	0x48000400

080011f8 <sett>:
void sett(void){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80011fc:	2120      	movs	r1, #32
 80011fe:	4812      	ldr	r0, [pc, #72]	; (8001248 <sett+0x50>)
 8001200:	f7ff f9e8 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001204:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120c:	f7ff f9e2 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001210:	2108      	movs	r1, #8
 8001212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001216:	f7ff f9dd 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800121a:	2110      	movs	r1, #16
 800121c:	480a      	ldr	r0, [pc, #40]	; (8001248 <sett+0x50>)
 800121e:	f7ff f9d9 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001222:	2102      	movs	r1, #2
 8001224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001228:	f7ff f9c6 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800122c:	2101      	movs	r1, #1
 800122e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001232:	f7ff f9c1 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001236:	f44f 7180 	mov.w	r1, #256	; 0x100
 800123a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123e:	f7ff f9bb 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	48000400 	.word	0x48000400

0800124c <setU>:
void setU(void){
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001250:	2101      	movs	r1, #1
 8001252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001256:	f7ff f9bd 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800125a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800125e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001262:	f7ff f9b7 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001266:	2120      	movs	r1, #32
 8001268:	480c      	ldr	r0, [pc, #48]	; (800129c <setU+0x50>)
 800126a:	f7ff f9b3 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800126e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001276:	f7ff f9ad 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800127a:	2108      	movs	r1, #8
 800127c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001280:	f7ff f9a8 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001284:	2102      	movs	r1, #2
 8001286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128a:	f7ff f995 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800128e:	2110      	movs	r1, #16
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <setU+0x50>)
 8001292:	f7ff f991 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	48000400 	.word	0x48000400

080012a0 <setu>:
void setu(void){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80012a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ac:	f7ff f992 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80012b0:	2120      	movs	r1, #32
 80012b2:	480f      	ldr	r0, [pc, #60]	; (80012f0 <setu+0x50>)
 80012b4:	f7ff f98e 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80012b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c0:	f7ff f988 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 80012c4:	2102      	movs	r1, #2
 80012c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ca:	f7ff f975 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80012ce:	2101      	movs	r1, #1
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d4:	f7ff f970 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80012d8:	2108      	movs	r1, #8
 80012da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012de:	f7ff f96b 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 80012e2:	2110      	movs	r1, #16
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <setu+0x50>)
 80012e6:	f7ff f967 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	48000400 	.word	0x48000400

080012f4 <sety>:
void sety(void){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80012f8:	2101      	movs	r1, #1
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f7ff f969 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001302:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130a:	f7ff f963 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800130e:	2120      	movs	r1, #32
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <sety+0x50>)
 8001312:	f7ff f95f 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001316:	2108      	movs	r1, #8
 8001318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131c:	f7ff f95a 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001320:	2110      	movs	r1, #16
 8001322:	4808      	ldr	r0, [pc, #32]	; (8001344 <sety+0x50>)
 8001324:	f7ff f956 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001328:	2102      	movs	r1, #2
 800132a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132e:	f7ff f943 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001332:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	f7ff f93d 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	48000400 	.word	0x48000400

08001348 <setK>:


// Disgusting letters :D
void setK(void){
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800134c:	2102      	movs	r1, #2
 800134e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001352:	f7ff f93f 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001356:	f44f 7180 	mov.w	r1, #256	; 0x100
 800135a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135e:	f7ff f939 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001362:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136a:	f7ff f933 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800136e:	2108      	movs	r1, #8
 8001370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001374:	f7ff f92e 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001378:	2110      	movs	r1, #16
 800137a:	4807      	ldr	r0, [pc, #28]	; (8001398 <setK+0x50>)
 800137c:	f7ff f92a 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001380:	2101      	movs	r1, #1
 8001382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001386:	f7ff f917 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800138a:	2120      	movs	r1, #32
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <setK+0x50>)
 800138e:	f7ff f913 	bl	80005b8 <LL_GPIO_SetOutputPin>

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	48000400 	.word	0x48000400

0800139c <setM>:
void setM(void){
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80013a0:	2102      	movs	r1, #2
 80013a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a6:	f7ff f915 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80013aa:	2101      	movs	r1, #1
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b0:	f7ff f910 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80013b4:	2120      	movs	r1, #32
 80013b6:	480b      	ldr	r0, [pc, #44]	; (80013e4 <setM+0x48>)
 80013b8:	f7ff f90c 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80013bc:	2108      	movs	r1, #8
 80013be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c2:	f7ff f907 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80013c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ce:	f7ff f8f3 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80013d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013da:	f7ff f8ed 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	48000400 	.word	0x48000400

080013e8 <setV>:
void setV(void){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80013ec:	2101      	movs	r1, #1
 80013ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f2:	f7ff f8ef 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80013f6:	2120      	movs	r1, #32
 80013f8:	480f      	ldr	r0, [pc, #60]	; (8001438 <setV+0x50>)
 80013fa:	f7ff f8eb 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80013fe:	2108      	movs	r1, #8
 8001400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001404:	f7ff f8e6 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001408:	2102      	movs	r1, #2
 800140a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140e:	f7ff f8d3 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141a:	f7ff f8cd 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800141e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001426:	f7ff f8c7 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800142a:	2110      	movs	r1, #16
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <setV+0x50>)
 800142e:	f7ff f8c3 	bl	80005b8 <LL_GPIO_SetOutputPin>

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	48000400 	.word	0x48000400

0800143c <setW>:
void setW(void){
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001440:	2101      	movs	r1, #1
 8001442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001446:	f7ff f8c5 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800144a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800144e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001452:	f7ff f8bf 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001456:	2120      	movs	r1, #32
 8001458:	480c      	ldr	r0, [pc, #48]	; (800148c <setW+0x50>)
 800145a:	f7ff f8bb 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 800145e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001466:	f7ff f8b5 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800146a:	2108      	movs	r1, #8
 800146c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001470:	f7ff f8b0 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001474:	2110      	movs	r1, #16
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <setW+0x50>)
 8001478:	f7ff f8ac 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800147c:	2102      	movs	r1, #2
 800147e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001482:	f7ff f899 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	48000400 	.word	0x48000400

08001490 <setX>:
void setX(void){
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001494:	2102      	movs	r1, #2
 8001496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149a:	f7ff f89b 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 800149e:	2120      	movs	r1, #32
 80014a0:	480f      	ldr	r0, [pc, #60]	; (80014e0 <setX+0x50>)
 80014a2:	f7ff f897 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80014a6:	2110      	movs	r1, #16
 80014a8:	480d      	ldr	r0, [pc, #52]	; (80014e0 <setX+0x50>)
 80014aa:	f7ff f893 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80014ae:	2101      	movs	r1, #1
 80014b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b4:	f7ff f880 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80014b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c0:	f7ff f87a 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80014c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014cc:	f7ff f874 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80014d0:	2108      	movs	r1, #8
 80014d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d6:	f7ff f86f 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	48000400 	.word	0x48000400

080014e4 <setZ>:
void setZ(void){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80014e8:	2102      	movs	r1, #2
 80014ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ee:	f7ff f871 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80014f2:	2101      	movs	r1, #1
 80014f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f8:	f7ff f86c 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80014fc:	2120      	movs	r1, #32
 80014fe:	480d      	ldr	r0, [pc, #52]	; (8001534 <setZ+0x50>)
 8001500:	f7ff f868 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001504:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150c:	f7ff f862 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001510:	2110      	movs	r1, #16
 8001512:	4808      	ldr	r0, [pc, #32]	; (8001534 <setZ+0x50>)
 8001514:	f7ff f85e 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 8001518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800151c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001520:	f7ff f84a 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001524:	2108      	movs	r1, #8
 8001526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152a:	f7ff f845 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	48000400 	.word	0x48000400

08001538 <setOne>:

// numbers
void setOne(void){
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800153c:	2101      	movs	r1, #1
 800153e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001542:	f7ff f847 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154e:	f7ff f841 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001552:	2102      	movs	r1, #2
 8001554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001558:	f7ff f82e 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800155c:	2120      	movs	r1, #32
 800155e:	480a      	ldr	r0, [pc, #40]	; (8001588 <setOne+0x50>)
 8001560:	f7ff f82a 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001564:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156c:	f7ff f824 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001570:	2108      	movs	r1, #8
 8001572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001576:	f7ff f81f 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800157a:	2110      	movs	r1, #16
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <setOne+0x50>)
 800157e:	f7ff f81b 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	48000400 	.word	0x48000400

0800158c <setTwo>:
void setTwo(void){
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001590:	2102      	movs	r1, #2
 8001592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001596:	f7ff f81d 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800159a:	2101      	movs	r1, #1
 800159c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a0:	f7ff f818 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80015a4:	2120      	movs	r1, #32
 80015a6:	480d      	ldr	r0, [pc, #52]	; (80015dc <setTwo+0x50>)
 80015a8:	f7ff f814 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80015ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b4:	f7ff f80e 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80015b8:	2110      	movs	r1, #16
 80015ba:	4808      	ldr	r0, [pc, #32]	; (80015dc <setTwo+0x50>)
 80015bc:	f7ff f80a 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80015c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c8:	f7fe fff6 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80015cc:	2108      	movs	r1, #8
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d2:	f7fe fff1 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	48000400 	.word	0x48000400

080015e0 <setThree>:
void setThree(void){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80015e4:	2102      	movs	r1, #2
 80015e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ea:	f7fe fff3 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80015ee:	2101      	movs	r1, #1
 80015f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f4:	f7fe ffee 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80015f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001600:	f7fe ffe8 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001604:	2120      	movs	r1, #32
 8001606:	480a      	ldr	r0, [pc, #40]	; (8001630 <setThree+0x50>)
 8001608:	f7fe ffe4 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800160c:	2110      	movs	r1, #16
 800160e:	4808      	ldr	r0, [pc, #32]	; (8001630 <setThree+0x50>)
 8001610:	f7fe ffe0 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001614:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161c:	f7fe ffcc 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001620:	2108      	movs	r1, #8
 8001622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001626:	f7fe ffc7 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	48000400 	.word	0x48000400

08001634 <setFour>:
void setFour(void){
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001638:	2101      	movs	r1, #1
 800163a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163e:	f7fe ffc9 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164a:	f7fe ffc3 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800164e:	2108      	movs	r1, #8
 8001650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001654:	f7fe ffbe 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001658:	2110      	movs	r1, #16
 800165a:	480a      	ldr	r0, [pc, #40]	; (8001684 <setFour+0x50>)
 800165c:	f7fe ffba 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 8001660:	2102      	movs	r1, #2
 8001662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001666:	f7fe ffa7 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 800166a:	2120      	movs	r1, #32
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <setFour+0x50>)
 800166e:	f7fe ffa3 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001672:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167a:	f7fe ff9d 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	48000400 	.word	0x48000400

08001688 <setFive>:
void setFive(void){
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 800168c:	2102      	movs	r1, #2
 800168e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001692:	f7fe ff9f 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800169a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169e:	f7fe ff99 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80016a2:	2120      	movs	r1, #32
 80016a4:	480c      	ldr	r0, [pc, #48]	; (80016d8 <setFive+0x50>)
 80016a6:	f7fe ff95 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80016aa:	2108      	movs	r1, #8
 80016ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b0:	f7fe ff90 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80016b4:	2110      	movs	r1, #16
 80016b6:	4808      	ldr	r0, [pc, #32]	; (80016d8 <setFive+0x50>)
 80016b8:	f7fe ff8c 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 80016bc:	2101      	movs	r1, #1
 80016be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c2:	f7fe ff79 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80016c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ce:	f7fe ff73 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	48000400 	.word	0x48000400

080016dc <setSix>:
void setSix(void){
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80016e0:	2102      	movs	r1, #2
 80016e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e6:	f7fe ff75 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80016ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f2:	f7fe ff6f 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80016f6:	2120      	movs	r1, #32
 80016f8:	480c      	ldr	r0, [pc, #48]	; (800172c <setSix+0x50>)
 80016fa:	f7fe ff6b 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80016fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001706:	f7fe ff65 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 800170a:	2108      	movs	r1, #8
 800170c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001710:	f7fe ff60 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 8001714:	2110      	movs	r1, #16
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <setSix+0x50>)
 8001718:	f7fe ff5c 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 800171c:	2101      	movs	r1, #1
 800171e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001722:	f7fe ff49 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	48000400 	.word	0x48000400

08001730 <setSeven>:
void setSeven(void){
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001734:	2102      	movs	r1, #2
 8001736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173a:	f7fe ff4b 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800173e:	2101      	movs	r1, #1
 8001740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001744:	f7fe ff46 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001750:	f7fe ff40 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentD_Pin);
 8001754:	2120      	movs	r1, #32
 8001756:	480a      	ldr	r0, [pc, #40]	; (8001780 <setSeven+0x50>)
 8001758:	f7fe ff2e 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 800175c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001764:	f7fe ff28 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 8001768:	2108      	movs	r1, #8
 800176a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176e:	f7fe ff23 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 8001772:	2110      	movs	r1, #16
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <setSeven+0x50>)
 8001776:	f7fe ff1f 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	48000400 	.word	0x48000400

08001784 <setEight>:
void setEight(void){
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001788:	2102      	movs	r1, #2
 800178a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178e:	f7fe ff21 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 8001792:	2101      	movs	r1, #1
 8001794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001798:	f7fe ff1c 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 800179c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a4:	f7fe ff16 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80017a8:	2120      	movs	r1, #32
 80017aa:	480a      	ldr	r0, [pc, #40]	; (80017d4 <setEight+0x50>)
 80017ac:	f7fe ff12 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 80017b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b8:	f7fe ff0c 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 80017bc:	2108      	movs	r1, #8
 80017be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c2:	f7fe ff07 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80017c6:	2110      	movs	r1, #16
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <setEight+0x50>)
 80017ca:	f7fe ff03 	bl	80005d4 <LL_GPIO_ResetOutputPin>
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	48000400 	.word	0x48000400

080017d8 <setNine>:
void setNine(void){
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 80017dc:	2102      	movs	r1, #2
 80017de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e2:	f7fe fef7 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 80017e6:	2101      	movs	r1, #1
 80017e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ec:	f7fe fef2 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 80017f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f8:	f7fe feec 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 80017fc:	2120      	movs	r1, #32
 80017fe:	480a      	ldr	r0, [pc, #40]	; (8001828 <setNine+0x50>)
 8001800:	f7fe fee8 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001804:	2108      	movs	r1, #8
 8001806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180a:	f7fe fee3 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 800180e:	2110      	movs	r1, #16
 8001810:	4805      	ldr	r0, [pc, #20]	; (8001828 <setNine+0x50>)
 8001812:	f7fe fedf 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 8001816:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800181a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181e:	f7fe fecb 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	48000400 	.word	0x48000400

0800182c <setZero>:
void setZero(void){
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, segmentA_Pin);
 8001830:	2102      	movs	r1, #2
 8001832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001836:	f7fe fecd 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin);
 800183a:	2101      	movs	r1, #1
 800183c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001840:	f7fe fec8 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentC_Pin);
 8001844:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184c:	f7fe fec2 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001850:	2120      	movs	r1, #32
 8001852:	480a      	ldr	r0, [pc, #40]	; (800187c <setZero+0x50>)
 8001854:	f7fe febe 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentE_Pin);
 8001858:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800185c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001860:	f7fe feb8 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, segmentF_Pin);
 8001864:	2108      	movs	r1, #8
 8001866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186a:	f7fe feb3 	bl	80005d4 <LL_GPIO_ResetOutputPin>
	//reset
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 800186e:	2110      	movs	r1, #16
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <setZero+0x50>)
 8001872:	f7fe fea1 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	48000400 	.word	0x48000400

08001880 <setLine>:

void setLine(void){
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentD_Pin);
 8001884:	2120      	movs	r1, #32
 8001886:	4814      	ldr	r0, [pc, #80]	; (80018d8 <setLine+0x58>)
 8001888:	f7fe fea4 	bl	80005d4 <LL_GPIO_ResetOutputPin>

	LL_GPIO_SetOutputPin(GPIOA, segmentA_Pin);
 800188c:	2102      	movs	r1, #2
 800188e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001892:	f7fe fe91 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentB_Pin);
 8001896:	2101      	movs	r1, #1
 8001898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189c:	f7fe fe8c 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentC_Pin);
 80018a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a8:	f7fe fe86 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentE_Pin);
 80018ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b4:	f7fe fe80 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, segmentF_Pin);
 80018b8:	2108      	movs	r1, #8
 80018ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018be:	f7fe fe7b 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentG_Pin);
 80018c2:	2110      	movs	r1, #16
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <setLine+0x58>)
 80018c6:	f7fe fe77 	bl	80005b8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, segmentDP_Pin);
 80018ca:	2102      	movs	r1, #2
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <setLine+0x58>)
 80018ce:	f7fe fe73 	bl	80005b8 <LL_GPIO_SetOutputPin>
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	48000400 	.word	0x48000400

080018dc <setDot>:
// and dot to end
void setDot(void){
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin);
 80018e0:	2102      	movs	r1, #2
 80018e2:	4802      	ldr	r0, [pc, #8]	; (80018ec <setDot+0x10>)
 80018e4:	f7fe fe76 	bl	80005d4 <LL_GPIO_ResetOutputPin>
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	48000400 	.word	0x48000400

080018f0 <setDash>:

void setDash(void){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, segmentG_Pin);
 80018f4:	2110      	movs	r1, #16
 80018f6:	4802      	ldr	r0, [pc, #8]	; (8001900 <setDash+0x10>)
 80018f8:	f7fe fe6c 	bl	80005d4 <LL_GPIO_ResetOutputPin>
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	48000400 	.word	0x48000400

08001904 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	4907      	ldr	r1, [pc, #28]	; (8001930 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4313      	orrs	r3, r2
 8001916:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800191a:	695a      	ldr	r2, [r3, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4013      	ands	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001922:	68fb      	ldr	r3, [r7, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	40021000 	.word	0x40021000

08001934 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800193e:	4a13      	ldr	r2, [pc, #76]	; (800198c <LL_SYSCFG_SetEXTISource+0x58>)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	3302      	adds	r3, #2
 8001946:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	0c1b      	lsrs	r3, r3, #16
 800194e:	43db      	mvns	r3, r3
 8001950:	ea02 0103 	and.w	r1, r2, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	fa93 f3a3 	rbit	r3, r3
 8001960:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	b2db      	uxtb	r3, r3
 800196a:	461a      	mov	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	fa03 f202 	lsl.w	r2, r3, r2
 8001972:	4806      	ldr	r0, [pc, #24]	; (800198c <LL_SYSCFG_SetEXTISource+0x58>)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	430a      	orrs	r2, r1
 800197a:	3302      	adds	r3, #2
 800197c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	40010000 	.word	0x40010000

08001990 <LL_GPIO_SetPinMode>:
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	613b      	str	r3, [r7, #16]
  return result;
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2103      	movs	r1, #3
 80019b8:	fa01 f303 	lsl.w	r3, r1, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	401a      	ands	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	fa93 f3a3 	rbit	r3, r3
 80019ca:	61bb      	str	r3, [r7, #24]
  return result;
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	fab3 f383 	clz	r3, r3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	431a      	orrs	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	601a      	str	r2, [r3, #0]
}
 80019e2:	bf00      	nop
 80019e4:	3724      	adds	r7, #36	; 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <LL_GPIO_SetPinPull>:
{
 80019ee:	b480      	push	{r7}
 80019f0:	b089      	sub	sp, #36	; 0x24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	613b      	str	r3, [r7, #16]
  return result;
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	fab3 f383 	clz	r3, r3
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	2103      	movs	r1, #3
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	401a      	ands	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	61bb      	str	r3, [r7, #24]
  return result;
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	fab3 f383 	clz	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	60da      	str	r2, [r3, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3724      	adds	r7, #36	; 0x24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_GPIO_ResetOutputPin>:
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
 8001a88:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8001a8a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001a8e:	f7ff ff39 	bl	8001904 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001a92:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a96:	f7ff ff35 	bl	8001904 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001a9a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001a9e:	f7ff ff31 	bl	8001904 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 8001aa2:	f641 119f 	movw	r1, #6559	; 0x199f
 8001aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aaa:	f7ff ffcf 	bl	8001a4c <LL_GPIO_ResetOutputPin>
                          |digit2_Pin|digitTime_Pin|segmentC_Pin|segmentE_Pin
                          |digit3_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, digit1_Pin|segmentDP_Pin|segmentG_Pin|segmentD_Pin);
 8001aae:	2133      	movs	r1, #51	; 0x33
 8001ab0:	4823      	ldr	r0, [pc, #140]	; (8001b40 <MX_GPIO_Init+0xd8>)
 8001ab2:	f7ff ffcb 	bl	8001a4c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segmentB_Pin|segmentA_Pin|digit4_Pin|segmentF_Pin
 8001ab6:	f641 139f 	movw	r3, #6559	; 0x199f
 8001aba:	607b      	str	r3, [r7, #4]
                          |digit2_Pin|digitTime_Pin|segmentC_Pin|segmentE_Pin
                          |digit3_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001abc:	2301      	movs	r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad4:	f001 fb90 	bl	80031f8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = digit1_Pin|segmentDP_Pin|segmentG_Pin|segmentD_Pin;
 8001ad8:	2333      	movs	r3, #51	; 0x33
 8001ada:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001adc:	2301      	movs	r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	4619      	mov	r1, r3
 8001af0:	4813      	ldr	r0, [pc, #76]	; (8001b40 <MX_GPIO_Init+0xd8>)
 8001af2:	f001 fb81 	bl	80031f8 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 8001af6:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8001afa:	2001      	movs	r0, #1
 8001afc:	f7ff ff1a 	bl	8001934 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(button_GPIO_Port, button_Pin, LL_GPIO_PULL_NO);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2108      	movs	r1, #8
 8001b04:	480e      	ldr	r0, [pc, #56]	; (8001b40 <MX_GPIO_Init+0xd8>)
 8001b06:	f7ff ff72 	bl	80019ee <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(button_GPIO_Port, button_Pin, LL_GPIO_MODE_INPUT);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2108      	movs	r1, #8
 8001b0e:	480c      	ldr	r0, [pc, #48]	; (8001b40 <MX_GPIO_Init+0xd8>)
 8001b10:	f7ff ff3e 	bl	8001990 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8001b14:	2308      	movs	r3, #8
 8001b16:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	4618      	mov	r0, r3
 8001b34:	f001 f968 	bl	8002e08 <LL_EXTI_Init>

}
 8001b38:	bf00      	nop
 8001b3a:	3728      	adds	r7, #40	; 0x28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	48000400 	.word	0x48000400

08001b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <__NVIC_GetPriorityGrouping+0x18>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	f003 0307 	and.w	r3, r3, #7
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	db0b      	blt.n	8001b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f003 021f 	and.w	r2, r3, #31
 8001b78:	4907      	ldr	r1, [pc, #28]	; (8001b98 <__NVIC_EnableIRQ+0x38>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	2001      	movs	r0, #1
 8001b82:	fa00 f202 	lsl.w	r2, r0, r2
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	; (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	; (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
         );
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f043 0201 	orr.w	r2, r3, #1
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	601a      	str	r2, [r3, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	601a      	str	r2, [r3, #0]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	601a      	str	r2, [r3, #0]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b085      	sub	sp, #20
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001cca:	f023 0306 	bic.w	r3, r3, #6
 8001cce:	68b9      	ldr	r1, [r7, #8]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	60da      	str	r2, [r3, #12]
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	60da      	str	r2, [r3, #12]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f043 0204 	orr.w	r2, r3, #4
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	601a      	str	r2, [r3, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 0204 	bic.w	r2, r3, #4
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	601a      	str	r2, [r3, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d101      	bne.n	8001d5e <LL_I2C_IsActiveFlag_TXIS+0x18>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d101      	bne.n	8001d84 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f003 0320 	and.w	r3, r3, #32
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	d101      	bne.n	8001daa <LL_I2C_IsActiveFlag_STOP+0x18>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	f043 0220 	orr.w	r2, r3, #32
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	61da      	str	r2, [r3, #28]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	605a      	str	r2, [r3, #4]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	0d5b      	lsrs	r3, r3, #21
 8001e0e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <LL_I2C_HandleTransfer+0x48>)
 8001e14:	430b      	orrs	r3, r1
 8001e16:	43db      	mvns	r3, r3
 8001e18:	401a      	ands	r2, r3
 8001e1a:	68b9      	ldr	r1, [r7, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4319      	orrs	r1, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	041b      	lsls	r3, r3, #16
 8001e24:	4319      	orrs	r1, r3
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	4319      	orrs	r1, r3
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	03ff7bff 	.word	0x03ff7bff

08001e44 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	b2db      	uxtb	r3, r3
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001e6a:	78fa      	ldrb	r2, [r7, #3]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_AHB1_GRP1_EnableClock>:
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	4907      	ldr	r1, [pc, #28]	; (8001ea8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e92:	695a      	ldr	r2, [r3, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4013      	ands	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	40021000 	.word	0x40021000

08001eac <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001eb6:	69da      	ldr	r2, [r3, #28]
 8001eb8:	4907      	ldr	r1, [pc, #28]	; (8001ed8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ec2:	69da      	ldr	r2, [r3, #28]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001eca:	68fb      	ldr	r3, [r7, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	40021000 	.word	0x40021000

08001edc <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08e      	sub	sp, #56	; 0x38
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001ee2:	f107 031c 	add.w	r3, r7, #28
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
 8001ef0:	611a      	str	r2, [r3, #16]
 8001ef2:	615a      	str	r2, [r3, #20]
 8001ef4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
 8001f04:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001f06:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001f0a:	f7ff ffb7 	bl	8001e7c <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001f0e:	23c0      	movs	r3, #192	; 0xc0
 8001f10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f12:	2302      	movs	r3, #2
 8001f14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001f22:	2304      	movs	r3, #4
 8001f24:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4821      	ldr	r0, [pc, #132]	; (8001fb0 <MX_I2C1_Init+0xd4>)
 8001f2c:	f001 f964 	bl	80031f8 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001f30:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001f34:	f7ff ffba 	bl	8001eac <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8001f38:	f7ff fe04 	bl	8001b44 <__NVIC_GetPriorityGrouping>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2102      	movs	r1, #2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fe54 	bl	8001bf0 <NVIC_EncodePriority>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	201f      	movs	r0, #31
 8001f4e:	f7ff fe25 	bl	8001b9c <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001f52:	201f      	movs	r0, #31
 8001f54:	f7ff fe04 	bl	8001b60 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001f58:	4816      	ldr	r0, [pc, #88]	; (8001fb4 <MX_I2C1_Init+0xd8>)
 8001f5a:	f7ff ff3d 	bl	8001dd8 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001f5e:	4815      	ldr	r0, [pc, #84]	; (8001fb4 <MX_I2C1_Init+0xd8>)
 8001f60:	f7ff fec1 	bl	8001ce6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001f64:	4813      	ldr	r0, [pc, #76]	; (8001fb4 <MX_I2C1_Init+0xd8>)
 8001f66:	f7ff fe96 	bl	8001c96 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001f6a:	4812      	ldr	r0, [pc, #72]	; (8001fb4 <MX_I2C1_Init+0xd8>)
 8001f6c:	f7ff fe83 	bl	8001c76 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <MX_I2C1_Init+0xdc>)
 8001f76:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8001f80:	2302      	movs	r3, #2
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001f8c:	f107 031c 	add.w	r3, r7, #28
 8001f90:	4619      	mov	r1, r3
 8001f92:	4808      	ldr	r0, [pc, #32]	; (8001fb4 <MX_I2C1_Init+0xd8>)
 8001f94:	f001 fa43 	bl	800341e <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <MX_I2C1_Init+0xd8>)
 8001f9e:	f7ff fe8a 	bl	8001cb6 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8001fa2:	4804      	ldr	r0, [pc, #16]	; (8001fb4 <MX_I2C1_Init+0xd8>)
 8001fa4:	f7ff fe57 	bl	8001c56 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8001fa8:	bf00      	nop
 8001faa:	3738      	adds	r7, #56	; 0x38
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	48000400 	.word	0x48000400
 8001fb4:	40005400 	.word	0x40005400
 8001fb8:	2000090e 	.word	0x2000090e

08001fbc <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	4604      	mov	r4, r0
 8001fc4:	4608      	mov	r0, r1
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4623      	mov	r3, r4
 8001fcc:	71fb      	strb	r3, [r7, #7]
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71bb      	strb	r3, [r7, #6]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	717b      	strb	r3, [r7, #5]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8001fda:	793b      	ldrb	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8001fe0:	79bb      	ldrb	r3, [r7, #6]
 8001fe2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fe6:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001fe8:	7979      	ldrb	r1, [r7, #5]
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <i2c_master_write+0x80>)
 8001fec:	9301      	str	r3, [sp, #4]
 8001fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	4811      	ldr	r0, [pc, #68]	; (8002040 <i2c_master_write+0x84>)
 8001ffa:	f7ff fefd 	bl	8001df8 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8001ffe:	79bb      	ldrb	r3, [r7, #6]
 8002000:	4619      	mov	r1, r3
 8002002:	480f      	ldr	r0, [pc, #60]	; (8002040 <i2c_master_write+0x84>)
 8002004:	f7ff ff2b 	bl	8001e5e <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002008:	e00a      	b.n	8002020 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800200a:	480d      	ldr	r0, [pc, #52]	; (8002040 <i2c_master_write+0x84>)
 800200c:	f7ff fe9b 	bl	8001d46 <LL_I2C_IsActiveFlag_TXIS>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d004      	beq.n	8002020 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	4619      	mov	r1, r3
 800201a:	4809      	ldr	r0, [pc, #36]	; (8002040 <i2c_master_write+0x84>)
 800201c:	f7ff ff1f 	bl	8001e5e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002020:	4807      	ldr	r0, [pc, #28]	; (8002040 <i2c_master_write+0x84>)
 8002022:	f7ff feb6 	bl	8001d92 <LL_I2C_IsActiveFlag_STOP>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0ee      	beq.n	800200a <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 800202c:	4804      	ldr	r0, [pc, #16]	; (8002040 <i2c_master_write+0x84>)
 800202e:	f7ff fec3 	bl	8001db8 <LL_I2C_ClearFlag_STOP>
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bd90      	pop	{r4, r7, pc}
 800203a:	bf00      	nop
 800203c:	80002000 	.word	0x80002000
 8002040:	40005400 	.word	0x40005400

08002044 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af02      	add	r7, sp, #8
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	4608      	mov	r0, r1
 800204e:	4611      	mov	r1, r2
 8002050:	461a      	mov	r2, r3
 8002052:	4603      	mov	r3, r0
 8002054:	70fb      	strb	r3, [r7, #3]
 8002056:	460b      	mov	r3, r1
 8002058:	70bb      	strb	r3, [r7, #2]
 800205a:	4613      	mov	r3, r2
 800205c:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 800205e:	4a30      	ldr	r2, [pc, #192]	; (8002120 <i2c_master_read+0xdc>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8002064:	7c3b      	ldrb	r3, [r7, #16]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 800206a:	78bb      	ldrb	r3, [r7, #2]
 800206c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002070:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8002072:	4b2c      	ldr	r3, [pc, #176]	; (8002124 <i2c_master_read+0xe0>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8002078:	482b      	ldr	r0, [pc, #172]	; (8002128 <i2c_master_read+0xe4>)
 800207a:	f7ff fe44 	bl	8001d06 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800207e:	7879      	ldrb	r1, [r7, #1]
 8002080:	4b2a      	ldr	r3, [pc, #168]	; (800212c <i2c_master_read+0xe8>)
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2301      	movs	r3, #1
 800208c:	2200      	movs	r2, #0
 800208e:	4826      	ldr	r0, [pc, #152]	; (8002128 <i2c_master_read+0xe4>)
 8002090:	f7ff feb2 	bl	8001df8 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002094:	e00a      	b.n	80020ac <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8002096:	4824      	ldr	r0, [pc, #144]	; (8002128 <i2c_master_read+0xe4>)
 8002098:	f7ff fe55 	bl	8001d46 <LL_I2C_IsActiveFlag_TXIS>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d004      	beq.n	80020ac <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 80020a2:	78bb      	ldrb	r3, [r7, #2]
 80020a4:	4619      	mov	r1, r3
 80020a6:	4820      	ldr	r0, [pc, #128]	; (8002128 <i2c_master_read+0xe4>)
 80020a8:	f7ff fed9 	bl	8001e5e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80020ac:	481e      	ldr	r0, [pc, #120]	; (8002128 <i2c_master_read+0xe4>)
 80020ae:	f7ff fe70 	bl	8001d92 <LL_I2C_IsActiveFlag_STOP>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0ee      	beq.n	8002096 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80020b8:	481b      	ldr	r0, [pc, #108]	; (8002128 <i2c_master_read+0xe4>)
 80020ba:	f7ff fe7d 	bl	8001db8 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 80020be:	bf00      	nop
 80020c0:	4819      	ldr	r0, [pc, #100]	; (8002128 <i2c_master_read+0xe4>)
 80020c2:	f7ff fe66 	bl	8001d92 <LL_I2C_IsActiveFlag_STOP>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f9      	bne.n	80020c0 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80020cc:	7879      	ldrb	r1, [r7, #1]
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	4a17      	ldr	r2, [pc, #92]	; (8002130 <i2c_master_read+0xec>)
 80020d2:	9201      	str	r2, [sp, #4]
 80020d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020d8:	9200      	str	r2, [sp, #0]
 80020da:	2200      	movs	r2, #0
 80020dc:	4812      	ldr	r0, [pc, #72]	; (8002128 <i2c_master_read+0xe4>)
 80020de:	f7ff fe8b 	bl	8001df8 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80020e2:	bf00      	nop
 80020e4:	4810      	ldr	r0, [pc, #64]	; (8002128 <i2c_master_read+0xe4>)
 80020e6:	f7ff fe54 	bl	8001d92 <LL_I2C_IsActiveFlag_STOP>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f9      	beq.n	80020e4 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 80020f0:	480d      	ldr	r0, [pc, #52]	; (8002128 <i2c_master_read+0xe4>)
 80020f2:	f7ff fe61 	bl	8001db8 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 80020f6:	480c      	ldr	r0, [pc, #48]	; (8002128 <i2c_master_read+0xe4>)
 80020f8:	f7ff fe15 	bl	8001d26 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <i2c_master_read+0xe4>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	4a09      	ldr	r2, [pc, #36]	; (8002128 <i2c_master_read+0xe4>)
 8002102:	f043 0310 	orr.w	r3, r3, #16
 8002106:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8002108:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <i2c_master_read+0xf0>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 800210e:	4b05      	ldr	r3, [pc, #20]	; (8002124 <i2c_master_read+0xe0>)
 8002110:	2201      	movs	r2, #1
 8002112:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8002114:	4b02      	ldr	r3, [pc, #8]	; (8002120 <i2c_master_read+0xdc>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	200000b0 	.word	0x200000b0
 8002124:	20000090 	.word	0x20000090
 8002128:	40005400 	.word	0x40005400
 800212c:	80002000 	.word	0x80002000
 8002130:	80002400 	.word	0x80002400
 8002134:	20000091 	.word	0x20000091

08002138 <I2C1_EV_IRQHandler>:
	(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
	end_of_read_flag = 0;
}

void I2C1_EV_IRQHandler(void)
{
 8002138:	b598      	push	{r3, r4, r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
  /* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 800213c:	4812      	ldr	r0, [pc, #72]	; (8002188 <I2C1_EV_IRQHandler+0x50>)
 800213e:	f7ff fe15 	bl	8001d6c <LL_I2C_IsActiveFlag_RXNE>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01c      	beq.n	8002182 <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8002148:	4b10      	ldr	r3, [pc, #64]	; (800218c <I2C1_EV_IRQHandler+0x54>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b10      	ldr	r3, [pc, #64]	; (8002190 <I2C1_EV_IRQHandler+0x58>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	1c59      	adds	r1, r3, #1
 8002154:	b2c8      	uxtb	r0, r1
 8002156:	490e      	ldr	r1, [pc, #56]	; (8002190 <I2C1_EV_IRQHandler+0x58>)
 8002158:	7008      	strb	r0, [r1, #0]
 800215a:	18d4      	adds	r4, r2, r3
 800215c:	480a      	ldr	r0, [pc, #40]	; (8002188 <I2C1_EV_IRQHandler+0x50>)
 800215e:	f7ff fe71 	bl	8001e44 <LL_I2C_ReceiveData8>
 8002162:	4603      	mov	r3, r0
 8002164:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <I2C1_EV_IRQHandler+0x58>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b13      	cmp	r3, #19
 800216e:	d903      	bls.n	8002178 <I2C1_EV_IRQHandler+0x40>
 8002170:	4b07      	ldr	r3, [pc, #28]	; (8002190 <I2C1_EV_IRQHandler+0x58>)
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	e001      	b.n	800217c <I2C1_EV_IRQHandler+0x44>
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <I2C1_EV_IRQHandler+0x58>)
 800217a:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <I2C1_EV_IRQHandler+0x5c>)
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd98      	pop	{r3, r4, r7, pc}
 8002186:	bf00      	nop
 8002188:	40005400 	.word	0x40005400
 800218c:	200000b0 	.word	0x200000b0
 8002190:	20000091 	.word	0x20000091
 8002194:	20000090 	.word	0x20000090

08002198 <lsm6ds0_read_byte>:
#include "lps25hb.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af02      	add	r7, sp, #8
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 80021a6:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <lsm6ds0_read_byte+0x30>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	79fa      	ldrb	r2, [r7, #7]
 80021ac:	f107 000f 	add.w	r0, r7, #15
 80021b0:	2100      	movs	r1, #0
 80021b2:	9100      	str	r1, [sp, #0]
 80021b4:	2101      	movs	r1, #1
 80021b6:	f7ff ff45 	bl	8002044 <i2c_master_read>
 80021ba:	4603      	mov	r3, r0
 80021bc:	781b      	ldrb	r3, [r3, #0]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000003 	.word	0x20000003

080021cc <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	460a      	mov	r2, r1
 80021d6:	71fb      	strb	r3, [r7, #7]
 80021d8:	4613      	mov	r3, r2
 80021da:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <lsm6ds0_write_byte+0x28>)
 80021de:	781a      	ldrb	r2, [r3, #0]
 80021e0:	79f9      	ldrb	r1, [r7, #7]
 80021e2:	79b8      	ldrb	r0, [r7, #6]
 80021e4:	2300      	movs	r3, #0
 80021e6:	f7ff fee9 	bl	8001fbc <i2c_master_write>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000003 	.word	0x20000003

080021f8 <lsm6ds0_init>:
	*z = (zz >> 4) / 1000.0f;
}


uint8_t lsm6ds0_init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 80021fe:	2301      	movs	r3, #1
 8002200:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8002202:	2064      	movs	r0, #100	; 0x64
 8002204:	f001 fd6a 	bl	8003cdc <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8002208:	200f      	movs	r0, #15
 800220a:	f7ff ffc5 	bl	8002198 <lsm6ds0_read_byte>
 800220e:	4603      	mov	r3, r0
 8002210:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 8002212:	79bb      	ldrb	r3, [r7, #6]
 8002214:	2b68      	cmp	r3, #104	; 0x68
 8002216:	d102      	bne.n	800221e <lsm6ds0_init+0x26>
	{
		status = 1;
 8002218:	2301      	movs	r3, #1
 800221a:	71fb      	strb	r3, [r7, #7]
 800221c:	e00f      	b.n	800223e <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <lsm6ds0_init+0x60>)
 8002220:	22d6      	movs	r2, #214	; 0xd6
 8002222:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8002224:	200f      	movs	r0, #15
 8002226:	f7ff ffb7 	bl	8002198 <lsm6ds0_read_byte>
 800222a:	4603      	mov	r3, r0
 800222c:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 800222e:	79bb      	ldrb	r3, [r7, #6]
 8002230:	2b68      	cmp	r3, #104	; 0x68
 8002232:	d102      	bne.n	800223a <lsm6ds0_init+0x42>
		{
			status = 1;
 8002234:	2301      	movs	r3, #1
 8002236:	71fb      	strb	r3, [r7, #7]
 8002238:	e001      	b.n	800223e <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8002242:	797b      	ldrb	r3, [r7, #5]
 8002244:	4619      	mov	r1, r3
 8002246:	2010      	movs	r0, #16
 8002248:	f7ff ffc0 	bl	80021cc <lsm6ds0_write_byte>

	return status;
 800224c:	79fb      	ldrb	r3, [r7, #7]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000003 	.word	0x20000003

0800225c <__NVIC_SetPriorityGrouping>:
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <__NVIC_SetPriorityGrouping+0x44>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002278:	4013      	ands	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228e:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	60d3      	str	r3, [r2, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <LL_RCC_HSI_Enable+0x1c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <LL_RCC_HSI_Enable+0x1c>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6013      	str	r3, [r2, #0]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000

080022c4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <LL_RCC_HSI_IsReady+0x20>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	bf0c      	ite	eq
 80022d4:	2301      	moveq	r3, #1
 80022d6:	2300      	movne	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40021000 	.word	0x40021000

080022e8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4904      	ldr	r1, [pc, #16]	; (8002310 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000

08002314 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <LL_RCC_SetSysClkSource+0x24>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f023 0203 	bic.w	r2, r3, #3
 8002324:	4904      	ldr	r1, [pc, #16]	; (8002338 <LL_RCC_SetSysClkSource+0x24>)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	40021000 	.word	0x40021000

0800233c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <LL_RCC_GetSysClkSource+0x18>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 030c 	and.w	r3, r3, #12
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000

08002358 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <LL_RCC_SetAHBPrescaler+0x24>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002368:	4904      	ldr	r1, [pc, #16]	; (800237c <LL_RCC_SetAHBPrescaler+0x24>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40021000 	.word	0x40021000

08002380 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002390:	4904      	ldr	r1, [pc, #16]	; (80023a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40021000 	.word	0x40021000

080023a8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <LL_RCC_SetAPB2Prescaler+0x24>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023b8:	4904      	ldr	r1, [pc, #16]	; (80023cc <LL_RCC_SetAPB2Prescaler+0x24>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	40021000 	.word	0x40021000

080023d0 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <LL_RCC_SetI2CClockSource+0x2c>)
 80023da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	0e1b      	lsrs	r3, r3, #24
 80023e0:	43db      	mvns	r3, r3
 80023e2:	401a      	ands	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80023ea:	4904      	ldr	r1, [pc, #16]	; (80023fc <LL_RCC_SetI2CClockSource+0x2c>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	630b      	str	r3, [r1, #48]	; 0x30
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	40021000 	.word	0x40021000

08002400 <LL_APB1_GRP1_EnableClock>:
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <LL_APB1_GRP1_EnableClock+0x2c>)
 800240a:	69da      	ldr	r2, [r3, #28]
 800240c:	4907      	ldr	r1, [pc, #28]	; (800242c <LL_APB1_GRP1_EnableClock+0x2c>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4313      	orrs	r3, r2
 8002412:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4013      	ands	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800241e:	68fb      	ldr	r3, [r7, #12]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	40021000 	.word	0x40021000

08002430 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <LL_APB2_GRP1_EnableClock+0x2c>)
 800243a:	699a      	ldr	r2, [r3, #24]
 800243c:	4907      	ldr	r1, [pc, #28]	; (800245c <LL_APB2_GRP1_EnableClock+0x2c>)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4313      	orrs	r3, r2
 8002442:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002446:	699a      	ldr	r2, [r3, #24]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4013      	ands	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800244e:	68fb      	ldr	r3, [r7, #12]
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	40021000 	.word	0x40021000

08002460 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <LL_FLASH_SetLatency+0x24>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f023 0207 	bic.w	r2, r3, #7
 8002470:	4904      	ldr	r1, [pc, #16]	; (8002484 <LL_FLASH_SetLatency+0x24>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4313      	orrs	r3, r2
 8002476:	600b      	str	r3, [r1, #0]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40022000 	.word	0x40022000

08002488 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <LL_FLASH_GetLatency+0x18>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40022000 	.word	0x40022000

080024a4 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f043 0201 	orr.w	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	601a      	str	r2, [r3, #0]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f043 0201 	orr.w	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	60da      	str	r2, [r3, #12]
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80024ea:	2001      	movs	r0, #1
 80024ec:	f7ff ffa0 	bl	8002430 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80024f0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80024f4:	f7ff ff84 	bl	8002400 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f8:	2003      	movs	r0, #3
 80024fa:	f7ff feaf 	bl	800225c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024fe:	f000 f825 	bl	800254c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002502:	f7ff fab1 	bl	8001a68 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002506:	f000 fac5 	bl	8002a94 <MX_TIM2_Init>
  MX_I2C1_Init();
 800250a:	f7ff fce7 	bl	8001edc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //LL_TIM_EnableIT_CC2(TIM2);
  LL_TIM_EnableIT_UPDATE(TIM2);
 800250e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002512:	f7ff ffd7 	bl	80024c4 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 8002516:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800251a:	f7ff ffc3 	bl	80024a4 <LL_TIM_EnableCounter>

  lsm6ds0_init();
 800251e:	f7ff fe6b 	bl	80021f8 <lsm6ds0_init>
  temperature_init();
 8002522:	f7fd ffa5 	bl	8000470 <temperature_init>
  pressure_init();
 8002526:	f7fd fedb 	bl	80002e0 <pressure_init>

  resetAllDigits();
 800252a:	f7fe fad3 	bl	8000ad4 <resetAllDigits>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //lsm6ds0_get_acc(acc, (acc+1), (acc+2));
	  printTemperature();
 800252e:	f000 f843 	bl	80025b8 <printTemperature>
	  float altitude = get_altitude();
 8002532:	f7fd ff21 	bl	8000378 <get_altitude>
 8002536:	ee07 0a90 	vmov	s15, r0
 800253a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800253e:	edc7 7a01 	vstr	s15, [r7, #4]


	  //readI2C();
	  LL_mDelay(50);
 8002542:	2032      	movs	r0, #50	; 0x32
 8002544:	f001 fbca 	bl	8003cdc <LL_mDelay>
  {
 8002548:	e7f1      	b.n	800252e <main+0x4a>
	...

0800254c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002550:	2000      	movs	r0, #0
 8002552:	f7ff ff85 	bl	8002460 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8002556:	bf00      	nop
 8002558:	f7ff ff96 	bl	8002488 <LL_FLASH_GetLatency>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1fa      	bne.n	8002558 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8002562:	f7ff fe9f 	bl	80022a4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8002566:	bf00      	nop
 8002568:	f7ff feac 	bl	80022c4 <LL_RCC_HSI_IsReady>
 800256c:	4603      	mov	r3, r0
 800256e:	2b01      	cmp	r3, #1
 8002570:	d1fa      	bne.n	8002568 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8002572:	2010      	movs	r0, #16
 8002574:	f7ff feb8 	bl	80022e8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002578:	2000      	movs	r0, #0
 800257a:	f7ff feed 	bl	8002358 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800257e:	2000      	movs	r0, #0
 8002580:	f7ff fefe 	bl	8002380 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002584:	2000      	movs	r0, #0
 8002586:	f7ff ff0f 	bl	80023a8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800258a:	2000      	movs	r0, #0
 800258c:	f7ff fec2 	bl	8002314 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8002590:	bf00      	nop
 8002592:	f7ff fed3 	bl	800233c <LL_RCC_GetSysClkSource>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1fa      	bne.n	8002592 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 800259c:	4805      	ldr	r0, [pc, #20]	; (80025b4 <SystemClock_Config+0x68>)
 800259e:	f001 fb8f 	bl	8003cc0 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80025a2:	4804      	ldr	r0, [pc, #16]	; (80025b4 <SystemClock_Config+0x68>)
 80025a4:	f001 fbc0 	bl	8003d28 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80025a8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80025ac:	f7ff ff10 	bl	80023d0 <LL_RCC_SetI2CClockSource>
}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	007a1200 	.word	0x007a1200

080025b8 <printTemperature>:

/* USER CODE BEGIN 4 */
void printTemperature(){
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
	char valueString[15];
	int16_t temperature = HTS221_Get_Temperature();
 80025be:	f7fd ff78 	bl	80004b2 <HTS221_Get_Temperature>
 80025c2:	4603      	mov	r3, r0
 80025c4:	82fb      	strh	r3, [r7, #22]
	sprintf(valueString, "%d", temperature);
 80025c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	493a      	ldr	r1, [pc, #232]	; (80026b8 <printTemperature+0x100>)
 80025ce:	4618      	mov	r0, r3
 80025d0:	f001 fbec 	bl	8003dac <siprintf>
	memset(displayText, '\0', 15);
 80025d4:	220f      	movs	r2, #15
 80025d6:	2100      	movs	r1, #0
 80025d8:	4838      	ldr	r0, [pc, #224]	; (80026bc <printTemperature+0x104>)
 80025da:	f001 fbdf 	bl	8003d9c <memset>
	strcat(displayText, "tEMP_");
 80025de:	4837      	ldr	r0, [pc, #220]	; (80026bc <printTemperature+0x104>)
 80025e0:	f7fd fdf6 	bl	80001d0 <strlen>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461a      	mov	r2, r3
 80025e8:	4b34      	ldr	r3, [pc, #208]	; (80026bc <printTemperature+0x104>)
 80025ea:	4413      	add	r3, r2
 80025ec:	4a34      	ldr	r2, [pc, #208]	; (80026c0 <printTemperature+0x108>)
 80025ee:	6810      	ldr	r0, [r2, #0]
 80025f0:	6018      	str	r0, [r3, #0]
 80025f2:	8892      	ldrh	r2, [r2, #4]
 80025f4:	809a      	strh	r2, [r3, #4]
	if(valueString[0]=='-'){
 80025f6:	793b      	ldrb	r3, [r7, #4]
 80025f8:	2b2d      	cmp	r3, #45	; 0x2d
 80025fa:	d119      	bne.n	8002630 <printTemperature+0x78>
		strncat(displayText, valueString, 3);
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	2203      	movs	r2, #3
 8002600:	4619      	mov	r1, r3
 8002602:	482e      	ldr	r0, [pc, #184]	; (80026bc <printTemperature+0x104>)
 8002604:	f001 fbf2 	bl	8003dec <strncat>
		strcat(displayText, ".");
 8002608:	482c      	ldr	r0, [pc, #176]	; (80026bc <printTemperature+0x104>)
 800260a:	f7fd fde1 	bl	80001d0 <strlen>
 800260e:	4603      	mov	r3, r0
 8002610:	461a      	mov	r2, r3
 8002612:	4b2a      	ldr	r3, [pc, #168]	; (80026bc <printTemperature+0x104>)
 8002614:	4413      	add	r3, r2
 8002616:	492b      	ldr	r1, [pc, #172]	; (80026c4 <printTemperature+0x10c>)
 8002618:	461a      	mov	r2, r3
 800261a:	460b      	mov	r3, r1
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	8013      	strh	r3, [r2, #0]
		strncat(displayText, &valueString[3],1);
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	3303      	adds	r3, #3
 8002624:	2201      	movs	r2, #1
 8002626:	4619      	mov	r1, r3
 8002628:	4824      	ldr	r0, [pc, #144]	; (80026bc <printTemperature+0x104>)
 800262a:	f001 fbdf 	bl	8003dec <strncat>
 800262e:	e03c      	b.n	80026aa <printTemperature+0xf2>
	}
	else if(temperature > 999){
 8002630:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002638:	db0c      	blt.n	8002654 <printTemperature+0x9c>
		strcat(displayText, "99.9");
 800263a:	4820      	ldr	r0, [pc, #128]	; (80026bc <printTemperature+0x104>)
 800263c:	f7fd fdc8 	bl	80001d0 <strlen>
 8002640:	4603      	mov	r3, r0
 8002642:	461a      	mov	r2, r3
 8002644:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <printTemperature+0x104>)
 8002646:	4413      	add	r3, r2
 8002648:	4a1f      	ldr	r2, [pc, #124]	; (80026c8 <printTemperature+0x110>)
 800264a:	6810      	ldr	r0, [r2, #0]
 800264c:	6018      	str	r0, [r3, #0]
 800264e:	7912      	ldrb	r2, [r2, #4]
 8002650:	711a      	strb	r2, [r3, #4]
 8002652:	e02a      	b.n	80026aa <printTemperature+0xf2>
	}
	else if(temperature < (-999)){
 8002654:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002658:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800265c:	dc0c      	bgt.n	8002678 <printTemperature+0xc0>
		strcat(displayText, "-99.9");
 800265e:	4817      	ldr	r0, [pc, #92]	; (80026bc <printTemperature+0x104>)
 8002660:	f7fd fdb6 	bl	80001d0 <strlen>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	4b14      	ldr	r3, [pc, #80]	; (80026bc <printTemperature+0x104>)
 800266a:	4413      	add	r3, r2
 800266c:	4a17      	ldr	r2, [pc, #92]	; (80026cc <printTemperature+0x114>)
 800266e:	6810      	ldr	r0, [r2, #0]
 8002670:	6018      	str	r0, [r3, #0]
 8002672:	8892      	ldrh	r2, [r2, #4]
 8002674:	809a      	strh	r2, [r3, #4]
 8002676:	e018      	b.n	80026aa <printTemperature+0xf2>
	}
	else{
		strncat(displayText, valueString, 2);
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	2202      	movs	r2, #2
 800267c:	4619      	mov	r1, r3
 800267e:	480f      	ldr	r0, [pc, #60]	; (80026bc <printTemperature+0x104>)
 8002680:	f001 fbb4 	bl	8003dec <strncat>
		strcat(displayText, ".");
 8002684:	480d      	ldr	r0, [pc, #52]	; (80026bc <printTemperature+0x104>)
 8002686:	f7fd fda3 	bl	80001d0 <strlen>
 800268a:	4603      	mov	r3, r0
 800268c:	461a      	mov	r2, r3
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <printTemperature+0x104>)
 8002690:	4413      	add	r3, r2
 8002692:	490c      	ldr	r1, [pc, #48]	; (80026c4 <printTemperature+0x10c>)
 8002694:	461a      	mov	r2, r3
 8002696:	460b      	mov	r3, r1
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	8013      	strh	r3, [r2, #0]
		strncat(displayText, &valueString[2],1);
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	3302      	adds	r3, #2
 80026a0:	2201      	movs	r2, #1
 80026a2:	4619      	mov	r1, r3
 80026a4:	4805      	ldr	r0, [pc, #20]	; (80026bc <printTemperature+0x104>)
 80026a6:	f001 fba1 	bl	8003dec <strncat>
	}
	setDisplayText(displayText);
 80026aa:	4804      	ldr	r0, [pc, #16]	; (80026bc <printTemperature+0x104>)
 80026ac:	f7fd ffa0 	bl	80005f0 <setDisplayText>
}
 80026b0:	bf00      	nop
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	08004ef4 	.word	0x08004ef4
 80026bc:	200000c0 	.word	0x200000c0
 80026c0:	08004ef8 	.word	0x08004ef8
 80026c4:	08004f00 	.word	0x08004f00
 80026c8:	08004f04 	.word	0x08004f04
 80026cc:	08004f0c 	.word	0x08004f0c

080026d0 <LL_TIM_ClearFlag_UPDATE>:
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f06f 0201 	mvn.w	r2, #1
 80026de:	611a      	str	r2, [r3, #16]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <LL_TIM_IsActiveFlag_UPDATE>:
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002716:	e7fe      	b.n	8002716 <NMI_Handler+0x4>

08002718 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800271c:	e7fe      	b.n	800271c <HardFault_Handler+0x4>

0800271e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002722:	e7fe      	b.n	8002722 <MemManage_Handler+0x4>

08002724 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002728:	e7fe      	b.n	8002728 <BusFault_Handler+0x4>

0800272a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800272e:	e7fe      	b.n	800272e <UsageFault_Handler+0x4>

08002730 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 800276c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002770:	f7ff ffbc 	bl	80026ec <LL_TIM_IsActiveFlag_UPDATE>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <TIM2_IRQHandler+0x16>
		updateDisplay();
 800277a:	f7fd ff4b 	bl	8000614 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM2);
 800277e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002782:	f7ff ffa5 	bl	80026d0 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002794:	4a14      	ldr	r2, [pc, #80]	; (80027e8 <_sbrk+0x5c>)
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <_sbrk+0x60>)
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027a0:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <_sbrk+0x64>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d102      	bne.n	80027ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <_sbrk+0x64>)
 80027aa:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <_sbrk+0x68>)
 80027ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <_sbrk+0x64>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d207      	bcs.n	80027cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027bc:	f001 fac4 	bl	8003d48 <__errno>
 80027c0:	4603      	mov	r3, r0
 80027c2:	220c      	movs	r2, #12
 80027c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027c6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ca:	e009      	b.n	80027e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <_sbrk+0x64>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027d2:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <_sbrk+0x64>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	4a05      	ldr	r2, [pc, #20]	; (80027f0 <_sbrk+0x64>)
 80027dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027de:	68fb      	ldr	r3, [r7, #12]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20003000 	.word	0x20003000
 80027ec:	00000400 	.word	0x00000400
 80027f0:	20000094 	.word	0x20000094
 80027f4:	200000f0 	.word	0x200000f0

080027f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <SystemInit+0x20>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002802:	4a05      	ldr	r2, [pc, #20]	; (8002818 <SystemInit+0x20>)
 8002804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <__NVIC_GetPriorityGrouping>:
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <__NVIC_GetPriorityGrouping+0x18>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	f003 0307 	and.w	r3, r3, #7
}
 800282a:	4618      	mov	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <__NVIC_EnableIRQ>:
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	2b00      	cmp	r3, #0
 8002848:	db0b      	blt.n	8002862 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	f003 021f 	and.w	r2, r3, #31
 8002850:	4907      	ldr	r1, [pc, #28]	; (8002870 <__NVIC_EnableIRQ+0x38>)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	2001      	movs	r0, #1
 800285a:	fa00 f202 	lsl.w	r2, r0, r2
 800285e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000e100 	.word	0xe000e100

08002874 <__NVIC_SetPriority>:
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	6039      	str	r1, [r7, #0]
 800287e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002884:	2b00      	cmp	r3, #0
 8002886:	db0a      	blt.n	800289e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	490c      	ldr	r1, [pc, #48]	; (80028c0 <__NVIC_SetPriority+0x4c>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	0112      	lsls	r2, r2, #4
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	440b      	add	r3, r1
 8002898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800289c:	e00a      	b.n	80028b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4908      	ldr	r1, [pc, #32]	; (80028c4 <__NVIC_SetPriority+0x50>)
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	3b04      	subs	r3, #4
 80028ac:	0112      	lsls	r2, r2, #4
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	440b      	add	r3, r1
 80028b2:	761a      	strb	r2, [r3, #24]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000e100 	.word	0xe000e100
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <NVIC_EncodePriority>:
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	; 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f1c3 0307 	rsb	r3, r3, #7
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	bf28      	it	cs
 80028e6:	2304      	movcs	r3, #4
 80028e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3304      	adds	r3, #4
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d902      	bls.n	80028f8 <NVIC_EncodePriority+0x30>
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3b03      	subs	r3, #3
 80028f6:	e000      	b.n	80028fa <NVIC_EncodePriority+0x32>
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43da      	mvns	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	401a      	ands	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002910:	f04f 31ff 	mov.w	r1, #4294967295
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	43d9      	mvns	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	4313      	orrs	r3, r2
}
 8002922:	4618      	mov	r0, r3
 8002924:	3724      	adds	r7, #36	; 0x24
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <LL_APB1_GRP1_EnableClock>:
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002938:	4b08      	ldr	r3, [pc, #32]	; (800295c <LL_APB1_GRP1_EnableClock+0x2c>)
 800293a:	69da      	ldr	r2, [r3, #28]
 800293c:	4907      	ldr	r1, [pc, #28]	; (800295c <LL_APB1_GRP1_EnableClock+0x2c>)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4313      	orrs	r3, r2
 8002942:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4013      	ands	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800294e:	68fb      	ldr	r3, [r7, #12]
}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	40021000 	.word	0x40021000

08002960 <LL_TIM_DisableARRPreload>:
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	601a      	str	r2, [r3, #0]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_TIM_OC_DisableFast>:
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d028      	beq.n	80029e2 <LL_TIM_OC_DisableFast+0x62>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2b04      	cmp	r3, #4
 8002994:	d023      	beq.n	80029de <LL_TIM_OC_DisableFast+0x5e>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b10      	cmp	r3, #16
 800299a:	d01e      	beq.n	80029da <LL_TIM_OC_DisableFast+0x5a>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b40      	cmp	r3, #64	; 0x40
 80029a0:	d019      	beq.n	80029d6 <LL_TIM_OC_DisableFast+0x56>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a8:	d013      	beq.n	80029d2 <LL_TIM_OC_DisableFast+0x52>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b0:	d00d      	beq.n	80029ce <LL_TIM_OC_DisableFast+0x4e>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b8:	d007      	beq.n	80029ca <LL_TIM_OC_DisableFast+0x4a>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c0:	d101      	bne.n	80029c6 <LL_TIM_OC_DisableFast+0x46>
 80029c2:	2307      	movs	r3, #7
 80029c4:	e00e      	b.n	80029e4 <LL_TIM_OC_DisableFast+0x64>
 80029c6:	2308      	movs	r3, #8
 80029c8:	e00c      	b.n	80029e4 <LL_TIM_OC_DisableFast+0x64>
 80029ca:	2306      	movs	r3, #6
 80029cc:	e00a      	b.n	80029e4 <LL_TIM_OC_DisableFast+0x64>
 80029ce:	2305      	movs	r3, #5
 80029d0:	e008      	b.n	80029e4 <LL_TIM_OC_DisableFast+0x64>
 80029d2:	2304      	movs	r3, #4
 80029d4:	e006      	b.n	80029e4 <LL_TIM_OC_DisableFast+0x64>
 80029d6:	2303      	movs	r3, #3
 80029d8:	e004      	b.n	80029e4 <LL_TIM_OC_DisableFast+0x64>
 80029da:	2302      	movs	r3, #2
 80029dc:	e002      	b.n	80029e4 <LL_TIM_OC_DisableFast+0x64>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <LL_TIM_OC_DisableFast+0x64>
 80029e2:	2300      	movs	r3, #0
 80029e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3318      	adds	r3, #24
 80029ea:	4619      	mov	r1, r3
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	4a0b      	ldr	r2, [pc, #44]	; (8002a1c <LL_TIM_OC_DisableFast+0x9c>)
 80029f0:	5cd3      	ldrb	r3, [r2, r3]
 80029f2:	440b      	add	r3, r1
 80029f4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	4908      	ldr	r1, [pc, #32]	; (8002a20 <LL_TIM_OC_DisableFast+0xa0>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	4619      	mov	r1, r3
 8002a02:	2304      	movs	r3, #4
 8002a04:	408b      	lsls	r3, r1
 8002a06:	43db      	mvns	r3, r3
 8002a08:	401a      	ands	r2, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	601a      	str	r2, [r3, #0]
}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	08004f14 	.word	0x08004f14
 8002a20:	08004f20 	.word	0x08004f20

08002a24 <LL_TIM_SetClockSource>:
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002a36:	f023 0307 	bic.w	r3, r3, #7
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	609a      	str	r2, [r3, #8]
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <LL_TIM_SetTriggerOutput>:
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	605a      	str	r2, [r3, #4]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_TIM_DisableMasterSlaveMode>:
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	609a      	str	r2, [r3, #8]
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08e      	sub	sp, #56	; 0x38
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
 8002aa6:	60da      	str	r2, [r3, #12]
 8002aa8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002aaa:	1d3b      	adds	r3, r7, #4
 8002aac:	2220      	movs	r2, #32
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f001 f973 	bl	8003d9c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	f7ff ff3a 	bl	8002930 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002abc:	f7ff feae 	bl	800281c <__NVIC_GetPriorityGrouping>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fefe 	bl	80028c8 <NVIC_EncodePriority>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4619      	mov	r1, r3
 8002ad0:	201c      	movs	r0, #28
 8002ad2:	f7ff fecf 	bl	8002874 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002ad6:	201c      	movs	r0, #28
 8002ad8:	f7ff feae 	bl	8002838 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8002adc:	f240 331f 	movw	r3, #799	; 0x31f
 8002ae0:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 49;
 8002ae6:	2331      	movs	r3, #49	; 0x31
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002aea:	2300      	movs	r3, #0
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af2:	4619      	mov	r1, r3
 8002af4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002af8:	f000 fd5e 	bl	80035b8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002afc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002b00:	f7ff ff2e 	bl	8002960 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002b04:	2100      	movs	r1, #0
 8002b06:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002b0a:	f7ff ff8b 	bl	8002a24 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002b22:	1d3b      	adds	r3, r7, #4
 8002b24:	461a      	mov	r2, r3
 8002b26:	2101      	movs	r1, #1
 8002b28:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002b2c:	f000 fdb6 	bl	800369c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8002b30:	2101      	movs	r1, #1
 8002b32:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002b36:	f7ff ff23 	bl	8002980 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002b40:	f7ff ff85 	bl	8002a4e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002b44:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002b48:	f7ff ff94 	bl	8002a74 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b4c:	bf00      	nop
 8002b4e:	3738      	adds	r7, #56	; 0x38
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b8c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b58:	480d      	ldr	r0, [pc, #52]	; (8002b90 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b5a:	490e      	ldr	r1, [pc, #56]	; (8002b94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b5c:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <LoopForever+0xe>)
  movs r3, #0
 8002b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b60:	e002      	b.n	8002b68 <LoopCopyDataInit>

08002b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b66:	3304      	adds	r3, #4

08002b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b6c:	d3f9      	bcc.n	8002b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b6e:	4a0b      	ldr	r2, [pc, #44]	; (8002b9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b70:	4c0b      	ldr	r4, [pc, #44]	; (8002ba0 <LoopForever+0x16>)
  movs r3, #0
 8002b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b74:	e001      	b.n	8002b7a <LoopFillZerobss>

08002b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b78:	3204      	adds	r2, #4

08002b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b7c:	d3fb      	bcc.n	8002b76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b7e:	f7ff fe3b 	bl	80027f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b82:	f001 f8e7 	bl	8003d54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b86:	f7ff fcad 	bl	80024e4 <main>

08002b8a <LoopForever>:

LoopForever:
    b LoopForever
 8002b8a:	e7fe      	b.n	8002b8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b8c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002b98:	08004f84 	.word	0x08004f84
  ldr r2, =_sbss
 8002b9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002ba0:	200000ec 	.word	0x200000ec

08002ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ba4:	e7fe      	b.n	8002ba4 <ADC1_2_IRQHandler>
	...

08002ba8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <LL_EXTI_EnableIT_0_31+0x20>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4904      	ldr	r1, [pc, #16]	; (8002bc8 <LL_EXTI_EnableIT_0_31+0x20>)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	600b      	str	r3, [r1, #0]
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	40010400 	.word	0x40010400

08002bcc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <LL_EXTI_EnableIT_32_63+0x20>)
 8002bd6:	6a1a      	ldr	r2, [r3, #32]
 8002bd8:	4904      	ldr	r1, [pc, #16]	; (8002bec <LL_EXTI_EnableIT_32_63+0x20>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	620b      	str	r3, [r1, #32]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	40010400 	.word	0x40010400

08002bf0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <LL_EXTI_DisableIT_0_31+0x24>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	4904      	ldr	r1, [pc, #16]	; (8002c14 <LL_EXTI_DisableIT_0_31+0x24>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40010400 	.word	0x40010400

08002c18 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <LL_EXTI_DisableIT_32_63+0x24>)
 8002c22:	6a1a      	ldr	r2, [r3, #32]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	4904      	ldr	r1, [pc, #16]	; (8002c3c <LL_EXTI_DisableIT_32_63+0x24>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	620b      	str	r3, [r1, #32]
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40010400 	.word	0x40010400

08002c40 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	4904      	ldr	r1, [pc, #16]	; (8002c60 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]

}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	40010400 	.word	0x40010400

08002c64 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002c6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c70:	4904      	ldr	r1, [pc, #16]	; (8002c84 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	40010400 	.word	0x40010400

08002c88 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <LL_EXTI_DisableEvent_0_31+0x24>)
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	43db      	mvns	r3, r3
 8002c98:	4904      	ldr	r1, [pc, #16]	; (8002cac <LL_EXTI_DisableEvent_0_31+0x24>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	604b      	str	r3, [r1, #4]
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40010400 	.word	0x40010400

08002cb0 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	4904      	ldr	r1, [pc, #16]	; (8002cd4 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40010400 	.word	0x40010400

08002cd8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	4904      	ldr	r1, [pc, #16]	; (8002cf8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	608b      	str	r3, [r1, #8]

}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	40010400 	.word	0x40010400

08002cfc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002d06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d08:	4904      	ldr	r1, [pc, #16]	; (8002d1c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	40010400 	.word	0x40010400

08002d20 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	4904      	ldr	r1, [pc, #16]	; (8002d44 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]

}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40010400 	.word	0x40010400

08002d48 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002d52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	4904      	ldr	r1, [pc, #16]	; (8002d6c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40010400 	.word	0x40010400

08002d70 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002d78:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	4904      	ldr	r1, [pc, #16]	; (8002d90 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60cb      	str	r3, [r1, #12]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	40010400 	.word	0x40010400

08002d94 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da0:	4904      	ldr	r1, [pc, #16]	; (8002db4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	40010400 	.word	0x40010400

08002db8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002dc0:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	4904      	ldr	r1, [pc, #16]	; (8002ddc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	60cb      	str	r3, [r1, #12]
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40010400 	.word	0x40010400

08002de0 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	4904      	ldr	r1, [pc, #16]	; (8002e04 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40010400 	.word	0x40010400

08002e08 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002e10:	2300      	movs	r3, #0
 8002e12:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	7a1b      	ldrb	r3, [r3, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 80cd 	beq.w	8002fb8 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d061      	beq.n	8002eea <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	7a5b      	ldrb	r3, [r3, #9]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d01c      	beq.n	8002e68 <LL_EXTI_Init+0x60>
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	dc25      	bgt.n	8002e7e <LL_EXTI_Init+0x76>
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <LL_EXTI_Init+0x34>
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d00b      	beq.n	8002e52 <LL_EXTI_Init+0x4a>
 8002e3a:	e020      	b.n	8002e7e <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ff21 	bl	8002c88 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff feac 	bl	8002ba8 <LL_EXTI_EnableIT_0_31>
          break;
 8002e50:	e018      	b.n	8002e84 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff feca 	bl	8002bf0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff feed 	bl	8002c40 <LL_EXTI_EnableEvent_0_31>
          break;
 8002e66:	e00d      	b.n	8002e84 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fe9b 	bl	8002ba8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fee2 	bl	8002c40 <LL_EXTI_EnableEvent_0_31>
          break;
 8002e7c:	e002      	b.n	8002e84 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
          break;
 8002e82:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	7a9b      	ldrb	r3, [r3, #10]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d02e      	beq.n	8002eea <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	7a9b      	ldrb	r3, [r3, #10]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d01c      	beq.n	8002ece <LL_EXTI_Init+0xc6>
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	dc25      	bgt.n	8002ee4 <LL_EXTI_Init+0xdc>
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d002      	beq.n	8002ea2 <LL_EXTI_Init+0x9a>
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d00b      	beq.n	8002eb8 <LL_EXTI_Init+0xb0>
 8002ea0:	e020      	b.n	8002ee4 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff ff86 	bl	8002db8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff ff11 	bl	8002cd8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002eb6:	e019      	b.n	8002eec <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff2f 	bl	8002d20 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff ff52 	bl	8002d70 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002ecc:	e00e      	b.n	8002eec <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff ff00 	bl	8002cd8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff47 	bl	8002d70 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002ee2:	e003      	b.n	8002eec <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
            break;
 8002ee8:	e000      	b.n	8002eec <LL_EXTI_Init+0xe4>
        }
      }
 8002eea:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d076      	beq.n	8002fe2 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	7a5b      	ldrb	r3, [r3, #9]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d01c      	beq.n	8002f36 <LL_EXTI_Init+0x12e>
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	dc25      	bgt.n	8002f4c <LL_EXTI_Init+0x144>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <LL_EXTI_Init+0x102>
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d00b      	beq.n	8002f20 <LL_EXTI_Init+0x118>
 8002f08:	e020      	b.n	8002f4c <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fece 	bl	8002cb0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fe57 	bl	8002bcc <LL_EXTI_EnableIT_32_63>
          break;
 8002f1e:	e018      	b.n	8002f52 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fe77 	bl	8002c18 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fe98 	bl	8002c64 <LL_EXTI_EnableEvent_32_63>
          break;
 8002f34:	e00d      	b.n	8002f52 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fe46 	bl	8002bcc <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff fe8d 	bl	8002c64 <LL_EXTI_EnableEvent_32_63>
          break;
 8002f4a:	e002      	b.n	8002f52 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
          break;
 8002f50:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	7a9b      	ldrb	r3, [r3, #10]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d043      	beq.n	8002fe2 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7a9b      	ldrb	r3, [r3, #10]
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d01c      	beq.n	8002f9c <LL_EXTI_Init+0x194>
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	dc25      	bgt.n	8002fb2 <LL_EXTI_Init+0x1aa>
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d002      	beq.n	8002f70 <LL_EXTI_Init+0x168>
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d00b      	beq.n	8002f86 <LL_EXTI_Init+0x17e>
 8002f6e:	e020      	b.n	8002fb2 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ff33 	bl	8002de0 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff febc 	bl	8002cfc <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8002f84:	e02e      	b.n	8002fe4 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fedc 	bl	8002d48 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fefd 	bl	8002d94 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002f9a:	e023      	b.n	8002fe4 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff feab 	bl	8002cfc <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff fef2 	bl	8002d94 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002fb0:	e018      	b.n	8002fe4 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	73fb      	strb	r3, [r7, #15]
            break;
 8002fb6:	e015      	b.n	8002fe4 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fe17 	bl	8002bf0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff fe5e 	bl	8002c88 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff fe21 	bl	8002c18 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fe68 	bl	8002cb0 <LL_EXTI_DisableEvent_32_63>
 8002fe0:	e000      	b.n	8002fe4 <LL_EXTI_Init+0x1dc>
      }
 8002fe2:	bf00      	nop
#endif
  }
  return status;
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <LL_GPIO_SetPinMode>:
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b089      	sub	sp, #36	; 0x24
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	fa93 f3a3 	rbit	r3, r3
 8003008:	613b      	str	r3, [r7, #16]
  return result;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	fab3 f383 	clz	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	2103      	movs	r1, #3
 8003016:	fa01 f303 	lsl.w	r3, r1, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	401a      	ands	r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	fa93 f3a3 	rbit	r3, r3
 8003028:	61bb      	str	r3, [r7, #24]
  return result;
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	fab3 f383 	clz	r3, r3
 8003030:	b2db      	uxtb	r3, r3
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	fa01 f303 	lsl.w	r3, r1, r3
 800303a:	431a      	orrs	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	601a      	str	r2, [r3, #0]
}
 8003040:	bf00      	nop
 8003042:	3724      	adds	r7, #36	; 0x24
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <LL_GPIO_SetPinOutputType>:
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	43db      	mvns	r3, r3
 8003060:	401a      	ands	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	431a      	orrs	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	605a      	str	r2, [r3, #4]
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_GPIO_SetPinSpeed>:
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	; 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	613b      	str	r3, [r7, #16]
  return result;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	fab3 f383 	clz	r3, r3
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	2103      	movs	r1, #3
 80030a4:	fa01 f303 	lsl.w	r3, r1, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	401a      	ands	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	61bb      	str	r3, [r7, #24]
  return result;
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	fab3 f383 	clz	r3, r3
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	431a      	orrs	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	609a      	str	r2, [r3, #8]
}
 80030ce:	bf00      	nop
 80030d0:	3724      	adds	r7, #36	; 0x24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <LL_GPIO_SetPinPull>:
{
 80030da:	b480      	push	{r7}
 80030dc:	b089      	sub	sp, #36	; 0x24
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	613b      	str	r3, [r7, #16]
  return result;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	2103      	movs	r1, #3
 8003102:	fa01 f303 	lsl.w	r3, r1, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	401a      	ands	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	fa93 f3a3 	rbit	r3, r3
 8003114:	61bb      	str	r3, [r7, #24]
  return result;
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	fab3 f383 	clz	r3, r3
 800311c:	b2db      	uxtb	r3, r3
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	431a      	orrs	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	60da      	str	r2, [r3, #12]
}
 800312c:	bf00      	nop
 800312e:	3724      	adds	r7, #36	; 0x24
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <LL_GPIO_SetAFPin_0_7>:
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	; 0x24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a1a      	ldr	r2, [r3, #32]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	fa93 f3a3 	rbit	r3, r3
 8003152:	613b      	str	r3, [r7, #16]
  return result;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	210f      	movs	r1, #15
 8003160:	fa01 f303 	lsl.w	r3, r1, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	401a      	ands	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	61bb      	str	r3, [r7, #24]
  return result;
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	fab3 f383 	clz	r3, r3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	fa01 f303 	lsl.w	r3, r1, r3
 8003184:	431a      	orrs	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	621a      	str	r2, [r3, #32]
}
 800318a:	bf00      	nop
 800318c:	3724      	adds	r7, #36	; 0x24
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <LL_GPIO_SetAFPin_8_15>:
{
 8003196:	b480      	push	{r7}
 8003198:	b089      	sub	sp, #36	; 0x24
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	0a1b      	lsrs	r3, r3, #8
 80031aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	fa93 f3a3 	rbit	r3, r3
 80031b2:	613b      	str	r3, [r7, #16]
  return result;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	fab3 f383 	clz	r3, r3
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	210f      	movs	r1, #15
 80031c0:	fa01 f303 	lsl.w	r3, r1, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	401a      	ands	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	0a1b      	lsrs	r3, r3, #8
 80031cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	fa93 f3a3 	rbit	r3, r3
 80031d4:	61bb      	str	r3, [r7, #24]
  return result;
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	fab3 f383 	clz	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	431a      	orrs	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 80031ec:	bf00      	nop
 80031ee:	3724      	adds	r7, #36	; 0x24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	613b      	str	r3, [r7, #16]
  return result;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	fab3 f383 	clz	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800321a:	e051      	b.n	80032c0 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	2101      	movs	r1, #1
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	fa01 f303 	lsl.w	r3, r1, r3
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d043      	beq.n	80032ba <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d003      	beq.n	8003242 <LL_GPIO_Init+0x4a>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d10e      	bne.n	8003260 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	461a      	mov	r2, r3
 8003248:	69b9      	ldr	r1, [r7, #24]
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff ff16 	bl	800307c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	6819      	ldr	r1, [r3, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	461a      	mov	r2, r3
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff fef6 	bl	800304c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	461a      	mov	r2, r3
 8003266:	69b9      	ldr	r1, [r7, #24]
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff ff36 	bl	80030da <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d11a      	bne.n	80032ac <LL_GPIO_Init+0xb4>
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	fa93 f3a3 	rbit	r3, r3
 8003280:	60bb      	str	r3, [r7, #8]
  return result;
 8003282:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003284:	fab3 f383 	clz	r3, r3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b07      	cmp	r3, #7
 800328c:	d807      	bhi.n	800329e <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	461a      	mov	r2, r3
 8003294:	69b9      	ldr	r1, [r7, #24]
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff ff4e 	bl	8003138 <LL_GPIO_SetAFPin_0_7>
 800329c:	e006      	b.n	80032ac <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	461a      	mov	r2, r3
 80032a4:	69b9      	ldr	r1, [r7, #24]
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff ff75 	bl	8003196 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	461a      	mov	r2, r3
 80032b2:	69b9      	ldr	r1, [r7, #24]
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff fe9a 	bl	8002fee <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3301      	adds	r3, #1
 80032be:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1a6      	bne.n	800321c <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3720      	adds	r7, #32
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <LL_I2C_Enable>:
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f043 0201 	orr.w	r2, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	601a      	str	r2, [r3, #0]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <LL_I2C_Disable>:
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f023 0201 	bic.w	r2, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	601a      	str	r2, [r3, #0]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <LL_I2C_ConfigFilters>:
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	0219      	lsls	r1, r3, #8
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	430b      	orrs	r3, r1
 8003334:	431a      	orrs	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	601a      	str	r2, [r3, #0]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <LL_I2C_SetOwnAddress1>:
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800335a:	f023 0307 	bic.w	r3, r3, #7
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	430a      	orrs	r2, r1
 8003364:	431a      	orrs	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	609a      	str	r2, [r3, #8]
}
 800336a:	bf00      	nop
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <LL_I2C_EnableOwnAddress1>:
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	609a      	str	r2, [r3, #8]
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <LL_I2C_DisableOwnAddress1>:
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	609a      	str	r2, [r3, #8]
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <LL_I2C_SetTiming>:
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	611a      	str	r2, [r3, #16]
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <LL_I2C_SetMode>:
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	601a      	str	r2, [r3, #0]
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <LL_I2C_AcknowledgeNextData>:
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	605a      	str	r2, [r3, #4]
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ff65 	bl	80032f8 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	6899      	ldr	r1, [r3, #8]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	461a      	mov	r2, r3
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff ff6d 	bl	8003318 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	4619      	mov	r1, r3
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff ffb6 	bl	80033b6 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff ff44 	bl	80032d8 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ffa0 	bl	8003396 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6919      	ldr	r1, [r3, #16]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	461a      	mov	r2, r3
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff ff70 	bl	8003346 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff ff81 	bl	8003376 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4619      	mov	r1, r3
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff ffa9 	bl	80033d2 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	4619      	mov	r1, r3
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ffb6 	bl	80033f8 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <LL_TIM_SetPrescaler>:
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <LL_TIM_SetAutoReload>:
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <LL_TIM_SetRepetitionCounter>:
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <LL_TIM_OC_SetCompareCH1>:
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <LL_TIM_OC_SetCompareCH2>:
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <LL_TIM_OC_SetCompareCH3>:
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <LL_TIM_OC_SetCompareCH4>:
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <LL_TIM_OC_SetCompareCH5>:
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	659a      	str	r2, [r3, #88]	; 0x58
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <LL_TIM_OC_SetCompareCH6>:
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f043 0201 	orr.w	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	615a      	str	r2, [r3, #20]
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
	...

080035b8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a2f      	ldr	r2, [pc, #188]	; (8003688 <LL_TIM_Init+0xd0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d007      	beq.n	80035e0 <LL_TIM_Init+0x28>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d6:	d003      	beq.n	80035e0 <LL_TIM_Init+0x28>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a2c      	ldr	r2, [pc, #176]	; (800368c <LL_TIM_Init+0xd4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d106      	bne.n	80035ee <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a25      	ldr	r2, [pc, #148]	; (8003688 <LL_TIM_Init+0xd0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <LL_TIM_Init+0x66>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fc:	d00f      	beq.n	800361e <LL_TIM_Init+0x66>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a22      	ldr	r2, [pc, #136]	; (800368c <LL_TIM_Init+0xd4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00b      	beq.n	800361e <LL_TIM_Init+0x66>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a21      	ldr	r2, [pc, #132]	; (8003690 <LL_TIM_Init+0xd8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d007      	beq.n	800361e <LL_TIM_Init+0x66>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a20      	ldr	r2, [pc, #128]	; (8003694 <LL_TIM_Init+0xdc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d003      	beq.n	800361e <LL_TIM_Init+0x66>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a1f      	ldr	r2, [pc, #124]	; (8003698 <LL_TIM_Init+0xe0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d106      	bne.n	800362c <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	4619      	mov	r1, r3
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff ff3a 	bl	80034b2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	4619      	mov	r1, r3
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7ff ff26 	bl	8003496 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a0e      	ldr	r2, [pc, #56]	; (8003688 <LL_TIM_Init+0xd0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00b      	beq.n	800366a <LL_TIM_Init+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a0e      	ldr	r2, [pc, #56]	; (8003690 <LL_TIM_Init+0xd8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d007      	beq.n	800366a <LL_TIM_Init+0xb2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a0d      	ldr	r2, [pc, #52]	; (8003694 <LL_TIM_Init+0xdc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d003      	beq.n	800366a <LL_TIM_Init+0xb2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a0c      	ldr	r2, [pc, #48]	; (8003698 <LL_TIM_Init+0xe0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d105      	bne.n	8003676 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	4619      	mov	r1, r3
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff ff2c 	bl	80034ce <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff ff8d 	bl	8003596 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40012c00 	.word	0x40012c00
 800368c:	40000400 	.word	0x40000400
 8003690:	40014000 	.word	0x40014000
 8003694:	40014400 	.word	0x40014400
 8003698:	40014800 	.word	0x40014800

0800369c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b2:	d045      	beq.n	8003740 <LL_TIM_OC_Init+0xa4>
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ba:	d848      	bhi.n	800374e <LL_TIM_OC_Init+0xb2>
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c2:	d036      	beq.n	8003732 <LL_TIM_OC_Init+0x96>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ca:	d840      	bhi.n	800374e <LL_TIM_OC_Init+0xb2>
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d2:	d027      	beq.n	8003724 <LL_TIM_OC_Init+0x88>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036da:	d838      	bhi.n	800374e <LL_TIM_OC_Init+0xb2>
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e2:	d018      	beq.n	8003716 <LL_TIM_OC_Init+0x7a>
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ea:	d830      	bhi.n	800374e <LL_TIM_OC_Init+0xb2>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d003      	beq.n	80036fa <LL_TIM_OC_Init+0x5e>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b10      	cmp	r3, #16
 80036f6:	d007      	beq.n	8003708 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80036f8:	e029      	b.n	800374e <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 f82d 	bl	800375c <OC1Config>
 8003702:	4603      	mov	r3, r0
 8003704:	75fb      	strb	r3, [r7, #23]
      break;
 8003706:	e023      	b.n	8003750 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f8a0 	bl	8003850 <OC2Config>
 8003710:	4603      	mov	r3, r0
 8003712:	75fb      	strb	r3, [r7, #23]
      break;
 8003714:	e01c      	b.n	8003750 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f917 	bl	800394c <OC3Config>
 800371e:	4603      	mov	r3, r0
 8003720:	75fb      	strb	r3, [r7, #23]
      break;
 8003722:	e015      	b.n	8003750 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f98e 	bl	8003a48 <OC4Config>
 800372c:	4603      	mov	r3, r0
 800372e:	75fb      	strb	r3, [r7, #23]
      break;
 8003730:	e00e      	b.n	8003750 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 f9ed 	bl	8003b14 <OC5Config>
 800373a:	4603      	mov	r3, r0
 800373c:	75fb      	strb	r3, [r7, #23]
      break;
 800373e:	e007      	b.n	8003750 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 fa44 	bl	8003bd0 <OC6Config>
 8003748:	4603      	mov	r3, r0
 800374a:	75fb      	strb	r3, [r7, #23]
      break;
 800374c:	e000      	b.n	8003750 <LL_TIM_OC_Init+0xb4>
      break;
 800374e:	bf00      	nop
  }

  return result;
 8003750:	7dfb      	ldrb	r3, [r7, #23]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	f023 0201 	bic.w	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0303 	bic.w	r3, r3, #3
 800378a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f023 0202 	bic.w	r2, r3, #2
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f023 0201 	bic.w	r2, r3, #1
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a20      	ldr	r2, [pc, #128]	; (8003840 <OC1Config+0xe4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00b      	beq.n	80037da <OC1Config+0x7e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a1f      	ldr	r2, [pc, #124]	; (8003844 <OC1Config+0xe8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d007      	beq.n	80037da <OC1Config+0x7e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a1e      	ldr	r2, [pc, #120]	; (8003848 <OC1Config+0xec>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d003      	beq.n	80037da <OC1Config+0x7e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a1d      	ldr	r2, [pc, #116]	; (800384c <OC1Config+0xf0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d11e      	bne.n	8003818 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f023 0208 	bic.w	r2, r3, #8
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f023 0204 	bic.w	r2, r3, #4
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4313      	orrs	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	4313      	orrs	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4619      	mov	r1, r3
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff fe5d 	bl	80034ea <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40012c00 	.word	0x40012c00
 8003844:	40014000 	.word	0x40014000
 8003848:	40014400 	.word	0x40014400
 800384c:	40014800 	.word	0x40014800

08003850 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	f023 0210 	bic.w	r2, r3, #16
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	6812      	ldr	r2, [r2, #0]
 800388e:	0212      	lsls	r2, r2, #8
 8003890:	4313      	orrs	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f023 0220 	bic.w	r2, r3, #32
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f023 0210 	bic.w	r2, r3, #16
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a21      	ldr	r2, [pc, #132]	; (800393c <OC2Config+0xec>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d00b      	beq.n	80038d4 <OC2Config+0x84>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a20      	ldr	r2, [pc, #128]	; (8003940 <OC2Config+0xf0>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d007      	beq.n	80038d4 <OC2Config+0x84>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a1f      	ldr	r2, [pc, #124]	; (8003944 <OC2Config+0xf4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d003      	beq.n	80038d4 <OC2Config+0x84>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a1e      	ldr	r2, [pc, #120]	; (8003948 <OC2Config+0xf8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d11f      	bne.n	8003914 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	019b      	lsls	r3, r3, #6
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	019b      	lsls	r3, r3, #6
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4619      	mov	r1, r3
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff fded 	bl	8003506 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40012c00 	.word	0x40012c00
 8003940:	40014000 	.word	0x40014000
 8003944:	40014400 	.word	0x40014400
 8003948:	40014800 	.word	0x40014800

0800394c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0303 	bic.w	r3, r3, #3
 800397a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	4313      	orrs	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a21      	ldr	r2, [pc, #132]	; (8003a38 <OC3Config+0xec>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00b      	beq.n	80039ce <OC3Config+0x82>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a20      	ldr	r2, [pc, #128]	; (8003a3c <OC3Config+0xf0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d007      	beq.n	80039ce <OC3Config+0x82>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a1f      	ldr	r2, [pc, #124]	; (8003a40 <OC3Config+0xf4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d003      	beq.n	80039ce <OC3Config+0x82>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a1e      	ldr	r2, [pc, #120]	; (8003a44 <OC3Config+0xf8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d11f      	bne.n	8003a0e <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	029b      	lsls	r3, r3, #10
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	029b      	lsls	r3, r3, #10
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	015b      	lsls	r3, r3, #5
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	4619      	mov	r1, r3
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff fd7e 	bl	8003522 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40012c00 	.word	0x40012c00
 8003a3c:	40014000 	.word	0x40014000
 8003a40:	40014400 	.word	0x40014400
 8003a44:	40014800 	.word	0x40014800

08003a48 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	6812      	ldr	r2, [r2, #0]
 8003a86:	0212      	lsls	r2, r2, #8
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	031b      	lsls	r3, r3, #12
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	031b      	lsls	r3, r3, #12
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a15      	ldr	r2, [pc, #84]	; (8003b04 <OC4Config+0xbc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00b      	beq.n	8003acc <OC4Config+0x84>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a14      	ldr	r2, [pc, #80]	; (8003b08 <OC4Config+0xc0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d007      	beq.n	8003acc <OC4Config+0x84>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a13      	ldr	r2, [pc, #76]	; (8003b0c <OC4Config+0xc4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d003      	beq.n	8003acc <OC4Config+0x84>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a12      	ldr	r2, [pc, #72]	; (8003b10 <OC4Config+0xc8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d107      	bne.n	8003adc <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	019b      	lsls	r3, r3, #6
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	4619      	mov	r1, r3
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff fd25 	bl	800353e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40012c00 	.word	0x40012c00
 8003b08:	40014000 	.word	0x40014000
 8003b0c:	40014400 	.word	0x40014400
 8003b10:	40014800 	.word	0x40014800

08003b14 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b34:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	6812      	ldr	r2, [r2, #0]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	041b      	lsls	r3, r3, #16
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	041b      	lsls	r3, r3, #16
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a15      	ldr	r2, [pc, #84]	; (8003bc0 <OC5Config+0xac>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00b      	beq.n	8003b88 <OC5Config+0x74>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a14      	ldr	r2, [pc, #80]	; (8003bc4 <OC5Config+0xb0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d007      	beq.n	8003b88 <OC5Config+0x74>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a13      	ldr	r2, [pc, #76]	; (8003bc8 <OC5Config+0xb4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d003      	beq.n	8003b88 <OC5Config+0x74>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <OC5Config+0xb8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d109      	bne.n	8003b9c <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	021b      	lsls	r3, r3, #8
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff fcd6 	bl	800355a <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40012c00 	.word	0x40012c00
 8003bc4:	40014000 	.word	0x40014000
 8003bc8:	40014400 	.word	0x40014400
 8003bcc:	40014800 	.word	0x40014800

08003bd0 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	6812      	ldr	r2, [r2, #0]
 8003c00:	0212      	lsls	r2, r2, #8
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	051b      	lsls	r3, r3, #20
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	051b      	lsls	r3, r3, #20
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a14      	ldr	r2, [pc, #80]	; (8003c7c <OC6Config+0xac>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00b      	beq.n	8003c46 <OC6Config+0x76>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a13      	ldr	r2, [pc, #76]	; (8003c80 <OC6Config+0xb0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d007      	beq.n	8003c46 <OC6Config+0x76>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <OC6Config+0xb4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d003      	beq.n	8003c46 <OC6Config+0x76>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a11      	ldr	r2, [pc, #68]	; (8003c88 <OC6Config+0xb8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d109      	bne.n	8003c5a <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	029b      	lsls	r3, r3, #10
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4619      	mov	r1, r3
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff fc87 	bl	800357a <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40012c00 	.word	0x40012c00
 8003c80:	40014000 	.word	0x40014000
 8003c84:	40014400 	.word	0x40014400
 8003c88:	40014800 	.word	0x40014800

08003c8c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9e:	4a07      	ldr	r2, [pc, #28]	; (8003cbc <LL_InitTick+0x30>)
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <LL_InitTick+0x30>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003caa:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <LL_InitTick+0x30>)
 8003cac:	2205      	movs	r2, #5
 8003cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	e000e010 	.word	0xe000e010

08003cc0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003cc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff ffdd 	bl	8003c8c <LL_InitTick>
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003ce4:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <LL_mDelay+0x48>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003cea:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf2:	d00c      	beq.n	8003d0e <LL_mDelay+0x32>
  {
    Delay++;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003cfa:	e008      	b.n	8003d0e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003cfc:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <LL_mDelay+0x48>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <LL_mDelay+0x32>
    {
      Delay--;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1f3      	bne.n	8003cfc <LL_mDelay+0x20>
    }
  }
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	e000e010 	.word	0xe000e010

08003d28 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003d30:	4a04      	ldr	r2, [pc, #16]	; (8003d44 <LL_SetSystemCoreClock+0x1c>)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6013      	str	r3, [r2, #0]
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	20000004 	.word	0x20000004

08003d48 <__errno>:
 8003d48:	4b01      	ldr	r3, [pc, #4]	; (8003d50 <__errno+0x8>)
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20000008 	.word	0x20000008

08003d54 <__libc_init_array>:
 8003d54:	b570      	push	{r4, r5, r6, lr}
 8003d56:	4d0d      	ldr	r5, [pc, #52]	; (8003d8c <__libc_init_array+0x38>)
 8003d58:	4c0d      	ldr	r4, [pc, #52]	; (8003d90 <__libc_init_array+0x3c>)
 8003d5a:	1b64      	subs	r4, r4, r5
 8003d5c:	10a4      	asrs	r4, r4, #2
 8003d5e:	2600      	movs	r6, #0
 8003d60:	42a6      	cmp	r6, r4
 8003d62:	d109      	bne.n	8003d78 <__libc_init_array+0x24>
 8003d64:	4d0b      	ldr	r5, [pc, #44]	; (8003d94 <__libc_init_array+0x40>)
 8003d66:	4c0c      	ldr	r4, [pc, #48]	; (8003d98 <__libc_init_array+0x44>)
 8003d68:	f001 f8b8 	bl	8004edc <_init>
 8003d6c:	1b64      	subs	r4, r4, r5
 8003d6e:	10a4      	asrs	r4, r4, #2
 8003d70:	2600      	movs	r6, #0
 8003d72:	42a6      	cmp	r6, r4
 8003d74:	d105      	bne.n	8003d82 <__libc_init_array+0x2e>
 8003d76:	bd70      	pop	{r4, r5, r6, pc}
 8003d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d7c:	4798      	blx	r3
 8003d7e:	3601      	adds	r6, #1
 8003d80:	e7ee      	b.n	8003d60 <__libc_init_array+0xc>
 8003d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d86:	4798      	blx	r3
 8003d88:	3601      	adds	r6, #1
 8003d8a:	e7f2      	b.n	8003d72 <__libc_init_array+0x1e>
 8003d8c:	08004f7c 	.word	0x08004f7c
 8003d90:	08004f7c 	.word	0x08004f7c
 8003d94:	08004f7c 	.word	0x08004f7c
 8003d98:	08004f80 	.word	0x08004f80

08003d9c <memset>:
 8003d9c:	4402      	add	r2, r0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d100      	bne.n	8003da6 <memset+0xa>
 8003da4:	4770      	bx	lr
 8003da6:	f803 1b01 	strb.w	r1, [r3], #1
 8003daa:	e7f9      	b.n	8003da0 <memset+0x4>

08003dac <siprintf>:
 8003dac:	b40e      	push	{r1, r2, r3}
 8003dae:	b500      	push	{lr}
 8003db0:	b09c      	sub	sp, #112	; 0x70
 8003db2:	ab1d      	add	r3, sp, #116	; 0x74
 8003db4:	9002      	str	r0, [sp, #8]
 8003db6:	9006      	str	r0, [sp, #24]
 8003db8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dbc:	4809      	ldr	r0, [pc, #36]	; (8003de4 <siprintf+0x38>)
 8003dbe:	9107      	str	r1, [sp, #28]
 8003dc0:	9104      	str	r1, [sp, #16]
 8003dc2:	4909      	ldr	r1, [pc, #36]	; (8003de8 <siprintf+0x3c>)
 8003dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dc8:	9105      	str	r1, [sp, #20]
 8003dca:	6800      	ldr	r0, [r0, #0]
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	a902      	add	r1, sp, #8
 8003dd0:	f000 f88e 	bl	8003ef0 <_svfiprintf_r>
 8003dd4:	9b02      	ldr	r3, [sp, #8]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	b01c      	add	sp, #112	; 0x70
 8003ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003de0:	b003      	add	sp, #12
 8003de2:	4770      	bx	lr
 8003de4:	20000008 	.word	0x20000008
 8003de8:	ffff0208 	.word	0xffff0208

08003dec <strncat>:
 8003dec:	b530      	push	{r4, r5, lr}
 8003dee:	4604      	mov	r4, r0
 8003df0:	7825      	ldrb	r5, [r4, #0]
 8003df2:	4623      	mov	r3, r4
 8003df4:	3401      	adds	r4, #1
 8003df6:	2d00      	cmp	r5, #0
 8003df8:	d1fa      	bne.n	8003df0 <strncat+0x4>
 8003dfa:	3a01      	subs	r2, #1
 8003dfc:	d304      	bcc.n	8003e08 <strncat+0x1c>
 8003dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e02:	f803 4b01 	strb.w	r4, [r3], #1
 8003e06:	b904      	cbnz	r4, 8003e0a <strncat+0x1e>
 8003e08:	bd30      	pop	{r4, r5, pc}
 8003e0a:	2a00      	cmp	r2, #0
 8003e0c:	d1f5      	bne.n	8003dfa <strncat+0xe>
 8003e0e:	701a      	strb	r2, [r3, #0]
 8003e10:	e7f3      	b.n	8003dfa <strncat+0xe>

08003e12 <strncpy>:
 8003e12:	b510      	push	{r4, lr}
 8003e14:	3901      	subs	r1, #1
 8003e16:	4603      	mov	r3, r0
 8003e18:	b132      	cbz	r2, 8003e28 <strncpy+0x16>
 8003e1a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003e1e:	f803 4b01 	strb.w	r4, [r3], #1
 8003e22:	3a01      	subs	r2, #1
 8003e24:	2c00      	cmp	r4, #0
 8003e26:	d1f7      	bne.n	8003e18 <strncpy+0x6>
 8003e28:	441a      	add	r2, r3
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d100      	bne.n	8003e32 <strncpy+0x20>
 8003e30:	bd10      	pop	{r4, pc}
 8003e32:	f803 1b01 	strb.w	r1, [r3], #1
 8003e36:	e7f9      	b.n	8003e2c <strncpy+0x1a>

08003e38 <__ssputs_r>:
 8003e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e3c:	688e      	ldr	r6, [r1, #8]
 8003e3e:	429e      	cmp	r6, r3
 8003e40:	4682      	mov	sl, r0
 8003e42:	460c      	mov	r4, r1
 8003e44:	4690      	mov	r8, r2
 8003e46:	461f      	mov	r7, r3
 8003e48:	d838      	bhi.n	8003ebc <__ssputs_r+0x84>
 8003e4a:	898a      	ldrh	r2, [r1, #12]
 8003e4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e50:	d032      	beq.n	8003eb8 <__ssputs_r+0x80>
 8003e52:	6825      	ldr	r5, [r4, #0]
 8003e54:	6909      	ldr	r1, [r1, #16]
 8003e56:	eba5 0901 	sub.w	r9, r5, r1
 8003e5a:	6965      	ldr	r5, [r4, #20]
 8003e5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e64:	3301      	adds	r3, #1
 8003e66:	444b      	add	r3, r9
 8003e68:	106d      	asrs	r5, r5, #1
 8003e6a:	429d      	cmp	r5, r3
 8003e6c:	bf38      	it	cc
 8003e6e:	461d      	movcc	r5, r3
 8003e70:	0553      	lsls	r3, r2, #21
 8003e72:	d531      	bpl.n	8003ed8 <__ssputs_r+0xa0>
 8003e74:	4629      	mov	r1, r5
 8003e76:	f000 fb47 	bl	8004508 <_malloc_r>
 8003e7a:	4606      	mov	r6, r0
 8003e7c:	b950      	cbnz	r0, 8003e94 <__ssputs_r+0x5c>
 8003e7e:	230c      	movs	r3, #12
 8003e80:	f8ca 3000 	str.w	r3, [sl]
 8003e84:	89a3      	ldrh	r3, [r4, #12]
 8003e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e8a:	81a3      	strh	r3, [r4, #12]
 8003e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e94:	6921      	ldr	r1, [r4, #16]
 8003e96:	464a      	mov	r2, r9
 8003e98:	f000 fabe 	bl	8004418 <memcpy>
 8003e9c:	89a3      	ldrh	r3, [r4, #12]
 8003e9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea6:	81a3      	strh	r3, [r4, #12]
 8003ea8:	6126      	str	r6, [r4, #16]
 8003eaa:	6165      	str	r5, [r4, #20]
 8003eac:	444e      	add	r6, r9
 8003eae:	eba5 0509 	sub.w	r5, r5, r9
 8003eb2:	6026      	str	r6, [r4, #0]
 8003eb4:	60a5      	str	r5, [r4, #8]
 8003eb6:	463e      	mov	r6, r7
 8003eb8:	42be      	cmp	r6, r7
 8003eba:	d900      	bls.n	8003ebe <__ssputs_r+0x86>
 8003ebc:	463e      	mov	r6, r7
 8003ebe:	4632      	mov	r2, r6
 8003ec0:	6820      	ldr	r0, [r4, #0]
 8003ec2:	4641      	mov	r1, r8
 8003ec4:	f000 fab6 	bl	8004434 <memmove>
 8003ec8:	68a3      	ldr	r3, [r4, #8]
 8003eca:	6822      	ldr	r2, [r4, #0]
 8003ecc:	1b9b      	subs	r3, r3, r6
 8003ece:	4432      	add	r2, r6
 8003ed0:	60a3      	str	r3, [r4, #8]
 8003ed2:	6022      	str	r2, [r4, #0]
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	e7db      	b.n	8003e90 <__ssputs_r+0x58>
 8003ed8:	462a      	mov	r2, r5
 8003eda:	f000 fb6f 	bl	80045bc <_realloc_r>
 8003ede:	4606      	mov	r6, r0
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	d1e1      	bne.n	8003ea8 <__ssputs_r+0x70>
 8003ee4:	6921      	ldr	r1, [r4, #16]
 8003ee6:	4650      	mov	r0, sl
 8003ee8:	f000 fabe 	bl	8004468 <_free_r>
 8003eec:	e7c7      	b.n	8003e7e <__ssputs_r+0x46>
	...

08003ef0 <_svfiprintf_r>:
 8003ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef4:	4698      	mov	r8, r3
 8003ef6:	898b      	ldrh	r3, [r1, #12]
 8003ef8:	061b      	lsls	r3, r3, #24
 8003efa:	b09d      	sub	sp, #116	; 0x74
 8003efc:	4607      	mov	r7, r0
 8003efe:	460d      	mov	r5, r1
 8003f00:	4614      	mov	r4, r2
 8003f02:	d50e      	bpl.n	8003f22 <_svfiprintf_r+0x32>
 8003f04:	690b      	ldr	r3, [r1, #16]
 8003f06:	b963      	cbnz	r3, 8003f22 <_svfiprintf_r+0x32>
 8003f08:	2140      	movs	r1, #64	; 0x40
 8003f0a:	f000 fafd 	bl	8004508 <_malloc_r>
 8003f0e:	6028      	str	r0, [r5, #0]
 8003f10:	6128      	str	r0, [r5, #16]
 8003f12:	b920      	cbnz	r0, 8003f1e <_svfiprintf_r+0x2e>
 8003f14:	230c      	movs	r3, #12
 8003f16:	603b      	str	r3, [r7, #0]
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1c:	e0d1      	b.n	80040c2 <_svfiprintf_r+0x1d2>
 8003f1e:	2340      	movs	r3, #64	; 0x40
 8003f20:	616b      	str	r3, [r5, #20]
 8003f22:	2300      	movs	r3, #0
 8003f24:	9309      	str	r3, [sp, #36]	; 0x24
 8003f26:	2320      	movs	r3, #32
 8003f28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f30:	2330      	movs	r3, #48	; 0x30
 8003f32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80040dc <_svfiprintf_r+0x1ec>
 8003f36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f3a:	f04f 0901 	mov.w	r9, #1
 8003f3e:	4623      	mov	r3, r4
 8003f40:	469a      	mov	sl, r3
 8003f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f46:	b10a      	cbz	r2, 8003f4c <_svfiprintf_r+0x5c>
 8003f48:	2a25      	cmp	r2, #37	; 0x25
 8003f4a:	d1f9      	bne.n	8003f40 <_svfiprintf_r+0x50>
 8003f4c:	ebba 0b04 	subs.w	fp, sl, r4
 8003f50:	d00b      	beq.n	8003f6a <_svfiprintf_r+0x7a>
 8003f52:	465b      	mov	r3, fp
 8003f54:	4622      	mov	r2, r4
 8003f56:	4629      	mov	r1, r5
 8003f58:	4638      	mov	r0, r7
 8003f5a:	f7ff ff6d 	bl	8003e38 <__ssputs_r>
 8003f5e:	3001      	adds	r0, #1
 8003f60:	f000 80aa 	beq.w	80040b8 <_svfiprintf_r+0x1c8>
 8003f64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f66:	445a      	add	r2, fp
 8003f68:	9209      	str	r2, [sp, #36]	; 0x24
 8003f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 80a2 	beq.w	80040b8 <_svfiprintf_r+0x1c8>
 8003f74:	2300      	movs	r3, #0
 8003f76:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f7e:	f10a 0a01 	add.w	sl, sl, #1
 8003f82:	9304      	str	r3, [sp, #16]
 8003f84:	9307      	str	r3, [sp, #28]
 8003f86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f8a:	931a      	str	r3, [sp, #104]	; 0x68
 8003f8c:	4654      	mov	r4, sl
 8003f8e:	2205      	movs	r2, #5
 8003f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f94:	4851      	ldr	r0, [pc, #324]	; (80040dc <_svfiprintf_r+0x1ec>)
 8003f96:	f7fc f923 	bl	80001e0 <memchr>
 8003f9a:	9a04      	ldr	r2, [sp, #16]
 8003f9c:	b9d8      	cbnz	r0, 8003fd6 <_svfiprintf_r+0xe6>
 8003f9e:	06d0      	lsls	r0, r2, #27
 8003fa0:	bf44      	itt	mi
 8003fa2:	2320      	movmi	r3, #32
 8003fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fa8:	0711      	lsls	r1, r2, #28
 8003faa:	bf44      	itt	mi
 8003fac:	232b      	movmi	r3, #43	; 0x2b
 8003fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8003fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8003fb8:	d015      	beq.n	8003fe6 <_svfiprintf_r+0xf6>
 8003fba:	9a07      	ldr	r2, [sp, #28]
 8003fbc:	4654      	mov	r4, sl
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	f04f 0c0a 	mov.w	ip, #10
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fca:	3b30      	subs	r3, #48	; 0x30
 8003fcc:	2b09      	cmp	r3, #9
 8003fce:	d94e      	bls.n	800406e <_svfiprintf_r+0x17e>
 8003fd0:	b1b0      	cbz	r0, 8004000 <_svfiprintf_r+0x110>
 8003fd2:	9207      	str	r2, [sp, #28]
 8003fd4:	e014      	b.n	8004000 <_svfiprintf_r+0x110>
 8003fd6:	eba0 0308 	sub.w	r3, r0, r8
 8003fda:	fa09 f303 	lsl.w	r3, r9, r3
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	9304      	str	r3, [sp, #16]
 8003fe2:	46a2      	mov	sl, r4
 8003fe4:	e7d2      	b.n	8003f8c <_svfiprintf_r+0x9c>
 8003fe6:	9b03      	ldr	r3, [sp, #12]
 8003fe8:	1d19      	adds	r1, r3, #4
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	9103      	str	r1, [sp, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	bfbb      	ittet	lt
 8003ff2:	425b      	neglt	r3, r3
 8003ff4:	f042 0202 	orrlt.w	r2, r2, #2
 8003ff8:	9307      	strge	r3, [sp, #28]
 8003ffa:	9307      	strlt	r3, [sp, #28]
 8003ffc:	bfb8      	it	lt
 8003ffe:	9204      	strlt	r2, [sp, #16]
 8004000:	7823      	ldrb	r3, [r4, #0]
 8004002:	2b2e      	cmp	r3, #46	; 0x2e
 8004004:	d10c      	bne.n	8004020 <_svfiprintf_r+0x130>
 8004006:	7863      	ldrb	r3, [r4, #1]
 8004008:	2b2a      	cmp	r3, #42	; 0x2a
 800400a:	d135      	bne.n	8004078 <_svfiprintf_r+0x188>
 800400c:	9b03      	ldr	r3, [sp, #12]
 800400e:	1d1a      	adds	r2, r3, #4
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	9203      	str	r2, [sp, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	bfb8      	it	lt
 8004018:	f04f 33ff 	movlt.w	r3, #4294967295
 800401c:	3402      	adds	r4, #2
 800401e:	9305      	str	r3, [sp, #20]
 8004020:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040ec <_svfiprintf_r+0x1fc>
 8004024:	7821      	ldrb	r1, [r4, #0]
 8004026:	2203      	movs	r2, #3
 8004028:	4650      	mov	r0, sl
 800402a:	f7fc f8d9 	bl	80001e0 <memchr>
 800402e:	b140      	cbz	r0, 8004042 <_svfiprintf_r+0x152>
 8004030:	2340      	movs	r3, #64	; 0x40
 8004032:	eba0 000a 	sub.w	r0, r0, sl
 8004036:	fa03 f000 	lsl.w	r0, r3, r0
 800403a:	9b04      	ldr	r3, [sp, #16]
 800403c:	4303      	orrs	r3, r0
 800403e:	3401      	adds	r4, #1
 8004040:	9304      	str	r3, [sp, #16]
 8004042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004046:	4826      	ldr	r0, [pc, #152]	; (80040e0 <_svfiprintf_r+0x1f0>)
 8004048:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800404c:	2206      	movs	r2, #6
 800404e:	f7fc f8c7 	bl	80001e0 <memchr>
 8004052:	2800      	cmp	r0, #0
 8004054:	d038      	beq.n	80040c8 <_svfiprintf_r+0x1d8>
 8004056:	4b23      	ldr	r3, [pc, #140]	; (80040e4 <_svfiprintf_r+0x1f4>)
 8004058:	bb1b      	cbnz	r3, 80040a2 <_svfiprintf_r+0x1b2>
 800405a:	9b03      	ldr	r3, [sp, #12]
 800405c:	3307      	adds	r3, #7
 800405e:	f023 0307 	bic.w	r3, r3, #7
 8004062:	3308      	adds	r3, #8
 8004064:	9303      	str	r3, [sp, #12]
 8004066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004068:	4433      	add	r3, r6
 800406a:	9309      	str	r3, [sp, #36]	; 0x24
 800406c:	e767      	b.n	8003f3e <_svfiprintf_r+0x4e>
 800406e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004072:	460c      	mov	r4, r1
 8004074:	2001      	movs	r0, #1
 8004076:	e7a5      	b.n	8003fc4 <_svfiprintf_r+0xd4>
 8004078:	2300      	movs	r3, #0
 800407a:	3401      	adds	r4, #1
 800407c:	9305      	str	r3, [sp, #20]
 800407e:	4619      	mov	r1, r3
 8004080:	f04f 0c0a 	mov.w	ip, #10
 8004084:	4620      	mov	r0, r4
 8004086:	f810 2b01 	ldrb.w	r2, [r0], #1
 800408a:	3a30      	subs	r2, #48	; 0x30
 800408c:	2a09      	cmp	r2, #9
 800408e:	d903      	bls.n	8004098 <_svfiprintf_r+0x1a8>
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0c5      	beq.n	8004020 <_svfiprintf_r+0x130>
 8004094:	9105      	str	r1, [sp, #20]
 8004096:	e7c3      	b.n	8004020 <_svfiprintf_r+0x130>
 8004098:	fb0c 2101 	mla	r1, ip, r1, r2
 800409c:	4604      	mov	r4, r0
 800409e:	2301      	movs	r3, #1
 80040a0:	e7f0      	b.n	8004084 <_svfiprintf_r+0x194>
 80040a2:	ab03      	add	r3, sp, #12
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	462a      	mov	r2, r5
 80040a8:	4b0f      	ldr	r3, [pc, #60]	; (80040e8 <_svfiprintf_r+0x1f8>)
 80040aa:	a904      	add	r1, sp, #16
 80040ac:	4638      	mov	r0, r7
 80040ae:	f3af 8000 	nop.w
 80040b2:	1c42      	adds	r2, r0, #1
 80040b4:	4606      	mov	r6, r0
 80040b6:	d1d6      	bne.n	8004066 <_svfiprintf_r+0x176>
 80040b8:	89ab      	ldrh	r3, [r5, #12]
 80040ba:	065b      	lsls	r3, r3, #25
 80040bc:	f53f af2c 	bmi.w	8003f18 <_svfiprintf_r+0x28>
 80040c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040c2:	b01d      	add	sp, #116	; 0x74
 80040c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c8:	ab03      	add	r3, sp, #12
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	462a      	mov	r2, r5
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <_svfiprintf_r+0x1f8>)
 80040d0:	a904      	add	r1, sp, #16
 80040d2:	4638      	mov	r0, r7
 80040d4:	f000 f87a 	bl	80041cc <_printf_i>
 80040d8:	e7eb      	b.n	80040b2 <_svfiprintf_r+0x1c2>
 80040da:	bf00      	nop
 80040dc:	08004f29 	.word	0x08004f29
 80040e0:	08004f33 	.word	0x08004f33
 80040e4:	00000000 	.word	0x00000000
 80040e8:	08003e39 	.word	0x08003e39
 80040ec:	08004f2f 	.word	0x08004f2f

080040f0 <_printf_common>:
 80040f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040f4:	4616      	mov	r6, r2
 80040f6:	4699      	mov	r9, r3
 80040f8:	688a      	ldr	r2, [r1, #8]
 80040fa:	690b      	ldr	r3, [r1, #16]
 80040fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004100:	4293      	cmp	r3, r2
 8004102:	bfb8      	it	lt
 8004104:	4613      	movlt	r3, r2
 8004106:	6033      	str	r3, [r6, #0]
 8004108:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800410c:	4607      	mov	r7, r0
 800410e:	460c      	mov	r4, r1
 8004110:	b10a      	cbz	r2, 8004116 <_printf_common+0x26>
 8004112:	3301      	adds	r3, #1
 8004114:	6033      	str	r3, [r6, #0]
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	0699      	lsls	r1, r3, #26
 800411a:	bf42      	ittt	mi
 800411c:	6833      	ldrmi	r3, [r6, #0]
 800411e:	3302      	addmi	r3, #2
 8004120:	6033      	strmi	r3, [r6, #0]
 8004122:	6825      	ldr	r5, [r4, #0]
 8004124:	f015 0506 	ands.w	r5, r5, #6
 8004128:	d106      	bne.n	8004138 <_printf_common+0x48>
 800412a:	f104 0a19 	add.w	sl, r4, #25
 800412e:	68e3      	ldr	r3, [r4, #12]
 8004130:	6832      	ldr	r2, [r6, #0]
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	42ab      	cmp	r3, r5
 8004136:	dc26      	bgt.n	8004186 <_printf_common+0x96>
 8004138:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800413c:	1e13      	subs	r3, r2, #0
 800413e:	6822      	ldr	r2, [r4, #0]
 8004140:	bf18      	it	ne
 8004142:	2301      	movne	r3, #1
 8004144:	0692      	lsls	r2, r2, #26
 8004146:	d42b      	bmi.n	80041a0 <_printf_common+0xb0>
 8004148:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800414c:	4649      	mov	r1, r9
 800414e:	4638      	mov	r0, r7
 8004150:	47c0      	blx	r8
 8004152:	3001      	adds	r0, #1
 8004154:	d01e      	beq.n	8004194 <_printf_common+0xa4>
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	68e5      	ldr	r5, [r4, #12]
 800415a:	6832      	ldr	r2, [r6, #0]
 800415c:	f003 0306 	and.w	r3, r3, #6
 8004160:	2b04      	cmp	r3, #4
 8004162:	bf08      	it	eq
 8004164:	1aad      	subeq	r5, r5, r2
 8004166:	68a3      	ldr	r3, [r4, #8]
 8004168:	6922      	ldr	r2, [r4, #16]
 800416a:	bf0c      	ite	eq
 800416c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004170:	2500      	movne	r5, #0
 8004172:	4293      	cmp	r3, r2
 8004174:	bfc4      	itt	gt
 8004176:	1a9b      	subgt	r3, r3, r2
 8004178:	18ed      	addgt	r5, r5, r3
 800417a:	2600      	movs	r6, #0
 800417c:	341a      	adds	r4, #26
 800417e:	42b5      	cmp	r5, r6
 8004180:	d11a      	bne.n	80041b8 <_printf_common+0xc8>
 8004182:	2000      	movs	r0, #0
 8004184:	e008      	b.n	8004198 <_printf_common+0xa8>
 8004186:	2301      	movs	r3, #1
 8004188:	4652      	mov	r2, sl
 800418a:	4649      	mov	r1, r9
 800418c:	4638      	mov	r0, r7
 800418e:	47c0      	blx	r8
 8004190:	3001      	adds	r0, #1
 8004192:	d103      	bne.n	800419c <_printf_common+0xac>
 8004194:	f04f 30ff 	mov.w	r0, #4294967295
 8004198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800419c:	3501      	adds	r5, #1
 800419e:	e7c6      	b.n	800412e <_printf_common+0x3e>
 80041a0:	18e1      	adds	r1, r4, r3
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	2030      	movs	r0, #48	; 0x30
 80041a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041aa:	4422      	add	r2, r4
 80041ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041b4:	3302      	adds	r3, #2
 80041b6:	e7c7      	b.n	8004148 <_printf_common+0x58>
 80041b8:	2301      	movs	r3, #1
 80041ba:	4622      	mov	r2, r4
 80041bc:	4649      	mov	r1, r9
 80041be:	4638      	mov	r0, r7
 80041c0:	47c0      	blx	r8
 80041c2:	3001      	adds	r0, #1
 80041c4:	d0e6      	beq.n	8004194 <_printf_common+0xa4>
 80041c6:	3601      	adds	r6, #1
 80041c8:	e7d9      	b.n	800417e <_printf_common+0x8e>
	...

080041cc <_printf_i>:
 80041cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041d0:	460c      	mov	r4, r1
 80041d2:	4691      	mov	r9, r2
 80041d4:	7e27      	ldrb	r7, [r4, #24]
 80041d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80041d8:	2f78      	cmp	r7, #120	; 0x78
 80041da:	4680      	mov	r8, r0
 80041dc:	469a      	mov	sl, r3
 80041de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041e2:	d807      	bhi.n	80041f4 <_printf_i+0x28>
 80041e4:	2f62      	cmp	r7, #98	; 0x62
 80041e6:	d80a      	bhi.n	80041fe <_printf_i+0x32>
 80041e8:	2f00      	cmp	r7, #0
 80041ea:	f000 80d8 	beq.w	800439e <_printf_i+0x1d2>
 80041ee:	2f58      	cmp	r7, #88	; 0x58
 80041f0:	f000 80a3 	beq.w	800433a <_printf_i+0x16e>
 80041f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041fc:	e03a      	b.n	8004274 <_printf_i+0xa8>
 80041fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004202:	2b15      	cmp	r3, #21
 8004204:	d8f6      	bhi.n	80041f4 <_printf_i+0x28>
 8004206:	a001      	add	r0, pc, #4	; (adr r0, 800420c <_printf_i+0x40>)
 8004208:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800420c:	08004265 	.word	0x08004265
 8004210:	08004279 	.word	0x08004279
 8004214:	080041f5 	.word	0x080041f5
 8004218:	080041f5 	.word	0x080041f5
 800421c:	080041f5 	.word	0x080041f5
 8004220:	080041f5 	.word	0x080041f5
 8004224:	08004279 	.word	0x08004279
 8004228:	080041f5 	.word	0x080041f5
 800422c:	080041f5 	.word	0x080041f5
 8004230:	080041f5 	.word	0x080041f5
 8004234:	080041f5 	.word	0x080041f5
 8004238:	08004385 	.word	0x08004385
 800423c:	080042a9 	.word	0x080042a9
 8004240:	08004367 	.word	0x08004367
 8004244:	080041f5 	.word	0x080041f5
 8004248:	080041f5 	.word	0x080041f5
 800424c:	080043a7 	.word	0x080043a7
 8004250:	080041f5 	.word	0x080041f5
 8004254:	080042a9 	.word	0x080042a9
 8004258:	080041f5 	.word	0x080041f5
 800425c:	080041f5 	.word	0x080041f5
 8004260:	0800436f 	.word	0x0800436f
 8004264:	680b      	ldr	r3, [r1, #0]
 8004266:	1d1a      	adds	r2, r3, #4
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	600a      	str	r2, [r1, #0]
 800426c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004270:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004274:	2301      	movs	r3, #1
 8004276:	e0a3      	b.n	80043c0 <_printf_i+0x1f4>
 8004278:	6825      	ldr	r5, [r4, #0]
 800427a:	6808      	ldr	r0, [r1, #0]
 800427c:	062e      	lsls	r6, r5, #24
 800427e:	f100 0304 	add.w	r3, r0, #4
 8004282:	d50a      	bpl.n	800429a <_printf_i+0xce>
 8004284:	6805      	ldr	r5, [r0, #0]
 8004286:	600b      	str	r3, [r1, #0]
 8004288:	2d00      	cmp	r5, #0
 800428a:	da03      	bge.n	8004294 <_printf_i+0xc8>
 800428c:	232d      	movs	r3, #45	; 0x2d
 800428e:	426d      	negs	r5, r5
 8004290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004294:	485e      	ldr	r0, [pc, #376]	; (8004410 <_printf_i+0x244>)
 8004296:	230a      	movs	r3, #10
 8004298:	e019      	b.n	80042ce <_printf_i+0x102>
 800429a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800429e:	6805      	ldr	r5, [r0, #0]
 80042a0:	600b      	str	r3, [r1, #0]
 80042a2:	bf18      	it	ne
 80042a4:	b22d      	sxthne	r5, r5
 80042a6:	e7ef      	b.n	8004288 <_printf_i+0xbc>
 80042a8:	680b      	ldr	r3, [r1, #0]
 80042aa:	6825      	ldr	r5, [r4, #0]
 80042ac:	1d18      	adds	r0, r3, #4
 80042ae:	6008      	str	r0, [r1, #0]
 80042b0:	0628      	lsls	r0, r5, #24
 80042b2:	d501      	bpl.n	80042b8 <_printf_i+0xec>
 80042b4:	681d      	ldr	r5, [r3, #0]
 80042b6:	e002      	b.n	80042be <_printf_i+0xf2>
 80042b8:	0669      	lsls	r1, r5, #25
 80042ba:	d5fb      	bpl.n	80042b4 <_printf_i+0xe8>
 80042bc:	881d      	ldrh	r5, [r3, #0]
 80042be:	4854      	ldr	r0, [pc, #336]	; (8004410 <_printf_i+0x244>)
 80042c0:	2f6f      	cmp	r7, #111	; 0x6f
 80042c2:	bf0c      	ite	eq
 80042c4:	2308      	moveq	r3, #8
 80042c6:	230a      	movne	r3, #10
 80042c8:	2100      	movs	r1, #0
 80042ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042ce:	6866      	ldr	r6, [r4, #4]
 80042d0:	60a6      	str	r6, [r4, #8]
 80042d2:	2e00      	cmp	r6, #0
 80042d4:	bfa2      	ittt	ge
 80042d6:	6821      	ldrge	r1, [r4, #0]
 80042d8:	f021 0104 	bicge.w	r1, r1, #4
 80042dc:	6021      	strge	r1, [r4, #0]
 80042de:	b90d      	cbnz	r5, 80042e4 <_printf_i+0x118>
 80042e0:	2e00      	cmp	r6, #0
 80042e2:	d04d      	beq.n	8004380 <_printf_i+0x1b4>
 80042e4:	4616      	mov	r6, r2
 80042e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80042ea:	fb03 5711 	mls	r7, r3, r1, r5
 80042ee:	5dc7      	ldrb	r7, [r0, r7]
 80042f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042f4:	462f      	mov	r7, r5
 80042f6:	42bb      	cmp	r3, r7
 80042f8:	460d      	mov	r5, r1
 80042fa:	d9f4      	bls.n	80042e6 <_printf_i+0x11a>
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d10b      	bne.n	8004318 <_printf_i+0x14c>
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	07df      	lsls	r7, r3, #31
 8004304:	d508      	bpl.n	8004318 <_printf_i+0x14c>
 8004306:	6923      	ldr	r3, [r4, #16]
 8004308:	6861      	ldr	r1, [r4, #4]
 800430a:	4299      	cmp	r1, r3
 800430c:	bfde      	ittt	le
 800430e:	2330      	movle	r3, #48	; 0x30
 8004310:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004314:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004318:	1b92      	subs	r2, r2, r6
 800431a:	6122      	str	r2, [r4, #16]
 800431c:	f8cd a000 	str.w	sl, [sp]
 8004320:	464b      	mov	r3, r9
 8004322:	aa03      	add	r2, sp, #12
 8004324:	4621      	mov	r1, r4
 8004326:	4640      	mov	r0, r8
 8004328:	f7ff fee2 	bl	80040f0 <_printf_common>
 800432c:	3001      	adds	r0, #1
 800432e:	d14c      	bne.n	80043ca <_printf_i+0x1fe>
 8004330:	f04f 30ff 	mov.w	r0, #4294967295
 8004334:	b004      	add	sp, #16
 8004336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800433a:	4835      	ldr	r0, [pc, #212]	; (8004410 <_printf_i+0x244>)
 800433c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	680e      	ldr	r6, [r1, #0]
 8004344:	061f      	lsls	r7, r3, #24
 8004346:	f856 5b04 	ldr.w	r5, [r6], #4
 800434a:	600e      	str	r6, [r1, #0]
 800434c:	d514      	bpl.n	8004378 <_printf_i+0x1ac>
 800434e:	07d9      	lsls	r1, r3, #31
 8004350:	bf44      	itt	mi
 8004352:	f043 0320 	orrmi.w	r3, r3, #32
 8004356:	6023      	strmi	r3, [r4, #0]
 8004358:	b91d      	cbnz	r5, 8004362 <_printf_i+0x196>
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	f023 0320 	bic.w	r3, r3, #32
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	2310      	movs	r3, #16
 8004364:	e7b0      	b.n	80042c8 <_printf_i+0xfc>
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	f043 0320 	orr.w	r3, r3, #32
 800436c:	6023      	str	r3, [r4, #0]
 800436e:	2378      	movs	r3, #120	; 0x78
 8004370:	4828      	ldr	r0, [pc, #160]	; (8004414 <_printf_i+0x248>)
 8004372:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004376:	e7e3      	b.n	8004340 <_printf_i+0x174>
 8004378:	065e      	lsls	r6, r3, #25
 800437a:	bf48      	it	mi
 800437c:	b2ad      	uxthmi	r5, r5
 800437e:	e7e6      	b.n	800434e <_printf_i+0x182>
 8004380:	4616      	mov	r6, r2
 8004382:	e7bb      	b.n	80042fc <_printf_i+0x130>
 8004384:	680b      	ldr	r3, [r1, #0]
 8004386:	6826      	ldr	r6, [r4, #0]
 8004388:	6960      	ldr	r0, [r4, #20]
 800438a:	1d1d      	adds	r5, r3, #4
 800438c:	600d      	str	r5, [r1, #0]
 800438e:	0635      	lsls	r5, r6, #24
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	d501      	bpl.n	8004398 <_printf_i+0x1cc>
 8004394:	6018      	str	r0, [r3, #0]
 8004396:	e002      	b.n	800439e <_printf_i+0x1d2>
 8004398:	0671      	lsls	r1, r6, #25
 800439a:	d5fb      	bpl.n	8004394 <_printf_i+0x1c8>
 800439c:	8018      	strh	r0, [r3, #0]
 800439e:	2300      	movs	r3, #0
 80043a0:	6123      	str	r3, [r4, #16]
 80043a2:	4616      	mov	r6, r2
 80043a4:	e7ba      	b.n	800431c <_printf_i+0x150>
 80043a6:	680b      	ldr	r3, [r1, #0]
 80043a8:	1d1a      	adds	r2, r3, #4
 80043aa:	600a      	str	r2, [r1, #0]
 80043ac:	681e      	ldr	r6, [r3, #0]
 80043ae:	6862      	ldr	r2, [r4, #4]
 80043b0:	2100      	movs	r1, #0
 80043b2:	4630      	mov	r0, r6
 80043b4:	f7fb ff14 	bl	80001e0 <memchr>
 80043b8:	b108      	cbz	r0, 80043be <_printf_i+0x1f2>
 80043ba:	1b80      	subs	r0, r0, r6
 80043bc:	6060      	str	r0, [r4, #4]
 80043be:	6863      	ldr	r3, [r4, #4]
 80043c0:	6123      	str	r3, [r4, #16]
 80043c2:	2300      	movs	r3, #0
 80043c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c8:	e7a8      	b.n	800431c <_printf_i+0x150>
 80043ca:	6923      	ldr	r3, [r4, #16]
 80043cc:	4632      	mov	r2, r6
 80043ce:	4649      	mov	r1, r9
 80043d0:	4640      	mov	r0, r8
 80043d2:	47d0      	blx	sl
 80043d4:	3001      	adds	r0, #1
 80043d6:	d0ab      	beq.n	8004330 <_printf_i+0x164>
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	079b      	lsls	r3, r3, #30
 80043dc:	d413      	bmi.n	8004406 <_printf_i+0x23a>
 80043de:	68e0      	ldr	r0, [r4, #12]
 80043e0:	9b03      	ldr	r3, [sp, #12]
 80043e2:	4298      	cmp	r0, r3
 80043e4:	bfb8      	it	lt
 80043e6:	4618      	movlt	r0, r3
 80043e8:	e7a4      	b.n	8004334 <_printf_i+0x168>
 80043ea:	2301      	movs	r3, #1
 80043ec:	4632      	mov	r2, r6
 80043ee:	4649      	mov	r1, r9
 80043f0:	4640      	mov	r0, r8
 80043f2:	47d0      	blx	sl
 80043f4:	3001      	adds	r0, #1
 80043f6:	d09b      	beq.n	8004330 <_printf_i+0x164>
 80043f8:	3501      	adds	r5, #1
 80043fa:	68e3      	ldr	r3, [r4, #12]
 80043fc:	9903      	ldr	r1, [sp, #12]
 80043fe:	1a5b      	subs	r3, r3, r1
 8004400:	42ab      	cmp	r3, r5
 8004402:	dcf2      	bgt.n	80043ea <_printf_i+0x21e>
 8004404:	e7eb      	b.n	80043de <_printf_i+0x212>
 8004406:	2500      	movs	r5, #0
 8004408:	f104 0619 	add.w	r6, r4, #25
 800440c:	e7f5      	b.n	80043fa <_printf_i+0x22e>
 800440e:	bf00      	nop
 8004410:	08004f3a 	.word	0x08004f3a
 8004414:	08004f4b 	.word	0x08004f4b

08004418 <memcpy>:
 8004418:	440a      	add	r2, r1
 800441a:	4291      	cmp	r1, r2
 800441c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004420:	d100      	bne.n	8004424 <memcpy+0xc>
 8004422:	4770      	bx	lr
 8004424:	b510      	push	{r4, lr}
 8004426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800442a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800442e:	4291      	cmp	r1, r2
 8004430:	d1f9      	bne.n	8004426 <memcpy+0xe>
 8004432:	bd10      	pop	{r4, pc}

08004434 <memmove>:
 8004434:	4288      	cmp	r0, r1
 8004436:	b510      	push	{r4, lr}
 8004438:	eb01 0402 	add.w	r4, r1, r2
 800443c:	d902      	bls.n	8004444 <memmove+0x10>
 800443e:	4284      	cmp	r4, r0
 8004440:	4623      	mov	r3, r4
 8004442:	d807      	bhi.n	8004454 <memmove+0x20>
 8004444:	1e43      	subs	r3, r0, #1
 8004446:	42a1      	cmp	r1, r4
 8004448:	d008      	beq.n	800445c <memmove+0x28>
 800444a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800444e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004452:	e7f8      	b.n	8004446 <memmove+0x12>
 8004454:	4402      	add	r2, r0
 8004456:	4601      	mov	r1, r0
 8004458:	428a      	cmp	r2, r1
 800445a:	d100      	bne.n	800445e <memmove+0x2a>
 800445c:	bd10      	pop	{r4, pc}
 800445e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004462:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004466:	e7f7      	b.n	8004458 <memmove+0x24>

08004468 <_free_r>:
 8004468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800446a:	2900      	cmp	r1, #0
 800446c:	d048      	beq.n	8004500 <_free_r+0x98>
 800446e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004472:	9001      	str	r0, [sp, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	f1a1 0404 	sub.w	r4, r1, #4
 800447a:	bfb8      	it	lt
 800447c:	18e4      	addlt	r4, r4, r3
 800447e:	f000 f8d3 	bl	8004628 <__malloc_lock>
 8004482:	4a20      	ldr	r2, [pc, #128]	; (8004504 <_free_r+0x9c>)
 8004484:	9801      	ldr	r0, [sp, #4]
 8004486:	6813      	ldr	r3, [r2, #0]
 8004488:	4615      	mov	r5, r2
 800448a:	b933      	cbnz	r3, 800449a <_free_r+0x32>
 800448c:	6063      	str	r3, [r4, #4]
 800448e:	6014      	str	r4, [r2, #0]
 8004490:	b003      	add	sp, #12
 8004492:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004496:	f000 b8cd 	b.w	8004634 <__malloc_unlock>
 800449a:	42a3      	cmp	r3, r4
 800449c:	d90b      	bls.n	80044b6 <_free_r+0x4e>
 800449e:	6821      	ldr	r1, [r4, #0]
 80044a0:	1862      	adds	r2, r4, r1
 80044a2:	4293      	cmp	r3, r2
 80044a4:	bf04      	itt	eq
 80044a6:	681a      	ldreq	r2, [r3, #0]
 80044a8:	685b      	ldreq	r3, [r3, #4]
 80044aa:	6063      	str	r3, [r4, #4]
 80044ac:	bf04      	itt	eq
 80044ae:	1852      	addeq	r2, r2, r1
 80044b0:	6022      	streq	r2, [r4, #0]
 80044b2:	602c      	str	r4, [r5, #0]
 80044b4:	e7ec      	b.n	8004490 <_free_r+0x28>
 80044b6:	461a      	mov	r2, r3
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	b10b      	cbz	r3, 80044c0 <_free_r+0x58>
 80044bc:	42a3      	cmp	r3, r4
 80044be:	d9fa      	bls.n	80044b6 <_free_r+0x4e>
 80044c0:	6811      	ldr	r1, [r2, #0]
 80044c2:	1855      	adds	r5, r2, r1
 80044c4:	42a5      	cmp	r5, r4
 80044c6:	d10b      	bne.n	80044e0 <_free_r+0x78>
 80044c8:	6824      	ldr	r4, [r4, #0]
 80044ca:	4421      	add	r1, r4
 80044cc:	1854      	adds	r4, r2, r1
 80044ce:	42a3      	cmp	r3, r4
 80044d0:	6011      	str	r1, [r2, #0]
 80044d2:	d1dd      	bne.n	8004490 <_free_r+0x28>
 80044d4:	681c      	ldr	r4, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	6053      	str	r3, [r2, #4]
 80044da:	4421      	add	r1, r4
 80044dc:	6011      	str	r1, [r2, #0]
 80044de:	e7d7      	b.n	8004490 <_free_r+0x28>
 80044e0:	d902      	bls.n	80044e8 <_free_r+0x80>
 80044e2:	230c      	movs	r3, #12
 80044e4:	6003      	str	r3, [r0, #0]
 80044e6:	e7d3      	b.n	8004490 <_free_r+0x28>
 80044e8:	6825      	ldr	r5, [r4, #0]
 80044ea:	1961      	adds	r1, r4, r5
 80044ec:	428b      	cmp	r3, r1
 80044ee:	bf04      	itt	eq
 80044f0:	6819      	ldreq	r1, [r3, #0]
 80044f2:	685b      	ldreq	r3, [r3, #4]
 80044f4:	6063      	str	r3, [r4, #4]
 80044f6:	bf04      	itt	eq
 80044f8:	1949      	addeq	r1, r1, r5
 80044fa:	6021      	streq	r1, [r4, #0]
 80044fc:	6054      	str	r4, [r2, #4]
 80044fe:	e7c7      	b.n	8004490 <_free_r+0x28>
 8004500:	b003      	add	sp, #12
 8004502:	bd30      	pop	{r4, r5, pc}
 8004504:	20000098 	.word	0x20000098

08004508 <_malloc_r>:
 8004508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450a:	1ccd      	adds	r5, r1, #3
 800450c:	f025 0503 	bic.w	r5, r5, #3
 8004510:	3508      	adds	r5, #8
 8004512:	2d0c      	cmp	r5, #12
 8004514:	bf38      	it	cc
 8004516:	250c      	movcc	r5, #12
 8004518:	2d00      	cmp	r5, #0
 800451a:	4606      	mov	r6, r0
 800451c:	db01      	blt.n	8004522 <_malloc_r+0x1a>
 800451e:	42a9      	cmp	r1, r5
 8004520:	d903      	bls.n	800452a <_malloc_r+0x22>
 8004522:	230c      	movs	r3, #12
 8004524:	6033      	str	r3, [r6, #0]
 8004526:	2000      	movs	r0, #0
 8004528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800452a:	f000 f87d 	bl	8004628 <__malloc_lock>
 800452e:	4921      	ldr	r1, [pc, #132]	; (80045b4 <_malloc_r+0xac>)
 8004530:	680a      	ldr	r2, [r1, #0]
 8004532:	4614      	mov	r4, r2
 8004534:	b99c      	cbnz	r4, 800455e <_malloc_r+0x56>
 8004536:	4f20      	ldr	r7, [pc, #128]	; (80045b8 <_malloc_r+0xb0>)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	b923      	cbnz	r3, 8004546 <_malloc_r+0x3e>
 800453c:	4621      	mov	r1, r4
 800453e:	4630      	mov	r0, r6
 8004540:	f000 f862 	bl	8004608 <_sbrk_r>
 8004544:	6038      	str	r0, [r7, #0]
 8004546:	4629      	mov	r1, r5
 8004548:	4630      	mov	r0, r6
 800454a:	f000 f85d 	bl	8004608 <_sbrk_r>
 800454e:	1c43      	adds	r3, r0, #1
 8004550:	d123      	bne.n	800459a <_malloc_r+0x92>
 8004552:	230c      	movs	r3, #12
 8004554:	6033      	str	r3, [r6, #0]
 8004556:	4630      	mov	r0, r6
 8004558:	f000 f86c 	bl	8004634 <__malloc_unlock>
 800455c:	e7e3      	b.n	8004526 <_malloc_r+0x1e>
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	1b5b      	subs	r3, r3, r5
 8004562:	d417      	bmi.n	8004594 <_malloc_r+0x8c>
 8004564:	2b0b      	cmp	r3, #11
 8004566:	d903      	bls.n	8004570 <_malloc_r+0x68>
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	441c      	add	r4, r3
 800456c:	6025      	str	r5, [r4, #0]
 800456e:	e004      	b.n	800457a <_malloc_r+0x72>
 8004570:	6863      	ldr	r3, [r4, #4]
 8004572:	42a2      	cmp	r2, r4
 8004574:	bf0c      	ite	eq
 8004576:	600b      	streq	r3, [r1, #0]
 8004578:	6053      	strne	r3, [r2, #4]
 800457a:	4630      	mov	r0, r6
 800457c:	f000 f85a 	bl	8004634 <__malloc_unlock>
 8004580:	f104 000b 	add.w	r0, r4, #11
 8004584:	1d23      	adds	r3, r4, #4
 8004586:	f020 0007 	bic.w	r0, r0, #7
 800458a:	1ac2      	subs	r2, r0, r3
 800458c:	d0cc      	beq.n	8004528 <_malloc_r+0x20>
 800458e:	1a1b      	subs	r3, r3, r0
 8004590:	50a3      	str	r3, [r4, r2]
 8004592:	e7c9      	b.n	8004528 <_malloc_r+0x20>
 8004594:	4622      	mov	r2, r4
 8004596:	6864      	ldr	r4, [r4, #4]
 8004598:	e7cc      	b.n	8004534 <_malloc_r+0x2c>
 800459a:	1cc4      	adds	r4, r0, #3
 800459c:	f024 0403 	bic.w	r4, r4, #3
 80045a0:	42a0      	cmp	r0, r4
 80045a2:	d0e3      	beq.n	800456c <_malloc_r+0x64>
 80045a4:	1a21      	subs	r1, r4, r0
 80045a6:	4630      	mov	r0, r6
 80045a8:	f000 f82e 	bl	8004608 <_sbrk_r>
 80045ac:	3001      	adds	r0, #1
 80045ae:	d1dd      	bne.n	800456c <_malloc_r+0x64>
 80045b0:	e7cf      	b.n	8004552 <_malloc_r+0x4a>
 80045b2:	bf00      	nop
 80045b4:	20000098 	.word	0x20000098
 80045b8:	2000009c 	.word	0x2000009c

080045bc <_realloc_r>:
 80045bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045be:	4607      	mov	r7, r0
 80045c0:	4614      	mov	r4, r2
 80045c2:	460e      	mov	r6, r1
 80045c4:	b921      	cbnz	r1, 80045d0 <_realloc_r+0x14>
 80045c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80045ca:	4611      	mov	r1, r2
 80045cc:	f7ff bf9c 	b.w	8004508 <_malloc_r>
 80045d0:	b922      	cbnz	r2, 80045dc <_realloc_r+0x20>
 80045d2:	f7ff ff49 	bl	8004468 <_free_r>
 80045d6:	4625      	mov	r5, r4
 80045d8:	4628      	mov	r0, r5
 80045da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045dc:	f000 f830 	bl	8004640 <_malloc_usable_size_r>
 80045e0:	42a0      	cmp	r0, r4
 80045e2:	d20f      	bcs.n	8004604 <_realloc_r+0x48>
 80045e4:	4621      	mov	r1, r4
 80045e6:	4638      	mov	r0, r7
 80045e8:	f7ff ff8e 	bl	8004508 <_malloc_r>
 80045ec:	4605      	mov	r5, r0
 80045ee:	2800      	cmp	r0, #0
 80045f0:	d0f2      	beq.n	80045d8 <_realloc_r+0x1c>
 80045f2:	4631      	mov	r1, r6
 80045f4:	4622      	mov	r2, r4
 80045f6:	f7ff ff0f 	bl	8004418 <memcpy>
 80045fa:	4631      	mov	r1, r6
 80045fc:	4638      	mov	r0, r7
 80045fe:	f7ff ff33 	bl	8004468 <_free_r>
 8004602:	e7e9      	b.n	80045d8 <_realloc_r+0x1c>
 8004604:	4635      	mov	r5, r6
 8004606:	e7e7      	b.n	80045d8 <_realloc_r+0x1c>

08004608 <_sbrk_r>:
 8004608:	b538      	push	{r3, r4, r5, lr}
 800460a:	4d06      	ldr	r5, [pc, #24]	; (8004624 <_sbrk_r+0x1c>)
 800460c:	2300      	movs	r3, #0
 800460e:	4604      	mov	r4, r0
 8004610:	4608      	mov	r0, r1
 8004612:	602b      	str	r3, [r5, #0]
 8004614:	f7fe f8ba 	bl	800278c <_sbrk>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d102      	bne.n	8004622 <_sbrk_r+0x1a>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	b103      	cbz	r3, 8004622 <_sbrk_r+0x1a>
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	bd38      	pop	{r3, r4, r5, pc}
 8004624:	200000dc 	.word	0x200000dc

08004628 <__malloc_lock>:
 8004628:	4801      	ldr	r0, [pc, #4]	; (8004630 <__malloc_lock+0x8>)
 800462a:	f000 b811 	b.w	8004650 <__retarget_lock_acquire_recursive>
 800462e:	bf00      	nop
 8004630:	200000e4 	.word	0x200000e4

08004634 <__malloc_unlock>:
 8004634:	4801      	ldr	r0, [pc, #4]	; (800463c <__malloc_unlock+0x8>)
 8004636:	f000 b80c 	b.w	8004652 <__retarget_lock_release_recursive>
 800463a:	bf00      	nop
 800463c:	200000e4 	.word	0x200000e4

08004640 <_malloc_usable_size_r>:
 8004640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004644:	1f18      	subs	r0, r3, #4
 8004646:	2b00      	cmp	r3, #0
 8004648:	bfbc      	itt	lt
 800464a:	580b      	ldrlt	r3, [r1, r0]
 800464c:	18c0      	addlt	r0, r0, r3
 800464e:	4770      	bx	lr

08004650 <__retarget_lock_acquire_recursive>:
 8004650:	4770      	bx	lr

08004652 <__retarget_lock_release_recursive>:
 8004652:	4770      	bx	lr

08004654 <powf>:
 8004654:	b508      	push	{r3, lr}
 8004656:	ed2d 8b04 	vpush	{d8-d9}
 800465a:	eeb0 9a40 	vmov.f32	s18, s0
 800465e:	eef0 8a60 	vmov.f32	s17, s1
 8004662:	f000 f88f 	bl	8004784 <__ieee754_powf>
 8004666:	4b43      	ldr	r3, [pc, #268]	; (8004774 <powf+0x120>)
 8004668:	f993 3000 	ldrsb.w	r3, [r3]
 800466c:	3301      	adds	r3, #1
 800466e:	eeb0 8a40 	vmov.f32	s16, s0
 8004672:	d012      	beq.n	800469a <powf+0x46>
 8004674:	eef4 8a68 	vcmp.f32	s17, s17
 8004678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800467c:	d60d      	bvs.n	800469a <powf+0x46>
 800467e:	eeb4 9a49 	vcmp.f32	s18, s18
 8004682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004686:	d70d      	bvc.n	80046a4 <powf+0x50>
 8004688:	eef5 8a40 	vcmp.f32	s17, #0.0
 800468c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004690:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004694:	bf08      	it	eq
 8004696:	eeb0 8a67 	vmoveq.f32	s16, s15
 800469a:	eeb0 0a48 	vmov.f32	s0, s16
 800469e:	ecbd 8b04 	vpop	{d8-d9}
 80046a2:	bd08      	pop	{r3, pc}
 80046a4:	eddf 9a34 	vldr	s19, [pc, #208]	; 8004778 <powf+0x124>
 80046a8:	eeb4 9a69 	vcmp.f32	s18, s19
 80046ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b0:	d116      	bne.n	80046e0 <powf+0x8c>
 80046b2:	eef4 8a69 	vcmp.f32	s17, s19
 80046b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ba:	d057      	beq.n	800476c <powf+0x118>
 80046bc:	eeb0 0a68 	vmov.f32	s0, s17
 80046c0:	f000 fb2a 	bl	8004d18 <finitef>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d0e8      	beq.n	800469a <powf+0x46>
 80046c8:	eef4 8ae9 	vcmpe.f32	s17, s19
 80046cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d0:	d5e3      	bpl.n	800469a <powf+0x46>
 80046d2:	f7ff fb39 	bl	8003d48 <__errno>
 80046d6:	2321      	movs	r3, #33	; 0x21
 80046d8:	6003      	str	r3, [r0, #0]
 80046da:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800477c <powf+0x128>
 80046de:	e7dc      	b.n	800469a <powf+0x46>
 80046e0:	f000 fb1a 	bl	8004d18 <finitef>
 80046e4:	bb50      	cbnz	r0, 800473c <powf+0xe8>
 80046e6:	eeb0 0a49 	vmov.f32	s0, s18
 80046ea:	f000 fb15 	bl	8004d18 <finitef>
 80046ee:	b328      	cbz	r0, 800473c <powf+0xe8>
 80046f0:	eeb0 0a68 	vmov.f32	s0, s17
 80046f4:	f000 fb10 	bl	8004d18 <finitef>
 80046f8:	b300      	cbz	r0, 800473c <powf+0xe8>
 80046fa:	eeb4 8a48 	vcmp.f32	s16, s16
 80046fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004702:	d706      	bvc.n	8004712 <powf+0xbe>
 8004704:	f7ff fb20 	bl	8003d48 <__errno>
 8004708:	2321      	movs	r3, #33	; 0x21
 800470a:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800470e:	6003      	str	r3, [r0, #0]
 8004710:	e7c3      	b.n	800469a <powf+0x46>
 8004712:	f7ff fb19 	bl	8003d48 <__errno>
 8004716:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800471a:	2322      	movs	r3, #34	; 0x22
 800471c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004720:	6003      	str	r3, [r0, #0]
 8004722:	d508      	bpl.n	8004736 <powf+0xe2>
 8004724:	eeb0 0a68 	vmov.f32	s0, s17
 8004728:	f000 fb0a 	bl	8004d40 <rintf>
 800472c:	eeb4 0a68 	vcmp.f32	s0, s17
 8004730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004734:	d1d1      	bne.n	80046da <powf+0x86>
 8004736:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8004780 <powf+0x12c>
 800473a:	e7ae      	b.n	800469a <powf+0x46>
 800473c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004744:	d1a9      	bne.n	800469a <powf+0x46>
 8004746:	eeb0 0a49 	vmov.f32	s0, s18
 800474a:	f000 fae5 	bl	8004d18 <finitef>
 800474e:	2800      	cmp	r0, #0
 8004750:	d0a3      	beq.n	800469a <powf+0x46>
 8004752:	eeb0 0a68 	vmov.f32	s0, s17
 8004756:	f000 fadf 	bl	8004d18 <finitef>
 800475a:	2800      	cmp	r0, #0
 800475c:	d09d      	beq.n	800469a <powf+0x46>
 800475e:	f7ff faf3 	bl	8003d48 <__errno>
 8004762:	2322      	movs	r3, #34	; 0x22
 8004764:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8004778 <powf+0x124>
 8004768:	6003      	str	r3, [r0, #0]
 800476a:	e796      	b.n	800469a <powf+0x46>
 800476c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8004770:	e793      	b.n	800469a <powf+0x46>
 8004772:	bf00      	nop
 8004774:	2000006c 	.word	0x2000006c
 8004778:	00000000 	.word	0x00000000
 800477c:	ff800000 	.word	0xff800000
 8004780:	7f800000 	.word	0x7f800000

08004784 <__ieee754_powf>:
 8004784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004788:	ee10 5a90 	vmov	r5, s1
 800478c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8004790:	ed2d 8b02 	vpush	{d8}
 8004794:	eeb0 8a40 	vmov.f32	s16, s0
 8004798:	eef0 8a60 	vmov.f32	s17, s1
 800479c:	f000 8291 	beq.w	8004cc2 <__ieee754_powf+0x53e>
 80047a0:	ee10 8a10 	vmov	r8, s0
 80047a4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80047a8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80047ac:	dc06      	bgt.n	80047bc <__ieee754_powf+0x38>
 80047ae:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80047b2:	dd0a      	ble.n	80047ca <__ieee754_powf+0x46>
 80047b4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80047b8:	f000 8283 	beq.w	8004cc2 <__ieee754_powf+0x53e>
 80047bc:	ecbd 8b02 	vpop	{d8}
 80047c0:	48d8      	ldr	r0, [pc, #864]	; (8004b24 <__ieee754_powf+0x3a0>)
 80047c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047c6:	f000 bab5 	b.w	8004d34 <nanf>
 80047ca:	f1b8 0f00 	cmp.w	r8, #0
 80047ce:	da1f      	bge.n	8004810 <__ieee754_powf+0x8c>
 80047d0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80047d4:	da2e      	bge.n	8004834 <__ieee754_powf+0xb0>
 80047d6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80047da:	f2c0 827b 	blt.w	8004cd4 <__ieee754_powf+0x550>
 80047de:	15fb      	asrs	r3, r7, #23
 80047e0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80047e4:	fa47 f603 	asr.w	r6, r7, r3
 80047e8:	fa06 f303 	lsl.w	r3, r6, r3
 80047ec:	42bb      	cmp	r3, r7
 80047ee:	f040 8271 	bne.w	8004cd4 <__ieee754_powf+0x550>
 80047f2:	f006 0601 	and.w	r6, r6, #1
 80047f6:	f1c6 0602 	rsb	r6, r6, #2
 80047fa:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80047fe:	d120      	bne.n	8004842 <__ieee754_powf+0xbe>
 8004800:	2d00      	cmp	r5, #0
 8004802:	f280 8264 	bge.w	8004cce <__ieee754_powf+0x54a>
 8004806:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800480a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800480e:	e00d      	b.n	800482c <__ieee754_powf+0xa8>
 8004810:	2600      	movs	r6, #0
 8004812:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8004816:	d1f0      	bne.n	80047fa <__ieee754_powf+0x76>
 8004818:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800481c:	f000 8251 	beq.w	8004cc2 <__ieee754_powf+0x53e>
 8004820:	dd0a      	ble.n	8004838 <__ieee754_powf+0xb4>
 8004822:	2d00      	cmp	r5, #0
 8004824:	f280 8250 	bge.w	8004cc8 <__ieee754_powf+0x544>
 8004828:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8004b28 <__ieee754_powf+0x3a4>
 800482c:	ecbd 8b02 	vpop	{d8}
 8004830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004834:	2602      	movs	r6, #2
 8004836:	e7ec      	b.n	8004812 <__ieee754_powf+0x8e>
 8004838:	2d00      	cmp	r5, #0
 800483a:	daf5      	bge.n	8004828 <__ieee754_powf+0xa4>
 800483c:	eeb1 0a68 	vneg.f32	s0, s17
 8004840:	e7f4      	b.n	800482c <__ieee754_powf+0xa8>
 8004842:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8004846:	d102      	bne.n	800484e <__ieee754_powf+0xca>
 8004848:	ee28 0a08 	vmul.f32	s0, s16, s16
 800484c:	e7ee      	b.n	800482c <__ieee754_powf+0xa8>
 800484e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8004852:	eeb0 0a48 	vmov.f32	s0, s16
 8004856:	d108      	bne.n	800486a <__ieee754_powf+0xe6>
 8004858:	f1b8 0f00 	cmp.w	r8, #0
 800485c:	db05      	blt.n	800486a <__ieee754_powf+0xe6>
 800485e:	ecbd 8b02 	vpop	{d8}
 8004862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004866:	f000 ba4d 	b.w	8004d04 <__ieee754_sqrtf>
 800486a:	f000 fa4e 	bl	8004d0a <fabsf>
 800486e:	b124      	cbz	r4, 800487a <__ieee754_powf+0xf6>
 8004870:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8004874:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8004878:	d117      	bne.n	80048aa <__ieee754_powf+0x126>
 800487a:	2d00      	cmp	r5, #0
 800487c:	bfbc      	itt	lt
 800487e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8004882:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8004886:	f1b8 0f00 	cmp.w	r8, #0
 800488a:	dacf      	bge.n	800482c <__ieee754_powf+0xa8>
 800488c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8004890:	ea54 0306 	orrs.w	r3, r4, r6
 8004894:	d104      	bne.n	80048a0 <__ieee754_powf+0x11c>
 8004896:	ee70 7a40 	vsub.f32	s15, s0, s0
 800489a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800489e:	e7c5      	b.n	800482c <__ieee754_powf+0xa8>
 80048a0:	2e01      	cmp	r6, #1
 80048a2:	d1c3      	bne.n	800482c <__ieee754_powf+0xa8>
 80048a4:	eeb1 0a40 	vneg.f32	s0, s0
 80048a8:	e7c0      	b.n	800482c <__ieee754_powf+0xa8>
 80048aa:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80048ae:	3801      	subs	r0, #1
 80048b0:	ea56 0300 	orrs.w	r3, r6, r0
 80048b4:	d104      	bne.n	80048c0 <__ieee754_powf+0x13c>
 80048b6:	ee38 8a48 	vsub.f32	s16, s16, s16
 80048ba:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80048be:	e7b5      	b.n	800482c <__ieee754_powf+0xa8>
 80048c0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80048c4:	dd6b      	ble.n	800499e <__ieee754_powf+0x21a>
 80048c6:	4b99      	ldr	r3, [pc, #612]	; (8004b2c <__ieee754_powf+0x3a8>)
 80048c8:	429c      	cmp	r4, r3
 80048ca:	dc06      	bgt.n	80048da <__ieee754_powf+0x156>
 80048cc:	2d00      	cmp	r5, #0
 80048ce:	daab      	bge.n	8004828 <__ieee754_powf+0xa4>
 80048d0:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8004b30 <__ieee754_powf+0x3ac>
 80048d4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80048d8:	e7a8      	b.n	800482c <__ieee754_powf+0xa8>
 80048da:	4b96      	ldr	r3, [pc, #600]	; (8004b34 <__ieee754_powf+0x3b0>)
 80048dc:	429c      	cmp	r4, r3
 80048de:	dd02      	ble.n	80048e6 <__ieee754_powf+0x162>
 80048e0:	2d00      	cmp	r5, #0
 80048e2:	dcf5      	bgt.n	80048d0 <__ieee754_powf+0x14c>
 80048e4:	e7a0      	b.n	8004828 <__ieee754_powf+0xa4>
 80048e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80048ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80048ee:	eddf 6a92 	vldr	s13, [pc, #584]	; 8004b38 <__ieee754_powf+0x3b4>
 80048f2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80048f6:	eee0 6a67 	vfms.f32	s13, s0, s15
 80048fa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80048fe:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8004902:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490a:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8004b3c <__ieee754_powf+0x3b8>
 800490e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8004912:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8004b40 <__ieee754_powf+0x3bc>
 8004916:	eee0 7a07 	vfma.f32	s15, s0, s14
 800491a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8004b44 <__ieee754_powf+0x3c0>
 800491e:	eef0 6a67 	vmov.f32	s13, s15
 8004922:	eee0 6a07 	vfma.f32	s13, s0, s14
 8004926:	ee16 3a90 	vmov	r3, s13
 800492a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800492e:	f023 030f 	bic.w	r3, r3, #15
 8004932:	ee00 3a90 	vmov	s1, r3
 8004936:	eee0 0a47 	vfms.f32	s1, s0, s14
 800493a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800493e:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8004942:	f025 050f 	bic.w	r5, r5, #15
 8004946:	ee07 5a10 	vmov	s14, r5
 800494a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800494e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eee7 0a27 	vfma.f32	s1, s14, s15
 800495a:	3e01      	subs	r6, #1
 800495c:	ea56 0200 	orrs.w	r2, r6, r0
 8004960:	ee07 5a10 	vmov	s14, r5
 8004964:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004968:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800496c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8004970:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8004974:	ee17 4a10 	vmov	r4, s14
 8004978:	bf08      	it	eq
 800497a:	eeb0 8a40 	vmoveq.f32	s16, s0
 800497e:	2c00      	cmp	r4, #0
 8004980:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004984:	f340 8184 	ble.w	8004c90 <__ieee754_powf+0x50c>
 8004988:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800498c:	f340 80fc 	ble.w	8004b88 <__ieee754_powf+0x404>
 8004990:	eddf 7a67 	vldr	s15, [pc, #412]	; 8004b30 <__ieee754_powf+0x3ac>
 8004994:	ee28 0a27 	vmul.f32	s0, s16, s15
 8004998:	ee20 0a27 	vmul.f32	s0, s0, s15
 800499c:	e746      	b.n	800482c <__ieee754_powf+0xa8>
 800499e:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 80049a2:	bf01      	itttt	eq
 80049a4:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8004b48 <__ieee754_powf+0x3c4>
 80049a8:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80049ac:	f06f 0217 	mvneq.w	r2, #23
 80049b0:	ee17 4a90 	vmoveq	r4, s15
 80049b4:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80049b8:	bf18      	it	ne
 80049ba:	2200      	movne	r2, #0
 80049bc:	3b7f      	subs	r3, #127	; 0x7f
 80049be:	4413      	add	r3, r2
 80049c0:	4a62      	ldr	r2, [pc, #392]	; (8004b4c <__ieee754_powf+0x3c8>)
 80049c2:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80049c6:	4294      	cmp	r4, r2
 80049c8:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80049cc:	dd06      	ble.n	80049dc <__ieee754_powf+0x258>
 80049ce:	4a60      	ldr	r2, [pc, #384]	; (8004b50 <__ieee754_powf+0x3cc>)
 80049d0:	4294      	cmp	r4, r2
 80049d2:	f340 80a4 	ble.w	8004b1e <__ieee754_powf+0x39a>
 80049d6:	3301      	adds	r3, #1
 80049d8:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80049dc:	2400      	movs	r4, #0
 80049de:	4a5d      	ldr	r2, [pc, #372]	; (8004b54 <__ieee754_powf+0x3d0>)
 80049e0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80049e4:	ee07 1a90 	vmov	s15, r1
 80049e8:	ed92 7a00 	vldr	s14, [r2]
 80049ec:	4a5a      	ldr	r2, [pc, #360]	; (8004b58 <__ieee754_powf+0x3d4>)
 80049ee:	ee37 6a27 	vadd.f32	s12, s14, s15
 80049f2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80049f6:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80049fa:	1049      	asrs	r1, r1, #1
 80049fc:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8004a00:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8004a04:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8004a08:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8004a0c:	ee06 1a10 	vmov	s12, r1
 8004a10:	ee65 4a26 	vmul.f32	s9, s10, s13
 8004a14:	ee36 7a47 	vsub.f32	s14, s12, s14
 8004a18:	ee14 7a90 	vmov	r7, s9
 8004a1c:	4017      	ands	r7, r2
 8004a1e:	ee05 7a90 	vmov	s11, r7
 8004a22:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8004a26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a2a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8004b5c <__ieee754_powf+0x3d8>
 8004a2e:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8004a32:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8004a36:	ee25 6a26 	vmul.f32	s12, s10, s13
 8004a3a:	eddf 6a49 	vldr	s13, [pc, #292]	; 8004b60 <__ieee754_powf+0x3dc>
 8004a3e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8004a42:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004b64 <__ieee754_powf+0x3e0>
 8004a46:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004a4a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004b38 <__ieee754_powf+0x3b4>
 8004a4e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a52:	eddf 6a45 	vldr	s13, [pc, #276]	; 8004b68 <__ieee754_powf+0x3e4>
 8004a56:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004a5a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8004b6c <__ieee754_powf+0x3e8>
 8004a5e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a62:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8004a66:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8004a6a:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004a6e:	eee5 6a07 	vfma.f32	s13, s10, s14
 8004a72:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8004a76:	eef0 7a45 	vmov.f32	s15, s10
 8004a7a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8004a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a82:	ee17 1a90 	vmov	r1, s15
 8004a86:	4011      	ands	r1, r2
 8004a88:	ee07 1a90 	vmov	s15, r1
 8004a8c:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8004a90:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8004a94:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004a98:	ee27 7a24 	vmul.f32	s14, s14, s9
 8004a9c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8004aa0:	eeb0 6a47 	vmov.f32	s12, s14
 8004aa4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8004aa8:	ee16 1a10 	vmov	r1, s12
 8004aac:	4011      	ands	r1, r2
 8004aae:	ee06 1a90 	vmov	s13, r1
 8004ab2:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8004ab6:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8004b70 <__ieee754_powf+0x3ec>
 8004aba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004b74 <__ieee754_powf+0x3f0>
 8004abe:	ee37 7a66 	vsub.f32	s14, s14, s13
 8004ac2:	ee06 1a10 	vmov	s12, r1
 8004ac6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004aca:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8004b78 <__ieee754_powf+0x3f4>
 8004ace:	492b      	ldr	r1, [pc, #172]	; (8004b7c <__ieee754_powf+0x3f8>)
 8004ad0:	eea6 7a27 	vfma.f32	s14, s12, s15
 8004ad4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004ad8:	edd1 7a00 	vldr	s15, [r1]
 8004adc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ae0:	ee07 3a90 	vmov	s15, r3
 8004ae4:	4b26      	ldr	r3, [pc, #152]	; (8004b80 <__ieee754_powf+0x3fc>)
 8004ae6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004aea:	eef0 7a47 	vmov.f32	s15, s14
 8004aee:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004af2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004af6:	edd4 0a00 	vldr	s1, [r4]
 8004afa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8004afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b02:	ee17 3a90 	vmov	r3, s15
 8004b06:	4013      	ands	r3, r2
 8004b08:	ee07 3a90 	vmov	s15, r3
 8004b0c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8004b10:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8004b14:	eee6 6a65 	vfms.f32	s13, s12, s11
 8004b18:	ee77 7a66 	vsub.f32	s15, s14, s13
 8004b1c:	e70f      	b.n	800493e <__ieee754_powf+0x1ba>
 8004b1e:	2401      	movs	r4, #1
 8004b20:	e75d      	b.n	80049de <__ieee754_powf+0x25a>
 8004b22:	bf00      	nop
 8004b24:	08004f2e 	.word	0x08004f2e
 8004b28:	00000000 	.word	0x00000000
 8004b2c:	3f7ffff7 	.word	0x3f7ffff7
 8004b30:	7149f2ca 	.word	0x7149f2ca
 8004b34:	3f800007 	.word	0x3f800007
 8004b38:	3eaaaaab 	.word	0x3eaaaaab
 8004b3c:	3fb8aa3b 	.word	0x3fb8aa3b
 8004b40:	36eca570 	.word	0x36eca570
 8004b44:	3fb8aa00 	.word	0x3fb8aa00
 8004b48:	4b800000 	.word	0x4b800000
 8004b4c:	001cc471 	.word	0x001cc471
 8004b50:	005db3d6 	.word	0x005db3d6
 8004b54:	08004f5c 	.word	0x08004f5c
 8004b58:	fffff000 	.word	0xfffff000
 8004b5c:	3e6c3255 	.word	0x3e6c3255
 8004b60:	3e53f142 	.word	0x3e53f142
 8004b64:	3e8ba305 	.word	0x3e8ba305
 8004b68:	3edb6db7 	.word	0x3edb6db7
 8004b6c:	3f19999a 	.word	0x3f19999a
 8004b70:	3f76384f 	.word	0x3f76384f
 8004b74:	3f763800 	.word	0x3f763800
 8004b78:	369dc3a0 	.word	0x369dc3a0
 8004b7c:	08004f6c 	.word	0x08004f6c
 8004b80:	08004f64 	.word	0x08004f64
 8004b84:	3338aa3c 	.word	0x3338aa3c
 8004b88:	f040 8092 	bne.w	8004cb0 <__ieee754_powf+0x52c>
 8004b8c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8004b84 <__ieee754_powf+0x400>
 8004b90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b94:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8004b98:	eef4 6ac7 	vcmpe.f32	s13, s14
 8004b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba0:	f73f aef6 	bgt.w	8004990 <__ieee754_powf+0x20c>
 8004ba4:	15db      	asrs	r3, r3, #23
 8004ba6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8004baa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004bae:	4103      	asrs	r3, r0
 8004bb0:	4423      	add	r3, r4
 8004bb2:	4949      	ldr	r1, [pc, #292]	; (8004cd8 <__ieee754_powf+0x554>)
 8004bb4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004bb8:	3a7f      	subs	r2, #127	; 0x7f
 8004bba:	4111      	asrs	r1, r2
 8004bbc:	ea23 0101 	bic.w	r1, r3, r1
 8004bc0:	ee07 1a10 	vmov	s14, r1
 8004bc4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8004bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004bcc:	f1c2 0217 	rsb	r2, r2, #23
 8004bd0:	4110      	asrs	r0, r2
 8004bd2:	2c00      	cmp	r4, #0
 8004bd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004bd8:	bfb8      	it	lt
 8004bda:	4240      	neglt	r0, r0
 8004bdc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8004be0:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8004cdc <__ieee754_powf+0x558>
 8004be4:	ee17 3a10 	vmov	r3, s14
 8004be8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004bec:	f023 030f 	bic.w	r3, r3, #15
 8004bf0:	ee07 3a10 	vmov	s14, r3
 8004bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bf8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8004bfc:	eddf 7a38 	vldr	s15, [pc, #224]	; 8004ce0 <__ieee754_powf+0x55c>
 8004c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c04:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8004c08:	eddf 6a36 	vldr	s13, [pc, #216]	; 8004ce4 <__ieee754_powf+0x560>
 8004c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8004c10:	eea7 0a26 	vfma.f32	s0, s14, s13
 8004c14:	eeb0 6a40 	vmov.f32	s12, s0
 8004c18:	eea7 6a66 	vfms.f32	s12, s14, s13
 8004c1c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004c20:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004c24:	eddf 6a30 	vldr	s13, [pc, #192]	; 8004ce8 <__ieee754_powf+0x564>
 8004c28:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8004cec <__ieee754_powf+0x568>
 8004c2c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8004c30:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8004cf0 <__ieee754_powf+0x56c>
 8004c34:	eee6 6a07 	vfma.f32	s13, s12, s14
 8004c38:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8004cf4 <__ieee754_powf+0x570>
 8004c3c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8004c40:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8004cf8 <__ieee754_powf+0x574>
 8004c44:	eee6 6a07 	vfma.f32	s13, s12, s14
 8004c48:	eeb0 6a40 	vmov.f32	s12, s0
 8004c4c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8004c50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004c54:	eeb0 7a46 	vmov.f32	s14, s12
 8004c58:	ee77 6a66 	vsub.f32	s13, s14, s13
 8004c5c:	ee20 6a06 	vmul.f32	s12, s0, s12
 8004c60:	eee0 7a27 	vfma.f32	s15, s0, s15
 8004c64:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c6c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8004c70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004c74:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8004c78:	ee10 3a10 	vmov	r3, s0
 8004c7c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8004c80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c84:	da1a      	bge.n	8004cbc <__ieee754_powf+0x538>
 8004c86:	f000 f8b7 	bl	8004df8 <scalbnf>
 8004c8a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004c8e:	e5cd      	b.n	800482c <__ieee754_powf+0xa8>
 8004c90:	4a1a      	ldr	r2, [pc, #104]	; (8004cfc <__ieee754_powf+0x578>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	dd02      	ble.n	8004c9c <__ieee754_powf+0x518>
 8004c96:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8004d00 <__ieee754_powf+0x57c>
 8004c9a:	e67b      	b.n	8004994 <__ieee754_powf+0x210>
 8004c9c:	d108      	bne.n	8004cb0 <__ieee754_powf+0x52c>
 8004c9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ca2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8004ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004caa:	f6ff af7b 	blt.w	8004ba4 <__ieee754_powf+0x420>
 8004cae:	e7f2      	b.n	8004c96 <__ieee754_powf+0x512>
 8004cb0:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8004cb4:	f73f af76 	bgt.w	8004ba4 <__ieee754_powf+0x420>
 8004cb8:	2000      	movs	r0, #0
 8004cba:	e78f      	b.n	8004bdc <__ieee754_powf+0x458>
 8004cbc:	ee00 3a10 	vmov	s0, r3
 8004cc0:	e7e3      	b.n	8004c8a <__ieee754_powf+0x506>
 8004cc2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004cc6:	e5b1      	b.n	800482c <__ieee754_powf+0xa8>
 8004cc8:	eeb0 0a68 	vmov.f32	s0, s17
 8004ccc:	e5ae      	b.n	800482c <__ieee754_powf+0xa8>
 8004cce:	eeb0 0a48 	vmov.f32	s0, s16
 8004cd2:	e5ab      	b.n	800482c <__ieee754_powf+0xa8>
 8004cd4:	2600      	movs	r6, #0
 8004cd6:	e590      	b.n	80047fa <__ieee754_powf+0x76>
 8004cd8:	007fffff 	.word	0x007fffff
 8004cdc:	3f317218 	.word	0x3f317218
 8004ce0:	35bfbe8c 	.word	0x35bfbe8c
 8004ce4:	3f317200 	.word	0x3f317200
 8004ce8:	3331bb4c 	.word	0x3331bb4c
 8004cec:	b5ddea0e 	.word	0xb5ddea0e
 8004cf0:	388ab355 	.word	0x388ab355
 8004cf4:	bb360b61 	.word	0xbb360b61
 8004cf8:	3e2aaaab 	.word	0x3e2aaaab
 8004cfc:	43160000 	.word	0x43160000
 8004d00:	0da24260 	.word	0x0da24260

08004d04 <__ieee754_sqrtf>:
 8004d04:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004d08:	4770      	bx	lr

08004d0a <fabsf>:
 8004d0a:	ee10 3a10 	vmov	r3, s0
 8004d0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d12:	ee00 3a10 	vmov	s0, r3
 8004d16:	4770      	bx	lr

08004d18 <finitef>:
 8004d18:	b082      	sub	sp, #8
 8004d1a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8004d1e:	9801      	ldr	r0, [sp, #4]
 8004d20:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004d24:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8004d28:	bfac      	ite	ge
 8004d2a:	2000      	movge	r0, #0
 8004d2c:	2001      	movlt	r0, #1
 8004d2e:	b002      	add	sp, #8
 8004d30:	4770      	bx	lr
	...

08004d34 <nanf>:
 8004d34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004d3c <nanf+0x8>
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	7fc00000 	.word	0x7fc00000

08004d40 <rintf>:
 8004d40:	ee10 2a10 	vmov	r2, s0
 8004d44:	b513      	push	{r0, r1, r4, lr}
 8004d46:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004d4a:	397f      	subs	r1, #127	; 0x7f
 8004d4c:	2916      	cmp	r1, #22
 8004d4e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8004d52:	dc47      	bgt.n	8004de4 <rintf+0xa4>
 8004d54:	b32b      	cbz	r3, 8004da2 <rintf+0x62>
 8004d56:	2900      	cmp	r1, #0
 8004d58:	ee10 3a10 	vmov	r3, s0
 8004d5c:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8004d60:	da21      	bge.n	8004da6 <rintf+0x66>
 8004d62:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8004d66:	425b      	negs	r3, r3
 8004d68:	4921      	ldr	r1, [pc, #132]	; (8004df0 <rintf+0xb0>)
 8004d6a:	0a5b      	lsrs	r3, r3, #9
 8004d6c:	0d12      	lsrs	r2, r2, #20
 8004d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d72:	0512      	lsls	r2, r2, #20
 8004d74:	4313      	orrs	r3, r2
 8004d76:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8004d7a:	ee07 3a90 	vmov	s15, r3
 8004d7e:	edd1 6a00 	vldr	s13, [r1]
 8004d82:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8004d86:	ed8d 7a01 	vstr	s14, [sp, #4]
 8004d8a:	eddd 7a01 	vldr	s15, [sp, #4]
 8004d8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004d92:	ee17 3a90 	vmov	r3, s15
 8004d96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d9a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8004d9e:	ee00 3a10 	vmov	s0, r3
 8004da2:	b002      	add	sp, #8
 8004da4:	bd10      	pop	{r4, pc}
 8004da6:	4a13      	ldr	r2, [pc, #76]	; (8004df4 <rintf+0xb4>)
 8004da8:	410a      	asrs	r2, r1
 8004daa:	4213      	tst	r3, r2
 8004dac:	d0f9      	beq.n	8004da2 <rintf+0x62>
 8004dae:	0854      	lsrs	r4, r2, #1
 8004db0:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8004db4:	d006      	beq.n	8004dc4 <rintf+0x84>
 8004db6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004dba:	ea23 0304 	bic.w	r3, r3, r4
 8004dbe:	fa42 f101 	asr.w	r1, r2, r1
 8004dc2:	430b      	orrs	r3, r1
 8004dc4:	4a0a      	ldr	r2, [pc, #40]	; (8004df0 <rintf+0xb0>)
 8004dc6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8004dca:	ed90 7a00 	vldr	s14, [r0]
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dd6:	edcd 7a01 	vstr	s15, [sp, #4]
 8004dda:	ed9d 0a01 	vldr	s0, [sp, #4]
 8004dde:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004de2:	e7de      	b.n	8004da2 <rintf+0x62>
 8004de4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004de8:	d3db      	bcc.n	8004da2 <rintf+0x62>
 8004dea:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004dee:	e7d8      	b.n	8004da2 <rintf+0x62>
 8004df0:	08004f74 	.word	0x08004f74
 8004df4:	007fffff 	.word	0x007fffff

08004df8 <scalbnf>:
 8004df8:	ee10 3a10 	vmov	r3, s0
 8004dfc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004e00:	d025      	beq.n	8004e4e <scalbnf+0x56>
 8004e02:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004e06:	d302      	bcc.n	8004e0e <scalbnf+0x16>
 8004e08:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004e0c:	4770      	bx	lr
 8004e0e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8004e12:	d122      	bne.n	8004e5a <scalbnf+0x62>
 8004e14:	4b2a      	ldr	r3, [pc, #168]	; (8004ec0 <scalbnf+0xc8>)
 8004e16:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8004ec4 <scalbnf+0xcc>
 8004e1a:	4298      	cmp	r0, r3
 8004e1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004e20:	db16      	blt.n	8004e50 <scalbnf+0x58>
 8004e22:	ee10 3a10 	vmov	r3, s0
 8004e26:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004e2a:	3a19      	subs	r2, #25
 8004e2c:	4402      	add	r2, r0
 8004e2e:	2afe      	cmp	r2, #254	; 0xfe
 8004e30:	dd15      	ble.n	8004e5e <scalbnf+0x66>
 8004e32:	ee10 3a10 	vmov	r3, s0
 8004e36:	eddf 7a24 	vldr	s15, [pc, #144]	; 8004ec8 <scalbnf+0xd0>
 8004e3a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004ecc <scalbnf+0xd4>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	eeb0 7a67 	vmov.f32	s14, s15
 8004e44:	bfb8      	it	lt
 8004e46:	eef0 7a66 	vmovlt.f32	s15, s13
 8004e4a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8004e4e:	4770      	bx	lr
 8004e50:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004ed0 <scalbnf+0xd8>
 8004e54:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004e58:	4770      	bx	lr
 8004e5a:	0dd2      	lsrs	r2, r2, #23
 8004e5c:	e7e6      	b.n	8004e2c <scalbnf+0x34>
 8004e5e:	2a00      	cmp	r2, #0
 8004e60:	dd06      	ble.n	8004e70 <scalbnf+0x78>
 8004e62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004e66:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004e6a:	ee00 3a10 	vmov	s0, r3
 8004e6e:	4770      	bx	lr
 8004e70:	f112 0f16 	cmn.w	r2, #22
 8004e74:	da1a      	bge.n	8004eac <scalbnf+0xb4>
 8004e76:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004e7a:	4298      	cmp	r0, r3
 8004e7c:	ee10 3a10 	vmov	r3, s0
 8004e80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e84:	dd0a      	ble.n	8004e9c <scalbnf+0xa4>
 8004e86:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8004ec8 <scalbnf+0xd0>
 8004e8a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004ecc <scalbnf+0xd4>
 8004e8e:	eef0 7a40 	vmov.f32	s15, s0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	bf18      	it	ne
 8004e96:	eeb0 0a47 	vmovne.f32	s0, s14
 8004e9a:	e7db      	b.n	8004e54 <scalbnf+0x5c>
 8004e9c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8004ed0 <scalbnf+0xd8>
 8004ea0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004ed4 <scalbnf+0xdc>
 8004ea4:	eef0 7a40 	vmov.f32	s15, s0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	e7f3      	b.n	8004e94 <scalbnf+0x9c>
 8004eac:	3219      	adds	r2, #25
 8004eae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004eb2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004eb6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004ed8 <scalbnf+0xe0>
 8004eba:	ee07 3a10 	vmov	s14, r3
 8004ebe:	e7c4      	b.n	8004e4a <scalbnf+0x52>
 8004ec0:	ffff3cb0 	.word	0xffff3cb0
 8004ec4:	4c000000 	.word	0x4c000000
 8004ec8:	7149f2ca 	.word	0x7149f2ca
 8004ecc:	f149f2ca 	.word	0xf149f2ca
 8004ed0:	0da24260 	.word	0x0da24260
 8004ed4:	8da24260 	.word	0x8da24260
 8004ed8:	33000000 	.word	0x33000000

08004edc <_init>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	bf00      	nop
 8004ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee2:	bc08      	pop	{r3}
 8004ee4:	469e      	mov	lr, r3
 8004ee6:	4770      	bx	lr

08004ee8 <_fini>:
 8004ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eea:	bf00      	nop
 8004eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eee:	bc08      	pop	{r3}
 8004ef0:	469e      	mov	lr, r3
 8004ef2:	4770      	bx	lr
